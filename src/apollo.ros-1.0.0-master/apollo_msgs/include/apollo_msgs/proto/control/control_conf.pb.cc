// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/control_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/control/control_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {

namespace {

const ::google::protobuf::Descriptor* ControlConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlConf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ControlConf_ControllerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/control/control_conf.proto");
  GOOGLE_CHECK(file != NULL);
  ControlConf_descriptor_ = file->message_type(0);
  static const int ControlConf_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, control_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, max_planning_interval_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, max_planning_delay_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, driving_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, soft_estop_brake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, active_controllers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, max_steering_percentage_allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, max_status_interval_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, lat_controller_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, lon_controller_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, trajectory_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, chassis_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, localization_period_),
  };
  ControlConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlConf_descriptor_,
      ControlConf::default_instance_,
      ControlConf_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControlConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, _is_default_instance_));
  ControlConf_ControllerType_descriptor_ = ControlConf_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlConf_descriptor_, &ControlConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto() {
  delete ControlConf::default_instance_;
  delete ControlConf_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::canbus::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  ::apollo::control::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fpad_5fmsg_2eproto();
  ::apollo::control::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto();
  ::apollo::control::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n,apollo_msgs/proto/control/control_conf"
    ".proto\022\016apollo.control\032&apollo_msgs/prot"
    "o/canbus/chassis.proto\032\'apollo_msgs/prot"
    "o/control/pad_msg.proto\0323apollo_msgs/pro"
    "to/control/lat_controller_conf.proto\0323ap"
    "ollo_msgs/proto/control/lon_controller_c"
    "onf.proto\"\215\005\n\013ControlConf\022\026\n\016control_per"
    "iod\030\001 \001(\001\022!\n\031max_planning_interval_sec\030\002"
    " \001(\001\022$\n\034max_planning_delay_threshold\030\003 \001"
    "(\001\0228\n\014driving_mode\030\004 \001(\0162\".apollo.canbus"
    ".Chassis.DrivingMode\022-\n\006action\030\005 \001(\0162\035.a"
    "pollo.control.DrivingAction\022\030\n\020soft_esto"
    "p_brake\030\006 \001(\001\022F\n\022active_controllers\030\007 \003("
    "\0162*.apollo.control.ControlConf.Controlle"
    "rType\022\'\n\037max_steering_percentage_allowed"
    "\030\010 \001(\005\022\037\n\027max_status_interval_sec\030\t \001(\001\022"
    ">\n\023lat_controller_conf\030\n \001(\0132!.apollo.co"
    "ntrol.LatControllerConf\022>\n\023lon_controlle"
    "r_conf\030\013 \001(\0132!.apollo.control.LonControl"
    "lerConf\022\031\n\021trajectory_period\030\014 \001(\001\022\026\n\016ch"
    "assis_period\030\r \001(\001\022\033\n\023localization_perio"
    "d\030\016 \001(\001\"8\n\016ControllerType\022\022\n\016LAT_CONTROL"
    "LER\020\000\022\022\n\016LON_CONTROLLER\020\001b\006proto3", 913);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/control/control_conf.proto", &protobuf_RegisterTypes);
  ControlConf::default_instance_ = new ControlConf();
  ControlConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ControlConf_ControllerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlConf_ControllerType_descriptor_;
}
bool ControlConf_ControllerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControlConf_ControllerType ControlConf::LAT_CONTROLLER;
const ControlConf_ControllerType ControlConf::LON_CONTROLLER;
const ControlConf_ControllerType ControlConf::ControllerType_MIN;
const ControlConf_ControllerType ControlConf::ControllerType_MAX;
const int ControlConf::ControllerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlConf::kControlPeriodFieldNumber;
const int ControlConf::kMaxPlanningIntervalSecFieldNumber;
const int ControlConf::kMaxPlanningDelayThresholdFieldNumber;
const int ControlConf::kDrivingModeFieldNumber;
const int ControlConf::kActionFieldNumber;
const int ControlConf::kSoftEstopBrakeFieldNumber;
const int ControlConf::kActiveControllersFieldNumber;
const int ControlConf::kMaxSteeringPercentageAllowedFieldNumber;
const int ControlConf::kMaxStatusIntervalSecFieldNumber;
const int ControlConf::kLatControllerConfFieldNumber;
const int ControlConf::kLonControllerConfFieldNumber;
const int ControlConf::kTrajectoryPeriodFieldNumber;
const int ControlConf::kChassisPeriodFieldNumber;
const int ControlConf::kLocalizationPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlConf::ControlConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.ControlConf)
}

void ControlConf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  lat_controller_conf_ = const_cast< ::apollo::control::LatControllerConf*>(&::apollo::control::LatControllerConf::default_instance());
  lon_controller_conf_ = const_cast< ::apollo::control::LonControllerConf*>(&::apollo::control::LonControllerConf::default_instance());
}

ControlConf::ControlConf(const ControlConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.ControlConf)
}

void ControlConf::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  control_period_ = 0;
  max_planning_interval_sec_ = 0;
  max_planning_delay_threshold_ = 0;
  driving_mode_ = 0;
  action_ = 0;
  soft_estop_brake_ = 0;
  max_steering_percentage_allowed_ = 0;
  max_status_interval_sec_ = 0;
  lat_controller_conf_ = NULL;
  lon_controller_conf_ = NULL;
  trajectory_period_ = 0;
  chassis_period_ = 0;
  localization_period_ = 0;
}

ControlConf::~ControlConf() {
  // @@protoc_insertion_point(destructor:apollo.control.ControlConf)
  SharedDtor();
}

void ControlConf::SharedDtor() {
  if (this != default_instance_) {
    delete lat_controller_conf_;
    delete lon_controller_conf_;
  }
}

void ControlConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlConf_descriptor_;
}

const ControlConf& ControlConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fconf_2eproto();
  return *default_instance_;
}

ControlConf* ControlConf::default_instance_ = NULL;

ControlConf* ControlConf::New(::google::protobuf::Arena* arena) const {
  ControlConf* n = new ControlConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.ControlConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ControlConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControlConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(control_period_, soft_estop_brake_);
  max_steering_percentage_allowed_ = 0;
  ZR_(trajectory_period_, localization_period_);
  max_status_interval_sec_ = 0;
  if (GetArenaNoVirtual() == NULL && lat_controller_conf_ != NULL) delete lat_controller_conf_;
  lat_controller_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && lon_controller_conf_ != NULL) delete lon_controller_conf_;
  lon_controller_conf_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  active_controllers_.Clear();
}

bool ControlConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.ControlConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double control_period = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &control_period_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_max_planning_interval_sec;
        break;
      }

      // optional double max_planning_interval_sec = 2;
      case 2: {
        if (tag == 17) {
         parse_max_planning_interval_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_planning_interval_sec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_max_planning_delay_threshold;
        break;
      }

      // optional double max_planning_delay_threshold = 3;
      case 3: {
        if (tag == 25) {
         parse_max_planning_delay_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_planning_delay_threshold_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_driving_mode;
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_driving_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_action;
        break;
      }

      // optional .apollo.control.DrivingAction action = 5;
      case 5: {
        if (tag == 40) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::apollo::control::DrivingAction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_soft_estop_brake;
        break;
      }

      // optional double soft_estop_brake = 6;
      case 6: {
        if (tag == 49) {
         parse_soft_estop_brake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_estop_brake_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_active_controllers;
        break;
      }

      // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
      case 7: {
        if (tag == 58) {
         parse_active_controllers:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_active_controllers(static_cast< ::apollo::control::ControlConf_ControllerType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 56) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_active_controllers(static_cast< ::apollo::control::ControlConf_ControllerType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_steering_percentage_allowed;
        break;
      }

      // optional int32 max_steering_percentage_allowed = 8;
      case 8: {
        if (tag == 64) {
         parse_max_steering_percentage_allowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_steering_percentage_allowed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_max_status_interval_sec;
        break;
      }

      // optional double max_status_interval_sec = 9;
      case 9: {
        if (tag == 73) {
         parse_max_status_interval_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_status_interval_sec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_lat_controller_conf;
        break;
      }

      // optional .apollo.control.LatControllerConf lat_controller_conf = 10;
      case 10: {
        if (tag == 82) {
         parse_lat_controller_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lat_controller_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_lon_controller_conf;
        break;
      }

      // optional .apollo.control.LonControllerConf lon_controller_conf = 11;
      case 11: {
        if (tag == 90) {
         parse_lon_controller_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lon_controller_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_trajectory_period;
        break;
      }

      // optional double trajectory_period = 12;
      case 12: {
        if (tag == 97) {
         parse_trajectory_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectory_period_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_chassis_period;
        break;
      }

      // optional double chassis_period = 13;
      case 13: {
        if (tag == 105) {
         parse_chassis_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chassis_period_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_localization_period;
        break;
      }

      // optional double localization_period = 14;
      case 14: {
        if (tag == 113) {
         parse_localization_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &localization_period_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.ControlConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.ControlConf)
  return false;
#undef DO_
}

void ControlConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.ControlConf)
  // optional double control_period = 1;
  if (this->control_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->control_period(), output);
  }

  // optional double max_planning_interval_sec = 2;
  if (this->max_planning_interval_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_planning_interval_sec(), output);
  }

  // optional double max_planning_delay_threshold = 3;
  if (this->max_planning_delay_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_planning_delay_threshold(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (this->driving_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->driving_mode(), output);
  }

  // optional .apollo.control.DrivingAction action = 5;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->action(), output);
  }

  // optional double soft_estop_brake = 6;
  if (this->soft_estop_brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->soft_estop_brake(), output);
  }

  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
  if (this->active_controllers_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_active_controllers_cached_byte_size_);
  }
  for (int i = 0; i < this->active_controllers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->active_controllers(i), output);
  }

  // optional int32 max_steering_percentage_allowed = 8;
  if (this->max_steering_percentage_allowed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_steering_percentage_allowed(), output);
  }

  // optional double max_status_interval_sec = 9;
  if (this->max_status_interval_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_status_interval_sec(), output);
  }

  // optional .apollo.control.LatControllerConf lat_controller_conf = 10;
  if (this->has_lat_controller_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->lat_controller_conf_, output);
  }

  // optional .apollo.control.LonControllerConf lon_controller_conf = 11;
  if (this->has_lon_controller_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->lon_controller_conf_, output);
  }

  // optional double trajectory_period = 12;
  if (this->trajectory_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->trajectory_period(), output);
  }

  // optional double chassis_period = 13;
  if (this->chassis_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->chassis_period(), output);
  }

  // optional double localization_period = 14;
  if (this->localization_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->localization_period(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.control.ControlConf)
}

::google::protobuf::uint8* ControlConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.ControlConf)
  // optional double control_period = 1;
  if (this->control_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->control_period(), target);
  }

  // optional double max_planning_interval_sec = 2;
  if (this->max_planning_interval_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_planning_interval_sec(), target);
  }

  // optional double max_planning_delay_threshold = 3;
  if (this->max_planning_delay_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_planning_delay_threshold(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (this->driving_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->driving_mode(), target);
  }

  // optional .apollo.control.DrivingAction action = 5;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->action(), target);
  }

  // optional double soft_estop_brake = 6;
  if (this->soft_estop_brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->soft_estop_brake(), target);
  }

  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
  if (this->active_controllers_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _active_controllers_cached_byte_size_, target);
  }
  for (int i = 0; i < this->active_controllers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->active_controllers(i), target);
  }

  // optional int32 max_steering_percentage_allowed = 8;
  if (this->max_steering_percentage_allowed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_steering_percentage_allowed(), target);
  }

  // optional double max_status_interval_sec = 9;
  if (this->max_status_interval_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_status_interval_sec(), target);
  }

  // optional .apollo.control.LatControllerConf lat_controller_conf = 10;
  if (this->has_lat_controller_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->lat_controller_conf_, false, target);
  }

  // optional .apollo.control.LonControllerConf lon_controller_conf = 11;
  if (this->has_lon_controller_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->lon_controller_conf_, false, target);
  }

  // optional double trajectory_period = 12;
  if (this->trajectory_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->trajectory_period(), target);
  }

  // optional double chassis_period = 13;
  if (this->chassis_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->chassis_period(), target);
  }

  // optional double localization_period = 14;
  if (this->localization_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->localization_period(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.ControlConf)
  return target;
}

int ControlConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.ControlConf)
  int total_size = 0;

  // optional double control_period = 1;
  if (this->control_period() != 0) {
    total_size += 1 + 8;
  }

  // optional double max_planning_interval_sec = 2;
  if (this->max_planning_interval_sec() != 0) {
    total_size += 1 + 8;
  }

  // optional double max_planning_delay_threshold = 3;
  if (this->max_planning_delay_threshold() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (this->driving_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
  }

  // optional .apollo.control.DrivingAction action = 5;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // optional double soft_estop_brake = 6;
  if (this->soft_estop_brake() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 max_steering_percentage_allowed = 8;
  if (this->max_steering_percentage_allowed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_steering_percentage_allowed());
  }

  // optional double max_status_interval_sec = 9;
  if (this->max_status_interval_sec() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.control.LatControllerConf lat_controller_conf = 10;
  if (this->has_lat_controller_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lat_controller_conf_);
  }

  // optional .apollo.control.LonControllerConf lon_controller_conf = 11;
  if (this->has_lon_controller_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lon_controller_conf_);
  }

  // optional double trajectory_period = 12;
  if (this->trajectory_period() != 0) {
    total_size += 1 + 8;
  }

  // optional double chassis_period = 13;
  if (this->chassis_period() != 0) {
    total_size += 1 + 8;
  }

  // optional double localization_period = 14;
  if (this->localization_period() != 0) {
    total_size += 1 + 8;
  }

  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_controllers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->active_controllers(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _active_controllers_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.ControlConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ControlConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.ControlConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.ControlConf)
    MergeFrom(*source);
  }
}

void ControlConf::MergeFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.ControlConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  active_controllers_.MergeFrom(from.active_controllers_);
  if (from.control_period() != 0) {
    set_control_period(from.control_period());
  }
  if (from.max_planning_interval_sec() != 0) {
    set_max_planning_interval_sec(from.max_planning_interval_sec());
  }
  if (from.max_planning_delay_threshold() != 0) {
    set_max_planning_delay_threshold(from.max_planning_delay_threshold());
  }
  if (from.driving_mode() != 0) {
    set_driving_mode(from.driving_mode());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.soft_estop_brake() != 0) {
    set_soft_estop_brake(from.soft_estop_brake());
  }
  if (from.max_steering_percentage_allowed() != 0) {
    set_max_steering_percentage_allowed(from.max_steering_percentage_allowed());
  }
  if (from.max_status_interval_sec() != 0) {
    set_max_status_interval_sec(from.max_status_interval_sec());
  }
  if (from.has_lat_controller_conf()) {
    mutable_lat_controller_conf()->::apollo::control::LatControllerConf::MergeFrom(from.lat_controller_conf());
  }
  if (from.has_lon_controller_conf()) {
    mutable_lon_controller_conf()->::apollo::control::LonControllerConf::MergeFrom(from.lon_controller_conf());
  }
  if (from.trajectory_period() != 0) {
    set_trajectory_period(from.trajectory_period());
  }
  if (from.chassis_period() != 0) {
    set_chassis_period(from.chassis_period());
  }
  if (from.localization_period() != 0) {
    set_localization_period(from.localization_period());
  }
}

void ControlConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.ControlConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlConf::CopyFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.ControlConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlConf::IsInitialized() const {

  return true;
}

void ControlConf::Swap(ControlConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlConf::InternalSwap(ControlConf* other) {
  std::swap(control_period_, other->control_period_);
  std::swap(max_planning_interval_sec_, other->max_planning_interval_sec_);
  std::swap(max_planning_delay_threshold_, other->max_planning_delay_threshold_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(action_, other->action_);
  std::swap(soft_estop_brake_, other->soft_estop_brake_);
  active_controllers_.UnsafeArenaSwap(&other->active_controllers_);
  std::swap(max_steering_percentage_allowed_, other->max_steering_percentage_allowed_);
  std::swap(max_status_interval_sec_, other->max_status_interval_sec_);
  std::swap(lat_controller_conf_, other->lat_controller_conf_);
  std::swap(lon_controller_conf_, other->lon_controller_conf_);
  std::swap(trajectory_period_, other->trajectory_period_);
  std::swap(chassis_period_, other->chassis_period_);
  std::swap(localization_period_, other->localization_period_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlConf_descriptor_;
  metadata.reflection = ControlConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlConf

// optional double control_period = 1;
void ControlConf::clear_control_period() {
  control_period_ = 0;
}
 double ControlConf::control_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.control_period)
  return control_period_;
}
 void ControlConf::set_control_period(double value) {
  
  control_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.control_period)
}

// optional double max_planning_interval_sec = 2;
void ControlConf::clear_max_planning_interval_sec() {
  max_planning_interval_sec_ = 0;
}
 double ControlConf::max_planning_interval_sec() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_planning_interval_sec)
  return max_planning_interval_sec_;
}
 void ControlConf::set_max_planning_interval_sec(double value) {
  
  max_planning_interval_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_planning_interval_sec)
}

// optional double max_planning_delay_threshold = 3;
void ControlConf::clear_max_planning_delay_threshold() {
  max_planning_delay_threshold_ = 0;
}
 double ControlConf::max_planning_delay_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_planning_delay_threshold)
  return max_planning_delay_threshold_;
}
 void ControlConf::set_max_planning_delay_threshold(double value) {
  
  max_planning_delay_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_planning_delay_threshold)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
void ControlConf::clear_driving_mode() {
  driving_mode_ = 0;
}
 ::apollo::canbus::Chassis_DrivingMode ControlConf::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
 void ControlConf::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.driving_mode)
}

// optional .apollo.control.DrivingAction action = 5;
void ControlConf::clear_action() {
  action_ = 0;
}
 ::apollo::control::DrivingAction ControlConf::action() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.action)
  return static_cast< ::apollo::control::DrivingAction >(action_);
}
 void ControlConf::set_action(::apollo::control::DrivingAction value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.action)
}

// optional double soft_estop_brake = 6;
void ControlConf::clear_soft_estop_brake() {
  soft_estop_brake_ = 0;
}
 double ControlConf::soft_estop_brake() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.soft_estop_brake)
  return soft_estop_brake_;
}
 void ControlConf::set_soft_estop_brake(double value) {
  
  soft_estop_brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.soft_estop_brake)
}

// repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
int ControlConf::active_controllers_size() const {
  return active_controllers_.size();
}
void ControlConf::clear_active_controllers() {
  active_controllers_.Clear();
}
 ::apollo::control::ControlConf_ControllerType ControlConf::active_controllers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.active_controllers)
  return static_cast< ::apollo::control::ControlConf_ControllerType >(active_controllers_.Get(index));
}
 void ControlConf::set_active_controllers(int index, ::apollo::control::ControlConf_ControllerType value) {
  active_controllers_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.active_controllers)
}
 void ControlConf::add_active_controllers(::apollo::control::ControlConf_ControllerType value) {
  active_controllers_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.ControlConf.active_controllers)
}
 const ::google::protobuf::RepeatedField<int>&
ControlConf::active_controllers() const {
  // @@protoc_insertion_point(field_list:apollo.control.ControlConf.active_controllers)
  return active_controllers_;
}
 ::google::protobuf::RepeatedField<int>*
ControlConf::mutable_active_controllers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.ControlConf.active_controllers)
  return &active_controllers_;
}

// optional int32 max_steering_percentage_allowed = 8;
void ControlConf::clear_max_steering_percentage_allowed() {
  max_steering_percentage_allowed_ = 0;
}
 ::google::protobuf::int32 ControlConf::max_steering_percentage_allowed() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_steering_percentage_allowed)
  return max_steering_percentage_allowed_;
}
 void ControlConf::set_max_steering_percentage_allowed(::google::protobuf::int32 value) {
  
  max_steering_percentage_allowed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_steering_percentage_allowed)
}

// optional double max_status_interval_sec = 9;
void ControlConf::clear_max_status_interval_sec() {
  max_status_interval_sec_ = 0;
}
 double ControlConf::max_status_interval_sec() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_status_interval_sec)
  return max_status_interval_sec_;
}
 void ControlConf::set_max_status_interval_sec(double value) {
  
  max_status_interval_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_status_interval_sec)
}

// optional .apollo.control.LatControllerConf lat_controller_conf = 10;
bool ControlConf::has_lat_controller_conf() const {
  return !_is_default_instance_ && lat_controller_conf_ != NULL;
}
void ControlConf::clear_lat_controller_conf() {
  if (GetArenaNoVirtual() == NULL && lat_controller_conf_ != NULL) delete lat_controller_conf_;
  lat_controller_conf_ = NULL;
}
const ::apollo::control::LatControllerConf& ControlConf::lat_controller_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.lat_controller_conf)
  return lat_controller_conf_ != NULL ? *lat_controller_conf_ : *default_instance_->lat_controller_conf_;
}
::apollo::control::LatControllerConf* ControlConf::mutable_lat_controller_conf() {
  
  if (lat_controller_conf_ == NULL) {
    lat_controller_conf_ = new ::apollo::control::LatControllerConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlConf.lat_controller_conf)
  return lat_controller_conf_;
}
::apollo::control::LatControllerConf* ControlConf::release_lat_controller_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlConf.lat_controller_conf)
  
  ::apollo::control::LatControllerConf* temp = lat_controller_conf_;
  lat_controller_conf_ = NULL;
  return temp;
}
void ControlConf::set_allocated_lat_controller_conf(::apollo::control::LatControllerConf* lat_controller_conf) {
  delete lat_controller_conf_;
  lat_controller_conf_ = lat_controller_conf;
  if (lat_controller_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlConf.lat_controller_conf)
}

// optional .apollo.control.LonControllerConf lon_controller_conf = 11;
bool ControlConf::has_lon_controller_conf() const {
  return !_is_default_instance_ && lon_controller_conf_ != NULL;
}
void ControlConf::clear_lon_controller_conf() {
  if (GetArenaNoVirtual() == NULL && lon_controller_conf_ != NULL) delete lon_controller_conf_;
  lon_controller_conf_ = NULL;
}
const ::apollo::control::LonControllerConf& ControlConf::lon_controller_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.lon_controller_conf)
  return lon_controller_conf_ != NULL ? *lon_controller_conf_ : *default_instance_->lon_controller_conf_;
}
::apollo::control::LonControllerConf* ControlConf::mutable_lon_controller_conf() {
  
  if (lon_controller_conf_ == NULL) {
    lon_controller_conf_ = new ::apollo::control::LonControllerConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlConf.lon_controller_conf)
  return lon_controller_conf_;
}
::apollo::control::LonControllerConf* ControlConf::release_lon_controller_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlConf.lon_controller_conf)
  
  ::apollo::control::LonControllerConf* temp = lon_controller_conf_;
  lon_controller_conf_ = NULL;
  return temp;
}
void ControlConf::set_allocated_lon_controller_conf(::apollo::control::LonControllerConf* lon_controller_conf) {
  delete lon_controller_conf_;
  lon_controller_conf_ = lon_controller_conf;
  if (lon_controller_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlConf.lon_controller_conf)
}

// optional double trajectory_period = 12;
void ControlConf::clear_trajectory_period() {
  trajectory_period_ = 0;
}
 double ControlConf::trajectory_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.trajectory_period)
  return trajectory_period_;
}
 void ControlConf::set_trajectory_period(double value) {
  
  trajectory_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.trajectory_period)
}

// optional double chassis_period = 13;
void ControlConf::clear_chassis_period() {
  chassis_period_ = 0;
}
 double ControlConf::chassis_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.chassis_period)
  return chassis_period_;
}
 void ControlConf::set_chassis_period(double value) {
  
  chassis_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.chassis_period)
}

// optional double localization_period = 14;
void ControlConf::clear_localization_period() {
  localization_period_ = 0;
}
 double ControlConf::localization_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.localization_period)
  return localization_period_;
}
 void ControlConf::set_localization_period(double value) {
  
  localization_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.localization_period)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
