// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/lat_controller_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/control/lat_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {

namespace {

const ::google::protobuf::Descriptor* LatControllerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatControllerConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/control/lat_controller_conf.proto");
  GOOGLE_CHECK(file != NULL);
  LatControllerConf_descriptor_ = file->message_type(0);
  static const int LatControllerConf_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, preview_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, cr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, wheelbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, mass_fl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, mass_fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, mass_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, mass_rr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, matrix_q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, cutoff_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, mean_filter_window_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, steer_transmission_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, steer_single_direction_max_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, max_iteration_),
  };
  LatControllerConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LatControllerConf_descriptor_,
      LatControllerConf::default_instance_,
      LatControllerConf_offsets_,
      -1,
      -1,
      -1,
      sizeof(LatControllerConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatControllerConf, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LatControllerConf_descriptor_, &LatControllerConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto() {
  delete LatControllerConf::default_instance_;
  delete LatControllerConf_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n3apollo_msgs/proto/control/lat_controll"
    "er_conf.proto\022\016apollo.control\"\337\002\n\021LatCon"
    "trollerConf\022\n\n\002ts\030\001 \001(\001\022\026\n\016preview_windo"
    "w\030\002 \001(\005\022\n\n\002cf\030\003 \001(\001\022\n\n\002cr\030\004 \001(\001\022\021\n\twheel"
    "base\030\005 \001(\001\022\017\n\007mass_fl\030\006 \001(\005\022\017\n\007mass_fr\030\007"
    " \001(\005\022\017\n\007mass_rl\030\010 \001(\005\022\017\n\007mass_rr\030\t \001(\005\022\013"
    "\n\003eps\030\n \001(\001\022\020\n\010matrix_q\030\013 \003(\001\022\023\n\013cutoff_"
    "freq\030\014 \001(\005\022\037\n\027mean_filter_window_size\030\r "
    "\001(\005\022 \n\030steer_transmission_ratio\030\016 \001(\005\022)\n"
    "!steer_single_direction_max_degree\030\017 \001(\005"
    "\022\025\n\rmax_iteration\030\020 \001(\005b\006proto3", 431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/control/lat_controller_conf.proto", &protobuf_RegisterTypes);
  LatControllerConf::default_instance_ = new LatControllerConf();
  LatControllerConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatControllerConf::kTsFieldNumber;
const int LatControllerConf::kPreviewWindowFieldNumber;
const int LatControllerConf::kCfFieldNumber;
const int LatControllerConf::kCrFieldNumber;
const int LatControllerConf::kWheelbaseFieldNumber;
const int LatControllerConf::kMassFlFieldNumber;
const int LatControllerConf::kMassFrFieldNumber;
const int LatControllerConf::kMassRlFieldNumber;
const int LatControllerConf::kMassRrFieldNumber;
const int LatControllerConf::kEpsFieldNumber;
const int LatControllerConf::kMatrixQFieldNumber;
const int LatControllerConf::kCutoffFreqFieldNumber;
const int LatControllerConf::kMeanFilterWindowSizeFieldNumber;
const int LatControllerConf::kSteerTransmissionRatioFieldNumber;
const int LatControllerConf::kSteerSingleDirectionMaxDegreeFieldNumber;
const int LatControllerConf::kMaxIterationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatControllerConf::LatControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LatControllerConf)
}

void LatControllerConf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LatControllerConf::LatControllerConf(const LatControllerConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.LatControllerConf)
}

void LatControllerConf::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ts_ = 0;
  preview_window_ = 0;
  cf_ = 0;
  cr_ = 0;
  wheelbase_ = 0;
  mass_fl_ = 0;
  mass_fr_ = 0;
  mass_rl_ = 0;
  mass_rr_ = 0;
  eps_ = 0;
  cutoff_freq_ = 0;
  mean_filter_window_size_ = 0;
  steer_transmission_ratio_ = 0;
  steer_single_direction_max_degree_ = 0;
  max_iteration_ = 0;
}

LatControllerConf::~LatControllerConf() {
  // @@protoc_insertion_point(destructor:apollo.control.LatControllerConf)
  SharedDtor();
}

void LatControllerConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LatControllerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatControllerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatControllerConf_descriptor_;
}

const LatControllerConf& LatControllerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flat_5fcontroller_5fconf_2eproto();
  return *default_instance_;
}

LatControllerConf* LatControllerConf::default_instance_ = NULL;

LatControllerConf* LatControllerConf::New(::google::protobuf::Arena* arena) const {
  LatControllerConf* n = new LatControllerConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LatControllerConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LatControllerConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LatControllerConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ts_, mass_rl_);
  ZR_(eps_, cutoff_freq_);
  ZR_(mean_filter_window_size_, max_iteration_);

#undef ZR_HELPER_
#undef ZR_

  matrix_q_.Clear();
}

bool LatControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.LatControllerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ts = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_preview_window;
        break;
      }

      // optional int32 preview_window = 2;
      case 2: {
        if (tag == 16) {
         parse_preview_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preview_window_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_cf;
        break;
      }

      // optional double cf = 3;
      case 3: {
        if (tag == 25) {
         parse_cf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cf_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_cr;
        break;
      }

      // optional double cr = 4;
      case 4: {
        if (tag == 33) {
         parse_cr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_wheelbase;
        break;
      }

      // optional double wheelbase = 5;
      case 5: {
        if (tag == 41) {
         parse_wheelbase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheelbase_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mass_fl;
        break;
      }

      // optional int32 mass_fl = 6;
      case 6: {
        if (tag == 48) {
         parse_mass_fl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_fl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mass_fr;
        break;
      }

      // optional int32 mass_fr = 7;
      case 7: {
        if (tag == 56) {
         parse_mass_fr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_fr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mass_rl;
        break;
      }

      // optional int32 mass_rl = 8;
      case 8: {
        if (tag == 64) {
         parse_mass_rl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_rl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mass_rr;
        break;
      }

      // optional int32 mass_rr = 9;
      case 9: {
        if (tag == 72) {
         parse_mass_rr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_rr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_eps;
        break;
      }

      // optional double eps = 10;
      case 10: {
        if (tag == 81) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_matrix_q;
        break;
      }

      // repeated double matrix_q = 11;
      case 11: {
        if (tag == 90) {
         parse_matrix_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_q())));
        } else if (tag == 89) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 90, input, this->mutable_matrix_q())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cutoff_freq;
        break;
      }

      // optional int32 cutoff_freq = 12;
      case 12: {
        if (tag == 96) {
         parse_cutoff_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_freq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mean_filter_window_size;
        break;
      }

      // optional int32 mean_filter_window_size = 13;
      case 13: {
        if (tag == 104) {
         parse_mean_filter_window_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_filter_window_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_steer_transmission_ratio;
        break;
      }

      // optional int32 steer_transmission_ratio = 14;
      case 14: {
        if (tag == 112) {
         parse_steer_transmission_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steer_transmission_ratio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_steer_single_direction_max_degree;
        break;
      }

      // optional int32 steer_single_direction_max_degree = 15;
      case 15: {
        if (tag == 120) {
         parse_steer_single_direction_max_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steer_single_direction_max_degree_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_max_iteration;
        break;
      }

      // optional int32 max_iteration = 16;
      case 16: {
        if (tag == 128) {
         parse_max_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iteration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.LatControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.LatControllerConf)
  return false;
#undef DO_
}

void LatControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.LatControllerConf)
  // optional double ts = 1;
  if (this->ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ts(), output);
  }

  // optional int32 preview_window = 2;
  if (this->preview_window() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->preview_window(), output);
  }

  // optional double cf = 3;
  if (this->cf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cf(), output);
  }

  // optional double cr = 4;
  if (this->cr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cr(), output);
  }

  // optional double wheelbase = 5;
  if (this->wheelbase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->wheelbase(), output);
  }

  // optional int32 mass_fl = 6;
  if (this->mass_fl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mass_fl(), output);
  }

  // optional int32 mass_fr = 7;
  if (this->mass_fr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mass_fr(), output);
  }

  // optional int32 mass_rl = 8;
  if (this->mass_rl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mass_rl(), output);
  }

  // optional int32 mass_rr = 9;
  if (this->mass_rr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mass_rr(), output);
  }

  // optional double eps = 10;
  if (this->eps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->eps(), output);
  }

  // repeated double matrix_q = 11;
  if (this->matrix_q_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_matrix_q_cached_byte_size_);
  }
  for (int i = 0; i < this->matrix_q_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->matrix_q(i), output);
  }

  // optional int32 cutoff_freq = 12;
  if (this->cutoff_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cutoff_freq(), output);
  }

  // optional int32 mean_filter_window_size = 13;
  if (this->mean_filter_window_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mean_filter_window_size(), output);
  }

  // optional int32 steer_transmission_ratio = 14;
  if (this->steer_transmission_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->steer_transmission_ratio(), output);
  }

  // optional int32 steer_single_direction_max_degree = 15;
  if (this->steer_single_direction_max_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->steer_single_direction_max_degree(), output);
  }

  // optional int32 max_iteration = 16;
  if (this->max_iteration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_iteration(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.control.LatControllerConf)
}

::google::protobuf::uint8* LatControllerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LatControllerConf)
  // optional double ts = 1;
  if (this->ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ts(), target);
  }

  // optional int32 preview_window = 2;
  if (this->preview_window() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->preview_window(), target);
  }

  // optional double cf = 3;
  if (this->cf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cf(), target);
  }

  // optional double cr = 4;
  if (this->cr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cr(), target);
  }

  // optional double wheelbase = 5;
  if (this->wheelbase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->wheelbase(), target);
  }

  // optional int32 mass_fl = 6;
  if (this->mass_fl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mass_fl(), target);
  }

  // optional int32 mass_fr = 7;
  if (this->mass_fr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mass_fr(), target);
  }

  // optional int32 mass_rl = 8;
  if (this->mass_rl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mass_rl(), target);
  }

  // optional int32 mass_rr = 9;
  if (this->mass_rr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mass_rr(), target);
  }

  // optional double eps = 10;
  if (this->eps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->eps(), target);
  }

  // repeated double matrix_q = 11;
  if (this->matrix_q_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _matrix_q_cached_byte_size_, target);
  }
  for (int i = 0; i < this->matrix_q_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->matrix_q(i), target);
  }

  // optional int32 cutoff_freq = 12;
  if (this->cutoff_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cutoff_freq(), target);
  }

  // optional int32 mean_filter_window_size = 13;
  if (this->mean_filter_window_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mean_filter_window_size(), target);
  }

  // optional int32 steer_transmission_ratio = 14;
  if (this->steer_transmission_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->steer_transmission_ratio(), target);
  }

  // optional int32 steer_single_direction_max_degree = 15;
  if (this->steer_single_direction_max_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->steer_single_direction_max_degree(), target);
  }

  // optional int32 max_iteration = 16;
  if (this->max_iteration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->max_iteration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LatControllerConf)
  return target;
}

int LatControllerConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LatControllerConf)
  int total_size = 0;

  // optional double ts = 1;
  if (this->ts() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 preview_window = 2;
  if (this->preview_window() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->preview_window());
  }

  // optional double cf = 3;
  if (this->cf() != 0) {
    total_size += 1 + 8;
  }

  // optional double cr = 4;
  if (this->cr() != 0) {
    total_size += 1 + 8;
  }

  // optional double wheelbase = 5;
  if (this->wheelbase() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 mass_fl = 6;
  if (this->mass_fl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mass_fl());
  }

  // optional int32 mass_fr = 7;
  if (this->mass_fr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mass_fr());
  }

  // optional int32 mass_rl = 8;
  if (this->mass_rl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mass_rl());
  }

  // optional int32 mass_rr = 9;
  if (this->mass_rr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mass_rr());
  }

  // optional double eps = 10;
  if (this->eps() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 cutoff_freq = 12;
  if (this->cutoff_freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cutoff_freq());
  }

  // optional int32 mean_filter_window_size = 13;
  if (this->mean_filter_window_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mean_filter_window_size());
  }

  // optional int32 steer_transmission_ratio = 14;
  if (this->steer_transmission_ratio() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer_transmission_ratio());
  }

  // optional int32 steer_single_direction_max_degree = 15;
  if (this->steer_single_direction_max_degree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer_single_direction_max_degree());
  }

  // optional int32 max_iteration = 16;
  if (this->max_iteration() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_iteration());
  }

  // repeated double matrix_q = 11;
  {
    int data_size = 0;
    data_size = 8 * this->matrix_q_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _matrix_q_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LatControllerConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LatControllerConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LatControllerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LatControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LatControllerConf)
    MergeFrom(*source);
  }
}

void LatControllerConf::MergeFrom(const LatControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LatControllerConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  matrix_q_.MergeFrom(from.matrix_q_);
  if (from.ts() != 0) {
    set_ts(from.ts());
  }
  if (from.preview_window() != 0) {
    set_preview_window(from.preview_window());
  }
  if (from.cf() != 0) {
    set_cf(from.cf());
  }
  if (from.cr() != 0) {
    set_cr(from.cr());
  }
  if (from.wheelbase() != 0) {
    set_wheelbase(from.wheelbase());
  }
  if (from.mass_fl() != 0) {
    set_mass_fl(from.mass_fl());
  }
  if (from.mass_fr() != 0) {
    set_mass_fr(from.mass_fr());
  }
  if (from.mass_rl() != 0) {
    set_mass_rl(from.mass_rl());
  }
  if (from.mass_rr() != 0) {
    set_mass_rr(from.mass_rr());
  }
  if (from.eps() != 0) {
    set_eps(from.eps());
  }
  if (from.cutoff_freq() != 0) {
    set_cutoff_freq(from.cutoff_freq());
  }
  if (from.mean_filter_window_size() != 0) {
    set_mean_filter_window_size(from.mean_filter_window_size());
  }
  if (from.steer_transmission_ratio() != 0) {
    set_steer_transmission_ratio(from.steer_transmission_ratio());
  }
  if (from.steer_single_direction_max_degree() != 0) {
    set_steer_single_direction_max_degree(from.steer_single_direction_max_degree());
  }
  if (from.max_iteration() != 0) {
    set_max_iteration(from.max_iteration());
  }
}

void LatControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LatControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatControllerConf::CopyFrom(const LatControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LatControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatControllerConf::IsInitialized() const {

  return true;
}

void LatControllerConf::Swap(LatControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatControllerConf::InternalSwap(LatControllerConf* other) {
  std::swap(ts_, other->ts_);
  std::swap(preview_window_, other->preview_window_);
  std::swap(cf_, other->cf_);
  std::swap(cr_, other->cr_);
  std::swap(wheelbase_, other->wheelbase_);
  std::swap(mass_fl_, other->mass_fl_);
  std::swap(mass_fr_, other->mass_fr_);
  std::swap(mass_rl_, other->mass_rl_);
  std::swap(mass_rr_, other->mass_rr_);
  std::swap(eps_, other->eps_);
  matrix_q_.UnsafeArenaSwap(&other->matrix_q_);
  std::swap(cutoff_freq_, other->cutoff_freq_);
  std::swap(mean_filter_window_size_, other->mean_filter_window_size_);
  std::swap(steer_transmission_ratio_, other->steer_transmission_ratio_);
  std::swap(steer_single_direction_max_degree_, other->steer_single_direction_max_degree_);
  std::swap(max_iteration_, other->max_iteration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatControllerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatControllerConf_descriptor_;
  metadata.reflection = LatControllerConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatControllerConf

// optional double ts = 1;
void LatControllerConf::clear_ts() {
  ts_ = 0;
}
 double LatControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.ts)
  return ts_;
}
 void LatControllerConf::set_ts(double value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.ts)
}

// optional int32 preview_window = 2;
void LatControllerConf::clear_preview_window() {
  preview_window_ = 0;
}
 ::google::protobuf::int32 LatControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.preview_window)
  return preview_window_;
}
 void LatControllerConf::set_preview_window(::google::protobuf::int32 value) {
  
  preview_window_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.preview_window)
}

// optional double cf = 3;
void LatControllerConf::clear_cf() {
  cf_ = 0;
}
 double LatControllerConf::cf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.cf)
  return cf_;
}
 void LatControllerConf::set_cf(double value) {
  
  cf_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.cf)
}

// optional double cr = 4;
void LatControllerConf::clear_cr() {
  cr_ = 0;
}
 double LatControllerConf::cr() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.cr)
  return cr_;
}
 void LatControllerConf::set_cr(double value) {
  
  cr_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.cr)
}

// optional double wheelbase = 5;
void LatControllerConf::clear_wheelbase() {
  wheelbase_ = 0;
}
 double LatControllerConf::wheelbase() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.wheelbase)
  return wheelbase_;
}
 void LatControllerConf::set_wheelbase(double value) {
  
  wheelbase_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.wheelbase)
}

// optional int32 mass_fl = 6;
void LatControllerConf::clear_mass_fl() {
  mass_fl_ = 0;
}
 ::google::protobuf::int32 LatControllerConf::mass_fl() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.mass_fl)
  return mass_fl_;
}
 void LatControllerConf::set_mass_fl(::google::protobuf::int32 value) {
  
  mass_fl_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.mass_fl)
}

// optional int32 mass_fr = 7;
void LatControllerConf::clear_mass_fr() {
  mass_fr_ = 0;
}
 ::google::protobuf::int32 LatControllerConf::mass_fr() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.mass_fr)
  return mass_fr_;
}
 void LatControllerConf::set_mass_fr(::google::protobuf::int32 value) {
  
  mass_fr_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.mass_fr)
}

// optional int32 mass_rl = 8;
void LatControllerConf::clear_mass_rl() {
  mass_rl_ = 0;
}
 ::google::protobuf::int32 LatControllerConf::mass_rl() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.mass_rl)
  return mass_rl_;
}
 void LatControllerConf::set_mass_rl(::google::protobuf::int32 value) {
  
  mass_rl_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.mass_rl)
}

// optional int32 mass_rr = 9;
void LatControllerConf::clear_mass_rr() {
  mass_rr_ = 0;
}
 ::google::protobuf::int32 LatControllerConf::mass_rr() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.mass_rr)
  return mass_rr_;
}
 void LatControllerConf::set_mass_rr(::google::protobuf::int32 value) {
  
  mass_rr_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.mass_rr)
}

// optional double eps = 10;
void LatControllerConf::clear_eps() {
  eps_ = 0;
}
 double LatControllerConf::eps() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.eps)
  return eps_;
}
 void LatControllerConf::set_eps(double value) {
  
  eps_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.eps)
}

// repeated double matrix_q = 11;
int LatControllerConf::matrix_q_size() const {
  return matrix_q_.size();
}
void LatControllerConf::clear_matrix_q() {
  matrix_q_.Clear();
}
 double LatControllerConf::matrix_q(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.matrix_q)
  return matrix_q_.Get(index);
}
 void LatControllerConf::set_matrix_q(int index, double value) {
  matrix_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.matrix_q)
}
 void LatControllerConf::add_matrix_q(double value) {
  matrix_q_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.LatControllerConf.matrix_q)
}
 const ::google::protobuf::RepeatedField< double >&
LatControllerConf::matrix_q() const {
  // @@protoc_insertion_point(field_list:apollo.control.LatControllerConf.matrix_q)
  return matrix_q_;
}
 ::google::protobuf::RepeatedField< double >*
LatControllerConf::mutable_matrix_q() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.LatControllerConf.matrix_q)
  return &matrix_q_;
}

// optional int32 cutoff_freq = 12;
void LatControllerConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
}
 ::google::protobuf::int32 LatControllerConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.cutoff_freq)
  return cutoff_freq_;
}
 void LatControllerConf::set_cutoff_freq(::google::protobuf::int32 value) {
  
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.cutoff_freq)
}

// optional int32 mean_filter_window_size = 13;
void LatControllerConf::clear_mean_filter_window_size() {
  mean_filter_window_size_ = 0;
}
 ::google::protobuf::int32 LatControllerConf::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.mean_filter_window_size)
  return mean_filter_window_size_;
}
 void LatControllerConf::set_mean_filter_window_size(::google::protobuf::int32 value) {
  
  mean_filter_window_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.mean_filter_window_size)
}

// optional int32 steer_transmission_ratio = 14;
void LatControllerConf::clear_steer_transmission_ratio() {
  steer_transmission_ratio_ = 0;
}
 ::google::protobuf::int32 LatControllerConf::steer_transmission_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.steer_transmission_ratio)
  return steer_transmission_ratio_;
}
 void LatControllerConf::set_steer_transmission_ratio(::google::protobuf::int32 value) {
  
  steer_transmission_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.steer_transmission_ratio)
}

// optional int32 steer_single_direction_max_degree = 15;
void LatControllerConf::clear_steer_single_direction_max_degree() {
  steer_single_direction_max_degree_ = 0;
}
 ::google::protobuf::int32 LatControllerConf::steer_single_direction_max_degree() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.steer_single_direction_max_degree)
  return steer_single_direction_max_degree_;
}
 void LatControllerConf::set_steer_single_direction_max_degree(::google::protobuf::int32 value) {
  
  steer_single_direction_max_degree_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.steer_single_direction_max_degree)
}

// optional int32 max_iteration = 16;
void LatControllerConf::clear_max_iteration() {
  max_iteration_ = 0;
}
 ::google::protobuf::int32 LatControllerConf::max_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatControllerConf.max_iteration)
  return max_iteration_;
}
 void LatControllerConf::set_max_iteration(::google::protobuf::int32 value) {
  
  max_iteration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatControllerConf.max_iteration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
