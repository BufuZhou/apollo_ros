// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/lon_controller_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/control/lon_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {

namespace {

const ::google::protobuf::Descriptor* PidConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PidConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* LonControllerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LonControllerConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/control/lon_controller_conf.proto");
  GOOGLE_CHECK(file != NULL);
  PidConf_descriptor_ = file->message_type(0);
  static const int PidConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidConf, integrator_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidConf, integrator_saturation_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidConf, kp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidConf, ki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidConf, kd_),
  };
  PidConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PidConf_descriptor_,
      PidConf::default_instance_,
      PidConf_offsets_,
      -1,
      -1,
      -1,
      sizeof(PidConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidConf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidConf, _is_default_instance_));
  FilterConf_descriptor_ = file->message_type(1);
  static const int FilterConf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, cutoff_freq_),
  };
  FilterConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FilterConf_descriptor_,
      FilterConf::default_instance_,
      FilterConf_offsets_,
      -1,
      -1,
      -1,
      sizeof(FilterConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, _is_default_instance_));
  LonControllerConf_descriptor_ = file->message_type(2);
  static const int LonControllerConf_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, brake_deadzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, throttle_deadzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, speed_controller_input_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, station_error_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, preview_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, standstill_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, station_pid_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, low_speed_pid_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, high_speed_pid_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, switch_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, throttle_filter_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, brake_filter_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, acceleration_filter_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, calibration_table_),
  };
  LonControllerConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LonControllerConf_descriptor_,
      LonControllerConf::default_instance_,
      LonControllerConf_offsets_,
      -1,
      -1,
      -1,
      sizeof(LonControllerConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PidConf_descriptor_, &PidConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FilterConf_descriptor_, &FilterConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LonControllerConf_descriptor_, &LonControllerConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto() {
  delete PidConf::default_instance_;
  delete PidConf_reflection_;
  delete FilterConf::default_instance_;
  delete FilterConf_reflection_;
  delete LonControllerConf::default_instance_;
  delete LonControllerConf_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::control::calibrationtable::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcalibration_5ftable_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n3apollo_msgs/proto/control/lon_controll"
    "er_conf.proto\022\016apollo.control\0321apollo_ms"
    "gs/proto/control/calibration_table.proto"
    "\"m\n\007PidConf\022\031\n\021integrator_enable\030\001 \001(\010\022#"
    "\n\033integrator_saturation_level\030\002 \001(\001\022\n\n\002k"
    "p\030\003 \001(\001\022\n\n\002ki\030\004 \001(\001\022\n\n\002kd\030\005 \001(\001\"!\n\nFilte"
    "rConf\022\023\n\013cutoff_freq\030\001 \001(\005\"\206\005\n\021LonContro"
    "llerConf\022\n\n\002ts\030\001 \001(\001\022\026\n\016brake_deadzone\030\002"
    " \001(\001\022\031\n\021throttle_deadzone\030\003 \001(\001\022$\n\034speed"
    "_controller_input_limit\030\004 \001(\001\022\033\n\023station"
    "_error_limit\030\005 \001(\001\022\026\n\016preview_window\030\006 \001"
    "(\001\022\037\n\027standstill_acceleration\030\007 \001(\001\0221\n\020s"
    "tation_pid_conf\030\010 \001(\0132\027.apollo.control.P"
    "idConf\0223\n\022low_speed_pid_conf\030\t \001(\0132\027.apo"
    "llo.control.PidConf\0224\n\023high_speed_pid_co"
    "nf\030\n \001(\0132\027.apollo.control.PidConf\022\024\n\014swi"
    "tch_speed\030\013 \001(\001\0228\n\024throttle_filter_conf\030"
    "\014 \001(\0132\032.apollo.control.FilterConf\0225\n\021bra"
    "ke_filter_conf\030\r \001(\0132\032.apollo.control.Fi"
    "lterConf\022<\n\030acceleration_filter_conf\030\016 \001"
    "(\0132\032.apollo.control.FilterConf\022S\n\021calibr"
    "ation_table\030\017 \001(\01328.apollo.control.calib"
    "rationtable.ControlCalibrationTableb\006pro"
    "to3", 923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/control/lon_controller_conf.proto", &protobuf_RegisterTypes);
  PidConf::default_instance_ = new PidConf();
  FilterConf::default_instance_ = new FilterConf();
  LonControllerConf::default_instance_ = new LonControllerConf();
  PidConf::default_instance_->InitAsDefaultInstance();
  FilterConf::default_instance_->InitAsDefaultInstance();
  LonControllerConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PidConf::kIntegratorEnableFieldNumber;
const int PidConf::kIntegratorSaturationLevelFieldNumber;
const int PidConf::kKpFieldNumber;
const int PidConf::kKiFieldNumber;
const int PidConf::kKdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PidConf::PidConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.PidConf)
}

void PidConf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PidConf::PidConf(const PidConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.PidConf)
}

void PidConf::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  integrator_enable_ = false;
  integrator_saturation_level_ = 0;
  kp_ = 0;
  ki_ = 0;
  kd_ = 0;
}

PidConf::~PidConf() {
  // @@protoc_insertion_point(destructor:apollo.control.PidConf)
  SharedDtor();
}

void PidConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PidConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PidConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PidConf_descriptor_;
}

const PidConf& PidConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  return *default_instance_;
}

PidConf* PidConf::default_instance_ = NULL;

PidConf* PidConf::New(::google::protobuf::Arena* arena) const {
  PidConf* n = new PidConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PidConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.PidConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PidConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PidConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(integrator_saturation_level_, integrator_enable_);

#undef ZR_HELPER_
#undef ZR_

}

bool PidConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.PidConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool integrator_enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &integrator_enable_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_integrator_saturation_level;
        break;
      }

      // optional double integrator_saturation_level = 2;
      case 2: {
        if (tag == 17) {
         parse_integrator_saturation_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &integrator_saturation_level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_kp;
        break;
      }

      // optional double kp = 3;
      case 3: {
        if (tag == 25) {
         parse_kp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_ki;
        break;
      }

      // optional double ki = 4;
      case 4: {
        if (tag == 33) {
         parse_ki:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ki_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_kd;
        break;
      }

      // optional double kd = 5;
      case 5: {
        if (tag == 41) {
         parse_kd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.PidConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.PidConf)
  return false;
#undef DO_
}

void PidConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.PidConf)
  // optional bool integrator_enable = 1;
  if (this->integrator_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->integrator_enable(), output);
  }

  // optional double integrator_saturation_level = 2;
  if (this->integrator_saturation_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->integrator_saturation_level(), output);
  }

  // optional double kp = 3;
  if (this->kp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->kp(), output);
  }

  // optional double ki = 4;
  if (this->ki() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ki(), output);
  }

  // optional double kd = 5;
  if (this->kd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->kd(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.control.PidConf)
}

::google::protobuf::uint8* PidConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.PidConf)
  // optional bool integrator_enable = 1;
  if (this->integrator_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->integrator_enable(), target);
  }

  // optional double integrator_saturation_level = 2;
  if (this->integrator_saturation_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->integrator_saturation_level(), target);
  }

  // optional double kp = 3;
  if (this->kp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->kp(), target);
  }

  // optional double ki = 4;
  if (this->ki() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ki(), target);
  }

  // optional double kd = 5;
  if (this->kd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->kd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.PidConf)
  return target;
}

int PidConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.PidConf)
  int total_size = 0;

  // optional bool integrator_enable = 1;
  if (this->integrator_enable() != 0) {
    total_size += 1 + 1;
  }

  // optional double integrator_saturation_level = 2;
  if (this->integrator_saturation_level() != 0) {
    total_size += 1 + 8;
  }

  // optional double kp = 3;
  if (this->kp() != 0) {
    total_size += 1 + 8;
  }

  // optional double ki = 4;
  if (this->ki() != 0) {
    total_size += 1 + 8;
  }

  // optional double kd = 5;
  if (this->kd() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PidConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.PidConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PidConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PidConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.PidConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.PidConf)
    MergeFrom(*source);
  }
}

void PidConf::MergeFrom(const PidConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.PidConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.integrator_enable() != 0) {
    set_integrator_enable(from.integrator_enable());
  }
  if (from.integrator_saturation_level() != 0) {
    set_integrator_saturation_level(from.integrator_saturation_level());
  }
  if (from.kp() != 0) {
    set_kp(from.kp());
  }
  if (from.ki() != 0) {
    set_ki(from.ki());
  }
  if (from.kd() != 0) {
    set_kd(from.kd());
  }
}

void PidConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.PidConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PidConf::CopyFrom(const PidConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.PidConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PidConf::IsInitialized() const {

  return true;
}

void PidConf::Swap(PidConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PidConf::InternalSwap(PidConf* other) {
  std::swap(integrator_enable_, other->integrator_enable_);
  std::swap(integrator_saturation_level_, other->integrator_saturation_level_);
  std::swap(kp_, other->kp_);
  std::swap(ki_, other->ki_);
  std::swap(kd_, other->kd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PidConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PidConf_descriptor_;
  metadata.reflection = PidConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PidConf

// optional bool integrator_enable = 1;
void PidConf::clear_integrator_enable() {
  integrator_enable_ = false;
}
 bool PidConf::integrator_enable() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.integrator_enable)
  return integrator_enable_;
}
 void PidConf::set_integrator_enable(bool value) {
  
  integrator_enable_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.integrator_enable)
}

// optional double integrator_saturation_level = 2;
void PidConf::clear_integrator_saturation_level() {
  integrator_saturation_level_ = 0;
}
 double PidConf::integrator_saturation_level() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.integrator_saturation_level)
  return integrator_saturation_level_;
}
 void PidConf::set_integrator_saturation_level(double value) {
  
  integrator_saturation_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.integrator_saturation_level)
}

// optional double kp = 3;
void PidConf::clear_kp() {
  kp_ = 0;
}
 double PidConf::kp() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.kp)
  return kp_;
}
 void PidConf::set_kp(double value) {
  
  kp_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.kp)
}

// optional double ki = 4;
void PidConf::clear_ki() {
  ki_ = 0;
}
 double PidConf::ki() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.ki)
  return ki_;
}
 void PidConf::set_ki(double value) {
  
  ki_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.ki)
}

// optional double kd = 5;
void PidConf::clear_kd() {
  kd_ = 0;
}
 double PidConf::kd() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.kd)
  return kd_;
}
 void PidConf::set_kd(double value) {
  
  kd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.kd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterConf::kCutoffFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterConf::FilterConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.FilterConf)
}

void FilterConf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FilterConf::FilterConf(const FilterConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.FilterConf)
}

void FilterConf::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cutoff_freq_ = 0;
}

FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:apollo.control.FilterConf)
  SharedDtor();
}

void FilterConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FilterConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterConf_descriptor_;
}

const FilterConf& FilterConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  return *default_instance_;
}

FilterConf* FilterConf::default_instance_ = NULL;

FilterConf* FilterConf::New(::google::protobuf::Arena* arena) const {
  FilterConf* n = new FilterConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.FilterConf)
  cutoff_freq_ = 0;
}

bool FilterConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.FilterConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cutoff_freq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_freq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.FilterConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.FilterConf)
  return false;
#undef DO_
}

void FilterConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.FilterConf)
  // optional int32 cutoff_freq = 1;
  if (this->cutoff_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cutoff_freq(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.control.FilterConf)
}

::google::protobuf::uint8* FilterConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.FilterConf)
  // optional int32 cutoff_freq = 1;
  if (this->cutoff_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cutoff_freq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.FilterConf)
  return target;
}

int FilterConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.FilterConf)
  int total_size = 0;

  // optional int32 cutoff_freq = 1;
  if (this->cutoff_freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cutoff_freq());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.FilterConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FilterConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.FilterConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.FilterConf)
    MergeFrom(*source);
  }
}

void FilterConf::MergeFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.FilterConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cutoff_freq() != 0) {
    set_cutoff_freq(from.cutoff_freq());
  }
}

void FilterConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConf::CopyFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConf::IsInitialized() const {

  return true;
}

void FilterConf::Swap(FilterConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterConf::InternalSwap(FilterConf* other) {
  std::swap(cutoff_freq_, other->cutoff_freq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterConf_descriptor_;
  metadata.reflection = FilterConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterConf

// optional int32 cutoff_freq = 1;
void FilterConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
}
 ::google::protobuf::int32 FilterConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:apollo.control.FilterConf.cutoff_freq)
  return cutoff_freq_;
}
 void FilterConf::set_cutoff_freq(::google::protobuf::int32 value) {
  
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.FilterConf.cutoff_freq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LonControllerConf::kTsFieldNumber;
const int LonControllerConf::kBrakeDeadzoneFieldNumber;
const int LonControllerConf::kThrottleDeadzoneFieldNumber;
const int LonControllerConf::kSpeedControllerInputLimitFieldNumber;
const int LonControllerConf::kStationErrorLimitFieldNumber;
const int LonControllerConf::kPreviewWindowFieldNumber;
const int LonControllerConf::kStandstillAccelerationFieldNumber;
const int LonControllerConf::kStationPidConfFieldNumber;
const int LonControllerConf::kLowSpeedPidConfFieldNumber;
const int LonControllerConf::kHighSpeedPidConfFieldNumber;
const int LonControllerConf::kSwitchSpeedFieldNumber;
const int LonControllerConf::kThrottleFilterConfFieldNumber;
const int LonControllerConf::kBrakeFilterConfFieldNumber;
const int LonControllerConf::kAccelerationFilterConfFieldNumber;
const int LonControllerConf::kCalibrationTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LonControllerConf::LonControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LonControllerConf)
}

void LonControllerConf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  station_pid_conf_ = const_cast< ::apollo::control::PidConf*>(&::apollo::control::PidConf::default_instance());
  low_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(&::apollo::control::PidConf::default_instance());
  high_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(&::apollo::control::PidConf::default_instance());
  throttle_filter_conf_ = const_cast< ::apollo::control::FilterConf*>(&::apollo::control::FilterConf::default_instance());
  brake_filter_conf_ = const_cast< ::apollo::control::FilterConf*>(&::apollo::control::FilterConf::default_instance());
  acceleration_filter_conf_ = const_cast< ::apollo::control::FilterConf*>(&::apollo::control::FilterConf::default_instance());
  calibration_table_ = const_cast< ::apollo::control::calibrationtable::ControlCalibrationTable*>(&::apollo::control::calibrationtable::ControlCalibrationTable::default_instance());
}

LonControllerConf::LonControllerConf(const LonControllerConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.LonControllerConf)
}

void LonControllerConf::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ts_ = 0;
  brake_deadzone_ = 0;
  throttle_deadzone_ = 0;
  speed_controller_input_limit_ = 0;
  station_error_limit_ = 0;
  preview_window_ = 0;
  standstill_acceleration_ = 0;
  station_pid_conf_ = NULL;
  low_speed_pid_conf_ = NULL;
  high_speed_pid_conf_ = NULL;
  switch_speed_ = 0;
  throttle_filter_conf_ = NULL;
  brake_filter_conf_ = NULL;
  acceleration_filter_conf_ = NULL;
  calibration_table_ = NULL;
}

LonControllerConf::~LonControllerConf() {
  // @@protoc_insertion_point(destructor:apollo.control.LonControllerConf)
  SharedDtor();
}

void LonControllerConf::SharedDtor() {
  if (this != default_instance_) {
    delete station_pid_conf_;
    delete low_speed_pid_conf_;
    delete high_speed_pid_conf_;
    delete throttle_filter_conf_;
    delete brake_filter_conf_;
    delete acceleration_filter_conf_;
    delete calibration_table_;
  }
}

void LonControllerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LonControllerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LonControllerConf_descriptor_;
}

const LonControllerConf& LonControllerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  return *default_instance_;
}

LonControllerConf* LonControllerConf::default_instance_ = NULL;

LonControllerConf* LonControllerConf::New(::google::protobuf::Arena* arena) const {
  LonControllerConf* n = new LonControllerConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LonControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LonControllerConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LonControllerConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LonControllerConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ts_, standstill_acceleration_);
  if (GetArenaNoVirtual() == NULL && station_pid_conf_ != NULL) delete station_pid_conf_;
  station_pid_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && low_speed_pid_conf_ != NULL) delete low_speed_pid_conf_;
  low_speed_pid_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && high_speed_pid_conf_ != NULL) delete high_speed_pid_conf_;
  high_speed_pid_conf_ = NULL;
  switch_speed_ = 0;
  if (GetArenaNoVirtual() == NULL && throttle_filter_conf_ != NULL) delete throttle_filter_conf_;
  throttle_filter_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && brake_filter_conf_ != NULL) delete brake_filter_conf_;
  brake_filter_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_filter_conf_ != NULL) delete acceleration_filter_conf_;
  acceleration_filter_conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && calibration_table_ != NULL) delete calibration_table_;
  calibration_table_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool LonControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.LonControllerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ts = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_brake_deadzone;
        break;
      }

      // optional double brake_deadzone = 2;
      case 2: {
        if (tag == 17) {
         parse_brake_deadzone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_deadzone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_throttle_deadzone;
        break;
      }

      // optional double throttle_deadzone = 3;
      case 3: {
        if (tag == 25) {
         parse_throttle_deadzone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_deadzone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed_controller_input_limit;
        break;
      }

      // optional double speed_controller_input_limit = 4;
      case 4: {
        if (tag == 33) {
         parse_speed_controller_input_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_controller_input_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_station_error_limit;
        break;
      }

      // optional double station_error_limit = 5;
      case 5: {
        if (tag == 41) {
         parse_station_error_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_preview_window;
        break;
      }

      // optional double preview_window = 6;
      case 6: {
        if (tag == 49) {
         parse_preview_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_window_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_standstill_acceleration;
        break;
      }

      // optional double standstill_acceleration = 7;
      case 7: {
        if (tag == 57) {
         parse_standstill_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standstill_acceleration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_station_pid_conf;
        break;
      }

      // optional .apollo.control.PidConf station_pid_conf = 8;
      case 8: {
        if (tag == 66) {
         parse_station_pid_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_station_pid_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_low_speed_pid_conf;
        break;
      }

      // optional .apollo.control.PidConf low_speed_pid_conf = 9;
      case 9: {
        if (tag == 74) {
         parse_low_speed_pid_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_high_speed_pid_conf;
        break;
      }

      // optional .apollo.control.PidConf high_speed_pid_conf = 10;
      case 10: {
        if (tag == 82) {
         parse_high_speed_pid_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_switch_speed;
        break;
      }

      // optional double switch_speed = 11;
      case 11: {
        if (tag == 89) {
         parse_switch_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &switch_speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_throttle_filter_conf;
        break;
      }

      // optional .apollo.control.FilterConf throttle_filter_conf = 12;
      case 12: {
        if (tag == 98) {
         parse_throttle_filter_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_throttle_filter_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_brake_filter_conf;
        break;
      }

      // optional .apollo.control.FilterConf brake_filter_conf = 13;
      case 13: {
        if (tag == 106) {
         parse_brake_filter_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brake_filter_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_acceleration_filter_conf;
        break;
      }

      // optional .apollo.control.FilterConf acceleration_filter_conf = 14;
      case 14: {
        if (tag == 114) {
         parse_acceleration_filter_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration_filter_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_calibration_table;
        break;
      }

      // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
      case 15: {
        if (tag == 122) {
         parse_calibration_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.LonControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.LonControllerConf)
  return false;
#undef DO_
}

void LonControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.LonControllerConf)
  // optional double ts = 1;
  if (this->ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ts(), output);
  }

  // optional double brake_deadzone = 2;
  if (this->brake_deadzone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->brake_deadzone(), output);
  }

  // optional double throttle_deadzone = 3;
  if (this->throttle_deadzone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->throttle_deadzone(), output);
  }

  // optional double speed_controller_input_limit = 4;
  if (this->speed_controller_input_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_controller_input_limit(), output);
  }

  // optional double station_error_limit = 5;
  if (this->station_error_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->station_error_limit(), output);
  }

  // optional double preview_window = 6;
  if (this->preview_window() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->preview_window(), output);
  }

  // optional double standstill_acceleration = 7;
  if (this->standstill_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->standstill_acceleration(), output);
  }

  // optional .apollo.control.PidConf station_pid_conf = 8;
  if (this->has_station_pid_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->station_pid_conf_, output);
  }

  // optional .apollo.control.PidConf low_speed_pid_conf = 9;
  if (this->has_low_speed_pid_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->low_speed_pid_conf_, output);
  }

  // optional .apollo.control.PidConf high_speed_pid_conf = 10;
  if (this->has_high_speed_pid_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->high_speed_pid_conf_, output);
  }

  // optional double switch_speed = 11;
  if (this->switch_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->switch_speed(), output);
  }

  // optional .apollo.control.FilterConf throttle_filter_conf = 12;
  if (this->has_throttle_filter_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->throttle_filter_conf_, output);
  }

  // optional .apollo.control.FilterConf brake_filter_conf = 13;
  if (this->has_brake_filter_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->brake_filter_conf_, output);
  }

  // optional .apollo.control.FilterConf acceleration_filter_conf = 14;
  if (this->has_acceleration_filter_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->acceleration_filter_conf_, output);
  }

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
  if (this->has_calibration_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->calibration_table_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.control.LonControllerConf)
}

::google::protobuf::uint8* LonControllerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LonControllerConf)
  // optional double ts = 1;
  if (this->ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ts(), target);
  }

  // optional double brake_deadzone = 2;
  if (this->brake_deadzone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->brake_deadzone(), target);
  }

  // optional double throttle_deadzone = 3;
  if (this->throttle_deadzone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->throttle_deadzone(), target);
  }

  // optional double speed_controller_input_limit = 4;
  if (this->speed_controller_input_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_controller_input_limit(), target);
  }

  // optional double station_error_limit = 5;
  if (this->station_error_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->station_error_limit(), target);
  }

  // optional double preview_window = 6;
  if (this->preview_window() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->preview_window(), target);
  }

  // optional double standstill_acceleration = 7;
  if (this->standstill_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->standstill_acceleration(), target);
  }

  // optional .apollo.control.PidConf station_pid_conf = 8;
  if (this->has_station_pid_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->station_pid_conf_, false, target);
  }

  // optional .apollo.control.PidConf low_speed_pid_conf = 9;
  if (this->has_low_speed_pid_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->low_speed_pid_conf_, false, target);
  }

  // optional .apollo.control.PidConf high_speed_pid_conf = 10;
  if (this->has_high_speed_pid_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->high_speed_pid_conf_, false, target);
  }

  // optional double switch_speed = 11;
  if (this->switch_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->switch_speed(), target);
  }

  // optional .apollo.control.FilterConf throttle_filter_conf = 12;
  if (this->has_throttle_filter_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->throttle_filter_conf_, false, target);
  }

  // optional .apollo.control.FilterConf brake_filter_conf = 13;
  if (this->has_brake_filter_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->brake_filter_conf_, false, target);
  }

  // optional .apollo.control.FilterConf acceleration_filter_conf = 14;
  if (this->has_acceleration_filter_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->acceleration_filter_conf_, false, target);
  }

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
  if (this->has_calibration_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->calibration_table_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LonControllerConf)
  return target;
}

int LonControllerConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LonControllerConf)
  int total_size = 0;

  // optional double ts = 1;
  if (this->ts() != 0) {
    total_size += 1 + 8;
  }

  // optional double brake_deadzone = 2;
  if (this->brake_deadzone() != 0) {
    total_size += 1 + 8;
  }

  // optional double throttle_deadzone = 3;
  if (this->throttle_deadzone() != 0) {
    total_size += 1 + 8;
  }

  // optional double speed_controller_input_limit = 4;
  if (this->speed_controller_input_limit() != 0) {
    total_size += 1 + 8;
  }

  // optional double station_error_limit = 5;
  if (this->station_error_limit() != 0) {
    total_size += 1 + 8;
  }

  // optional double preview_window = 6;
  if (this->preview_window() != 0) {
    total_size += 1 + 8;
  }

  // optional double standstill_acceleration = 7;
  if (this->standstill_acceleration() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.control.PidConf station_pid_conf = 8;
  if (this->has_station_pid_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->station_pid_conf_);
  }

  // optional .apollo.control.PidConf low_speed_pid_conf = 9;
  if (this->has_low_speed_pid_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->low_speed_pid_conf_);
  }

  // optional .apollo.control.PidConf high_speed_pid_conf = 10;
  if (this->has_high_speed_pid_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->high_speed_pid_conf_);
  }

  // optional double switch_speed = 11;
  if (this->switch_speed() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.control.FilterConf throttle_filter_conf = 12;
  if (this->has_throttle_filter_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->throttle_filter_conf_);
  }

  // optional .apollo.control.FilterConf brake_filter_conf = 13;
  if (this->has_brake_filter_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->brake_filter_conf_);
  }

  // optional .apollo.control.FilterConf acceleration_filter_conf = 14;
  if (this->has_acceleration_filter_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceleration_filter_conf_);
  }

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
  if (this->has_calibration_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->calibration_table_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LonControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LonControllerConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LonControllerConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LonControllerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LonControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LonControllerConf)
    MergeFrom(*source);
  }
}

void LonControllerConf::MergeFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LonControllerConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ts() != 0) {
    set_ts(from.ts());
  }
  if (from.brake_deadzone() != 0) {
    set_brake_deadzone(from.brake_deadzone());
  }
  if (from.throttle_deadzone() != 0) {
    set_throttle_deadzone(from.throttle_deadzone());
  }
  if (from.speed_controller_input_limit() != 0) {
    set_speed_controller_input_limit(from.speed_controller_input_limit());
  }
  if (from.station_error_limit() != 0) {
    set_station_error_limit(from.station_error_limit());
  }
  if (from.preview_window() != 0) {
    set_preview_window(from.preview_window());
  }
  if (from.standstill_acceleration() != 0) {
    set_standstill_acceleration(from.standstill_acceleration());
  }
  if (from.has_station_pid_conf()) {
    mutable_station_pid_conf()->::apollo::control::PidConf::MergeFrom(from.station_pid_conf());
  }
  if (from.has_low_speed_pid_conf()) {
    mutable_low_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from.low_speed_pid_conf());
  }
  if (from.has_high_speed_pid_conf()) {
    mutable_high_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from.high_speed_pid_conf());
  }
  if (from.switch_speed() != 0) {
    set_switch_speed(from.switch_speed());
  }
  if (from.has_throttle_filter_conf()) {
    mutable_throttle_filter_conf()->::apollo::control::FilterConf::MergeFrom(from.throttle_filter_conf());
  }
  if (from.has_brake_filter_conf()) {
    mutable_brake_filter_conf()->::apollo::control::FilterConf::MergeFrom(from.brake_filter_conf());
  }
  if (from.has_acceleration_filter_conf()) {
    mutable_acceleration_filter_conf()->::apollo::control::FilterConf::MergeFrom(from.acceleration_filter_conf());
  }
  if (from.has_calibration_table()) {
    mutable_calibration_table()->::apollo::control::calibrationtable::ControlCalibrationTable::MergeFrom(from.calibration_table());
  }
}

void LonControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LonControllerConf::CopyFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonControllerConf::IsInitialized() const {

  return true;
}

void LonControllerConf::Swap(LonControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LonControllerConf::InternalSwap(LonControllerConf* other) {
  std::swap(ts_, other->ts_);
  std::swap(brake_deadzone_, other->brake_deadzone_);
  std::swap(throttle_deadzone_, other->throttle_deadzone_);
  std::swap(speed_controller_input_limit_, other->speed_controller_input_limit_);
  std::swap(station_error_limit_, other->station_error_limit_);
  std::swap(preview_window_, other->preview_window_);
  std::swap(standstill_acceleration_, other->standstill_acceleration_);
  std::swap(station_pid_conf_, other->station_pid_conf_);
  std::swap(low_speed_pid_conf_, other->low_speed_pid_conf_);
  std::swap(high_speed_pid_conf_, other->high_speed_pid_conf_);
  std::swap(switch_speed_, other->switch_speed_);
  std::swap(throttle_filter_conf_, other->throttle_filter_conf_);
  std::swap(brake_filter_conf_, other->brake_filter_conf_);
  std::swap(acceleration_filter_conf_, other->acceleration_filter_conf_);
  std::swap(calibration_table_, other->calibration_table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LonControllerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LonControllerConf_descriptor_;
  metadata.reflection = LonControllerConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LonControllerConf

// optional double ts = 1;
void LonControllerConf::clear_ts() {
  ts_ = 0;
}
 double LonControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.ts)
  return ts_;
}
 void LonControllerConf::set_ts(double value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.ts)
}

// optional double brake_deadzone = 2;
void LonControllerConf::clear_brake_deadzone() {
  brake_deadzone_ = 0;
}
 double LonControllerConf::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.brake_deadzone)
  return brake_deadzone_;
}
 void LonControllerConf::set_brake_deadzone(double value) {
  
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.brake_deadzone)
}

// optional double throttle_deadzone = 3;
void LonControllerConf::clear_throttle_deadzone() {
  throttle_deadzone_ = 0;
}
 double LonControllerConf::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.throttle_deadzone)
  return throttle_deadzone_;
}
 void LonControllerConf::set_throttle_deadzone(double value) {
  
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.throttle_deadzone)
}

// optional double speed_controller_input_limit = 4;
void LonControllerConf::clear_speed_controller_input_limit() {
  speed_controller_input_limit_ = 0;
}
 double LonControllerConf::speed_controller_input_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.speed_controller_input_limit)
  return speed_controller_input_limit_;
}
 void LonControllerConf::set_speed_controller_input_limit(double value) {
  
  speed_controller_input_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.speed_controller_input_limit)
}

// optional double station_error_limit = 5;
void LonControllerConf::clear_station_error_limit() {
  station_error_limit_ = 0;
}
 double LonControllerConf::station_error_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_error_limit)
  return station_error_limit_;
}
 void LonControllerConf::set_station_error_limit(double value) {
  
  station_error_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.station_error_limit)
}

// optional double preview_window = 6;
void LonControllerConf::clear_preview_window() {
  preview_window_ = 0;
}
 double LonControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.preview_window)
  return preview_window_;
}
 void LonControllerConf::set_preview_window(double value) {
  
  preview_window_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.preview_window)
}

// optional double standstill_acceleration = 7;
void LonControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
}
 double LonControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.standstill_acceleration)
  return standstill_acceleration_;
}
 void LonControllerConf::set_standstill_acceleration(double value) {
  
  standstill_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.standstill_acceleration)
}

// optional .apollo.control.PidConf station_pid_conf = 8;
bool LonControllerConf::has_station_pid_conf() const {
  return !_is_default_instance_ && station_pid_conf_ != NULL;
}
void LonControllerConf::clear_station_pid_conf() {
  if (GetArenaNoVirtual() == NULL && station_pid_conf_ != NULL) delete station_pid_conf_;
  station_pid_conf_ = NULL;
}
const ::apollo::control::PidConf& LonControllerConf::station_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_pid_conf)
  return station_pid_conf_ != NULL ? *station_pid_conf_ : *default_instance_->station_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::mutable_station_pid_conf() {
  
  if (station_pid_conf_ == NULL) {
    station_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.station_pid_conf)
  return station_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::release_station_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.station_pid_conf)
  
  ::apollo::control::PidConf* temp = station_pid_conf_;
  station_pid_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_station_pid_conf(::apollo::control::PidConf* station_pid_conf) {
  delete station_pid_conf_;
  station_pid_conf_ = station_pid_conf;
  if (station_pid_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.station_pid_conf)
}

// optional .apollo.control.PidConf low_speed_pid_conf = 9;
bool LonControllerConf::has_low_speed_pid_conf() const {
  return !_is_default_instance_ && low_speed_pid_conf_ != NULL;
}
void LonControllerConf::clear_low_speed_pid_conf() {
  if (GetArenaNoVirtual() == NULL && low_speed_pid_conf_ != NULL) delete low_speed_pid_conf_;
  low_speed_pid_conf_ = NULL;
}
const ::apollo::control::PidConf& LonControllerConf::low_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.low_speed_pid_conf)
  return low_speed_pid_conf_ != NULL ? *low_speed_pid_conf_ : *default_instance_->low_speed_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::mutable_low_speed_pid_conf() {
  
  if (low_speed_pid_conf_ == NULL) {
    low_speed_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.low_speed_pid_conf)
  return low_speed_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::release_low_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.low_speed_pid_conf)
  
  ::apollo::control::PidConf* temp = low_speed_pid_conf_;
  low_speed_pid_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_low_speed_pid_conf(::apollo::control::PidConf* low_speed_pid_conf) {
  delete low_speed_pid_conf_;
  low_speed_pid_conf_ = low_speed_pid_conf;
  if (low_speed_pid_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.low_speed_pid_conf)
}

// optional .apollo.control.PidConf high_speed_pid_conf = 10;
bool LonControllerConf::has_high_speed_pid_conf() const {
  return !_is_default_instance_ && high_speed_pid_conf_ != NULL;
}
void LonControllerConf::clear_high_speed_pid_conf() {
  if (GetArenaNoVirtual() == NULL && high_speed_pid_conf_ != NULL) delete high_speed_pid_conf_;
  high_speed_pid_conf_ = NULL;
}
const ::apollo::control::PidConf& LonControllerConf::high_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.high_speed_pid_conf)
  return high_speed_pid_conf_ != NULL ? *high_speed_pid_conf_ : *default_instance_->high_speed_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::mutable_high_speed_pid_conf() {
  
  if (high_speed_pid_conf_ == NULL) {
    high_speed_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.high_speed_pid_conf)
  return high_speed_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::release_high_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.high_speed_pid_conf)
  
  ::apollo::control::PidConf* temp = high_speed_pid_conf_;
  high_speed_pid_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_high_speed_pid_conf(::apollo::control::PidConf* high_speed_pid_conf) {
  delete high_speed_pid_conf_;
  high_speed_pid_conf_ = high_speed_pid_conf;
  if (high_speed_pid_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.high_speed_pid_conf)
}

// optional double switch_speed = 11;
void LonControllerConf::clear_switch_speed() {
  switch_speed_ = 0;
}
 double LonControllerConf::switch_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.switch_speed)
  return switch_speed_;
}
 void LonControllerConf::set_switch_speed(double value) {
  
  switch_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.switch_speed)
}

// optional .apollo.control.FilterConf throttle_filter_conf = 12;
bool LonControllerConf::has_throttle_filter_conf() const {
  return !_is_default_instance_ && throttle_filter_conf_ != NULL;
}
void LonControllerConf::clear_throttle_filter_conf() {
  if (GetArenaNoVirtual() == NULL && throttle_filter_conf_ != NULL) delete throttle_filter_conf_;
  throttle_filter_conf_ = NULL;
}
const ::apollo::control::FilterConf& LonControllerConf::throttle_filter_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.throttle_filter_conf)
  return throttle_filter_conf_ != NULL ? *throttle_filter_conf_ : *default_instance_->throttle_filter_conf_;
}
::apollo::control::FilterConf* LonControllerConf::mutable_throttle_filter_conf() {
  
  if (throttle_filter_conf_ == NULL) {
    throttle_filter_conf_ = new ::apollo::control::FilterConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.throttle_filter_conf)
  return throttle_filter_conf_;
}
::apollo::control::FilterConf* LonControllerConf::release_throttle_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.throttle_filter_conf)
  
  ::apollo::control::FilterConf* temp = throttle_filter_conf_;
  throttle_filter_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_throttle_filter_conf(::apollo::control::FilterConf* throttle_filter_conf) {
  delete throttle_filter_conf_;
  throttle_filter_conf_ = throttle_filter_conf;
  if (throttle_filter_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.throttle_filter_conf)
}

// optional .apollo.control.FilterConf brake_filter_conf = 13;
bool LonControllerConf::has_brake_filter_conf() const {
  return !_is_default_instance_ && brake_filter_conf_ != NULL;
}
void LonControllerConf::clear_brake_filter_conf() {
  if (GetArenaNoVirtual() == NULL && brake_filter_conf_ != NULL) delete brake_filter_conf_;
  brake_filter_conf_ = NULL;
}
const ::apollo::control::FilterConf& LonControllerConf::brake_filter_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.brake_filter_conf)
  return brake_filter_conf_ != NULL ? *brake_filter_conf_ : *default_instance_->brake_filter_conf_;
}
::apollo::control::FilterConf* LonControllerConf::mutable_brake_filter_conf() {
  
  if (brake_filter_conf_ == NULL) {
    brake_filter_conf_ = new ::apollo::control::FilterConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.brake_filter_conf)
  return brake_filter_conf_;
}
::apollo::control::FilterConf* LonControllerConf::release_brake_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.brake_filter_conf)
  
  ::apollo::control::FilterConf* temp = brake_filter_conf_;
  brake_filter_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_brake_filter_conf(::apollo::control::FilterConf* brake_filter_conf) {
  delete brake_filter_conf_;
  brake_filter_conf_ = brake_filter_conf;
  if (brake_filter_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.brake_filter_conf)
}

// optional .apollo.control.FilterConf acceleration_filter_conf = 14;
bool LonControllerConf::has_acceleration_filter_conf() const {
  return !_is_default_instance_ && acceleration_filter_conf_ != NULL;
}
void LonControllerConf::clear_acceleration_filter_conf() {
  if (GetArenaNoVirtual() == NULL && acceleration_filter_conf_ != NULL) delete acceleration_filter_conf_;
  acceleration_filter_conf_ = NULL;
}
const ::apollo::control::FilterConf& LonControllerConf::acceleration_filter_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.acceleration_filter_conf)
  return acceleration_filter_conf_ != NULL ? *acceleration_filter_conf_ : *default_instance_->acceleration_filter_conf_;
}
::apollo::control::FilterConf* LonControllerConf::mutable_acceleration_filter_conf() {
  
  if (acceleration_filter_conf_ == NULL) {
    acceleration_filter_conf_ = new ::apollo::control::FilterConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.acceleration_filter_conf)
  return acceleration_filter_conf_;
}
::apollo::control::FilterConf* LonControllerConf::release_acceleration_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.acceleration_filter_conf)
  
  ::apollo::control::FilterConf* temp = acceleration_filter_conf_;
  acceleration_filter_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_acceleration_filter_conf(::apollo::control::FilterConf* acceleration_filter_conf) {
  delete acceleration_filter_conf_;
  acceleration_filter_conf_ = acceleration_filter_conf;
  if (acceleration_filter_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.acceleration_filter_conf)
}

// optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
bool LonControllerConf::has_calibration_table() const {
  return !_is_default_instance_ && calibration_table_ != NULL;
}
void LonControllerConf::clear_calibration_table() {
  if (GetArenaNoVirtual() == NULL && calibration_table_ != NULL) delete calibration_table_;
  calibration_table_ = NULL;
}
const ::apollo::control::calibrationtable::ControlCalibrationTable& LonControllerConf::calibration_table() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.calibration_table)
  return calibration_table_ != NULL ? *calibration_table_ : *default_instance_->calibration_table_;
}
::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::mutable_calibration_table() {
  
  if (calibration_table_ == NULL) {
    calibration_table_ = new ::apollo::control::calibrationtable::ControlCalibrationTable;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.calibration_table)
  return calibration_table_;
}
::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::release_calibration_table() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.calibration_table)
  
  ::apollo::control::calibrationtable::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  delete calibration_table_;
  calibration_table_ = calibration_table;
  if (calibration_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.calibration_table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
