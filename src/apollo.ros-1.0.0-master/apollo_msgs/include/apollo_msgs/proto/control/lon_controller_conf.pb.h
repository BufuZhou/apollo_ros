// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/lon_controller_conf.proto

#ifndef PROTOBUF_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto__INCLUDED
#define PROTOBUF_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "apollo_msgs/proto/control/calibration_table.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();

class FilterConf;
class LonControllerConf;
class PidConf;

// ===================================================================

class PidConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.PidConf) */ {
 public:
  PidConf();
  virtual ~PidConf();

  PidConf(const PidConf& from);

  inline PidConf& operator=(const PidConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PidConf& default_instance();

  void Swap(PidConf* other);

  // implements Message ----------------------------------------------

  inline PidConf* New() const { return New(NULL); }

  PidConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PidConf& from);
  void MergeFrom(const PidConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PidConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool integrator_enable = 1;
  void clear_integrator_enable();
  static const int kIntegratorEnableFieldNumber = 1;
  bool integrator_enable() const;
  void set_integrator_enable(bool value);

  // optional double integrator_saturation_level = 2;
  void clear_integrator_saturation_level();
  static const int kIntegratorSaturationLevelFieldNumber = 2;
  double integrator_saturation_level() const;
  void set_integrator_saturation_level(double value);

  // optional double kp = 3;
  void clear_kp();
  static const int kKpFieldNumber = 3;
  double kp() const;
  void set_kp(double value);

  // optional double ki = 4;
  void clear_ki();
  static const int kKiFieldNumber = 4;
  double ki() const;
  void set_ki(double value);

  // optional double kd = 5;
  void clear_kd();
  static const int kKdFieldNumber = 5;
  double kd() const;
  void set_kd(double value);

  // @@protoc_insertion_point(class_scope:apollo.control.PidConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double integrator_saturation_level_;
  double kp_;
  double ki_;
  double kd_;
  bool integrator_enable_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();

  void InitAsDefaultInstance();
  static PidConf* default_instance_;
};
// -------------------------------------------------------------------

class FilterConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.FilterConf) */ {
 public:
  FilterConf();
  virtual ~FilterConf();

  FilterConf(const FilterConf& from);

  inline FilterConf& operator=(const FilterConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterConf& default_instance();

  void Swap(FilterConf* other);

  // implements Message ----------------------------------------------

  inline FilterConf* New() const { return New(NULL); }

  FilterConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterConf& from);
  void MergeFrom(const FilterConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilterConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cutoff_freq = 1;
  void clear_cutoff_freq();
  static const int kCutoffFreqFieldNumber = 1;
  ::google::protobuf::int32 cutoff_freq() const;
  void set_cutoff_freq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.control.FilterConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 cutoff_freq_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();

  void InitAsDefaultInstance();
  static FilterConf* default_instance_;
};
// -------------------------------------------------------------------

class LonControllerConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.LonControllerConf) */ {
 public:
  LonControllerConf();
  virtual ~LonControllerConf();

  LonControllerConf(const LonControllerConf& from);

  inline LonControllerConf& operator=(const LonControllerConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LonControllerConf& default_instance();

  void Swap(LonControllerConf* other);

  // implements Message ----------------------------------------------

  inline LonControllerConf* New() const { return New(NULL); }

  LonControllerConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LonControllerConf& from);
  void MergeFrom(const LonControllerConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LonControllerConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ts = 1;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  double ts() const;
  void set_ts(double value);

  // optional double brake_deadzone = 2;
  void clear_brake_deadzone();
  static const int kBrakeDeadzoneFieldNumber = 2;
  double brake_deadzone() const;
  void set_brake_deadzone(double value);

  // optional double throttle_deadzone = 3;
  void clear_throttle_deadzone();
  static const int kThrottleDeadzoneFieldNumber = 3;
  double throttle_deadzone() const;
  void set_throttle_deadzone(double value);

  // optional double speed_controller_input_limit = 4;
  void clear_speed_controller_input_limit();
  static const int kSpeedControllerInputLimitFieldNumber = 4;
  double speed_controller_input_limit() const;
  void set_speed_controller_input_limit(double value);

  // optional double station_error_limit = 5;
  void clear_station_error_limit();
  static const int kStationErrorLimitFieldNumber = 5;
  double station_error_limit() const;
  void set_station_error_limit(double value);

  // optional double preview_window = 6;
  void clear_preview_window();
  static const int kPreviewWindowFieldNumber = 6;
  double preview_window() const;
  void set_preview_window(double value);

  // optional double standstill_acceleration = 7;
  void clear_standstill_acceleration();
  static const int kStandstillAccelerationFieldNumber = 7;
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);

  // optional .apollo.control.PidConf station_pid_conf = 8;
  bool has_station_pid_conf() const;
  void clear_station_pid_conf();
  static const int kStationPidConfFieldNumber = 8;
  const ::apollo::control::PidConf& station_pid_conf() const;
  ::apollo::control::PidConf* mutable_station_pid_conf();
  ::apollo::control::PidConf* release_station_pid_conf();
  void set_allocated_station_pid_conf(::apollo::control::PidConf* station_pid_conf);

  // optional .apollo.control.PidConf low_speed_pid_conf = 9;
  bool has_low_speed_pid_conf() const;
  void clear_low_speed_pid_conf();
  static const int kLowSpeedPidConfFieldNumber = 9;
  const ::apollo::control::PidConf& low_speed_pid_conf() const;
  ::apollo::control::PidConf* mutable_low_speed_pid_conf();
  ::apollo::control::PidConf* release_low_speed_pid_conf();
  void set_allocated_low_speed_pid_conf(::apollo::control::PidConf* low_speed_pid_conf);

  // optional .apollo.control.PidConf high_speed_pid_conf = 10;
  bool has_high_speed_pid_conf() const;
  void clear_high_speed_pid_conf();
  static const int kHighSpeedPidConfFieldNumber = 10;
  const ::apollo::control::PidConf& high_speed_pid_conf() const;
  ::apollo::control::PidConf* mutable_high_speed_pid_conf();
  ::apollo::control::PidConf* release_high_speed_pid_conf();
  void set_allocated_high_speed_pid_conf(::apollo::control::PidConf* high_speed_pid_conf);

  // optional double switch_speed = 11;
  void clear_switch_speed();
  static const int kSwitchSpeedFieldNumber = 11;
  double switch_speed() const;
  void set_switch_speed(double value);

  // optional .apollo.control.FilterConf throttle_filter_conf = 12;
  bool has_throttle_filter_conf() const;
  void clear_throttle_filter_conf();
  static const int kThrottleFilterConfFieldNumber = 12;
  const ::apollo::control::FilterConf& throttle_filter_conf() const;
  ::apollo::control::FilterConf* mutable_throttle_filter_conf();
  ::apollo::control::FilterConf* release_throttle_filter_conf();
  void set_allocated_throttle_filter_conf(::apollo::control::FilterConf* throttle_filter_conf);

  // optional .apollo.control.FilterConf brake_filter_conf = 13;
  bool has_brake_filter_conf() const;
  void clear_brake_filter_conf();
  static const int kBrakeFilterConfFieldNumber = 13;
  const ::apollo::control::FilterConf& brake_filter_conf() const;
  ::apollo::control::FilterConf* mutable_brake_filter_conf();
  ::apollo::control::FilterConf* release_brake_filter_conf();
  void set_allocated_brake_filter_conf(::apollo::control::FilterConf* brake_filter_conf);

  // optional .apollo.control.FilterConf acceleration_filter_conf = 14;
  bool has_acceleration_filter_conf() const;
  void clear_acceleration_filter_conf();
  static const int kAccelerationFilterConfFieldNumber = 14;
  const ::apollo::control::FilterConf& acceleration_filter_conf() const;
  ::apollo::control::FilterConf* mutable_acceleration_filter_conf();
  ::apollo::control::FilterConf* release_acceleration_filter_conf();
  void set_allocated_acceleration_filter_conf(::apollo::control::FilterConf* acceleration_filter_conf);

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
  bool has_calibration_table() const;
  void clear_calibration_table();
  static const int kCalibrationTableFieldNumber = 15;
  const ::apollo::control::calibrationtable::ControlCalibrationTable& calibration_table() const;
  ::apollo::control::calibrationtable::ControlCalibrationTable* mutable_calibration_table();
  ::apollo::control::calibrationtable::ControlCalibrationTable* release_calibration_table();
  void set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table);

  // @@protoc_insertion_point(class_scope:apollo.control.LonControllerConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double ts_;
  double brake_deadzone_;
  double throttle_deadzone_;
  double speed_controller_input_limit_;
  double station_error_limit_;
  double preview_window_;
  double standstill_acceleration_;
  ::apollo::control::PidConf* station_pid_conf_;
  ::apollo::control::PidConf* low_speed_pid_conf_;
  ::apollo::control::PidConf* high_speed_pid_conf_;
  double switch_speed_;
  ::apollo::control::FilterConf* throttle_filter_conf_;
  ::apollo::control::FilterConf* brake_filter_conf_;
  ::apollo::control::FilterConf* acceleration_filter_conf_;
  ::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto();

  void InitAsDefaultInstance();
  static LonControllerConf* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PidConf

// optional bool integrator_enable = 1;
inline void PidConf::clear_integrator_enable() {
  integrator_enable_ = false;
}
inline bool PidConf::integrator_enable() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.integrator_enable)
  return integrator_enable_;
}
inline void PidConf::set_integrator_enable(bool value) {
  
  integrator_enable_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.integrator_enable)
}

// optional double integrator_saturation_level = 2;
inline void PidConf::clear_integrator_saturation_level() {
  integrator_saturation_level_ = 0;
}
inline double PidConf::integrator_saturation_level() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.integrator_saturation_level)
  return integrator_saturation_level_;
}
inline void PidConf::set_integrator_saturation_level(double value) {
  
  integrator_saturation_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.integrator_saturation_level)
}

// optional double kp = 3;
inline void PidConf::clear_kp() {
  kp_ = 0;
}
inline double PidConf::kp() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.kp)
  return kp_;
}
inline void PidConf::set_kp(double value) {
  
  kp_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.kp)
}

// optional double ki = 4;
inline void PidConf::clear_ki() {
  ki_ = 0;
}
inline double PidConf::ki() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.ki)
  return ki_;
}
inline void PidConf::set_ki(double value) {
  
  ki_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.ki)
}

// optional double kd = 5;
inline void PidConf::clear_kd() {
  kd_ = 0;
}
inline double PidConf::kd() const {
  // @@protoc_insertion_point(field_get:apollo.control.PidConf.kd)
  return kd_;
}
inline void PidConf::set_kd(double value) {
  
  kd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.PidConf.kd)
}

// -------------------------------------------------------------------

// FilterConf

// optional int32 cutoff_freq = 1;
inline void FilterConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
}
inline ::google::protobuf::int32 FilterConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:apollo.control.FilterConf.cutoff_freq)
  return cutoff_freq_;
}
inline void FilterConf::set_cutoff_freq(::google::protobuf::int32 value) {
  
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.FilterConf.cutoff_freq)
}

// -------------------------------------------------------------------

// LonControllerConf

// optional double ts = 1;
inline void LonControllerConf::clear_ts() {
  ts_ = 0;
}
inline double LonControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.ts)
  return ts_;
}
inline void LonControllerConf::set_ts(double value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.ts)
}

// optional double brake_deadzone = 2;
inline void LonControllerConf::clear_brake_deadzone() {
  brake_deadzone_ = 0;
}
inline double LonControllerConf::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.brake_deadzone)
  return brake_deadzone_;
}
inline void LonControllerConf::set_brake_deadzone(double value) {
  
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.brake_deadzone)
}

// optional double throttle_deadzone = 3;
inline void LonControllerConf::clear_throttle_deadzone() {
  throttle_deadzone_ = 0;
}
inline double LonControllerConf::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.throttle_deadzone)
  return throttle_deadzone_;
}
inline void LonControllerConf::set_throttle_deadzone(double value) {
  
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.throttle_deadzone)
}

// optional double speed_controller_input_limit = 4;
inline void LonControllerConf::clear_speed_controller_input_limit() {
  speed_controller_input_limit_ = 0;
}
inline double LonControllerConf::speed_controller_input_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.speed_controller_input_limit)
  return speed_controller_input_limit_;
}
inline void LonControllerConf::set_speed_controller_input_limit(double value) {
  
  speed_controller_input_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.speed_controller_input_limit)
}

// optional double station_error_limit = 5;
inline void LonControllerConf::clear_station_error_limit() {
  station_error_limit_ = 0;
}
inline double LonControllerConf::station_error_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_error_limit)
  return station_error_limit_;
}
inline void LonControllerConf::set_station_error_limit(double value) {
  
  station_error_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.station_error_limit)
}

// optional double preview_window = 6;
inline void LonControllerConf::clear_preview_window() {
  preview_window_ = 0;
}
inline double LonControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.preview_window)
  return preview_window_;
}
inline void LonControllerConf::set_preview_window(double value) {
  
  preview_window_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.preview_window)
}

// optional double standstill_acceleration = 7;
inline void LonControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
}
inline double LonControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.standstill_acceleration)
  return standstill_acceleration_;
}
inline void LonControllerConf::set_standstill_acceleration(double value) {
  
  standstill_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.standstill_acceleration)
}

// optional .apollo.control.PidConf station_pid_conf = 8;
inline bool LonControllerConf::has_station_pid_conf() const {
  return !_is_default_instance_ && station_pid_conf_ != NULL;
}
inline void LonControllerConf::clear_station_pid_conf() {
  if (GetArenaNoVirtual() == NULL && station_pid_conf_ != NULL) delete station_pid_conf_;
  station_pid_conf_ = NULL;
}
inline const ::apollo::control::PidConf& LonControllerConf::station_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_pid_conf)
  return station_pid_conf_ != NULL ? *station_pid_conf_ : *default_instance_->station_pid_conf_;
}
inline ::apollo::control::PidConf* LonControllerConf::mutable_station_pid_conf() {
  
  if (station_pid_conf_ == NULL) {
    station_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.station_pid_conf)
  return station_pid_conf_;
}
inline ::apollo::control::PidConf* LonControllerConf::release_station_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.station_pid_conf)
  
  ::apollo::control::PidConf* temp = station_pid_conf_;
  station_pid_conf_ = NULL;
  return temp;
}
inline void LonControllerConf::set_allocated_station_pid_conf(::apollo::control::PidConf* station_pid_conf) {
  delete station_pid_conf_;
  station_pid_conf_ = station_pid_conf;
  if (station_pid_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.station_pid_conf)
}

// optional .apollo.control.PidConf low_speed_pid_conf = 9;
inline bool LonControllerConf::has_low_speed_pid_conf() const {
  return !_is_default_instance_ && low_speed_pid_conf_ != NULL;
}
inline void LonControllerConf::clear_low_speed_pid_conf() {
  if (GetArenaNoVirtual() == NULL && low_speed_pid_conf_ != NULL) delete low_speed_pid_conf_;
  low_speed_pid_conf_ = NULL;
}
inline const ::apollo::control::PidConf& LonControllerConf::low_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.low_speed_pid_conf)
  return low_speed_pid_conf_ != NULL ? *low_speed_pid_conf_ : *default_instance_->low_speed_pid_conf_;
}
inline ::apollo::control::PidConf* LonControllerConf::mutable_low_speed_pid_conf() {
  
  if (low_speed_pid_conf_ == NULL) {
    low_speed_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.low_speed_pid_conf)
  return low_speed_pid_conf_;
}
inline ::apollo::control::PidConf* LonControllerConf::release_low_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.low_speed_pid_conf)
  
  ::apollo::control::PidConf* temp = low_speed_pid_conf_;
  low_speed_pid_conf_ = NULL;
  return temp;
}
inline void LonControllerConf::set_allocated_low_speed_pid_conf(::apollo::control::PidConf* low_speed_pid_conf) {
  delete low_speed_pid_conf_;
  low_speed_pid_conf_ = low_speed_pid_conf;
  if (low_speed_pid_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.low_speed_pid_conf)
}

// optional .apollo.control.PidConf high_speed_pid_conf = 10;
inline bool LonControllerConf::has_high_speed_pid_conf() const {
  return !_is_default_instance_ && high_speed_pid_conf_ != NULL;
}
inline void LonControllerConf::clear_high_speed_pid_conf() {
  if (GetArenaNoVirtual() == NULL && high_speed_pid_conf_ != NULL) delete high_speed_pid_conf_;
  high_speed_pid_conf_ = NULL;
}
inline const ::apollo::control::PidConf& LonControllerConf::high_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.high_speed_pid_conf)
  return high_speed_pid_conf_ != NULL ? *high_speed_pid_conf_ : *default_instance_->high_speed_pid_conf_;
}
inline ::apollo::control::PidConf* LonControllerConf::mutable_high_speed_pid_conf() {
  
  if (high_speed_pid_conf_ == NULL) {
    high_speed_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.high_speed_pid_conf)
  return high_speed_pid_conf_;
}
inline ::apollo::control::PidConf* LonControllerConf::release_high_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.high_speed_pid_conf)
  
  ::apollo::control::PidConf* temp = high_speed_pid_conf_;
  high_speed_pid_conf_ = NULL;
  return temp;
}
inline void LonControllerConf::set_allocated_high_speed_pid_conf(::apollo::control::PidConf* high_speed_pid_conf) {
  delete high_speed_pid_conf_;
  high_speed_pid_conf_ = high_speed_pid_conf;
  if (high_speed_pid_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.high_speed_pid_conf)
}

// optional double switch_speed = 11;
inline void LonControllerConf::clear_switch_speed() {
  switch_speed_ = 0;
}
inline double LonControllerConf::switch_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.switch_speed)
  return switch_speed_;
}
inline void LonControllerConf::set_switch_speed(double value) {
  
  switch_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.switch_speed)
}

// optional .apollo.control.FilterConf throttle_filter_conf = 12;
inline bool LonControllerConf::has_throttle_filter_conf() const {
  return !_is_default_instance_ && throttle_filter_conf_ != NULL;
}
inline void LonControllerConf::clear_throttle_filter_conf() {
  if (GetArenaNoVirtual() == NULL && throttle_filter_conf_ != NULL) delete throttle_filter_conf_;
  throttle_filter_conf_ = NULL;
}
inline const ::apollo::control::FilterConf& LonControllerConf::throttle_filter_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.throttle_filter_conf)
  return throttle_filter_conf_ != NULL ? *throttle_filter_conf_ : *default_instance_->throttle_filter_conf_;
}
inline ::apollo::control::FilterConf* LonControllerConf::mutable_throttle_filter_conf() {
  
  if (throttle_filter_conf_ == NULL) {
    throttle_filter_conf_ = new ::apollo::control::FilterConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.throttle_filter_conf)
  return throttle_filter_conf_;
}
inline ::apollo::control::FilterConf* LonControllerConf::release_throttle_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.throttle_filter_conf)
  
  ::apollo::control::FilterConf* temp = throttle_filter_conf_;
  throttle_filter_conf_ = NULL;
  return temp;
}
inline void LonControllerConf::set_allocated_throttle_filter_conf(::apollo::control::FilterConf* throttle_filter_conf) {
  delete throttle_filter_conf_;
  throttle_filter_conf_ = throttle_filter_conf;
  if (throttle_filter_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.throttle_filter_conf)
}

// optional .apollo.control.FilterConf brake_filter_conf = 13;
inline bool LonControllerConf::has_brake_filter_conf() const {
  return !_is_default_instance_ && brake_filter_conf_ != NULL;
}
inline void LonControllerConf::clear_brake_filter_conf() {
  if (GetArenaNoVirtual() == NULL && brake_filter_conf_ != NULL) delete brake_filter_conf_;
  brake_filter_conf_ = NULL;
}
inline const ::apollo::control::FilterConf& LonControllerConf::brake_filter_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.brake_filter_conf)
  return brake_filter_conf_ != NULL ? *brake_filter_conf_ : *default_instance_->brake_filter_conf_;
}
inline ::apollo::control::FilterConf* LonControllerConf::mutable_brake_filter_conf() {
  
  if (brake_filter_conf_ == NULL) {
    brake_filter_conf_ = new ::apollo::control::FilterConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.brake_filter_conf)
  return brake_filter_conf_;
}
inline ::apollo::control::FilterConf* LonControllerConf::release_brake_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.brake_filter_conf)
  
  ::apollo::control::FilterConf* temp = brake_filter_conf_;
  brake_filter_conf_ = NULL;
  return temp;
}
inline void LonControllerConf::set_allocated_brake_filter_conf(::apollo::control::FilterConf* brake_filter_conf) {
  delete brake_filter_conf_;
  brake_filter_conf_ = brake_filter_conf;
  if (brake_filter_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.brake_filter_conf)
}

// optional .apollo.control.FilterConf acceleration_filter_conf = 14;
inline bool LonControllerConf::has_acceleration_filter_conf() const {
  return !_is_default_instance_ && acceleration_filter_conf_ != NULL;
}
inline void LonControllerConf::clear_acceleration_filter_conf() {
  if (GetArenaNoVirtual() == NULL && acceleration_filter_conf_ != NULL) delete acceleration_filter_conf_;
  acceleration_filter_conf_ = NULL;
}
inline const ::apollo::control::FilterConf& LonControllerConf::acceleration_filter_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.acceleration_filter_conf)
  return acceleration_filter_conf_ != NULL ? *acceleration_filter_conf_ : *default_instance_->acceleration_filter_conf_;
}
inline ::apollo::control::FilterConf* LonControllerConf::mutable_acceleration_filter_conf() {
  
  if (acceleration_filter_conf_ == NULL) {
    acceleration_filter_conf_ = new ::apollo::control::FilterConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.acceleration_filter_conf)
  return acceleration_filter_conf_;
}
inline ::apollo::control::FilterConf* LonControllerConf::release_acceleration_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.acceleration_filter_conf)
  
  ::apollo::control::FilterConf* temp = acceleration_filter_conf_;
  acceleration_filter_conf_ = NULL;
  return temp;
}
inline void LonControllerConf::set_allocated_acceleration_filter_conf(::apollo::control::FilterConf* acceleration_filter_conf) {
  delete acceleration_filter_conf_;
  acceleration_filter_conf_ = acceleration_filter_conf;
  if (acceleration_filter_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.acceleration_filter_conf)
}

// optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 15;
inline bool LonControllerConf::has_calibration_table() const {
  return !_is_default_instance_ && calibration_table_ != NULL;
}
inline void LonControllerConf::clear_calibration_table() {
  if (GetArenaNoVirtual() == NULL && calibration_table_ != NULL) delete calibration_table_;
  calibration_table_ = NULL;
}
inline const ::apollo::control::calibrationtable::ControlCalibrationTable& LonControllerConf::calibration_table() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.calibration_table)
  return calibration_table_ != NULL ? *calibration_table_ : *default_instance_->calibration_table_;
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::mutable_calibration_table() {
  
  if (calibration_table_ == NULL) {
    calibration_table_ = new ::apollo::control::calibrationtable::ControlCalibrationTable;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.calibration_table)
  return calibration_table_;
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::release_calibration_table() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.calibration_table)
  
  ::apollo::control::calibrationtable::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = NULL;
  return temp;
}
inline void LonControllerConf::set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  delete calibration_table_;
  calibration_table_ = calibration_table;
  if (calibration_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.calibration_table)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_apollo_5fmsgs_2fproto_2fcontrol_2flon_5fcontroller_5fconf_2eproto__INCLUDED
