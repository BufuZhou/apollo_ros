// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/control/control_cmd.proto

#ifndef PROTOBUF_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto__INCLUDED
#define PROTOBUF_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "apollo_msgs/proto/canbus/chassis.pb.h"
#include "apollo_msgs/proto/common/header.pb.h"
#include "apollo_msgs/proto/control/pad_msg.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();

class ControlCommand;
class Debug;
class InputDebug;
class LatencyStats;
class SimpleLateralDebug;
class SimpleLongitudinalDebug;

enum TurnSignal {
  TURN_NONE = 0,
  TURN_LEFT = 1,
  TURN_RIGHT = 2,
  TurnSignal_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TurnSignal_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TurnSignal_IsValid(int value);
const TurnSignal TurnSignal_MIN = TURN_NONE;
const TurnSignal TurnSignal_MAX = TURN_RIGHT;
const int TurnSignal_ARRAYSIZE = TurnSignal_MAX + 1;

const ::google::protobuf::EnumDescriptor* TurnSignal_descriptor();
inline const ::std::string& TurnSignal_Name(TurnSignal value) {
  return ::google::protobuf::internal::NameOfEnum(
    TurnSignal_descriptor(), value);
}
inline bool TurnSignal_Parse(
    const ::std::string& name, TurnSignal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TurnSignal>(
    TurnSignal_descriptor(), name, value);
}
// ===================================================================

class LatencyStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.LatencyStats) */ {
 public:
  LatencyStats();
  virtual ~LatencyStats();

  LatencyStats(const LatencyStats& from);

  inline LatencyStats& operator=(const LatencyStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyStats& default_instance();

  void Swap(LatencyStats* other);

  // implements Message ----------------------------------------------

  inline LatencyStats* New() const { return New(NULL); }

  LatencyStats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LatencyStats& from);
  void MergeFrom(const LatencyStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LatencyStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double total_time_ms = 1;
  void clear_total_time_ms();
  static const int kTotalTimeMsFieldNumber = 1;
  double total_time_ms() const;
  void set_total_time_ms(double value);

  // repeated double controller_time_ms = 2;
  int controller_time_ms_size() const;
  void clear_controller_time_ms();
  static const int kControllerTimeMsFieldNumber = 2;
  double controller_time_ms(int index) const;
  void set_controller_time_ms(int index, double value);
  void add_controller_time_ms(double value);
  const ::google::protobuf::RepeatedField< double >&
      controller_time_ms() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_controller_time_ms();

  // @@protoc_insertion_point(class_scope:apollo.control.LatencyStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double total_time_ms_;
  ::google::protobuf::RepeatedField< double > controller_time_ms_;
  mutable int _controller_time_ms_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();

  void InitAsDefaultInstance();
  static LatencyStats* default_instance_;
};
// -------------------------------------------------------------------

class ControlCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.ControlCommand) */ {
 public:
  ControlCommand();
  virtual ~ControlCommand();

  ControlCommand(const ControlCommand& from);

  inline ControlCommand& operator=(const ControlCommand& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCommand& default_instance();

  void Swap(ControlCommand* other);

  // implements Message ----------------------------------------------

  inline ControlCommand* New() const { return New(NULL); }

  ControlCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlCommand& from);
  void MergeFrom(const ControlCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControlCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional double throttle = 3;
  void clear_throttle();
  static const int kThrottleFieldNumber = 3;
  double throttle() const;
  void set_throttle(double value);

  // optional double brake = 4;
  void clear_brake();
  static const int kBrakeFieldNumber = 4;
  double brake() const;
  void set_brake(double value);

  // optional double steering_rate = 6;
  void clear_steering_rate();
  static const int kSteeringRateFieldNumber = 6;
  double steering_rate() const;
  void set_steering_rate(double value);

  // optional double steering_target = 7;
  void clear_steering_target();
  static const int kSteeringTargetFieldNumber = 7;
  double steering_target() const;
  void set_steering_target(double value);

  // optional bool parking_brake = 8;
  void clear_parking_brake();
  static const int kParkingBrakeFieldNumber = 8;
  bool parking_brake() const;
  void set_parking_brake(bool value);

  // optional double speed = 9;
  void clear_speed();
  static const int kSpeedFieldNumber = 9;
  double speed() const;
  void set_speed(double value);

  // optional double acceleration = 10;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 10;
  double acceleration() const;
  void set_acceleration(double value);

  // optional bool reset_model = 16;
  void clear_reset_model();
  static const int kResetModelFieldNumber = 16;
  bool reset_model() const;
  void set_reset_model(bool value);

  // optional bool engine_on_off = 17;
  void clear_engine_on_off();
  static const int kEngineOnOffFieldNumber = 17;
  bool engine_on_off() const;
  void set_engine_on_off(bool value);

  // optional double trajectory_fraction = 18;
  void clear_trajectory_fraction();
  static const int kTrajectoryFractionFieldNumber = 18;
  double trajectory_fraction() const;
  void set_trajectory_fraction(double value);

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 19;
  ::apollo::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
  void clear_gear_location();
  static const int kGearLocationFieldNumber = 20;
  ::apollo::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::apollo::canbus::Chassis_GearPosition value);

  // optional .apollo.control.Debug debug = 22;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 22;
  const ::apollo::control::Debug& debug() const;
  ::apollo::control::Debug* mutable_debug();
  ::apollo::control::Debug* release_debug();
  void set_allocated_debug(::apollo::control::Debug* debug);

  // optional .apollo.canbus.Signal signal = 23;
  bool has_signal() const;
  void clear_signal();
  static const int kSignalFieldNumber = 23;
  const ::apollo::canbus::Signal& signal() const;
  ::apollo::canbus::Signal* mutable_signal();
  ::apollo::canbus::Signal* release_signal();
  void set_allocated_signal(::apollo::canbus::Signal* signal);

  // optional .apollo.control.LatencyStats latency_stats = 24;
  bool has_latency_stats() const;
  void clear_latency_stats();
  static const int kLatencyStatsFieldNumber = 24;
  const ::apollo::control::LatencyStats& latency_stats() const;
  ::apollo::control::LatencyStats* mutable_latency_stats();
  ::apollo::control::LatencyStats* release_latency_stats();
  void set_allocated_latency_stats(::apollo::control::LatencyStats* latency_stats);

  // optional .apollo.control.PadMessage pad_msg = 25;
  bool has_pad_msg() const;
  void clear_pad_msg();
  static const int kPadMsgFieldNumber = 25;
  const ::apollo::control::PadMessage& pad_msg() const;
  ::apollo::control::PadMessage* mutable_pad_msg();
  ::apollo::control::PadMessage* release_pad_msg();
  void set_allocated_pad_msg(::apollo::control::PadMessage* pad_msg);

  // optional bool left_turn = 13;
  void clear_left_turn();
  static const int kLeftTurnFieldNumber = 13;
  bool left_turn() const;
  void set_left_turn(bool value);

  // optional bool right_turn = 14;
  void clear_right_turn();
  static const int kRightTurnFieldNumber = 14;
  bool right_turn() const;
  void set_right_turn(bool value);

  // optional bool high_beam = 11;
  void clear_high_beam();
  static const int kHighBeamFieldNumber = 11;
  bool high_beam() const;
  void set_high_beam(bool value);

  // optional bool low_beam = 12;
  void clear_low_beam();
  static const int kLowBeamFieldNumber = 12;
  bool low_beam() const;
  void set_low_beam(bool value);

  // optional bool horn = 15;
  void clear_horn();
  static const int kHornFieldNumber = 15;
  bool horn() const;
  void set_horn(bool value);

  // optional .apollo.control.TurnSignal turnsignal = 21;
  void clear_turnsignal();
  static const int kTurnsignalFieldNumber = 21;
  ::apollo::control::TurnSignal turnsignal() const;
  void set_turnsignal(::apollo::control::TurnSignal value);

  // @@protoc_insertion_point(class_scope:apollo.control.ControlCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::common::Header* header_;
  double throttle_;
  double brake_;
  double steering_rate_;
  double steering_target_;
  double speed_;
  double acceleration_;
  double trajectory_fraction_;
  bool parking_brake_;
  bool reset_model_;
  bool engine_on_off_;
  bool left_turn_;
  int driving_mode_;
  ::apollo::control::Debug* debug_;
  ::apollo::canbus::Signal* signal_;
  ::apollo::control::LatencyStats* latency_stats_;
  ::apollo::control::PadMessage* pad_msg_;
  int gear_location_;
  bool right_turn_;
  bool high_beam_;
  bool low_beam_;
  bool horn_;
  int turnsignal_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();

  void InitAsDefaultInstance();
  static ControlCommand* default_instance_;
};
// -------------------------------------------------------------------

class SimpleLongitudinalDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.SimpleLongitudinalDebug) */ {
 public:
  SimpleLongitudinalDebug();
  virtual ~SimpleLongitudinalDebug();

  SimpleLongitudinalDebug(const SimpleLongitudinalDebug& from);

  inline SimpleLongitudinalDebug& operator=(const SimpleLongitudinalDebug& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleLongitudinalDebug& default_instance();

  void Swap(SimpleLongitudinalDebug* other);

  // implements Message ----------------------------------------------

  inline SimpleLongitudinalDebug* New() const { return New(NULL); }

  SimpleLongitudinalDebug* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleLongitudinalDebug& from);
  void MergeFrom(const SimpleLongitudinalDebug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimpleLongitudinalDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double station_reference = 1;
  void clear_station_reference();
  static const int kStationReferenceFieldNumber = 1;
  double station_reference() const;
  void set_station_reference(double value);

  // optional double station_error = 2;
  void clear_station_error();
  static const int kStationErrorFieldNumber = 2;
  double station_error() const;
  void set_station_error(double value);

  // optional double station_error_limited = 3;
  void clear_station_error_limited();
  static const int kStationErrorLimitedFieldNumber = 3;
  double station_error_limited() const;
  void set_station_error_limited(double value);

  // optional double preview_station_error = 4;
  void clear_preview_station_error();
  static const int kPreviewStationErrorFieldNumber = 4;
  double preview_station_error() const;
  void set_preview_station_error(double value);

  // optional double speed_reference = 5;
  void clear_speed_reference();
  static const int kSpeedReferenceFieldNumber = 5;
  double speed_reference() const;
  void set_speed_reference(double value);

  // optional double speed_error = 6;
  void clear_speed_error();
  static const int kSpeedErrorFieldNumber = 6;
  double speed_error() const;
  void set_speed_error(double value);

  // optional double speed_controller_input_limited = 7;
  void clear_speed_controller_input_limited();
  static const int kSpeedControllerInputLimitedFieldNumber = 7;
  double speed_controller_input_limited() const;
  void set_speed_controller_input_limited(double value);

  // optional double preview_speed_reference = 8;
  void clear_preview_speed_reference();
  static const int kPreviewSpeedReferenceFieldNumber = 8;
  double preview_speed_reference() const;
  void set_preview_speed_reference(double value);

  // optional double preview_speed_error = 9;
  void clear_preview_speed_error();
  static const int kPreviewSpeedErrorFieldNumber = 9;
  double preview_speed_error() const;
  void set_preview_speed_error(double value);

  // optional double preview_acceleration_reference = 10;
  void clear_preview_acceleration_reference();
  static const int kPreviewAccelerationReferenceFieldNumber = 10;
  double preview_acceleration_reference() const;
  void set_preview_acceleration_reference(double value);

  // optional double acceleration_cmd_closeloop = 11;
  void clear_acceleration_cmd_closeloop();
  static const int kAccelerationCmdCloseloopFieldNumber = 11;
  double acceleration_cmd_closeloop() const;
  void set_acceleration_cmd_closeloop(double value);

  // optional double acceleration_cmd = 12;
  void clear_acceleration_cmd();
  static const int kAccelerationCmdFieldNumber = 12;
  double acceleration_cmd() const;
  void set_acceleration_cmd(double value);

  // optional double acceleration_lookup = 13;
  void clear_acceleration_lookup();
  static const int kAccelerationLookupFieldNumber = 13;
  double acceleration_lookup() const;
  void set_acceleration_lookup(double value);

  // optional double speed_lookup = 14;
  void clear_speed_lookup();
  static const int kSpeedLookupFieldNumber = 14;
  double speed_lookup() const;
  void set_speed_lookup(double value);

  // optional double calibration_value = 15;
  void clear_calibration_value();
  static const int kCalibrationValueFieldNumber = 15;
  double calibration_value() const;
  void set_calibration_value(double value);

  // optional double throttle_cmd = 16;
  void clear_throttle_cmd();
  static const int kThrottleCmdFieldNumber = 16;
  double throttle_cmd() const;
  void set_throttle_cmd(double value);

  // optional double brake_cmd = 17;
  void clear_brake_cmd();
  static const int kBrakeCmdFieldNumber = 17;
  double brake_cmd() const;
  void set_brake_cmd(double value);

  // optional bool is_full_stop = 18;
  void clear_is_full_stop();
  static const int kIsFullStopFieldNumber = 18;
  bool is_full_stop() const;
  void set_is_full_stop(bool value);

  // @@protoc_insertion_point(class_scope:apollo.control.SimpleLongitudinalDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double station_reference_;
  double station_error_;
  double station_error_limited_;
  double preview_station_error_;
  double speed_reference_;
  double speed_error_;
  double speed_controller_input_limited_;
  double preview_speed_reference_;
  double preview_speed_error_;
  double preview_acceleration_reference_;
  double acceleration_cmd_closeloop_;
  double acceleration_cmd_;
  double acceleration_lookup_;
  double speed_lookup_;
  double calibration_value_;
  double throttle_cmd_;
  double brake_cmd_;
  bool is_full_stop_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();

  void InitAsDefaultInstance();
  static SimpleLongitudinalDebug* default_instance_;
};
// -------------------------------------------------------------------

class SimpleLateralDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.SimpleLateralDebug) */ {
 public:
  SimpleLateralDebug();
  virtual ~SimpleLateralDebug();

  SimpleLateralDebug(const SimpleLateralDebug& from);

  inline SimpleLateralDebug& operator=(const SimpleLateralDebug& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleLateralDebug& default_instance();

  void Swap(SimpleLateralDebug* other);

  // implements Message ----------------------------------------------

  inline SimpleLateralDebug* New() const { return New(NULL); }

  SimpleLateralDebug* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleLateralDebug& from);
  void MergeFrom(const SimpleLateralDebug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimpleLateralDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double lateral_error = 1;
  void clear_lateral_error();
  static const int kLateralErrorFieldNumber = 1;
  double lateral_error() const;
  void set_lateral_error(double value);

  // optional double ref_heading = 2;
  void clear_ref_heading();
  static const int kRefHeadingFieldNumber = 2;
  double ref_heading() const;
  void set_ref_heading(double value);

  // optional double heading = 3;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  double heading() const;
  void set_heading(double value);

  // optional double heading_error = 4;
  void clear_heading_error();
  static const int kHeadingErrorFieldNumber = 4;
  double heading_error() const;
  void set_heading_error(double value);

  // optional double heading_error_rate = 5;
  void clear_heading_error_rate();
  static const int kHeadingErrorRateFieldNumber = 5;
  double heading_error_rate() const;
  void set_heading_error_rate(double value);

  // optional double lateral_error_rate = 6;
  void clear_lateral_error_rate();
  static const int kLateralErrorRateFieldNumber = 6;
  double lateral_error_rate() const;
  void set_lateral_error_rate(double value);

  // optional double curvature = 7;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 7;
  double curvature() const;
  void set_curvature(double value);

  // optional double steer_angle = 8;
  void clear_steer_angle();
  static const int kSteerAngleFieldNumber = 8;
  double steer_angle() const;
  void set_steer_angle(double value);

  // optional double steer_angle_feedforward = 9;
  void clear_steer_angle_feedforward();
  static const int kSteerAngleFeedforwardFieldNumber = 9;
  double steer_angle_feedforward() const;
  void set_steer_angle_feedforward(double value);

  // optional double steer_angle_lateral_contribution = 10;
  void clear_steer_angle_lateral_contribution();
  static const int kSteerAngleLateralContributionFieldNumber = 10;
  double steer_angle_lateral_contribution() const;
  void set_steer_angle_lateral_contribution(double value);

  // optional double steer_angle_lateral_rate_contribution = 11;
  void clear_steer_angle_lateral_rate_contribution();
  static const int kSteerAngleLateralRateContributionFieldNumber = 11;
  double steer_angle_lateral_rate_contribution() const;
  void set_steer_angle_lateral_rate_contribution(double value);

  // optional double steer_angle_heading_contribution = 12;
  void clear_steer_angle_heading_contribution();
  static const int kSteerAngleHeadingContributionFieldNumber = 12;
  double steer_angle_heading_contribution() const;
  void set_steer_angle_heading_contribution(double value);

  // optional double steer_angle_heading_rate_contribution = 13;
  void clear_steer_angle_heading_rate_contribution();
  static const int kSteerAngleHeadingRateContributionFieldNumber = 13;
  double steer_angle_heading_rate_contribution() const;
  void set_steer_angle_heading_rate_contribution(double value);

  // optional double steer_angle_feedback = 14;
  void clear_steer_angle_feedback();
  static const int kSteerAngleFeedbackFieldNumber = 14;
  double steer_angle_feedback() const;
  void set_steer_angle_feedback(double value);

  // optional double steering_position = 15;
  void clear_steering_position();
  static const int kSteeringPositionFieldNumber = 15;
  double steering_position() const;
  void set_steering_position(double value);

  // optional double ref_speed = 16;
  void clear_ref_speed();
  static const int kRefSpeedFieldNumber = 16;
  double ref_speed() const;
  void set_ref_speed(double value);

  // @@protoc_insertion_point(class_scope:apollo.control.SimpleLateralDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double lateral_error_;
  double ref_heading_;
  double heading_;
  double heading_error_;
  double heading_error_rate_;
  double lateral_error_rate_;
  double curvature_;
  double steer_angle_;
  double steer_angle_feedforward_;
  double steer_angle_lateral_contribution_;
  double steer_angle_lateral_rate_contribution_;
  double steer_angle_heading_contribution_;
  double steer_angle_heading_rate_contribution_;
  double steer_angle_feedback_;
  double steering_position_;
  double ref_speed_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();

  void InitAsDefaultInstance();
  static SimpleLateralDebug* default_instance_;
};
// -------------------------------------------------------------------

class InputDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.InputDebug) */ {
 public:
  InputDebug();
  virtual ~InputDebug();

  InputDebug(const InputDebug& from);

  inline InputDebug& operator=(const InputDebug& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputDebug& default_instance();

  void Swap(InputDebug* other);

  // implements Message ----------------------------------------------

  inline InputDebug* New() const { return New(NULL); }

  InputDebug* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputDebug& from);
  void MergeFrom(const InputDebug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header localization_header = 1;
  bool has_localization_header() const;
  void clear_localization_header();
  static const int kLocalizationHeaderFieldNumber = 1;
  const ::apollo::common::Header& localization_header() const;
  ::apollo::common::Header* mutable_localization_header();
  ::apollo::common::Header* release_localization_header();
  void set_allocated_localization_header(::apollo::common::Header* localization_header);

  // optional .apollo.common.Header canbus_header = 2;
  bool has_canbus_header() const;
  void clear_canbus_header();
  static const int kCanbusHeaderFieldNumber = 2;
  const ::apollo::common::Header& canbus_header() const;
  ::apollo::common::Header* mutable_canbus_header();
  ::apollo::common::Header* release_canbus_header();
  void set_allocated_canbus_header(::apollo::common::Header* canbus_header);

  // optional .apollo.common.Header trajectory_header = 3;
  bool has_trajectory_header() const;
  void clear_trajectory_header();
  static const int kTrajectoryHeaderFieldNumber = 3;
  const ::apollo::common::Header& trajectory_header() const;
  ::apollo::common::Header* mutable_trajectory_header();
  ::apollo::common::Header* release_trajectory_header();
  void set_allocated_trajectory_header(::apollo::common::Header* trajectory_header);

  // @@protoc_insertion_point(class_scope:apollo.control.InputDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::common::Header* localization_header_;
  ::apollo::common::Header* canbus_header_;
  ::apollo::common::Header* trajectory_header_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();

  void InitAsDefaultInstance();
  static InputDebug* default_instance_;
};
// -------------------------------------------------------------------

class Debug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.Debug) */ {
 public:
  Debug();
  virtual ~Debug();

  Debug(const Debug& from);

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug& default_instance();

  void Swap(Debug* other);

  // implements Message ----------------------------------------------

  inline Debug* New() const { return New(NULL); }

  Debug* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug& from);
  void MergeFrom(const Debug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Debug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  bool has_simple_lon_debug() const;
  void clear_simple_lon_debug();
  static const int kSimpleLonDebugFieldNumber = 1;
  const ::apollo::control::SimpleLongitudinalDebug& simple_lon_debug() const;
  ::apollo::control::SimpleLongitudinalDebug* mutable_simple_lon_debug();
  ::apollo::control::SimpleLongitudinalDebug* release_simple_lon_debug();
  void set_allocated_simple_lon_debug(::apollo::control::SimpleLongitudinalDebug* simple_lon_debug);

  // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
  bool has_simple_lat_debug() const;
  void clear_simple_lat_debug();
  static const int kSimpleLatDebugFieldNumber = 2;
  const ::apollo::control::SimpleLateralDebug& simple_lat_debug() const;
  ::apollo::control::SimpleLateralDebug* mutable_simple_lat_debug();
  ::apollo::control::SimpleLateralDebug* release_simple_lat_debug();
  void set_allocated_simple_lat_debug(::apollo::control::SimpleLateralDebug* simple_lat_debug);

  // optional .apollo.control.InputDebug input_debug = 3;
  bool has_input_debug() const;
  void clear_input_debug();
  static const int kInputDebugFieldNumber = 3;
  const ::apollo::control::InputDebug& input_debug() const;
  ::apollo::control::InputDebug* mutable_input_debug();
  ::apollo::control::InputDebug* release_input_debug();
  void set_allocated_input_debug(::apollo::control::InputDebug* input_debug);

  // @@protoc_insertion_point(class_scope:apollo.control.Debug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::control::SimpleLongitudinalDebug* simple_lon_debug_;
  ::apollo::control::SimpleLateralDebug* simple_lat_debug_;
  ::apollo::control::InputDebug* input_debug_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto();

  void InitAsDefaultInstance();
  static Debug* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LatencyStats

// optional double total_time_ms = 1;
inline void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
}
inline double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatencyStats.total_time_ms)
  return total_time_ms_;
}
inline void LatencyStats::set_total_time_ms(double value) {
  
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatencyStats.total_time_ms)
}

// repeated double controller_time_ms = 2;
inline int LatencyStats::controller_time_ms_size() const {
  return controller_time_ms_.size();
}
inline void LatencyStats::clear_controller_time_ms() {
  controller_time_ms_.Clear();
}
inline double LatencyStats::controller_time_ms(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.LatencyStats.controller_time_ms)
  return controller_time_ms_.Get(index);
}
inline void LatencyStats::set_controller_time_ms(int index, double value) {
  controller_time_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.LatencyStats.controller_time_ms)
}
inline void LatencyStats::add_controller_time_ms(double value) {
  controller_time_ms_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.LatencyStats.controller_time_ms)
}
inline const ::google::protobuf::RepeatedField< double >&
LatencyStats::controller_time_ms() const {
  // @@protoc_insertion_point(field_list:apollo.control.LatencyStats.controller_time_ms)
  return controller_time_ms_;
}
inline ::google::protobuf::RepeatedField< double >*
LatencyStats::mutable_controller_time_ms() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.LatencyStats.controller_time_ms)
  return &controller_time_ms_;
}

// -------------------------------------------------------------------

// ControlCommand

// optional .apollo.common.Header header = 1;
inline bool ControlCommand::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void ControlCommand::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::apollo::common::Header& ControlCommand::header() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* ControlCommand::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.header)
  return header_;
}
inline ::apollo::common::Header* ControlCommand::release_header() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ControlCommand::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.header)
}

// optional double throttle = 3;
inline void ControlCommand::clear_throttle() {
  throttle_ = 0;
}
inline double ControlCommand::throttle() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.throttle)
  return throttle_;
}
inline void ControlCommand::set_throttle(double value) {
  
  throttle_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.throttle)
}

// optional double brake = 4;
inline void ControlCommand::clear_brake() {
  brake_ = 0;
}
inline double ControlCommand::brake() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.brake)
  return brake_;
}
inline void ControlCommand::set_brake(double value) {
  
  brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.brake)
}

// optional double steering_rate = 6;
inline void ControlCommand::clear_steering_rate() {
  steering_rate_ = 0;
}
inline double ControlCommand::steering_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.steering_rate)
  return steering_rate_;
}
inline void ControlCommand::set_steering_rate(double value) {
  
  steering_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.steering_rate)
}

// optional double steering_target = 7;
inline void ControlCommand::clear_steering_target() {
  steering_target_ = 0;
}
inline double ControlCommand::steering_target() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.steering_target)
  return steering_target_;
}
inline void ControlCommand::set_steering_target(double value) {
  
  steering_target_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.steering_target)
}

// optional bool parking_brake = 8;
inline void ControlCommand::clear_parking_brake() {
  parking_brake_ = false;
}
inline bool ControlCommand::parking_brake() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.parking_brake)
  return parking_brake_;
}
inline void ControlCommand::set_parking_brake(bool value) {
  
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.parking_brake)
}

// optional double speed = 9;
inline void ControlCommand::clear_speed() {
  speed_ = 0;
}
inline double ControlCommand::speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.speed)
  return speed_;
}
inline void ControlCommand::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.speed)
}

// optional double acceleration = 10;
inline void ControlCommand::clear_acceleration() {
  acceleration_ = 0;
}
inline double ControlCommand::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.acceleration)
  return acceleration_;
}
inline void ControlCommand::set_acceleration(double value) {
  
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.acceleration)
}

// optional bool reset_model = 16;
inline void ControlCommand::clear_reset_model() {
  reset_model_ = false;
}
inline bool ControlCommand::reset_model() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.reset_model)
  return reset_model_;
}
inline void ControlCommand::set_reset_model(bool value) {
  
  reset_model_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.reset_model)
}

// optional bool engine_on_off = 17;
inline void ControlCommand::clear_engine_on_off() {
  engine_on_off_ = false;
}
inline bool ControlCommand::engine_on_off() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.engine_on_off)
  return engine_on_off_;
}
inline void ControlCommand::set_engine_on_off(bool value) {
  
  engine_on_off_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.engine_on_off)
}

// optional double trajectory_fraction = 18;
inline void ControlCommand::clear_trajectory_fraction() {
  trajectory_fraction_ = 0;
}
inline double ControlCommand::trajectory_fraction() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.trajectory_fraction)
  return trajectory_fraction_;
}
inline void ControlCommand::set_trajectory_fraction(double value) {
  
  trajectory_fraction_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.trajectory_fraction)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19;
inline void ControlCommand::clear_driving_mode() {
  driving_mode_ = 0;
}
inline ::apollo::canbus::Chassis_DrivingMode ControlCommand::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void ControlCommand::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.driving_mode)
}

// optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
inline void ControlCommand::clear_gear_location() {
  gear_location_ = 0;
}
inline ::apollo::canbus::Chassis_GearPosition ControlCommand::gear_location() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.gear_location)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_location_);
}
inline void ControlCommand::set_gear_location(::apollo::canbus::Chassis_GearPosition value) {
  
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.gear_location)
}

// optional .apollo.control.Debug debug = 22;
inline bool ControlCommand::has_debug() const {
  return !_is_default_instance_ && debug_ != NULL;
}
inline void ControlCommand::clear_debug() {
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) delete debug_;
  debug_ = NULL;
}
inline const ::apollo::control::Debug& ControlCommand::debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.debug)
  return debug_ != NULL ? *debug_ : *default_instance_->debug_;
}
inline ::apollo::control::Debug* ControlCommand::mutable_debug() {
  
  if (debug_ == NULL) {
    debug_ = new ::apollo::control::Debug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.debug)
  return debug_;
}
inline ::apollo::control::Debug* ControlCommand::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.debug)
  
  ::apollo::control::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
inline void ControlCommand::set_allocated_debug(::apollo::control::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.debug)
}

// optional .apollo.canbus.Signal signal = 23;
inline bool ControlCommand::has_signal() const {
  return !_is_default_instance_ && signal_ != NULL;
}
inline void ControlCommand::clear_signal() {
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;
}
inline const ::apollo::canbus::Signal& ControlCommand::signal() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
inline ::apollo::canbus::Signal* ControlCommand::mutable_signal() {
  
  if (signal_ == NULL) {
    signal_ = new ::apollo::canbus::Signal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.signal)
  return signal_;
}
inline ::apollo::canbus::Signal* ControlCommand::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.signal)
  
  ::apollo::canbus::Signal* temp = signal_;
  signal_ = NULL;
  return temp;
}
inline void ControlCommand::set_allocated_signal(::apollo::canbus::Signal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.signal)
}

// optional .apollo.control.LatencyStats latency_stats = 24;
inline bool ControlCommand::has_latency_stats() const {
  return !_is_default_instance_ && latency_stats_ != NULL;
}
inline void ControlCommand::clear_latency_stats() {
  if (GetArenaNoVirtual() == NULL && latency_stats_ != NULL) delete latency_stats_;
  latency_stats_ = NULL;
}
inline const ::apollo::control::LatencyStats& ControlCommand::latency_stats() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.latency_stats)
  return latency_stats_ != NULL ? *latency_stats_ : *default_instance_->latency_stats_;
}
inline ::apollo::control::LatencyStats* ControlCommand::mutable_latency_stats() {
  
  if (latency_stats_ == NULL) {
    latency_stats_ = new ::apollo::control::LatencyStats;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.latency_stats)
  return latency_stats_;
}
inline ::apollo::control::LatencyStats* ControlCommand::release_latency_stats() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.latency_stats)
  
  ::apollo::control::LatencyStats* temp = latency_stats_;
  latency_stats_ = NULL;
  return temp;
}
inline void ControlCommand::set_allocated_latency_stats(::apollo::control::LatencyStats* latency_stats) {
  delete latency_stats_;
  latency_stats_ = latency_stats;
  if (latency_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.latency_stats)
}

// optional .apollo.control.PadMessage pad_msg = 25;
inline bool ControlCommand::has_pad_msg() const {
  return !_is_default_instance_ && pad_msg_ != NULL;
}
inline void ControlCommand::clear_pad_msg() {
  if (GetArenaNoVirtual() == NULL && pad_msg_ != NULL) delete pad_msg_;
  pad_msg_ = NULL;
}
inline const ::apollo::control::PadMessage& ControlCommand::pad_msg() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.pad_msg)
  return pad_msg_ != NULL ? *pad_msg_ : *default_instance_->pad_msg_;
}
inline ::apollo::control::PadMessage* ControlCommand::mutable_pad_msg() {
  
  if (pad_msg_ == NULL) {
    pad_msg_ = new ::apollo::control::PadMessage;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.pad_msg)
  return pad_msg_;
}
inline ::apollo::control::PadMessage* ControlCommand::release_pad_msg() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.pad_msg)
  
  ::apollo::control::PadMessage* temp = pad_msg_;
  pad_msg_ = NULL;
  return temp;
}
inline void ControlCommand::set_allocated_pad_msg(::apollo::control::PadMessage* pad_msg) {
  delete pad_msg_;
  pad_msg_ = pad_msg;
  if (pad_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.pad_msg)
}

// optional bool left_turn = 13;
inline void ControlCommand::clear_left_turn() {
  left_turn_ = false;
}
inline bool ControlCommand::left_turn() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.left_turn)
  return left_turn_;
}
inline void ControlCommand::set_left_turn(bool value) {
  
  left_turn_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.left_turn)
}

// optional bool right_turn = 14;
inline void ControlCommand::clear_right_turn() {
  right_turn_ = false;
}
inline bool ControlCommand::right_turn() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.right_turn)
  return right_turn_;
}
inline void ControlCommand::set_right_turn(bool value) {
  
  right_turn_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.right_turn)
}

// optional bool high_beam = 11;
inline void ControlCommand::clear_high_beam() {
  high_beam_ = false;
}
inline bool ControlCommand::high_beam() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.high_beam)
  return high_beam_;
}
inline void ControlCommand::set_high_beam(bool value) {
  
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.high_beam)
}

// optional bool low_beam = 12;
inline void ControlCommand::clear_low_beam() {
  low_beam_ = false;
}
inline bool ControlCommand::low_beam() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.low_beam)
  return low_beam_;
}
inline void ControlCommand::set_low_beam(bool value) {
  
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.low_beam)
}

// optional bool horn = 15;
inline void ControlCommand::clear_horn() {
  horn_ = false;
}
inline bool ControlCommand::horn() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.horn)
  return horn_;
}
inline void ControlCommand::set_horn(bool value) {
  
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.horn)
}

// optional .apollo.control.TurnSignal turnsignal = 21;
inline void ControlCommand::clear_turnsignal() {
  turnsignal_ = 0;
}
inline ::apollo::control::TurnSignal ControlCommand::turnsignal() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.turnsignal)
  return static_cast< ::apollo::control::TurnSignal >(turnsignal_);
}
inline void ControlCommand::set_turnsignal(::apollo::control::TurnSignal value) {
  
  turnsignal_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.turnsignal)
}

// -------------------------------------------------------------------

// SimpleLongitudinalDebug

// optional double station_reference = 1;
inline void SimpleLongitudinalDebug::clear_station_reference() {
  station_reference_ = 0;
}
inline double SimpleLongitudinalDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.station_reference)
  return station_reference_;
}
inline void SimpleLongitudinalDebug::set_station_reference(double value) {
  
  station_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.station_reference)
}

// optional double station_error = 2;
inline void SimpleLongitudinalDebug::clear_station_error() {
  station_error_ = 0;
}
inline double SimpleLongitudinalDebug::station_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.station_error)
  return station_error_;
}
inline void SimpleLongitudinalDebug::set_station_error(double value) {
  
  station_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.station_error)
}

// optional double station_error_limited = 3;
inline void SimpleLongitudinalDebug::clear_station_error_limited() {
  station_error_limited_ = 0;
}
inline double SimpleLongitudinalDebug::station_error_limited() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.station_error_limited)
  return station_error_limited_;
}
inline void SimpleLongitudinalDebug::set_station_error_limited(double value) {
  
  station_error_limited_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.station_error_limited)
}

// optional double preview_station_error = 4;
inline void SimpleLongitudinalDebug::clear_preview_station_error() {
  preview_station_error_ = 0;
}
inline double SimpleLongitudinalDebug::preview_station_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_station_error)
  return preview_station_error_;
}
inline void SimpleLongitudinalDebug::set_preview_station_error(double value) {
  
  preview_station_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_station_error)
}

// optional double speed_reference = 5;
inline void SimpleLongitudinalDebug::clear_speed_reference() {
  speed_reference_ = 0;
}
inline double SimpleLongitudinalDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_reference)
  return speed_reference_;
}
inline void SimpleLongitudinalDebug::set_speed_reference(double value) {
  
  speed_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_reference)
}

// optional double speed_error = 6;
inline void SimpleLongitudinalDebug::clear_speed_error() {
  speed_error_ = 0;
}
inline double SimpleLongitudinalDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_error)
  return speed_error_;
}
inline void SimpleLongitudinalDebug::set_speed_error(double value) {
  
  speed_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_error)
}

// optional double speed_controller_input_limited = 7;
inline void SimpleLongitudinalDebug::clear_speed_controller_input_limited() {
  speed_controller_input_limited_ = 0;
}
inline double SimpleLongitudinalDebug::speed_controller_input_limited() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_controller_input_limited)
  return speed_controller_input_limited_;
}
inline void SimpleLongitudinalDebug::set_speed_controller_input_limited(double value) {
  
  speed_controller_input_limited_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_controller_input_limited)
}

// optional double preview_speed_reference = 8;
inline void SimpleLongitudinalDebug::clear_preview_speed_reference() {
  preview_speed_reference_ = 0;
}
inline double SimpleLongitudinalDebug::preview_speed_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_speed_reference)
  return preview_speed_reference_;
}
inline void SimpleLongitudinalDebug::set_preview_speed_reference(double value) {
  
  preview_speed_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_speed_reference)
}

// optional double preview_speed_error = 9;
inline void SimpleLongitudinalDebug::clear_preview_speed_error() {
  preview_speed_error_ = 0;
}
inline double SimpleLongitudinalDebug::preview_speed_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_speed_error)
  return preview_speed_error_;
}
inline void SimpleLongitudinalDebug::set_preview_speed_error(double value) {
  
  preview_speed_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_speed_error)
}

// optional double preview_acceleration_reference = 10;
inline void SimpleLongitudinalDebug::clear_preview_acceleration_reference() {
  preview_acceleration_reference_ = 0;
}
inline double SimpleLongitudinalDebug::preview_acceleration_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_acceleration_reference)
  return preview_acceleration_reference_;
}
inline void SimpleLongitudinalDebug::set_preview_acceleration_reference(double value) {
  
  preview_acceleration_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_acceleration_reference)
}

// optional double acceleration_cmd_closeloop = 11;
inline void SimpleLongitudinalDebug::clear_acceleration_cmd_closeloop() {
  acceleration_cmd_closeloop_ = 0;
}
inline double SimpleLongitudinalDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.acceleration_cmd_closeloop)
  return acceleration_cmd_closeloop_;
}
inline void SimpleLongitudinalDebug::set_acceleration_cmd_closeloop(double value) {
  
  acceleration_cmd_closeloop_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.acceleration_cmd_closeloop)
}

// optional double acceleration_cmd = 12;
inline void SimpleLongitudinalDebug::clear_acceleration_cmd() {
  acceleration_cmd_ = 0;
}
inline double SimpleLongitudinalDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.acceleration_cmd)
  return acceleration_cmd_;
}
inline void SimpleLongitudinalDebug::set_acceleration_cmd(double value) {
  
  acceleration_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.acceleration_cmd)
}

// optional double acceleration_lookup = 13;
inline void SimpleLongitudinalDebug::clear_acceleration_lookup() {
  acceleration_lookup_ = 0;
}
inline double SimpleLongitudinalDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.acceleration_lookup)
  return acceleration_lookup_;
}
inline void SimpleLongitudinalDebug::set_acceleration_lookup(double value) {
  
  acceleration_lookup_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.acceleration_lookup)
}

// optional double speed_lookup = 14;
inline void SimpleLongitudinalDebug::clear_speed_lookup() {
  speed_lookup_ = 0;
}
inline double SimpleLongitudinalDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_lookup)
  return speed_lookup_;
}
inline void SimpleLongitudinalDebug::set_speed_lookup(double value) {
  
  speed_lookup_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_lookup)
}

// optional double calibration_value = 15;
inline void SimpleLongitudinalDebug::clear_calibration_value() {
  calibration_value_ = 0;
}
inline double SimpleLongitudinalDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.calibration_value)
  return calibration_value_;
}
inline void SimpleLongitudinalDebug::set_calibration_value(double value) {
  
  calibration_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.calibration_value)
}

// optional double throttle_cmd = 16;
inline void SimpleLongitudinalDebug::clear_throttle_cmd() {
  throttle_cmd_ = 0;
}
inline double SimpleLongitudinalDebug::throttle_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.throttle_cmd)
  return throttle_cmd_;
}
inline void SimpleLongitudinalDebug::set_throttle_cmd(double value) {
  
  throttle_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.throttle_cmd)
}

// optional double brake_cmd = 17;
inline void SimpleLongitudinalDebug::clear_brake_cmd() {
  brake_cmd_ = 0;
}
inline double SimpleLongitudinalDebug::brake_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.brake_cmd)
  return brake_cmd_;
}
inline void SimpleLongitudinalDebug::set_brake_cmd(double value) {
  
  brake_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.brake_cmd)
}

// optional bool is_full_stop = 18;
inline void SimpleLongitudinalDebug::clear_is_full_stop() {
  is_full_stop_ = false;
}
inline bool SimpleLongitudinalDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.is_full_stop)
  return is_full_stop_;
}
inline void SimpleLongitudinalDebug::set_is_full_stop(bool value) {
  
  is_full_stop_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.is_full_stop)
}

// -------------------------------------------------------------------

// SimpleLateralDebug

// optional double lateral_error = 1;
inline void SimpleLateralDebug::clear_lateral_error() {
  lateral_error_ = 0;
}
inline double SimpleLateralDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.lateral_error)
  return lateral_error_;
}
inline void SimpleLateralDebug::set_lateral_error(double value) {
  
  lateral_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.lateral_error)
}

// optional double ref_heading = 2;
inline void SimpleLateralDebug::clear_ref_heading() {
  ref_heading_ = 0;
}
inline double SimpleLateralDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.ref_heading)
  return ref_heading_;
}
inline void SimpleLateralDebug::set_ref_heading(double value) {
  
  ref_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.ref_heading)
}

// optional double heading = 3;
inline void SimpleLateralDebug::clear_heading() {
  heading_ = 0;
}
inline double SimpleLateralDebug::heading() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.heading)
  return heading_;
}
inline void SimpleLateralDebug::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.heading)
}

// optional double heading_error = 4;
inline void SimpleLateralDebug::clear_heading_error() {
  heading_error_ = 0;
}
inline double SimpleLateralDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.heading_error)
  return heading_error_;
}
inline void SimpleLateralDebug::set_heading_error(double value) {
  
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.heading_error)
}

// optional double heading_error_rate = 5;
inline void SimpleLateralDebug::clear_heading_error_rate() {
  heading_error_rate_ = 0;
}
inline double SimpleLateralDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.heading_error_rate)
  return heading_error_rate_;
}
inline void SimpleLateralDebug::set_heading_error_rate(double value) {
  
  heading_error_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.heading_error_rate)
}

// optional double lateral_error_rate = 6;
inline void SimpleLateralDebug::clear_lateral_error_rate() {
  lateral_error_rate_ = 0;
}
inline double SimpleLateralDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.lateral_error_rate)
  return lateral_error_rate_;
}
inline void SimpleLateralDebug::set_lateral_error_rate(double value) {
  
  lateral_error_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.lateral_error_rate)
}

// optional double curvature = 7;
inline void SimpleLateralDebug::clear_curvature() {
  curvature_ = 0;
}
inline double SimpleLateralDebug::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.curvature)
  return curvature_;
}
inline void SimpleLateralDebug::set_curvature(double value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.curvature)
}

// optional double steer_angle = 8;
inline void SimpleLateralDebug::clear_steer_angle() {
  steer_angle_ = 0;
}
inline double SimpleLateralDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle)
  return steer_angle_;
}
inline void SimpleLateralDebug::set_steer_angle(double value) {
  
  steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle)
}

// optional double steer_angle_feedforward = 9;
inline void SimpleLateralDebug::clear_steer_angle_feedforward() {
  steer_angle_feedforward_ = 0;
}
inline double SimpleLateralDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_feedforward)
  return steer_angle_feedforward_;
}
inline void SimpleLateralDebug::set_steer_angle_feedforward(double value) {
  
  steer_angle_feedforward_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_feedforward)
}

// optional double steer_angle_lateral_contribution = 10;
inline void SimpleLateralDebug::clear_steer_angle_lateral_contribution() {
  steer_angle_lateral_contribution_ = 0;
}
inline double SimpleLateralDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_lateral_contribution)
  return steer_angle_lateral_contribution_;
}
inline void SimpleLateralDebug::set_steer_angle_lateral_contribution(double value) {
  
  steer_angle_lateral_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_lateral_contribution)
}

// optional double steer_angle_lateral_rate_contribution = 11;
inline void SimpleLateralDebug::clear_steer_angle_lateral_rate_contribution() {
  steer_angle_lateral_rate_contribution_ = 0;
}
inline double SimpleLateralDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_lateral_rate_contribution)
  return steer_angle_lateral_rate_contribution_;
}
inline void SimpleLateralDebug::set_steer_angle_lateral_rate_contribution(double value) {
  
  steer_angle_lateral_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_lateral_rate_contribution)
}

// optional double steer_angle_heading_contribution = 12;
inline void SimpleLateralDebug::clear_steer_angle_heading_contribution() {
  steer_angle_heading_contribution_ = 0;
}
inline double SimpleLateralDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_heading_contribution)
  return steer_angle_heading_contribution_;
}
inline void SimpleLateralDebug::set_steer_angle_heading_contribution(double value) {
  
  steer_angle_heading_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_heading_contribution)
}

// optional double steer_angle_heading_rate_contribution = 13;
inline void SimpleLateralDebug::clear_steer_angle_heading_rate_contribution() {
  steer_angle_heading_rate_contribution_ = 0;
}
inline double SimpleLateralDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_heading_rate_contribution)
  return steer_angle_heading_rate_contribution_;
}
inline void SimpleLateralDebug::set_steer_angle_heading_rate_contribution(double value) {
  
  steer_angle_heading_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_heading_rate_contribution)
}

// optional double steer_angle_feedback = 14;
inline void SimpleLateralDebug::clear_steer_angle_feedback() {
  steer_angle_feedback_ = 0;
}
inline double SimpleLateralDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_feedback)
  return steer_angle_feedback_;
}
inline void SimpleLateralDebug::set_steer_angle_feedback(double value) {
  
  steer_angle_feedback_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_feedback)
}

// optional double steering_position = 15;
inline void SimpleLateralDebug::clear_steering_position() {
  steering_position_ = 0;
}
inline double SimpleLateralDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steering_position)
  return steering_position_;
}
inline void SimpleLateralDebug::set_steering_position(double value) {
  
  steering_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steering_position)
}

// optional double ref_speed = 16;
inline void SimpleLateralDebug::clear_ref_speed() {
  ref_speed_ = 0;
}
inline double SimpleLateralDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.ref_speed)
  return ref_speed_;
}
inline void SimpleLateralDebug::set_ref_speed(double value) {
  
  ref_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.ref_speed)
}

// -------------------------------------------------------------------

// InputDebug

// optional .apollo.common.Header localization_header = 1;
inline bool InputDebug::has_localization_header() const {
  return !_is_default_instance_ && localization_header_ != NULL;
}
inline void InputDebug::clear_localization_header() {
  if (GetArenaNoVirtual() == NULL && localization_header_ != NULL) delete localization_header_;
  localization_header_ = NULL;
}
inline const ::apollo::common::Header& InputDebug::localization_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.localization_header)
  return localization_header_ != NULL ? *localization_header_ : *default_instance_->localization_header_;
}
inline ::apollo::common::Header* InputDebug::mutable_localization_header() {
  
  if (localization_header_ == NULL) {
    localization_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.localization_header)
  return localization_header_;
}
inline ::apollo::common::Header* InputDebug::release_localization_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.localization_header)
  
  ::apollo::common::Header* temp = localization_header_;
  localization_header_ = NULL;
  return temp;
}
inline void InputDebug::set_allocated_localization_header(::apollo::common::Header* localization_header) {
  delete localization_header_;
  localization_header_ = localization_header;
  if (localization_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.localization_header)
}

// optional .apollo.common.Header canbus_header = 2;
inline bool InputDebug::has_canbus_header() const {
  return !_is_default_instance_ && canbus_header_ != NULL;
}
inline void InputDebug::clear_canbus_header() {
  if (GetArenaNoVirtual() == NULL && canbus_header_ != NULL) delete canbus_header_;
  canbus_header_ = NULL;
}
inline const ::apollo::common::Header& InputDebug::canbus_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.canbus_header)
  return canbus_header_ != NULL ? *canbus_header_ : *default_instance_->canbus_header_;
}
inline ::apollo::common::Header* InputDebug::mutable_canbus_header() {
  
  if (canbus_header_ == NULL) {
    canbus_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.canbus_header)
  return canbus_header_;
}
inline ::apollo::common::Header* InputDebug::release_canbus_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.canbus_header)
  
  ::apollo::common::Header* temp = canbus_header_;
  canbus_header_ = NULL;
  return temp;
}
inline void InputDebug::set_allocated_canbus_header(::apollo::common::Header* canbus_header) {
  delete canbus_header_;
  canbus_header_ = canbus_header;
  if (canbus_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.canbus_header)
}

// optional .apollo.common.Header trajectory_header = 3;
inline bool InputDebug::has_trajectory_header() const {
  return !_is_default_instance_ && trajectory_header_ != NULL;
}
inline void InputDebug::clear_trajectory_header() {
  if (GetArenaNoVirtual() == NULL && trajectory_header_ != NULL) delete trajectory_header_;
  trajectory_header_ = NULL;
}
inline const ::apollo::common::Header& InputDebug::trajectory_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.trajectory_header)
  return trajectory_header_ != NULL ? *trajectory_header_ : *default_instance_->trajectory_header_;
}
inline ::apollo::common::Header* InputDebug::mutable_trajectory_header() {
  
  if (trajectory_header_ == NULL) {
    trajectory_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.trajectory_header)
  return trajectory_header_;
}
inline ::apollo::common::Header* InputDebug::release_trajectory_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.trajectory_header)
  
  ::apollo::common::Header* temp = trajectory_header_;
  trajectory_header_ = NULL;
  return temp;
}
inline void InputDebug::set_allocated_trajectory_header(::apollo::common::Header* trajectory_header) {
  delete trajectory_header_;
  trajectory_header_ = trajectory_header;
  if (trajectory_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.trajectory_header)
}

// -------------------------------------------------------------------

// Debug

// optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
inline bool Debug::has_simple_lon_debug() const {
  return !_is_default_instance_ && simple_lon_debug_ != NULL;
}
inline void Debug::clear_simple_lon_debug() {
  if (GetArenaNoVirtual() == NULL && simple_lon_debug_ != NULL) delete simple_lon_debug_;
  simple_lon_debug_ = NULL;
}
inline const ::apollo::control::SimpleLongitudinalDebug& Debug::simple_lon_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.simple_lon_debug)
  return simple_lon_debug_ != NULL ? *simple_lon_debug_ : *default_instance_->simple_lon_debug_;
}
inline ::apollo::control::SimpleLongitudinalDebug* Debug::mutable_simple_lon_debug() {
  
  if (simple_lon_debug_ == NULL) {
    simple_lon_debug_ = new ::apollo::control::SimpleLongitudinalDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.simple_lon_debug)
  return simple_lon_debug_;
}
inline ::apollo::control::SimpleLongitudinalDebug* Debug::release_simple_lon_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.simple_lon_debug)
  
  ::apollo::control::SimpleLongitudinalDebug* temp = simple_lon_debug_;
  simple_lon_debug_ = NULL;
  return temp;
}
inline void Debug::set_allocated_simple_lon_debug(::apollo::control::SimpleLongitudinalDebug* simple_lon_debug) {
  delete simple_lon_debug_;
  simple_lon_debug_ = simple_lon_debug;
  if (simple_lon_debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.simple_lon_debug)
}

// optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
inline bool Debug::has_simple_lat_debug() const {
  return !_is_default_instance_ && simple_lat_debug_ != NULL;
}
inline void Debug::clear_simple_lat_debug() {
  if (GetArenaNoVirtual() == NULL && simple_lat_debug_ != NULL) delete simple_lat_debug_;
  simple_lat_debug_ = NULL;
}
inline const ::apollo::control::SimpleLateralDebug& Debug::simple_lat_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.simple_lat_debug)
  return simple_lat_debug_ != NULL ? *simple_lat_debug_ : *default_instance_->simple_lat_debug_;
}
inline ::apollo::control::SimpleLateralDebug* Debug::mutable_simple_lat_debug() {
  
  if (simple_lat_debug_ == NULL) {
    simple_lat_debug_ = new ::apollo::control::SimpleLateralDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.simple_lat_debug)
  return simple_lat_debug_;
}
inline ::apollo::control::SimpleLateralDebug* Debug::release_simple_lat_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.simple_lat_debug)
  
  ::apollo::control::SimpleLateralDebug* temp = simple_lat_debug_;
  simple_lat_debug_ = NULL;
  return temp;
}
inline void Debug::set_allocated_simple_lat_debug(::apollo::control::SimpleLateralDebug* simple_lat_debug) {
  delete simple_lat_debug_;
  simple_lat_debug_ = simple_lat_debug;
  if (simple_lat_debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.simple_lat_debug)
}

// optional .apollo.control.InputDebug input_debug = 3;
inline bool Debug::has_input_debug() const {
  return !_is_default_instance_ && input_debug_ != NULL;
}
inline void Debug::clear_input_debug() {
  if (GetArenaNoVirtual() == NULL && input_debug_ != NULL) delete input_debug_;
  input_debug_ = NULL;
}
inline const ::apollo::control::InputDebug& Debug::input_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.input_debug)
  return input_debug_ != NULL ? *input_debug_ : *default_instance_->input_debug_;
}
inline ::apollo::control::InputDebug* Debug::mutable_input_debug() {
  
  if (input_debug_ == NULL) {
    input_debug_ = new ::apollo::control::InputDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.input_debug)
  return input_debug_;
}
inline ::apollo::control::InputDebug* Debug::release_input_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.input_debug)
  
  ::apollo::control::InputDebug* temp = input_debug_;
  input_debug_ = NULL;
  return temp;
}
inline void Debug::set_allocated_input_debug(::apollo::control::InputDebug* input_debug) {
  delete input_debug_;
  input_debug_ = input_debug;
  if (input_debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.input_debug)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::control::TurnSignal> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::control::TurnSignal>() {
  return ::apollo::control::TurnSignal_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_apollo_5fmsgs_2fproto_2fcontrol_2fcontrol_5fcmd_2eproto__INCLUDED
