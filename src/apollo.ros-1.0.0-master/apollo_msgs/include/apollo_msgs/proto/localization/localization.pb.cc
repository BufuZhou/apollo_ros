// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/localization/localization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/localization/localization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

namespace {

const ::google::protobuf::Descriptor* Uncertainty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uncertainty_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalizationEstimate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationEstimate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/localization/localization.proto");
  GOOGLE_CHECK(file != NULL);
  Uncertainty_descriptor_ = file->message_type(0);
  static const int Uncertainty_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, position_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, orientation_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, linear_velocity_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, linear_acceleration_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, angular_velocity_std_dev_),
  };
  Uncertainty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Uncertainty_descriptor_,
      Uncertainty::default_instance_,
      Uncertainty_offsets_,
      -1,
      -1,
      -1,
      sizeof(Uncertainty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, _is_default_instance_));
  LocalizationEstimate_descriptor_ = file->message_type(1);
  static const int LocalizationEstimate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, uncertainty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, measurement_time_),
  };
  LocalizationEstimate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocalizationEstimate_descriptor_,
      LocalizationEstimate::default_instance_,
      LocalizationEstimate_offsets_,
      -1,
      -1,
      -1,
      sizeof(LocalizationEstimate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Uncertainty_descriptor_, &Uncertainty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocalizationEstimate_descriptor_, &LocalizationEstimate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto() {
  delete Uncertainty::default_instance_;
  delete Uncertainty_reflection_;
  delete LocalizationEstimate::default_instance_;
  delete LocalizationEstimate_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto();
  ::apollo::localization::protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto();
  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fgeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n1apollo_msgs/proto/localization/localiz"
    "ation.proto\022\023apollo.localization\032%apollo"
    "_msgs/proto/common/header.proto\032)apollo_"
    "msgs/proto/localization/pose.proto\032\'apol"
    "lo_msgs/proto/common/geometry.proto\"\244\002\n\013"
    "Uncertainty\0220\n\020position_std_dev\030\001 \001(\0132\026."
    "apollo.common.Point3D\0223\n\023orientation_std"
    "_dev\030\002 \001(\0132\026.apollo.common.Point3D\0227\n\027li"
    "near_velocity_std_dev\030\003 \001(\0132\026.apollo.com"
    "mon.Point3D\022;\n\033linear_acceleration_std_d"
    "ev\030\004 \001(\0132\026.apollo.common.Point3D\0228\n\030angu"
    "lar_velocity_std_dev\030\005 \001(\0132\026.apollo.comm"
    "on.Point3D\"\267\001\n\024LocalizationEstimate\022%\n\006h"
    "eader\030\001 \001(\0132\025.apollo.common.Header\022\'\n\004po"
    "se\030\002 \001(\0132\031.apollo.localization.Pose\0225\n\013u"
    "ncertainty\030\003 \001(\0132 .apollo.localization.U"
    "ncertainty\022\030\n\020measurement_time\030\004 \001(\001b\006pr"
    "oto3", 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/localization/localization.proto", &protobuf_RegisterTypes);
  Uncertainty::default_instance_ = new Uncertainty();
  LocalizationEstimate::default_instance_ = new LocalizationEstimate();
  Uncertainty::default_instance_->InitAsDefaultInstance();
  LocalizationEstimate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uncertainty::kPositionStdDevFieldNumber;
const int Uncertainty::kOrientationStdDevFieldNumber;
const int Uncertainty::kLinearVelocityStdDevFieldNumber;
const int Uncertainty::kLinearAccelerationStdDevFieldNumber;
const int Uncertainty::kAngularVelocityStdDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uncertainty::Uncertainty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.Uncertainty)
}

void Uncertainty::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  orientation_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  linear_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  linear_acceleration_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  angular_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
}

Uncertainty::Uncertainty(const Uncertainty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.Uncertainty)
}

void Uncertainty::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  position_std_dev_ = NULL;
  orientation_std_dev_ = NULL;
  linear_velocity_std_dev_ = NULL;
  linear_acceleration_std_dev_ = NULL;
  angular_velocity_std_dev_ = NULL;
}

Uncertainty::~Uncertainty() {
  // @@protoc_insertion_point(destructor:apollo.localization.Uncertainty)
  SharedDtor();
}

void Uncertainty::SharedDtor() {
  if (this != default_instance_) {
    delete position_std_dev_;
    delete orientation_std_dev_;
    delete linear_velocity_std_dev_;
    delete linear_acceleration_std_dev_;
    delete angular_velocity_std_dev_;
  }
}

void Uncertainty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uncertainty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uncertainty_descriptor_;
}

const Uncertainty& Uncertainty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto();
  return *default_instance_;
}

Uncertainty* Uncertainty::default_instance_ = NULL;

Uncertainty* Uncertainty::New(::google::protobuf::Arena* arena) const {
  Uncertainty* n = new Uncertainty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uncertainty::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.Uncertainty)
  if (GetArenaNoVirtual() == NULL && position_std_dev_ != NULL) delete position_std_dev_;
  position_std_dev_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_std_dev_ != NULL) delete orientation_std_dev_;
  orientation_std_dev_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_velocity_std_dev_ != NULL) delete linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_acceleration_std_dev_ != NULL) delete linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_std_dev_ != NULL) delete angular_velocity_std_dev_;
  angular_velocity_std_dev_ = NULL;
}

bool Uncertainty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.Uncertainty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Point3D position_std_dev = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation_std_dev;
        break;
      }

      // optional .apollo.common.Point3D orientation_std_dev = 2;
      case 2: {
        if (tag == 18) {
         parse_orientation_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_linear_velocity_std_dev;
        break;
      }

      // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
      case 3: {
        if (tag == 26) {
         parse_linear_velocity_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_linear_acceleration_std_dev;
        break;
      }

      // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
      case 4: {
        if (tag == 34) {
         parse_linear_acceleration_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_angular_velocity_std_dev;
        break;
      }

      // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
      case 5: {
        if (tag == 42) {
         parse_angular_velocity_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.Uncertainty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.Uncertainty)
  return false;
#undef DO_
}

void Uncertainty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.Uncertainty)
  // optional .apollo.common.Point3D position_std_dev = 1;
  if (this->has_position_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_std_dev_, output);
  }

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  if (this->has_orientation_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_std_dev_, output);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  if (this->has_linear_velocity_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->linear_velocity_std_dev_, output);
  }

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  if (this->has_linear_acceleration_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->linear_acceleration_std_dev_, output);
  }

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  if (this->has_angular_velocity_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->angular_velocity_std_dev_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.localization.Uncertainty)
}

::google::protobuf::uint8* Uncertainty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.Uncertainty)
  // optional .apollo.common.Point3D position_std_dev = 1;
  if (this->has_position_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_std_dev_, false, target);
  }

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  if (this->has_orientation_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_std_dev_, false, target);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  if (this->has_linear_velocity_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->linear_velocity_std_dev_, false, target);
  }

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  if (this->has_linear_acceleration_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->linear_acceleration_std_dev_, false, target);
  }

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  if (this->has_angular_velocity_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->angular_velocity_std_dev_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.Uncertainty)
  return target;
}

int Uncertainty::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.Uncertainty)
  int total_size = 0;

  // optional .apollo.common.Point3D position_std_dev = 1;
  if (this->has_position_std_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_std_dev_);
  }

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  if (this->has_orientation_std_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_std_dev_);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  if (this->has_linear_velocity_std_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_velocity_std_dev_);
  }

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  if (this->has_linear_acceleration_std_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_std_dev_);
  }

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  if (this->has_angular_velocity_std_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_std_dev_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uncertainty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.Uncertainty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Uncertainty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Uncertainty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.Uncertainty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.Uncertainty)
    MergeFrom(*source);
  }
}

void Uncertainty::MergeFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.Uncertainty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_position_std_dev()) {
    mutable_position_std_dev()->::apollo::common::Point3D::MergeFrom(from.position_std_dev());
  }
  if (from.has_orientation_std_dev()) {
    mutable_orientation_std_dev()->::apollo::common::Point3D::MergeFrom(from.orientation_std_dev());
  }
  if (from.has_linear_velocity_std_dev()) {
    mutable_linear_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from.linear_velocity_std_dev());
  }
  if (from.has_linear_acceleration_std_dev()) {
    mutable_linear_acceleration_std_dev()->::apollo::common::Point3D::MergeFrom(from.linear_acceleration_std_dev());
  }
  if (from.has_angular_velocity_std_dev()) {
    mutable_angular_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from.angular_velocity_std_dev());
  }
}

void Uncertainty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uncertainty::CopyFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainty::IsInitialized() const {

  return true;
}

void Uncertainty::Swap(Uncertainty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uncertainty::InternalSwap(Uncertainty* other) {
  std::swap(position_std_dev_, other->position_std_dev_);
  std::swap(orientation_std_dev_, other->orientation_std_dev_);
  std::swap(linear_velocity_std_dev_, other->linear_velocity_std_dev_);
  std::swap(linear_acceleration_std_dev_, other->linear_acceleration_std_dev_);
  std::swap(angular_velocity_std_dev_, other->angular_velocity_std_dev_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uncertainty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uncertainty_descriptor_;
  metadata.reflection = Uncertainty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uncertainty

// optional .apollo.common.Point3D position_std_dev = 1;
bool Uncertainty::has_position_std_dev() const {
  return !_is_default_instance_ && position_std_dev_ != NULL;
}
void Uncertainty::clear_position_std_dev() {
  if (GetArenaNoVirtual() == NULL && position_std_dev_ != NULL) delete position_std_dev_;
  position_std_dev_ = NULL;
}
const ::apollo::common::Point3D& Uncertainty::position_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.position_std_dev)
  return position_std_dev_ != NULL ? *position_std_dev_ : *default_instance_->position_std_dev_;
}
::apollo::common::Point3D* Uncertainty::mutable_position_std_dev() {
  
  if (position_std_dev_ == NULL) {
    position_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.position_std_dev)
  return position_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_position_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.position_std_dev)
  
  ::apollo::common::Point3D* temp = position_std_dev_;
  position_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_position_std_dev(::apollo::common::Point3D* position_std_dev) {
  delete position_std_dev_;
  position_std_dev_ = position_std_dev;
  if (position_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.position_std_dev)
}

// optional .apollo.common.Point3D orientation_std_dev = 2;
bool Uncertainty::has_orientation_std_dev() const {
  return !_is_default_instance_ && orientation_std_dev_ != NULL;
}
void Uncertainty::clear_orientation_std_dev() {
  if (GetArenaNoVirtual() == NULL && orientation_std_dev_ != NULL) delete orientation_std_dev_;
  orientation_std_dev_ = NULL;
}
const ::apollo::common::Point3D& Uncertainty::orientation_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.orientation_std_dev)
  return orientation_std_dev_ != NULL ? *orientation_std_dev_ : *default_instance_->orientation_std_dev_;
}
::apollo::common::Point3D* Uncertainty::mutable_orientation_std_dev() {
  
  if (orientation_std_dev_ == NULL) {
    orientation_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.orientation_std_dev)
  return orientation_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_orientation_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.orientation_std_dev)
  
  ::apollo::common::Point3D* temp = orientation_std_dev_;
  orientation_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_orientation_std_dev(::apollo::common::Point3D* orientation_std_dev) {
  delete orientation_std_dev_;
  orientation_std_dev_ = orientation_std_dev;
  if (orientation_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.orientation_std_dev)
}

// optional .apollo.common.Point3D linear_velocity_std_dev = 3;
bool Uncertainty::has_linear_velocity_std_dev() const {
  return !_is_default_instance_ && linear_velocity_std_dev_ != NULL;
}
void Uncertainty::clear_linear_velocity_std_dev() {
  if (GetArenaNoVirtual() == NULL && linear_velocity_std_dev_ != NULL) delete linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
}
const ::apollo::common::Point3D& Uncertainty::linear_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_ != NULL ? *linear_velocity_std_dev_ : *default_instance_->linear_velocity_std_dev_;
}
::apollo::common::Point3D* Uncertainty::mutable_linear_velocity_std_dev() {
  
  if (linear_velocity_std_dev_ == NULL) {
    linear_velocity_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.linear_velocity_std_dev)
  
  ::apollo::common::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_linear_velocity_std_dev(::apollo::common::Point3D* linear_velocity_std_dev) {
  delete linear_velocity_std_dev_;
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  if (linear_velocity_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.linear_velocity_std_dev)
}

// optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
bool Uncertainty::has_linear_acceleration_std_dev() const {
  return !_is_default_instance_ && linear_acceleration_std_dev_ != NULL;
}
void Uncertainty::clear_linear_acceleration_std_dev() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_std_dev_ != NULL) delete linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = NULL;
}
const ::apollo::common::Point3D& Uncertainty::linear_acceleration_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_ != NULL ? *linear_acceleration_std_dev_ : *default_instance_->linear_acceleration_std_dev_;
}
::apollo::common::Point3D* Uncertainty::mutable_linear_acceleration_std_dev() {
  
  if (linear_acceleration_std_dev_ == NULL) {
    linear_acceleration_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_linear_acceleration_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  
  ::apollo::common::Point3D* temp = linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_linear_acceleration_std_dev(::apollo::common::Point3D* linear_acceleration_std_dev) {
  delete linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = linear_acceleration_std_dev;
  if (linear_acceleration_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.linear_acceleration_std_dev)
}

// optional .apollo.common.Point3D angular_velocity_std_dev = 5;
bool Uncertainty::has_angular_velocity_std_dev() const {
  return !_is_default_instance_ && angular_velocity_std_dev_ != NULL;
}
void Uncertainty::clear_angular_velocity_std_dev() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_std_dev_ != NULL) delete angular_velocity_std_dev_;
  angular_velocity_std_dev_ = NULL;
}
const ::apollo::common::Point3D& Uncertainty::angular_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_ != NULL ? *angular_velocity_std_dev_ : *default_instance_->angular_velocity_std_dev_;
}
::apollo::common::Point3D* Uncertainty::mutable_angular_velocity_std_dev() {
  
  if (angular_velocity_std_dev_ == NULL) {
    angular_velocity_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_angular_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.angular_velocity_std_dev)
  
  ::apollo::common::Point3D* temp = angular_velocity_std_dev_;
  angular_velocity_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_angular_velocity_std_dev(::apollo::common::Point3D* angular_velocity_std_dev) {
  delete angular_velocity_std_dev_;
  angular_velocity_std_dev_ = angular_velocity_std_dev;
  if (angular_velocity_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.angular_velocity_std_dev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationEstimate::kHeaderFieldNumber;
const int LocalizationEstimate::kPoseFieldNumber;
const int LocalizationEstimate::kUncertaintyFieldNumber;
const int LocalizationEstimate::kMeasurementTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationEstimate::LocalizationEstimate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.LocalizationEstimate)
}

void LocalizationEstimate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  pose_ = const_cast< ::apollo::localization::Pose*>(&::apollo::localization::Pose::default_instance());
  uncertainty_ = const_cast< ::apollo::localization::Uncertainty*>(&::apollo::localization::Uncertainty::default_instance());
}

LocalizationEstimate::LocalizationEstimate(const LocalizationEstimate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.LocalizationEstimate)
}

void LocalizationEstimate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  pose_ = NULL;
  uncertainty_ = NULL;
  measurement_time_ = 0;
}

LocalizationEstimate::~LocalizationEstimate() {
  // @@protoc_insertion_point(destructor:apollo.localization.LocalizationEstimate)
  SharedDtor();
}

void LocalizationEstimate::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete pose_;
    delete uncertainty_;
  }
}

void LocalizationEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationEstimate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationEstimate_descriptor_;
}

const LocalizationEstimate& LocalizationEstimate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto();
  return *default_instance_;
}

LocalizationEstimate* LocalizationEstimate::default_instance_ = NULL;

LocalizationEstimate* LocalizationEstimate::New(::google::protobuf::Arena* arena) const {
  LocalizationEstimate* n = new LocalizationEstimate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.LocalizationEstimate)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && uncertainty_ != NULL) delete uncertainty_;
  uncertainty_ = NULL;
  measurement_time_ = 0;
}

bool LocalizationEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.LocalizationEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // optional .apollo.localization.Pose pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uncertainty;
        break;
      }

      // optional .apollo.localization.Uncertainty uncertainty = 3;
      case 3: {
        if (tag == 26) {
         parse_uncertainty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uncertainty()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_measurement_time;
        break;
      }

      // optional double measurement_time = 4;
      case 4: {
        if (tag == 33) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.LocalizationEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.LocalizationEstimate)
  return false;
#undef DO_
}

void LocalizationEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.LocalizationEstimate)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.localization.Pose pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  if (this->has_uncertainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->uncertainty_, output);
  }

  // optional double measurement_time = 4;
  if (this->measurement_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->measurement_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.localization.LocalizationEstimate)
}

::google::protobuf::uint8* LocalizationEstimate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.LocalizationEstimate)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.localization.Pose pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, false, target);
  }

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  if (this->has_uncertainty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->uncertainty_, false, target);
  }

  // optional double measurement_time = 4;
  if (this->measurement_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->measurement_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.LocalizationEstimate)
  return target;
}

int LocalizationEstimate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.LocalizationEstimate)
  int total_size = 0;

  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .apollo.localization.Pose pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  if (this->has_uncertainty()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uncertainty_);
  }

  // optional double measurement_time = 4;
  if (this->measurement_time() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationEstimate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.LocalizationEstimate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocalizationEstimate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationEstimate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.LocalizationEstimate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.LocalizationEstimate)
    MergeFrom(*source);
  }
}

void LocalizationEstimate::MergeFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.LocalizationEstimate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.has_pose()) {
    mutable_pose()->::apollo::localization::Pose::MergeFrom(from.pose());
  }
  if (from.has_uncertainty()) {
    mutable_uncertainty()->::apollo::localization::Uncertainty::MergeFrom(from.uncertainty());
  }
  if (from.measurement_time() != 0) {
    set_measurement_time(from.measurement_time());
  }
}

void LocalizationEstimate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationEstimate::CopyFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationEstimate::IsInitialized() const {

  return true;
}

void LocalizationEstimate::Swap(LocalizationEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationEstimate::InternalSwap(LocalizationEstimate* other) {
  std::swap(header_, other->header_);
  std::swap(pose_, other->pose_);
  std::swap(uncertainty_, other->uncertainty_);
  std::swap(measurement_time_, other->measurement_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalizationEstimate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationEstimate_descriptor_;
  metadata.reflection = LocalizationEstimate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationEstimate

// optional .apollo.common.Header header = 1;
bool LocalizationEstimate::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void LocalizationEstimate::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::apollo::common::Header& LocalizationEstimate::header() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* LocalizationEstimate::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.header)
  return header_;
}
::apollo::common::Header* LocalizationEstimate::release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.header)
}

// optional .apollo.localization.Pose pose = 2;
bool LocalizationEstimate::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
void LocalizationEstimate::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::apollo::localization::Pose& LocalizationEstimate::pose() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::apollo::localization::Pose* LocalizationEstimate::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::apollo::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.pose)
  return pose_;
}
::apollo::localization::Pose* LocalizationEstimate::release_pose() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.pose)
  
  ::apollo::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_pose(::apollo::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.pose)
}

// optional .apollo.localization.Uncertainty uncertainty = 3;
bool LocalizationEstimate::has_uncertainty() const {
  return !_is_default_instance_ && uncertainty_ != NULL;
}
void LocalizationEstimate::clear_uncertainty() {
  if (GetArenaNoVirtual() == NULL && uncertainty_ != NULL) delete uncertainty_;
  uncertainty_ = NULL;
}
const ::apollo::localization::Uncertainty& LocalizationEstimate::uncertainty() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.uncertainty)
  return uncertainty_ != NULL ? *uncertainty_ : *default_instance_->uncertainty_;
}
::apollo::localization::Uncertainty* LocalizationEstimate::mutable_uncertainty() {
  
  if (uncertainty_ == NULL) {
    uncertainty_ = new ::apollo::localization::Uncertainty;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.uncertainty)
  return uncertainty_;
}
::apollo::localization::Uncertainty* LocalizationEstimate::release_uncertainty() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.uncertainty)
  
  ::apollo::localization::Uncertainty* temp = uncertainty_;
  uncertainty_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_uncertainty(::apollo::localization::Uncertainty* uncertainty) {
  delete uncertainty_;
  uncertainty_ = uncertainty;
  if (uncertainty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.uncertainty)
}

// optional double measurement_time = 4;
void LocalizationEstimate::clear_measurement_time() {
  measurement_time_ = 0;
}
 double LocalizationEstimate::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.measurement_time)
  return measurement_time_;
}
 void LocalizationEstimate::set_measurement_time(double value) {
  
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationEstimate.measurement_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
