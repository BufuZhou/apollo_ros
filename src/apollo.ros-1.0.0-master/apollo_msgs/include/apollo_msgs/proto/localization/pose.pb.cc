// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/localization/pose.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/localization/pose.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

namespace {

const ::google::protobuf::Descriptor* Pose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/localization/pose.proto");
  GOOGLE_CHECK(file != NULL);
  Pose_descriptor_ = file->message_type(0);
  static const int Pose_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, linear_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, linear_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, linear_acceleration_vrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, angular_velocity_vrf_),
  };
  Pose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pose_descriptor_,
      Pose::default_instance_,
      Pose_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pose_descriptor_, &Pose::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto() {
  delete Pose::default_instance_;
  delete Pose_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fgeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)apollo_msgs/proto/localization/pose.pr"
    "oto\022\023apollo.localization\032\'apollo_msgs/pr"
    "oto/common/geometry.proto\"\371\002\n\004Pose\022)\n\010po"
    "sition\030\001 \001(\0132\027.apollo.common.PointENU\022.\n"
    "\013orientation\030\002 \001(\0132\031.apollo.common.Quate"
    "rnion\022/\n\017linear_velocity\030\003 \001(\0132\026.apollo."
    "common.Point3D\0223\n\023linear_acceleration\030\004 "
    "\001(\0132\026.apollo.common.Point3D\0220\n\020angular_v"
    "elocity\030\005 \001(\0132\026.apollo.common.Point3D\022\017\n"
    "\007heading\030\006 \001(\001\0227\n\027linear_acceleration_vr"
    "f\030\007 \001(\0132\026.apollo.common.Point3D\0224\n\024angul"
    "ar_velocity_vrf\030\010 \001(\0132\026.apollo.common.Po"
    "int3Db\006proto3", 493);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/localization/pose.proto", &protobuf_RegisterTypes);
  Pose::default_instance_ = new Pose();
  Pose::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kPositionFieldNumber;
const int Pose::kOrientationFieldNumber;
const int Pose::kLinearVelocityFieldNumber;
const int Pose::kLinearAccelerationFieldNumber;
const int Pose::kAngularVelocityFieldNumber;
const int Pose::kHeadingFieldNumber;
const int Pose::kLinearAccelerationVrfFieldNumber;
const int Pose::kAngularVelocityVrfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.Pose)
}

void Pose::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
  orientation_ = const_cast< ::apollo::common::Quaternion*>(&::apollo::common::Quaternion::default_instance());
  linear_velocity_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  linear_acceleration_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  angular_velocity_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  linear_acceleration_vrf_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  angular_velocity_vrf_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
}

Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.Pose)
}

void Pose::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  position_ = NULL;
  orientation_ = NULL;
  linear_velocity_ = NULL;
  linear_acceleration_ = NULL;
  angular_velocity_ = NULL;
  heading_ = 0;
  linear_acceleration_vrf_ = NULL;
  angular_velocity_vrf_ = NULL;
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:apollo.localization.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete orientation_;
    delete linear_velocity_;
    delete linear_acceleration_;
    delete angular_velocity_;
    delete linear_acceleration_vrf_;
    delete angular_velocity_vrf_;
  }
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose_descriptor_;
}

const Pose& Pose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto();
  return *default_instance_;
}

Pose* Pose::default_instance_ = NULL;

Pose* Pose::New(::google::protobuf::Arena* arena) const {
  Pose* n = new Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.Pose)
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_velocity_ != NULL) delete linear_velocity_;
  linear_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
  heading_ = 0;
  if (GetArenaNoVirtual() == NULL && linear_acceleration_vrf_ != NULL) delete linear_acceleration_vrf_;
  linear_acceleration_vrf_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_vrf_ != NULL) delete angular_velocity_vrf_;
  angular_velocity_vrf_ = NULL;
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.PointENU position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation;
        break;
      }

      // optional .apollo.common.Quaternion orientation = 2;
      case 2: {
        if (tag == 18) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_linear_velocity;
        break;
      }

      // optional .apollo.common.Point3D linear_velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_linear_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_linear_acceleration;
        break;
      }

      // optional .apollo.common.Point3D linear_acceleration = 4;
      case 4: {
        if (tag == 34) {
         parse_linear_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_angular_velocity;
        break;
      }

      // optional .apollo.common.Point3D angular_velocity = 5;
      case 5: {
        if (tag == 42) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_heading;
        break;
      }

      // optional double heading = 6;
      case 6: {
        if (tag == 49) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_linear_acceleration_vrf;
        break;
      }

      // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
      case 7: {
        if (tag == 58) {
         parse_linear_acceleration_vrf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration_vrf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_angular_velocity_vrf;
        break;
      }

      // optional .apollo.common.Point3D angular_velocity_vrf = 8;
      case 8: {
        if (tag == 66) {
         parse_angular_velocity_vrf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity_vrf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.Pose)
  // optional .apollo.common.PointENU position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional .apollo.common.Quaternion orientation = 2;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  // optional .apollo.common.Point3D linear_velocity = 3;
  if (this->has_linear_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->linear_velocity_, output);
  }

  // optional .apollo.common.Point3D linear_acceleration = 4;
  if (this->has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->linear_acceleration_, output);
  }

  // optional .apollo.common.Point3D angular_velocity = 5;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->angular_velocity_, output);
  }

  // optional double heading = 6;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->heading(), output);
  }

  // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
  if (this->has_linear_acceleration_vrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->linear_acceleration_vrf_, output);
  }

  // optional .apollo.common.Point3D angular_velocity_vrf = 8;
  if (this->has_angular_velocity_vrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->angular_velocity_vrf_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.localization.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.Pose)
  // optional .apollo.common.PointENU position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, false, target);
  }

  // optional .apollo.common.Quaternion orientation = 2;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_, false, target);
  }

  // optional .apollo.common.Point3D linear_velocity = 3;
  if (this->has_linear_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->linear_velocity_, false, target);
  }

  // optional .apollo.common.Point3D linear_acceleration = 4;
  if (this->has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->linear_acceleration_, false, target);
  }

  // optional .apollo.common.Point3D angular_velocity = 5;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->angular_velocity_, false, target);
  }

  // optional double heading = 6;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->heading(), target);
  }

  // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
  if (this->has_linear_acceleration_vrf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->linear_acceleration_vrf_, false, target);
  }

  // optional .apollo.common.Point3D angular_velocity_vrf = 8;
  if (this->has_angular_velocity_vrf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->angular_velocity_vrf_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.Pose)
  return target;
}

int Pose::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.Pose)
  int total_size = 0;

  // optional .apollo.common.PointENU position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional .apollo.common.Quaternion orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // optional .apollo.common.Point3D linear_velocity = 3;
  if (this->has_linear_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_velocity_);
  }

  // optional .apollo.common.Point3D linear_acceleration = 4;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);
  }

  // optional .apollo.common.Point3D angular_velocity = 5;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  // optional double heading = 6;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
  if (this->has_linear_acceleration_vrf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_vrf_);
  }

  // optional .apollo.common.Point3D angular_velocity_vrf = 8;
  if (this->has_angular_velocity_vrf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_vrf_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.Pose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Pose* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.Pose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_position()) {
    mutable_position()->::apollo::common::PointENU::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::apollo::common::Quaternion::MergeFrom(from.orientation());
  }
  if (from.has_linear_velocity()) {
    mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from.linear_velocity());
  }
  if (from.has_linear_acceleration()) {
    mutable_linear_acceleration()->::apollo::common::Point3D::MergeFrom(from.linear_acceleration());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::apollo::common::Point3D::MergeFrom(from.angular_velocity());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.has_linear_acceleration_vrf()) {
    mutable_linear_acceleration_vrf()->::apollo::common::Point3D::MergeFrom(from.linear_acceleration_vrf());
  }
  if (from.has_angular_velocity_vrf()) {
    mutable_angular_velocity_vrf()->::apollo::common::Point3D::MergeFrom(from.angular_velocity_vrf());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {

  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  std::swap(linear_velocity_, other->linear_velocity_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(heading_, other->heading_);
  std::swap(linear_acceleration_vrf_, other->linear_acceleration_vrf_);
  std::swap(angular_velocity_vrf_, other->angular_velocity_vrf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose_descriptor_;
  metadata.reflection = Pose_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose

// optional .apollo.common.PointENU position = 1;
bool Pose::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Pose::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::apollo::common::PointENU& Pose::position() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::apollo::common::PointENU* Pose::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.position)
  return position_;
}
::apollo::common::PointENU* Pose::release_position() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.position)
  
  ::apollo::common::PointENU* temp = position_;
  position_ = NULL;
  return temp;
}
void Pose::set_allocated_position(::apollo::common::PointENU* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.position)
}

// optional .apollo.common.Quaternion orientation = 2;
bool Pose::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
void Pose::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::apollo::common::Quaternion& Pose::orientation() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::apollo::common::Quaternion* Pose::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::apollo::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.orientation)
  return orientation_;
}
::apollo::common::Quaternion* Pose::release_orientation() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.orientation)
  
  ::apollo::common::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Pose::set_allocated_orientation(::apollo::common::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.orientation)
}

// optional .apollo.common.Point3D linear_velocity = 3;
bool Pose::has_linear_velocity() const {
  return !_is_default_instance_ && linear_velocity_ != NULL;
}
void Pose::clear_linear_velocity() {
  if (GetArenaNoVirtual() == NULL && linear_velocity_ != NULL) delete linear_velocity_;
  linear_velocity_ = NULL;
}
const ::apollo::common::Point3D& Pose::linear_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_ : *default_instance_->linear_velocity_;
}
::apollo::common::Point3D* Pose::mutable_linear_velocity() {
  
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.linear_velocity)
  return linear_velocity_;
}
::apollo::common::Point3D* Pose::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.linear_velocity)
  
  ::apollo::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
void Pose::set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.linear_velocity)
}

// optional .apollo.common.Point3D linear_acceleration = 4;
bool Pose::has_linear_acceleration() const {
  return !_is_default_instance_ && linear_acceleration_ != NULL;
}
void Pose::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
}
const ::apollo::common::Point3D& Pose::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
::apollo::common::Point3D* Pose::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.linear_acceleration)
  return linear_acceleration_;
}
::apollo::common::Point3D* Pose::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.linear_acceleration)
  
  ::apollo::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void Pose::set_allocated_linear_acceleration(::apollo::common::Point3D* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.linear_acceleration)
}

// optional .apollo.common.Point3D angular_velocity = 5;
bool Pose::has_angular_velocity() const {
  return !_is_default_instance_ && angular_velocity_ != NULL;
}
void Pose::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
}
const ::apollo::common::Point3D& Pose::angular_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
::apollo::common::Point3D* Pose::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.angular_velocity)
  return angular_velocity_;
}
::apollo::common::Point3D* Pose::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.angular_velocity)
  
  ::apollo::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void Pose::set_allocated_angular_velocity(::apollo::common::Point3D* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.angular_velocity)
}

// optional double heading = 6;
void Pose::clear_heading() {
  heading_ = 0;
}
 double Pose::heading() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.heading)
  return heading_;
}
 void Pose::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.Pose.heading)
}

// optional .apollo.common.Point3D linear_acceleration_vrf = 7;
bool Pose::has_linear_acceleration_vrf() const {
  return !_is_default_instance_ && linear_acceleration_vrf_ != NULL;
}
void Pose::clear_linear_acceleration_vrf() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_vrf_ != NULL) delete linear_acceleration_vrf_;
  linear_acceleration_vrf_ = NULL;
}
const ::apollo::common::Point3D& Pose::linear_acceleration_vrf() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.linear_acceleration_vrf)
  return linear_acceleration_vrf_ != NULL ? *linear_acceleration_vrf_ : *default_instance_->linear_acceleration_vrf_;
}
::apollo::common::Point3D* Pose::mutable_linear_acceleration_vrf() {
  
  if (linear_acceleration_vrf_ == NULL) {
    linear_acceleration_vrf_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.linear_acceleration_vrf)
  return linear_acceleration_vrf_;
}
::apollo::common::Point3D* Pose::release_linear_acceleration_vrf() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.linear_acceleration_vrf)
  
  ::apollo::common::Point3D* temp = linear_acceleration_vrf_;
  linear_acceleration_vrf_ = NULL;
  return temp;
}
void Pose::set_allocated_linear_acceleration_vrf(::apollo::common::Point3D* linear_acceleration_vrf) {
  delete linear_acceleration_vrf_;
  linear_acceleration_vrf_ = linear_acceleration_vrf;
  if (linear_acceleration_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.linear_acceleration_vrf)
}

// optional .apollo.common.Point3D angular_velocity_vrf = 8;
bool Pose::has_angular_velocity_vrf() const {
  return !_is_default_instance_ && angular_velocity_vrf_ != NULL;
}
void Pose::clear_angular_velocity_vrf() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_vrf_ != NULL) delete angular_velocity_vrf_;
  angular_velocity_vrf_ = NULL;
}
const ::apollo::common::Point3D& Pose::angular_velocity_vrf() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.angular_velocity_vrf)
  return angular_velocity_vrf_ != NULL ? *angular_velocity_vrf_ : *default_instance_->angular_velocity_vrf_;
}
::apollo::common::Point3D* Pose::mutable_angular_velocity_vrf() {
  
  if (angular_velocity_vrf_ == NULL) {
    angular_velocity_vrf_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.angular_velocity_vrf)
  return angular_velocity_vrf_;
}
::apollo::common::Point3D* Pose::release_angular_velocity_vrf() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.angular_velocity_vrf)
  
  ::apollo::common::Point3D* temp = angular_velocity_vrf_;
  angular_velocity_vrf_ = NULL;
  return temp;
}
void Pose::set_allocated_angular_velocity_vrf(::apollo::common::Point3D* angular_velocity_vrf) {
  delete angular_velocity_vrf_;
  angular_velocity_vrf_ = angular_velocity_vrf;
  if (angular_velocity_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.angular_velocity_vrf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
