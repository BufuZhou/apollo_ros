// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/localization/imu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/localization/imu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

namespace {

const ::google::protobuf::Descriptor* Imu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Imu_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/localization/imu.proto");
  GOOGLE_CHECK(file != NULL);
  Imu_descriptor_ = file->message_type(0);
  static const int Imu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, imu_),
  };
  Imu_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Imu_descriptor_,
      Imu::default_instance_,
      Imu_offsets_,
      -1,
      -1,
      -1,
      sizeof(Imu),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Imu_descriptor_, &Imu::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto() {
  delete Imu::default_instance_;
  delete Imu_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto();
  ::apollo::localization::protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(apollo_msgs/proto/localization/imu.pro"
    "to\022\023apollo.localization\032%apollo_msgs/pro"
    "to/common/header.proto\032)apollo_msgs/prot"
    "o/localization/pose.proto\"T\n\003Imu\022%\n\006head"
    "er\030\001 \001(\0132\025.apollo.common.Header\022&\n\003imu\030\003"
    " \001(\0132\031.apollo.localization.Poseb\006proto3", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/localization/imu.proto", &protobuf_RegisterTypes);
  Imu::default_instance_ = new Imu();
  Imu::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu::kHeaderFieldNumber;
const int Imu::kImuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu::Imu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.Imu)
}

void Imu::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  imu_ = const_cast< ::apollo::localization::Pose*>(&::apollo::localization::Pose::default_instance());
}

Imu::Imu(const Imu& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.Imu)
}

void Imu::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  imu_ = NULL;
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:apollo.localization.Imu)
  SharedDtor();
}

void Imu::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete imu_;
  }
}

void Imu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Imu_descriptor_;
}

const Imu& Imu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fimu_2eproto();
  return *default_instance_;
}

Imu* Imu::default_instance_ = NULL;

Imu* Imu::New(::google::protobuf::Arena* arena) const {
  Imu* n = new Imu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.Imu)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_ != NULL) delete imu_;
  imu_ = NULL;
}

bool Imu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.Imu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imu;
        break;
      }

      // optional .apollo.localization.Pose imu = 3;
      case 3: {
        if (tag == 26) {
         parse_imu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.Imu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.Imu)
  return false;
#undef DO_
}

void Imu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.Imu)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.localization.Pose imu = 3;
  if (this->has_imu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imu_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.localization.Imu)
}

::google::protobuf::uint8* Imu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.Imu)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.localization.Pose imu = 3;
  if (this->has_imu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->imu_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.Imu)
  return target;
}

int Imu::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.Imu)
  int total_size = 0;

  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .apollo.localization.Pose imu = 3;
  if (this->has_imu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imu_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.Imu)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Imu* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.Imu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.Imu)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.has_imu()) {
    mutable_imu()->::apollo::localization::Pose::MergeFrom(from.imu());
  }
}

void Imu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {

  return true;
}

void Imu::Swap(Imu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu::InternalSwap(Imu* other) {
  std::swap(header_, other->header_);
  std::swap(imu_, other->imu_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Imu_descriptor_;
  metadata.reflection = Imu_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Imu

// optional .apollo.common.Header header = 1;
bool Imu::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void Imu::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::apollo::common::Header& Imu::header() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Imu.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* Imu::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Imu.header)
  return header_;
}
::apollo::common::Header* Imu::release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.Imu.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Imu::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Imu.header)
}

// optional .apollo.localization.Pose imu = 3;
bool Imu::has_imu() const {
  return !_is_default_instance_ && imu_ != NULL;
}
void Imu::clear_imu() {
  if (GetArenaNoVirtual() == NULL && imu_ != NULL) delete imu_;
  imu_ = NULL;
}
const ::apollo::localization::Pose& Imu::imu() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Imu.imu)
  return imu_ != NULL ? *imu_ : *default_instance_->imu_;
}
::apollo::localization::Pose* Imu::mutable_imu() {
  
  if (imu_ == NULL) {
    imu_ = new ::apollo::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Imu.imu)
  return imu_;
}
::apollo::localization::Pose* Imu::release_imu() {
  // @@protoc_insertion_point(field_release:apollo.localization.Imu.imu)
  
  ::apollo::localization::Pose* temp = imu_;
  imu_ = NULL;
  return temp;
}
void Imu::set_allocated_imu(::apollo::localization::Pose* imu) {
  delete imu_;
  imu_ = imu;
  if (imu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Imu.imu)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
