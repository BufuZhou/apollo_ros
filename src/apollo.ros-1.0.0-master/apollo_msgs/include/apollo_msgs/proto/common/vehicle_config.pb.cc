// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/common/vehicle_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/common/vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {
namespace config {

namespace {

const ::google::protobuf::Descriptor* VehicleParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/common/vehicle_config.proto");
  GOOGLE_CHECK(file != NULL);
  VehicleParam_descriptor_ = file->message_type(0);
  static const int VehicleParam_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, front_edge_to_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, back_edge_to_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, left_edge_to_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, right_edge_to_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, min_turn_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_steer_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_steer_angle_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, steer_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, wheel_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, wheel_rolling_radius_),
  };
  VehicleParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleParam_descriptor_,
      VehicleParam::default_instance_,
      VehicleParam_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, _is_default_instance_));
  VehicleConfig_descriptor_ = file->message_type(1);
  static const int VehicleConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, vehicle_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, extrinsics_),
  };
  VehicleConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleConfig_descriptor_,
      VehicleConfig::default_instance_,
      VehicleConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleParam_descriptor_, &VehicleParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleConfig_descriptor_, &VehicleConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto() {
  delete VehicleParam::default_instance_;
  delete VehicleParam_reflection_;
  delete VehicleConfig::default_instance_;
  delete VehicleConfig_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto();
  ::apollo::common::config::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fconfig_5fextrinsics_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-apollo_msgs/proto/common/vehicle_confi"
    "g.proto\022\024apollo.common.config\032%apollo_ms"
    "gs/proto/common/header.proto\0320apollo_msg"
    "s/proto/common/config_extrinsics.proto\"\376"
    "\002\n\014VehicleParam\022\034\n\024front_edge_to_center\030"
    "\001 \001(\001\022\033\n\023back_edge_to_center\030\002 \001(\001\022\033\n\023le"
    "ft_edge_to_center\030\003 \001(\001\022\034\n\024right_edge_to"
    "_center\030\004 \001(\001\022\016\n\006length\030\005 \001(\001\022\r\n\005width\030\006"
    " \001(\001\022\016\n\006height\030\007 \001(\001\022\027\n\017min_turn_radius\030"
    "\010 \001(\001\022\030\n\020max_acceleration\030\t \001(\001\022\030\n\020max_d"
    "eceleration\030\n \001(\001\022\027\n\017max_steer_angle\030\013 \001"
    "(\001\022\034\n\024max_steer_angle_rate\030\014 \001(\001\022\023\n\013stee"
    "r_ratio\030\r \001(\001\022\022\n\nwheel_base\030\016 \001(\001\022\034\n\024whe"
    "el_rolling_radius\030\017 \001(\001\"\247\001\n\rVehicleConfi"
    "g\022%\n\006header\030\001 \001(\0132\025.apollo.common.Header"
    "\0229\n\rvehicle_param\030\002 \001(\0132\".apollo.common."
    "config.VehicleParam\0224\n\nextrinsics\030\003 \001(\0132"
    " .apollo.common.config.Extrinsicsb\006proto"
    "3", 721);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/common/vehicle_config.proto", &protobuf_RegisterTypes);
  VehicleParam::default_instance_ = new VehicleParam();
  VehicleConfig::default_instance_ = new VehicleConfig();
  VehicleParam::default_instance_->InitAsDefaultInstance();
  VehicleConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleParam::kFrontEdgeToCenterFieldNumber;
const int VehicleParam::kBackEdgeToCenterFieldNumber;
const int VehicleParam::kLeftEdgeToCenterFieldNumber;
const int VehicleParam::kRightEdgeToCenterFieldNumber;
const int VehicleParam::kLengthFieldNumber;
const int VehicleParam::kWidthFieldNumber;
const int VehicleParam::kHeightFieldNumber;
const int VehicleParam::kMinTurnRadiusFieldNumber;
const int VehicleParam::kMaxAccelerationFieldNumber;
const int VehicleParam::kMaxDecelerationFieldNumber;
const int VehicleParam::kMaxSteerAngleFieldNumber;
const int VehicleParam::kMaxSteerAngleRateFieldNumber;
const int VehicleParam::kSteerRatioFieldNumber;
const int VehicleParam::kWheelBaseFieldNumber;
const int VehicleParam::kWheelRollingRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleParam::VehicleParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.config.VehicleParam)
}

void VehicleParam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VehicleParam::VehicleParam(const VehicleParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.config.VehicleParam)
}

void VehicleParam::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  front_edge_to_center_ = 0;
  back_edge_to_center_ = 0;
  left_edge_to_center_ = 0;
  right_edge_to_center_ = 0;
  length_ = 0;
  width_ = 0;
  height_ = 0;
  min_turn_radius_ = 0;
  max_acceleration_ = 0;
  max_deceleration_ = 0;
  max_steer_angle_ = 0;
  max_steer_angle_rate_ = 0;
  steer_ratio_ = 0;
  wheel_base_ = 0;
  wheel_rolling_radius_ = 0;
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:apollo.common.config.VehicleParam)
  SharedDtor();
}

void VehicleParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleParam_descriptor_;
}

const VehicleParam& VehicleParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto();
  return *default_instance_;
}

VehicleParam* VehicleParam::default_instance_ = NULL;

VehicleParam* VehicleParam::New(::google::protobuf::Arena* arena) const {
  VehicleParam* n = new VehicleParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.config.VehicleParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(front_edge_to_center_, min_turn_radius_);
  ZR_(max_acceleration_, wheel_rolling_radius_);

#undef ZR_HELPER_
#undef ZR_

}

bool VehicleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.config.VehicleParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double front_edge_to_center = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_edge_to_center_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_back_edge_to_center;
        break;
      }

      // optional double back_edge_to_center = 2;
      case 2: {
        if (tag == 17) {
         parse_back_edge_to_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &back_edge_to_center_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_left_edge_to_center;
        break;
      }

      // optional double left_edge_to_center = 3;
      case 3: {
        if (tag == 25) {
         parse_left_edge_to_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_edge_to_center_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_right_edge_to_center;
        break;
      }

      // optional double right_edge_to_center = 4;
      case 4: {
        if (tag == 33) {
         parse_right_edge_to_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_edge_to_center_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_length;
        break;
      }

      // optional double length = 5;
      case 5: {
        if (tag == 41) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_width;
        break;
      }

      // optional double width = 6;
      case 6: {
        if (tag == 49) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_height;
        break;
      }

      // optional double height = 7;
      case 7: {
        if (tag == 57) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_min_turn_radius;
        break;
      }

      // optional double min_turn_radius = 8;
      case 8: {
        if (tag == 65) {
         parse_min_turn_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_turn_radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_max_acceleration;
        break;
      }

      // optional double max_acceleration = 9;
      case 9: {
        if (tag == 73) {
         parse_max_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_max_deceleration;
        break;
      }

      // optional double max_deceleration = 10;
      case 10: {
        if (tag == 81) {
         parse_max_deceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_max_steer_angle;
        break;
      }

      // optional double max_steer_angle = 11;
      case 11: {
        if (tag == 89) {
         parse_max_steer_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_max_steer_angle_rate;
        break;
      }

      // optional double max_steer_angle_rate = 12;
      case 12: {
        if (tag == 97) {
         parse_max_steer_angle_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_steer_ratio;
        break;
      }

      // optional double steer_ratio = 13;
      case 13: {
        if (tag == 105) {
         parse_steer_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_ratio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_wheel_base;
        break;
      }

      // optional double wheel_base = 14;
      case 14: {
        if (tag == 113) {
         parse_wheel_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_base_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_wheel_rolling_radius;
        break;
      }

      // optional double wheel_rolling_radius = 15;
      case 15: {
        if (tag == 121) {
         parse_wheel_rolling_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_rolling_radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.config.VehicleParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.config.VehicleParam)
  return false;
#undef DO_
}

void VehicleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.config.VehicleParam)
  // optional double front_edge_to_center = 1;
  if (this->front_edge_to_center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->front_edge_to_center(), output);
  }

  // optional double back_edge_to_center = 2;
  if (this->back_edge_to_center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->back_edge_to_center(), output);
  }

  // optional double left_edge_to_center = 3;
  if (this->left_edge_to_center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->left_edge_to_center(), output);
  }

  // optional double right_edge_to_center = 4;
  if (this->right_edge_to_center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->right_edge_to_center(), output);
  }

  // optional double length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // optional double min_turn_radius = 8;
  if (this->min_turn_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->min_turn_radius(), output);
  }

  // optional double max_acceleration = 9;
  if (this->max_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_acceleration(), output);
  }

  // optional double max_deceleration = 10;
  if (this->max_deceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_deceleration(), output);
  }

  // optional double max_steer_angle = 11;
  if (this->max_steer_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_steer_angle(), output);
  }

  // optional double max_steer_angle_rate = 12;
  if (this->max_steer_angle_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_steer_angle_rate(), output);
  }

  // optional double steer_ratio = 13;
  if (this->steer_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->steer_ratio(), output);
  }

  // optional double wheel_base = 14;
  if (this->wheel_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->wheel_base(), output);
  }

  // optional double wheel_rolling_radius = 15;
  if (this->wheel_rolling_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->wheel_rolling_radius(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.common.config.VehicleParam)
}

::google::protobuf::uint8* VehicleParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.config.VehicleParam)
  // optional double front_edge_to_center = 1;
  if (this->front_edge_to_center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->front_edge_to_center(), target);
  }

  // optional double back_edge_to_center = 2;
  if (this->back_edge_to_center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->back_edge_to_center(), target);
  }

  // optional double left_edge_to_center = 3;
  if (this->left_edge_to_center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->left_edge_to_center(), target);
  }

  // optional double right_edge_to_center = 4;
  if (this->right_edge_to_center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->right_edge_to_center(), target);
  }

  // optional double length = 5;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // optional double min_turn_radius = 8;
  if (this->min_turn_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->min_turn_radius(), target);
  }

  // optional double max_acceleration = 9;
  if (this->max_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_acceleration(), target);
  }

  // optional double max_deceleration = 10;
  if (this->max_deceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_deceleration(), target);
  }

  // optional double max_steer_angle = 11;
  if (this->max_steer_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_steer_angle(), target);
  }

  // optional double max_steer_angle_rate = 12;
  if (this->max_steer_angle_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_steer_angle_rate(), target);
  }

  // optional double steer_ratio = 13;
  if (this->steer_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->steer_ratio(), target);
  }

  // optional double wheel_base = 14;
  if (this->wheel_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->wheel_base(), target);
  }

  // optional double wheel_rolling_radius = 15;
  if (this->wheel_rolling_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->wheel_rolling_radius(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.config.VehicleParam)
  return target;
}

int VehicleParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.config.VehicleParam)
  int total_size = 0;

  // optional double front_edge_to_center = 1;
  if (this->front_edge_to_center() != 0) {
    total_size += 1 + 8;
  }

  // optional double back_edge_to_center = 2;
  if (this->back_edge_to_center() != 0) {
    total_size += 1 + 8;
  }

  // optional double left_edge_to_center = 3;
  if (this->left_edge_to_center() != 0) {
    total_size += 1 + 8;
  }

  // optional double right_edge_to_center = 4;
  if (this->right_edge_to_center() != 0) {
    total_size += 1 + 8;
  }

  // optional double length = 5;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // optional double width = 6;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // optional double height = 7;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // optional double min_turn_radius = 8;
  if (this->min_turn_radius() != 0) {
    total_size += 1 + 8;
  }

  // optional double max_acceleration = 9;
  if (this->max_acceleration() != 0) {
    total_size += 1 + 8;
  }

  // optional double max_deceleration = 10;
  if (this->max_deceleration() != 0) {
    total_size += 1 + 8;
  }

  // optional double max_steer_angle = 11;
  if (this->max_steer_angle() != 0) {
    total_size += 1 + 8;
  }

  // optional double max_steer_angle_rate = 12;
  if (this->max_steer_angle_rate() != 0) {
    total_size += 1 + 8;
  }

  // optional double steer_ratio = 13;
  if (this->steer_ratio() != 0) {
    total_size += 1 + 8;
  }

  // optional double wheel_base = 14;
  if (this->wheel_base() != 0) {
    total_size += 1 + 8;
  }

  // optional double wheel_rolling_radius = 15;
  if (this->wheel_rolling_radius() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.config.VehicleParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.config.VehicleParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.config.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.config.VehicleParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.front_edge_to_center() != 0) {
    set_front_edge_to_center(from.front_edge_to_center());
  }
  if (from.back_edge_to_center() != 0) {
    set_back_edge_to_center(from.back_edge_to_center());
  }
  if (from.left_edge_to_center() != 0) {
    set_left_edge_to_center(from.left_edge_to_center());
  }
  if (from.right_edge_to_center() != 0) {
    set_right_edge_to_center(from.right_edge_to_center());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.min_turn_radius() != 0) {
    set_min_turn_radius(from.min_turn_radius());
  }
  if (from.max_acceleration() != 0) {
    set_max_acceleration(from.max_acceleration());
  }
  if (from.max_deceleration() != 0) {
    set_max_deceleration(from.max_deceleration());
  }
  if (from.max_steer_angle() != 0) {
    set_max_steer_angle(from.max_steer_angle());
  }
  if (from.max_steer_angle_rate() != 0) {
    set_max_steer_angle_rate(from.max_steer_angle_rate());
  }
  if (from.steer_ratio() != 0) {
    set_steer_ratio(from.steer_ratio());
  }
  if (from.wheel_base() != 0) {
    set_wheel_base(from.wheel_base());
  }
  if (from.wheel_rolling_radius() != 0) {
    set_wheel_rolling_radius(from.wheel_rolling_radius());
  }
}

void VehicleParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.config.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.config.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {

  return true;
}

void VehicleParam::Swap(VehicleParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleParam::InternalSwap(VehicleParam* other) {
  std::swap(front_edge_to_center_, other->front_edge_to_center_);
  std::swap(back_edge_to_center_, other->back_edge_to_center_);
  std::swap(left_edge_to_center_, other->left_edge_to_center_);
  std::swap(right_edge_to_center_, other->right_edge_to_center_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(min_turn_radius_, other->min_turn_radius_);
  std::swap(max_acceleration_, other->max_acceleration_);
  std::swap(max_deceleration_, other->max_deceleration_);
  std::swap(max_steer_angle_, other->max_steer_angle_);
  std::swap(max_steer_angle_rate_, other->max_steer_angle_rate_);
  std::swap(steer_ratio_, other->steer_ratio_);
  std::swap(wheel_base_, other->wheel_base_);
  std::swap(wheel_rolling_radius_, other->wheel_rolling_radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleParam_descriptor_;
  metadata.reflection = VehicleParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleParam

// optional double front_edge_to_center = 1;
void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = 0;
}
 double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.front_edge_to_center)
  return front_edge_to_center_;
}
 void VehicleParam::set_front_edge_to_center(double value) {
  
  front_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.front_edge_to_center)
}

// optional double back_edge_to_center = 2;
void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = 0;
}
 double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.back_edge_to_center)
  return back_edge_to_center_;
}
 void VehicleParam::set_back_edge_to_center(double value) {
  
  back_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.back_edge_to_center)
}

// optional double left_edge_to_center = 3;
void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = 0;
}
 double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.left_edge_to_center)
  return left_edge_to_center_;
}
 void VehicleParam::set_left_edge_to_center(double value) {
  
  left_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.left_edge_to_center)
}

// optional double right_edge_to_center = 4;
void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = 0;
}
 double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.right_edge_to_center)
  return right_edge_to_center_;
}
 void VehicleParam::set_right_edge_to_center(double value) {
  
  right_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.right_edge_to_center)
}

// optional double length = 5;
void VehicleParam::clear_length() {
  length_ = 0;
}
 double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.length)
  return length_;
}
 void VehicleParam::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.length)
}

// optional double width = 6;
void VehicleParam::clear_width() {
  width_ = 0;
}
 double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.width)
  return width_;
}
 void VehicleParam::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.width)
}

// optional double height = 7;
void VehicleParam::clear_height() {
  height_ = 0;
}
 double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.height)
  return height_;
}
 void VehicleParam::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.height)
}

// optional double min_turn_radius = 8;
void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = 0;
}
 double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.min_turn_radius)
  return min_turn_radius_;
}
 void VehicleParam::set_min_turn_radius(double value) {
  
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.min_turn_radius)
}

// optional double max_acceleration = 9;
void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = 0;
}
 double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.max_acceleration)
  return max_acceleration_;
}
 void VehicleParam::set_max_acceleration(double value) {
  
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.max_acceleration)
}

// optional double max_deceleration = 10;
void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = 0;
}
 double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.max_deceleration)
  return max_deceleration_;
}
 void VehicleParam::set_max_deceleration(double value) {
  
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.max_deceleration)
}

// optional double max_steer_angle = 11;
void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = 0;
}
 double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.max_steer_angle)
  return max_steer_angle_;
}
 void VehicleParam::set_max_steer_angle(double value) {
  
  max_steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.max_steer_angle)
}

// optional double max_steer_angle_rate = 12;
void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = 0;
}
 double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.max_steer_angle_rate)
  return max_steer_angle_rate_;
}
 void VehicleParam::set_max_steer_angle_rate(double value) {
  
  max_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.max_steer_angle_rate)
}

// optional double steer_ratio = 13;
void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = 0;
}
 double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.steer_ratio)
  return steer_ratio_;
}
 void VehicleParam::set_steer_ratio(double value) {
  
  steer_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.steer_ratio)
}

// optional double wheel_base = 14;
void VehicleParam::clear_wheel_base() {
  wheel_base_ = 0;
}
 double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.wheel_base)
  return wheel_base_;
}
 void VehicleParam::set_wheel_base(double value) {
  
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.wheel_base)
}

// optional double wheel_rolling_radius = 15;
void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = 0;
}
 double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleParam.wheel_rolling_radius)
  return wheel_rolling_radius_;
}
 void VehicleParam::set_wheel_rolling_radius(double value) {
  
  wheel_rolling_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.config.VehicleParam.wheel_rolling_radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleConfig::kHeaderFieldNumber;
const int VehicleConfig::kVehicleParamFieldNumber;
const int VehicleConfig::kExtrinsicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleConfig::VehicleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.config.VehicleConfig)
}

void VehicleConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  vehicle_param_ = const_cast< ::apollo::common::config::VehicleParam*>(&::apollo::common::config::VehicleParam::default_instance());
  extrinsics_ = const_cast< ::apollo::common::config::Extrinsics*>(&::apollo::common::config::Extrinsics::default_instance());
}

VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.config.VehicleConfig)
}

void VehicleConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  vehicle_param_ = NULL;
  extrinsics_ = NULL;
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.common.config.VehicleConfig)
  SharedDtor();
}

void VehicleConfig::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete vehicle_param_;
    delete extrinsics_;
  }
}

void VehicleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleConfig_descriptor_;
}

const VehicleConfig& VehicleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fvehicle_5fconfig_2eproto();
  return *default_instance_;
}

VehicleConfig* VehicleConfig::default_instance_ = NULL;

VehicleConfig* VehicleConfig::New(::google::protobuf::Arena* arena) const {
  VehicleConfig* n = new VehicleConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.config.VehicleConfig)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_param_ != NULL) delete vehicle_param_;
  vehicle_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && extrinsics_ != NULL) delete extrinsics_;
  extrinsics_ = NULL;
}

bool VehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.config.VehicleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicle_param;
        break;
      }

      // optional .apollo.common.config.VehicleParam vehicle_param = 2;
      case 2: {
        if (tag == 18) {
         parse_vehicle_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extrinsics;
        break;
      }

      // optional .apollo.common.config.Extrinsics extrinsics = 3;
      case 3: {
        if (tag == 26) {
         parse_extrinsics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extrinsics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.config.VehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.config.VehicleConfig)
  return false;
#undef DO_
}

void VehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.config.VehicleConfig)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.common.config.VehicleParam vehicle_param = 2;
  if (this->has_vehicle_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehicle_param_, output);
  }

  // optional .apollo.common.config.Extrinsics extrinsics = 3;
  if (this->has_extrinsics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->extrinsics_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.common.config.VehicleConfig)
}

::google::protobuf::uint8* VehicleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.config.VehicleConfig)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.common.config.VehicleParam vehicle_param = 2;
  if (this->has_vehicle_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vehicle_param_, false, target);
  }

  // optional .apollo.common.config.Extrinsics extrinsics = 3;
  if (this->has_extrinsics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->extrinsics_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.config.VehicleConfig)
  return target;
}

int VehicleConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.config.VehicleConfig)
  int total_size = 0;

  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .apollo.common.config.VehicleParam vehicle_param = 2;
  if (this->has_vehicle_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehicle_param_);
  }

  // optional .apollo.common.config.Extrinsics extrinsics = 3;
  if (this->has_extrinsics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extrinsics_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.config.VehicleConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.config.VehicleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.config.VehicleConfig)
    MergeFrom(*source);
  }
}

void VehicleConfig::MergeFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.config.VehicleConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.has_vehicle_param()) {
    mutable_vehicle_param()->::apollo::common::config::VehicleParam::MergeFrom(from.vehicle_param());
  }
  if (from.has_extrinsics()) {
    mutable_extrinsics()->::apollo::common::config::Extrinsics::MergeFrom(from.extrinsics());
  }
}

void VehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.config.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.config.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {

  return true;
}

void VehicleConfig::Swap(VehicleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleConfig::InternalSwap(VehicleConfig* other) {
  std::swap(header_, other->header_);
  std::swap(vehicle_param_, other->vehicle_param_);
  std::swap(extrinsics_, other->extrinsics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleConfig_descriptor_;
  metadata.reflection = VehicleConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleConfig

// optional .apollo.common.Header header = 1;
bool VehicleConfig::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void VehicleConfig::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::apollo::common::Header& VehicleConfig::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleConfig.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* VehicleConfig::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.config.VehicleConfig.header)
  return header_;
}
::apollo::common::Header* VehicleConfig::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.config.VehicleConfig.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.config.VehicleConfig.header)
}

// optional .apollo.common.config.VehicleParam vehicle_param = 2;
bool VehicleConfig::has_vehicle_param() const {
  return !_is_default_instance_ && vehicle_param_ != NULL;
}
void VehicleConfig::clear_vehicle_param() {
  if (GetArenaNoVirtual() == NULL && vehicle_param_ != NULL) delete vehicle_param_;
  vehicle_param_ = NULL;
}
const ::apollo::common::config::VehicleParam& VehicleConfig::vehicle_param() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleConfig.vehicle_param)
  return vehicle_param_ != NULL ? *vehicle_param_ : *default_instance_->vehicle_param_;
}
::apollo::common::config::VehicleParam* VehicleConfig::mutable_vehicle_param() {
  
  if (vehicle_param_ == NULL) {
    vehicle_param_ = new ::apollo::common::config::VehicleParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.config.VehicleConfig.vehicle_param)
  return vehicle_param_;
}
::apollo::common::config::VehicleParam* VehicleConfig::release_vehicle_param() {
  // @@protoc_insertion_point(field_release:apollo.common.config.VehicleConfig.vehicle_param)
  
  ::apollo::common::config::VehicleParam* temp = vehicle_param_;
  vehicle_param_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_vehicle_param(::apollo::common::config::VehicleParam* vehicle_param) {
  delete vehicle_param_;
  vehicle_param_ = vehicle_param;
  if (vehicle_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.config.VehicleConfig.vehicle_param)
}

// optional .apollo.common.config.Extrinsics extrinsics = 3;
bool VehicleConfig::has_extrinsics() const {
  return !_is_default_instance_ && extrinsics_ != NULL;
}
void VehicleConfig::clear_extrinsics() {
  if (GetArenaNoVirtual() == NULL && extrinsics_ != NULL) delete extrinsics_;
  extrinsics_ = NULL;
}
const ::apollo::common::config::Extrinsics& VehicleConfig::extrinsics() const {
  // @@protoc_insertion_point(field_get:apollo.common.config.VehicleConfig.extrinsics)
  return extrinsics_ != NULL ? *extrinsics_ : *default_instance_->extrinsics_;
}
::apollo::common::config::Extrinsics* VehicleConfig::mutable_extrinsics() {
  
  if (extrinsics_ == NULL) {
    extrinsics_ = new ::apollo::common::config::Extrinsics;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.config.VehicleConfig.extrinsics)
  return extrinsics_;
}
::apollo::common::config::Extrinsics* VehicleConfig::release_extrinsics() {
  // @@protoc_insertion_point(field_release:apollo.common.config.VehicleConfig.extrinsics)
  
  ::apollo::common::config::Extrinsics* temp = extrinsics_;
  extrinsics_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_extrinsics(::apollo::common::config::Extrinsics* extrinsics) {
  delete extrinsics_;
  extrinsics_ = extrinsics;
  if (extrinsics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.config.VehicleConfig.extrinsics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
