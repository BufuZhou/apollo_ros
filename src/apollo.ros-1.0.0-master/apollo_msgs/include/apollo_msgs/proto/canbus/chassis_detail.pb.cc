// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/canbus/chassis_detail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/canbus/chassis_detail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace canbus {

namespace {

const ::google::protobuf::Descriptor* ChassisDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChassisDetail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChassisDetail_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CheckResponseSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckResponseSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battery_reflection_ = NULL;
const ::google::protobuf::Descriptor* Light_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Light_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Light_TurnLightType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Light_LampType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Light_LincolnLampType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Light_LincolnWiperType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Light_LincolnAmbientType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Eps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Eps_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Eps_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VehicleSpd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleSpd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleSpd_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Deceleration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Deceleration_reflection_ = NULL;
const ::google::protobuf::Descriptor* Brake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Brake_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Brake_HSAStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Brake_HSAModeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Epb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Epb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Epb_PBrakeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Gas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gas_reflection_ = NULL;
const ::google::protobuf::Descriptor* Esp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Esp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ems_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Ems_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Gear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gear_reflection_ = NULL;
const ::google::protobuf::Descriptor* Safety_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Safety_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BasicInfo_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BasicInfo_GpsQuality_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/canbus/chassis_detail.proto");
  GOOGLE_CHECK(file != NULL);
  ChassisDetail_descriptor_ = file->message_type(0);
  static const int ChassisDetail_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, car_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, basic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, safety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, ems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, esp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, gas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, epb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, brake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, vehicle_spd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, battery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, check_response_),
  };
  ChassisDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChassisDetail_descriptor_,
      ChassisDetail::default_instance_,
      ChassisDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChassisDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, _is_default_instance_));
  ChassisDetail_Type_descriptor_ = ChassisDetail_descriptor_->enum_type(0);
  CheckResponseSignal_descriptor_ = file->message_type(1);
  static const int CheckResponseSignal_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_eps_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_epb_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_esp_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_vtog_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_scu_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_switch_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_vcu_online_),
  };
  CheckResponseSignal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckResponseSignal_descriptor_,
      CheckResponseSignal::default_instance_,
      CheckResponseSignal_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckResponseSignal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, _is_default_instance_));
  Battery_descriptor_ = file->message_type(2);
  static const int Battery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battery, battery_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battery, fuel_level_),
  };
  Battery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Battery_descriptor_,
      Battery::default_instance_,
      Battery_offsets_,
      -1,
      -1,
      -1,
      sizeof(Battery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battery, _is_default_instance_));
  Light_descriptor_ = file->message_type(3);
  static const int Light_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, turn_light_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, lamp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, is_brake_lamp_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, is_auto_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, wiper_gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, lotion_gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, is_horn_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, lincoln_lamp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, lincoln_wiper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, lincoln_ambient_),
  };
  Light_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Light_descriptor_,
      Light::default_instance_,
      Light_offsets_,
      -1,
      -1,
      -1,
      sizeof(Light),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _is_default_instance_));
  Light_TurnLightType_descriptor_ = Light_descriptor_->enum_type(0);
  Light_LampType_descriptor_ = Light_descriptor_->enum_type(1);
  Light_LincolnLampType_descriptor_ = Light_descriptor_->enum_type(2);
  Light_LincolnWiperType_descriptor_ = Light_descriptor_->enum_type(3);
  Light_LincolnAmbientType_descriptor_ = Light_descriptor_->enum_type(4);
  Eps_descriptor_ = file->message_type(4);
  static const int Eps_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, is_eps_fail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, eps_control_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, eps_driver_hand_torq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, is_steering_angle_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, steering_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, steering_angle_spd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, is_trimming_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, is_calibration_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, is_failure_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, allow_enter_autonomous_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, current_driving_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, steering_angle_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, vehicle_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, epas_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, steering_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, driver_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, driver_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, watchdog_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, channel_1_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, channel_2_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, calibration_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, connector_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, timestamp_65_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, minor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, build_number_),
  };
  Eps_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Eps_descriptor_,
      Eps::default_instance_,
      Eps_offsets_,
      -1,
      -1,
      -1,
      sizeof(Eps),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, _is_default_instance_));
  Eps_Type_descriptor_ = Eps_descriptor_->enum_type(0);
  VehicleSpd_descriptor_ = file->message_type(5);
  static const int VehicleSpd_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_vehicle_standstill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_vehicle_spd_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, vehicle_spd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_wheel_spd_rr_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_direction_rr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_spd_rr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_wheel_spd_rl_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_direction_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_spd_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_wheel_spd_fr_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_direction_fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_spd_fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_wheel_spd_fl_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_direction_fl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_spd_fl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_yaw_rate_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, yaw_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, yaw_rate_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_ax_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, ax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, ax_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_ay_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, ay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, ay_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, lat_acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, long_acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, vert_acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, roll_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, acc_est_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, timestamp_sec_),
  };
  VehicleSpd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleSpd_descriptor_,
      VehicleSpd::default_instance_,
      VehicleSpd_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleSpd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, _is_default_instance_));
  VehicleSpd_Type_descriptor_ = VehicleSpd_descriptor_->enum_type(0);
  Deceleration_descriptor_ = file->message_type(6);
  static const int Deceleration_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, is_deceleration_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, is_deceleration_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, is_evb_fail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, evb_pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, brake_pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, brake_pressure_spd_),
  };
  Deceleration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Deceleration_descriptor_,
      Deceleration::default_instance_,
      Deceleration_offsets_,
      -1,
      -1,
      -1,
      sizeof(Deceleration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, _is_default_instance_));
  Brake_descriptor_ = file->message_type(7);
  static const int Brake_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, is_brake_pedal_pressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, is_brake_force_exist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, is_brake_over_heat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, is_hand_brake_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_pedal_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, is_brake_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, boo_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, boo_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, boo_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, watchdog_applying_brakes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, watchdog_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, driver_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, driver_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, watchdog_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, channel_1_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, channel_2_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, boo_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, connector_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_torque_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, hsa_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_torque_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, hsa_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, wheel_torque_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, minor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, build_number_),
  };
  Brake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Brake_descriptor_,
      Brake::default_instance_,
      Brake_offsets_,
      -1,
      -1,
      -1,
      sizeof(Brake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, _is_default_instance_));
  Brake_HSAStatusType_descriptor_ = Brake_descriptor_->enum_type(0);
  Brake_HSAModeType_descriptor_ = Brake_descriptor_->enum_type(1);
  Epb_descriptor_ = file->message_type(8);
  static const int Epb_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, is_epb_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, is_epb_released_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, epb_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, parking_brake_status_),
  };
  Epb_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Epb_descriptor_,
      Epb::default_instance_,
      Epb_offsets_,
      -1,
      -1,
      -1,
      sizeof(Epb),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, _is_default_instance_));
  Epb_PBrakeType_descriptor_ = Epb_descriptor_->enum_type(0);
  Gas_descriptor_ = file->message_type(9);
  static const int Gas_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, is_gas_pedal_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, is_gas_pedal_pressed_more_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, gas_pedal_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, is_gas_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, throttle_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, throttle_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, throttle_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, watchdog_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, throttle_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, driver_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, driver_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, watchdog_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, channel_1_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, channel_2_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, connector_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, accelerator_pedal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, accelerator_pedal_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, minor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, build_number_),
  };
  Gas_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gas_descriptor_,
      Gas::default_instance_,
      Gas_offsets_,
      -1,
      -1,
      -1,
      sizeof(Gas),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, _is_default_instance_));
  Esp_descriptor_ = file->message_type(10);
  static const int Esp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_esp_acc_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_esp_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_esp_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_abs_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_abs_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_tcsvdc_fail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_abs_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_stab_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_stab_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_trac_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_trac_enabled_),
  };
  Esp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Esp_descriptor_,
      Esp::default_instance_,
      Esp_offsets_,
      -1,
      -1,
      -1,
      sizeof(Esp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, _is_default_instance_));
  Ems_descriptor_ = file->message_type(11);
  static const int Ems_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, is_engine_acc_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, is_engine_acc_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, engine_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, max_engine_torq_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, min_engine_torq_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, base_engine_torq_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, is_engine_speed_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, engine_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, engine_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, is_over_engine_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, engine_rpm_),
  };
  Ems_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ems_descriptor_,
      Ems::default_instance_,
      Ems_offsets_,
      -1,
      -1,
      -1,
      sizeof(Ems),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, _is_default_instance_));
  Ems_Type_descriptor_ = Ems_descriptor_->enum_type(0);
  Gear_descriptor_ = file->message_type(12);
  static const int Gear_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, is_shift_position_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, gear_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, driver_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, gear_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, canbus_fault_),
  };
  Gear_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gear_descriptor_,
      Gear::default_instance_,
      Gear_offsets_,
      -1,
      -1,
      -1,
      sizeof(Gear),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, _is_default_instance_));
  Safety_descriptor_ = file->message_type(13);
  static const int Safety_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_driver_car_door_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_driver_buckled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, emergency_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, has_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_motor_invertor_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_system_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_power_battery_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_motor_invertor_over_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_small_battery_charge_discharge_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, driving_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_passenger_door_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_rearleft_door_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_rearright_door_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_hood_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_trunk_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_passenger_detected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_passenger_airbag_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_passenger_buckled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, front_left_tire_press_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, front_right_tire_press_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, rear_left_tire_press_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, rear_right_tire_press_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, car_driving_mode_),
  };
  Safety_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Safety_descriptor_,
      Safety::default_instance_,
      Safety_offsets_,
      -1,
      -1,
      -1,
      sizeof(Safety),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, _is_default_instance_));
  BasicInfo_descriptor_ = file->message_type(14);
  static const int BasicInfo_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_auto_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, power_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_air_bag_deployed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, odo_meter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, drive_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_system_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_human_interrupt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_on_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_off_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_res_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_cancel_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_on_off_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_res_cancel_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_inc_spd_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_dec_spd_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_inc_gap_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_dec_gap_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, lka_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, canbus_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, gps_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, hours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, compass_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, pdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_gps_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_inferred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, hdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, vdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, num_satellites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, gps_speed_),
  };
  BasicInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BasicInfo_descriptor_,
      BasicInfo::default_instance_,
      BasicInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(BasicInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, _is_default_instance_));
  BasicInfo_Type_descriptor_ = BasicInfo_descriptor_->enum_type(0);
  BasicInfo_GpsQuality_descriptor_ = BasicInfo_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChassisDetail_descriptor_, &ChassisDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckResponseSignal_descriptor_, &CheckResponseSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Battery_descriptor_, &Battery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Light_descriptor_, &Light::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Eps_descriptor_, &Eps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleSpd_descriptor_, &VehicleSpd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Deceleration_descriptor_, &Deceleration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Brake_descriptor_, &Brake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Epb_descriptor_, &Epb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gas_descriptor_, &Gas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Esp_descriptor_, &Esp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ems_descriptor_, &Ems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gear_descriptor_, &Gear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Safety_descriptor_, &Safety::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BasicInfo_descriptor_, &BasicInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto() {
  delete ChassisDetail::default_instance_;
  delete ChassisDetail_reflection_;
  delete CheckResponseSignal::default_instance_;
  delete CheckResponseSignal_reflection_;
  delete Battery::default_instance_;
  delete Battery_reflection_;
  delete Light::default_instance_;
  delete Light_reflection_;
  delete Eps::default_instance_;
  delete Eps_reflection_;
  delete VehicleSpd::default_instance_;
  delete VehicleSpd_reflection_;
  delete Deceleration::default_instance_;
  delete Deceleration_reflection_;
  delete Brake::default_instance_;
  delete Brake_reflection_;
  delete Epb::default_instance_;
  delete Epb_reflection_;
  delete Gas::default_instance_;
  delete Gas_reflection_;
  delete Esp::default_instance_;
  delete Esp_reflection_;
  delete Ems::default_instance_;
  delete Ems_reflection_;
  delete Gear::default_instance_;
  delete Gear_reflection_;
  delete Safety::default_instance_;
  delete Safety_reflection_;
  delete BasicInfo::default_instance_;
  delete BasicInfo_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::canbus::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-apollo_msgs/proto/canbus/chassis_detai"
    "l.proto\022\rapollo.canbus\032&apollo_msgs/prot"
    "o/canbus/chassis.proto\"\235\005\n\rChassisDetail"
    "\0223\n\010car_type\030\001 \001(\0162!.apollo.canbus.Chass"
    "isDetail.Type\022\'\n\005basic\030\002 \001(\0132\030.apollo.ca"
    "nbus.BasicInfo\022%\n\006safety\030\003 \001(\0132\025.apollo."
    "canbus.Safety\022!\n\004gear\030\004 \001(\0132\023.apollo.can"
    "bus.Gear\022\037\n\003ems\030\005 \001(\0132\022.apollo.canbus.Em"
    "s\022\037\n\003esp\030\006 \001(\0132\022.apollo.canbus.Esp\022\037\n\003ga"
    "s\030\007 \001(\0132\022.apollo.canbus.Gas\022\037\n\003epb\030\010 \001(\013"
    "2\022.apollo.canbus.Epb\022#\n\005brake\030\t \001(\0132\024.ap"
    "ollo.canbus.Brake\0221\n\014deceleration\030\n \001(\0132"
    "\033.apollo.canbus.Deceleration\022.\n\013vehicle_"
    "spd\030\013 \001(\0132\031.apollo.canbus.VehicleSpd\022\037\n\003"
    "eps\030\014 \001(\0132\022.apollo.canbus.Eps\022#\n\005light\030\r"
    " \001(\0132\024.apollo.canbus.Light\022\'\n\007battery\030\016 "
    "\001(\0132\026.apollo.canbus.Battery\022:\n\016check_res"
    "ponse\030\017 \001(\0132\".apollo.canbus.CheckRespons"
    "eSignal\"-\n\004Type\022\017\n\013QIRUI_EQ_15\020\000\022\024\n\020CHAN"
    "GAN_RUICHENG\020\001\"\272\001\n\023CheckResponseSignal\022\025"
    "\n\ris_eps_online\030\001 \001(\010\022\025\n\ris_epb_online\030\002"
    " \001(\010\022\025\n\ris_esp_online\030\003 \001(\010\022\026\n\016is_vtog_o"
    "nline\030\004 \001(\010\022\025\n\ris_scu_online\030\005 \001(\010\022\030\n\020is"
    "_switch_online\030\006 \001(\010\022\025\n\ris_vcu_online\030\007 "
    "\001(\010\"6\n\007Battery\022\027\n\017battery_percent\030\001 \001(\001\022"
    "\022\n\nfuel_level\030\002 \001(\001\"\244\t\n\005Light\022;\n\017turn_li"
    "ght_type\030\001 \001(\0162\".apollo.canbus.Light.Tur"
    "nLightType\0220\n\tlamp_type\030\002 \001(\0162\035.apollo.c"
    "anbus.Light.LampType\022\030\n\020is_brake_lamp_on"
    "\030\003 \001(\010\022\025\n\ris_auto_light\030\004 \001(\010\022\022\n\nwiper_g"
    "ear\030\005 \001(\005\022\023\n\013lotion_gear\030\006 \001(\005\022\022\n\nis_hor"
    "n_on\030\007 \001(\010\022\?\n\021lincoln_lamp_type\030\010 \001(\0162$."
    "apollo.canbus.Light.LincolnLampType\022<\n\rl"
    "incoln_wiper\030\t \001(\0162%.apollo.canbus.Light"
    ".LincolnWiperType\022@\n\017lincoln_ambient\030\n \001"
    "(\0162\'.apollo.canbus.Light.LincolnAmbientT"
    "ype\"[\n\rTurnLightType\022\022\n\016TURN_LIGHT_OFF\020\000"
    "\022\020\n\014TURN_LEFT_ON\020\001\022\021\n\rTURN_RIGHT_ON\020\002\022\021\n"
    "\rTURN_LIGHT_ON\020\003\";\n\010LampType\022\014\n\010BEAM_OFF"
    "\020\000\022\020\n\014HIGH_BEAM_ON\020\001\022\017\n\013LOW_BEAM_ON\020\002\"Y\n"
    "\017LincolnLampType\022\r\n\tBEAM_NULL\020\000\022\026\n\022BEAM_"
    "FLASH_TO_PASS\020\001\022\r\n\tBEAM_HIGH\020\002\022\020\n\014BEAM_I"
    "NVALID\020\003\"\334\002\n\020LincolnWiperType\022\r\n\tWIPER_O"
    "FF\020\000\022\022\n\016WIPER_AUTO_OFF\020\001\022\024\n\020WIPER_OFF_MO"
    "VING\020\002\022\024\n\020WIPER_MANUAL_OFF\020\003\022\023\n\017WIPER_MA"
    "NUAL_ON\020\004\022\024\n\020WIPER_MANUAL_LOW\020\005\022\025\n\021WIPER"
    "_MANUAL_HIGH\020\006\022\024\n\020WIPER_MIST_FLICK\020\007\022\016\n\n"
    "WIPER_WASH\020\010\022\022\n\016WIPER_AUTO_LOW\020\t\022\023\n\017WIPE"
    "R_AUTO_HIGH\020\n\022\027\n\023WIPER_COURTESY_WIPE\020\013\022\025"
    "\n\021WIPER_AUTO_ADJUST\020\014\022\022\n\016WIPER_RESERVED\020"
    "\r\022\021\n\rWIPER_STALLED\020\016\022\021\n\rWIPER_NO_DATA\020\017\""
    "\250\001\n\022LincolnAmbientType\022\020\n\014AMBIENT_DARK\020\000"
    "\022\021\n\rAMBIENT_LIGHT\020\001\022\024\n\020AMBIENT_TWILIGHT\020"
    "\002\022\025\n\021AMBIENT_TUNNEL_ON\020\003\022\026\n\022AMBIENT_TUNN"
    "EL_OFF\020\004\022\023\n\017AMBIENT_INVALID\020\005\022\023\n\017AMBIENT"
    "_NO_DATA\020\007\"\205\006\n\003Eps\022\023\n\013is_eps_fail\030\001 \001(\010\022"
    "2\n\021eps_control_state\030\002 \001(\0162\027.apollo.canb"
    "us.Eps.Type\022\034\n\024eps_driver_hand_torq\030\003 \001("
    "\001\022\037\n\027is_steering_angle_valid\030\004 \001(\010\022\026\n\016st"
    "eering_angle\030\005 \001(\001\022\032\n\022steering_angle_spd"
    "\030\006 \001(\001\022\032\n\022is_trimming_status\030\007 \001(\010\022\035\n\025is"
    "_calibration_status\030\010 \001(\010\022\031\n\021is_failure_"
    "status\030\t \001(\010\022#\n\033allow_enter_autonomous_m"
    "ode\030\n \001(\005\022\034\n\024current_driving_mode\030\013 \001(\005\022"
    "\032\n\022steering_angle_cmd\030\014 \001(\001\022\025\n\rvehicle_s"
    "peed\030\r \001(\001\022\023\n\013epas_torque\030\016 \001(\001\022\030\n\020steer"
    "ing_enabled\030\017 \001(\010\022\027\n\017driver_override\030\020 \001"
    "(\010\022\027\n\017driver_activity\030\021 \001(\010\022\026\n\016watchdog_"
    "fault\030\022 \001(\010\022\027\n\017channel_1_fault\030\023 \001(\010\022\027\n\017"
    "channel_2_fault\030\024 \001(\010\022\031\n\021calibration_fau"
    "lt\030\025 \001(\010\022\027\n\017connector_fault\030\026 \001(\010\022\024\n\014tim"
    "estamp_65\030\027 \001(\001\022\025\n\rmajor_version\030\030 \001(\005\022\025"
    "\n\rminor_version\030\031 \001(\005\022\024\n\014build_number\030\032 "
    "\001(\005\"=\n\004Type\022\021\n\rNOT_AVAILABLE\020\000\022\t\n\005READY\020"
    "\001\022\n\n\006ACTIVE\020\002\022\013\n\007INVALID\020\003\"\200\007\n\nVehicleSp"
    "d\022\035\n\025is_vehicle_standstill\030\001 \001(\010\022\034\n\024is_v"
    "ehicle_spd_valid\030\002 \001(\010\022\023\n\013vehicle_spd\030\003 "
    "\001(\001\022\035\n\025is_wheel_spd_rr_valid\030\004 \001(\010\022:\n\022wh"
    "eel_direction_rr\030\005 \001(\0162\036.apollo.canbus.V"
    "ehicleSpd.Type\022\024\n\014wheel_spd_rr\030\006 \001(\001\022\035\n\025"
    "is_wheel_spd_rl_valid\030\007 \001(\010\022:\n\022wheel_dir"
    "ection_rl\030\010 \001(\0162\036.apollo.canbus.VehicleS"
    "pd.Type\022\024\n\014wheel_spd_rl\030\t \001(\001\022\035\n\025is_whee"
    "l_spd_fr_valid\030\n \001(\010\022:\n\022wheel_direction_"
    "fr\030\013 \001(\0162\036.apollo.canbus.VehicleSpd.Type"
    "\022\024\n\014wheel_spd_fr\030\014 \001(\001\022\035\n\025is_wheel_spd_f"
    "l_valid\030\r \001(\010\022:\n\022wheel_direction_fl\030\016 \001("
    "\0162\036.apollo.canbus.VehicleSpd.Type\022\024\n\014whe"
    "el_spd_fl\030\017 \001(\001\022\031\n\021is_yaw_rate_valid\030\020 \001"
    "(\010\022\020\n\010yaw_rate\030\021 \001(\001\022\027\n\017yaw_rate_offset\030"
    "\022 \001(\001\022\023\n\013is_ax_valid\030\023 \001(\010\022\n\n\002ax\030\024 \001(\001\022\021"
    "\n\tax_offset\030\025 \001(\001\022\023\n\013is_ay_valid\030\026 \001(\010\022\n"
    "\n\002ay\030\027 \001(\001\022\021\n\tay_offset\030\030 \001(\001\022\017\n\007lat_acc"
    "\030\031 \001(\001\022\020\n\010long_acc\030\032 \001(\001\022\020\n\010vert_acc\030\033 \001"
    "(\001\022\021\n\troll_rate\030\034 \001(\001\022\017\n\007acc_est\030\035 \001(\001\022\025"
    "\n\rtimestamp_sec\030\036 \001(\001\">\n\004Type\022\013\n\007FORWARD"
    "\020\000\022\014\n\010BACKWARD\020\001\022\016\n\nSTANDSTILL\020\002\022\013\n\007INVA"
    "LID\020\003\"\306\001\n\014Deceleration\022!\n\031is_deceleratio"
    "n_available\030\001 \001(\010\022\036\n\026is_deceleration_act"
    "ive\030\002 \001(\010\022\024\n\014deceleration\030\003 \001(\001\022\023\n\013is_ev"
    "b_fail\030\004 \001(\001\022\024\n\014evb_pressure\030\005 \001(\001\022\026\n\016br"
    "ake_pressure\030\006 \001(\001\022\032\n\022brake_pressure_spd"
    "\030\007 \001(\001\"\257\010\n\005Brake\022\036\n\026is_brake_pedal_press"
    "ed\030\001 \001(\010\022\034\n\024is_brake_force_exist\030\002 \001(\010\022\032"
    "\n\022is_brake_over_heat\030\003 \001(\010\022\030\n\020is_hand_br"
    "ake_on\030\004 \001(\010\022\034\n\024brake_pedal_position\030\005 \001"
    "(\001\022\026\n\016is_brake_valid\030\006 \001(\010\022\023\n\013brake_inpu"
    "t\030\007 \001(\001\022\021\n\tbrake_cmd\030\010 \001(\001\022\024\n\014brake_outp"
    "ut\030\t \001(\001\022\021\n\tboo_input\030\n \001(\010\022\017\n\007boo_cmd\030\013"
    " \001(\010\022\022\n\nboo_output\030\014 \001(\010\022 \n\030watchdog_app"
    "lying_brakes\030\r \001(\010\022\027\n\017watchdog_source\030\016 "
    "\001(\005\022\025\n\rbrake_enabled\030\017 \001(\010\022\027\n\017driver_ove"
    "rride\030\020 \001(\010\022\027\n\017driver_activity\030\021 \001(\010\022\026\n\016"
    "watchdog_fault\030\022 \001(\010\022\027\n\017channel_1_fault\030"
    "\023 \001(\010\022\027\n\017channel_2_fault\030\024 \001(\010\022\021\n\tboo_fa"
    "ult\030\025 \001(\010\022\027\n\017connector_fault\030\026 \001(\010\022\030\n\020br"
    "ake_torque_req\030\027 \001(\005\0226\n\nhsa_status\030\030 \001(\016"
    "2\".apollo.canbus.Brake.HSAStatusType\022\030\n\020"
    "brake_torque_act\030\031 \001(\005\0222\n\010hsa_mode\030\032 \001(\016"
    "2 .apollo.canbus.Brake.HSAModeType\022\030\n\020wh"
    "eel_torque_act\030\033 \001(\005\022\025\n\rmajor_version\030\034 "
    "\001(\005\022\025\n\rminor_version\030\035 \001(\005\022\024\n\014build_numb"
    "er\030\036 \001(\005\"\273\001\n\rHSAStatusType\022\020\n\014HSA_INACTI"
    "VE\020\000\022\030\n\024HSA_FINDING_GRADIENT\020\001\022\026\n\022HSA_AC"
    "TIVE_PRESSED\020\002\022\027\n\023HSA_ACTIVE_RELEASED\020\003\022"
    "\024\n\020HSA_FAST_RELEASE\020\004\022\024\n\020HSA_SLOW_RELEAS"
    "E\020\005\022\016\n\nHSA_FAILED\020\006\022\021\n\rHSA_UNDEFINED\020\007\"P"
    "\n\013HSAModeType\022\013\n\007HSA_OFF\020\000\022\014\n\010HSA_AUTO\020\001"
    "\022\016\n\nHSA_MANUAL\020\002\022\026\n\022HSA_MODE_UNDEFINED\020\003"
    "\"\333\001\n\003Epb\022\024\n\014is_epb_error\030\001 \001(\010\022\027\n\017is_epb"
    "_released\030\002 \001(\010\022\022\n\nepb_status\030\003 \001(\005\022;\n\024p"
    "arking_brake_status\030\004 \001(\0162\035.apollo.canbu"
    "s.Epb.PBrakeType\"T\n\nPBrakeType\022\016\n\nPBRAKE"
    "_OFF\020\000\022\025\n\021PBRAKE_TRANSITION\020\001\022\r\n\tPBRAKE_"
    "ON\020\002\022\020\n\014PBRAKE_FAULT\020\003\"\204\004\n\003Gas\022\032\n\022is_gas"
    "_pedal_error\030\001 \001(\010\022!\n\031is_gas_pedal_press"
    "ed_more\030\002 \001(\010\022\032\n\022gas_pedal_position\030\003 \001("
    "\001\022\024\n\014is_gas_valid\030\004 \001(\010\022\026\n\016throttle_inpu"
    "t\030\005 \001(\001\022\024\n\014throttle_cmd\030\006 \001(\001\022\027\n\017throttl"
    "e_output\030\007 \001(\001\022\027\n\017watchdog_source\030\010 \001(\005\022"
    "\030\n\020throttle_enabled\030\t \001(\010\022\027\n\017driver_over"
    "ride\030\n \001(\010\022\027\n\017driver_activity\030\013 \001(\010\022\026\n\016w"
    "atchdog_fault\030\014 \001(\010\022\027\n\017channel_1_fault\030\r"
    " \001(\010\022\027\n\017channel_2_fault\030\016 \001(\010\022\027\n\017connect"
    "or_fault\030\017 \001(\010\022\031\n\021accelerator_pedal\030\020 \001("
    "\001\022\036\n\026accelerator_pedal_rate\030\021 \001(\001\022\025\n\rmaj"
    "or_version\030\022 \001(\005\022\025\n\rminor_version\030\023 \001(\005\022"
    "\024\n\014build_number\030\024 \001(\005\"\210\002\n\003Esp\022\030\n\020is_esp_"
    "acc_error\030\001 \001(\010\022\021\n\tis_esp_on\030\002 \001(\010\022\025\n\ris"
    "_esp_active\030\003 \001(\010\022\024\n\014is_abs_error\030\004 \001(\010\022"
    "\025\n\ris_abs_active\030\005 \001(\010\022\026\n\016is_tcsvdc_fail"
    "\030\006 \001(\010\022\026\n\016is_abs_enabled\030\007 \001(\010\022\026\n\016is_sta"
    "b_active\030\010 \001(\010\022\027\n\017is_stab_enabled\030\t \001(\010\022"
    "\026\n\016is_trac_active\030\n \001(\010\022\027\n\017is_trac_enabl"
    "ed\030\013 \001(\010\"\215\003\n\003Ems\022\037\n\027is_engine_acc_availa"
    "ble\030\001 \001(\010\022\033\n\023is_engine_acc_error\030\002 \001(\010\022-"
    "\n\014engine_state\030\003 \001(\0162\027.apollo.canbus.Ems"
    ".Type\022\037\n\027max_engine_torq_percent\030\004 \001(\001\022\037"
    "\n\027min_engine_torq_percent\030\005 \001(\001\022!\n\031base_"
    "engine_torq_constant\030\006 \001(\005\022\035\n\025is_engine_"
    "speed_error\030\007 \001(\010\022\024\n\014engine_speed\030\010 \001(\001\022"
    "\025\n\rengine_torque\030\t \001(\005\022\035\n\025is_over_engine"
    "_torque\030\n \001(\010\022\022\n\nengine_rpm\030\013 \001(\001\"5\n\004Typ"
    "e\022\010\n\004STOP\020\000\022\t\n\005CRANK\020\001\022\013\n\007RUNNING\020\002\022\013\n\007I"
    "NVALID\020\003\"\306\001\n\004Gear\022\037\n\027is_shift_position_v"
    "alid\030\001 \001(\010\0227\n\ngear_state\030\002 \001(\0162#.apollo."
    "canbus.Chassis.GearPosition\022\027\n\017driver_ov"
    "erride\030\003 \001(\010\0225\n\010gear_cmd\030\004 \001(\0162#.apollo."
    "canbus.Chassis.GearPosition\022\024\n\014canbus_fa"
    "ult\030\005 \001(\010\"\347\005\n\006Safety\022 \n\030is_driver_car_do"
    "or_close\030\001 \001(\010\022\031\n\021is_driver_buckled\030\002 \001("
    "\010\022\030\n\020emergency_button\030\003 \001(\005\022\021\n\thas_error"
    "\030\004 \001(\010\022\037\n\027is_motor_invertor_fault\030\005 \001(\010\022"
    "\027\n\017is_system_fault\030\006 \001(\010\022\036\n\026is_power_bat"
    "tery_fault\030\007 \001(\010\022*\n\"is_motor_invertor_ov"
    "er_temperature\030\010 \001(\010\022/\n\'is_small_battery"
    "_charge_discharge_fault\030\t \001(\010\022\024\n\014driving"
    "_mode\030\n \001(\005\022\036\n\026is_passenger_door_open\030\013 "
    "\001(\010\022\035\n\025is_rearleft_door_open\030\014 \001(\010\022\036\n\026is"
    "_rearright_door_open\030\r \001(\010\022\024\n\014is_hood_op"
    "en\030\016 \001(\010\022\025\n\ris_trunk_open\030\017 \001(\010\022\035\n\025is_pa"
    "ssenger_detected\030\020 \001(\010\022#\n\033is_passenger_a"
    "irbag_enabled\030\021 \001(\010\022\034\n\024is_passenger_buck"
    "led\030\022 \001(\010\022\035\n\025front_left_tire_press\030\023 \001(\005"
    "\022\036\n\026front_right_tire_press\030\024 \001(\005\022\034\n\024rear"
    "_left_tire_press\030\025 \001(\005\022\035\n\025rear_right_tir"
    "e_press\030\026 \001(\005\022<\n\020car_driving_mode\030\027 \001(\0162"
    "\".apollo.canbus.Chassis.DrivingMode\"\211\010\n\t"
    "BasicInfo\022\024\n\014is_auto_mode\030\001 \001(\010\0222\n\013power"
    "_state\030\002 \001(\0162\035.apollo.canbus.BasicInfo.T"
    "ype\022\033\n\023is_air_bag_deployed\030\003 \001(\010\022\021\n\todo_"
    "meter\030\004 \001(\001\022\023\n\013drive_range\030\005 \001(\001\022\027\n\017is_s"
    "ystem_error\030\006 \001(\010\022\032\n\022is_human_interrupt\030"
    "\007 \001(\010\022\025\n\racc_on_button\030\010 \001(\010\022\026\n\016acc_off_"
    "button\030\t \001(\010\022\026\n\016acc_res_button\030\n \001(\010\022\031\n\021"
    "acc_cancel_button\030\013 \001(\010\022\031\n\021acc_on_off_bu"
    "tton\030\014 \001(\010\022\035\n\025acc_res_cancel_button\030\r \001("
    "\010\022\032\n\022acc_inc_spd_button\030\016 \001(\010\022\032\n\022acc_dec"
    "_spd_button\030\017 \001(\010\022\032\n\022acc_inc_gap_button\030"
    "\020 \001(\010\022\032\n\022acc_dec_gap_button\030\021 \001(\010\022\022\n\nlka"
    "_button\030\022 \001(\010\022\024\n\014canbus_fault\030\023 \001(\010\022\020\n\010l"
    "atitude\030\024 \001(\001\022\021\n\tlongitude\030\025 \001(\001\022\021\n\tgps_"
    "valid\030\026 \001(\010\022\014\n\004year\030\027 \001(\005\022\r\n\005month\030\030 \001(\005"
    "\022\013\n\003day\030\031 \001(\005\022\r\n\005hours\030\032 \001(\005\022\017\n\007minutes\030"
    "\033 \001(\005\022\017\n\007seconds\030\034 \001(\005\022\031\n\021compass_direct"
    "ion\030\035 \001(\001\022\014\n\004pdop\030\036 \001(\001\022\024\n\014is_gps_fault\030"
    "\037 \001(\010\022\023\n\013is_inferred\030  \001(\010\022\020\n\010altitude\030!"
    " \001(\001\022\017\n\007heading\030\" \001(\001\022\014\n\004hdop\030# \001(\001\022\014\n\004v"
    "dop\030$ \001(\001\0224\n\007quality\030% \001(\0162#.apollo.canb"
    "us.BasicInfo.GpsQuality\022\026\n\016num_satellite"
    "s\030& \001(\005\022\021\n\tgps_speed\030\' \001(\001\"8\n\004Type\022\007\n\003OF"
    "F\020\000\022\007\n\003ACC\020\001\022\006\n\002ON\020\002\022\t\n\005START\020\003\022\013\n\007INVAL"
    "ID\020\004\"A\n\nGpsQuality\022\n\n\006FIX_NO\020\000\022\n\n\006FIX_2D"
    "\020\001\022\n\n\006FIX_3D\020\002\022\017\n\013FIX_INVALID\020\003b\006proto3", 8559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/canbus/chassis_detail.proto", &protobuf_RegisterTypes);
  ChassisDetail::default_instance_ = new ChassisDetail();
  CheckResponseSignal::default_instance_ = new CheckResponseSignal();
  Battery::default_instance_ = new Battery();
  Light::default_instance_ = new Light();
  Eps::default_instance_ = new Eps();
  VehicleSpd::default_instance_ = new VehicleSpd();
  Deceleration::default_instance_ = new Deceleration();
  Brake::default_instance_ = new Brake();
  Epb::default_instance_ = new Epb();
  Gas::default_instance_ = new Gas();
  Esp::default_instance_ = new Esp();
  Ems::default_instance_ = new Ems();
  Gear::default_instance_ = new Gear();
  Safety::default_instance_ = new Safety();
  BasicInfo::default_instance_ = new BasicInfo();
  ChassisDetail::default_instance_->InitAsDefaultInstance();
  CheckResponseSignal::default_instance_->InitAsDefaultInstance();
  Battery::default_instance_->InitAsDefaultInstance();
  Light::default_instance_->InitAsDefaultInstance();
  Eps::default_instance_->InitAsDefaultInstance();
  VehicleSpd::default_instance_->InitAsDefaultInstance();
  Deceleration::default_instance_->InitAsDefaultInstance();
  Brake::default_instance_->InitAsDefaultInstance();
  Epb::default_instance_->InitAsDefaultInstance();
  Gas::default_instance_->InitAsDefaultInstance();
  Esp::default_instance_->InitAsDefaultInstance();
  Ems::default_instance_->InitAsDefaultInstance();
  Gear::default_instance_->InitAsDefaultInstance();
  Safety::default_instance_->InitAsDefaultInstance();
  BasicInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ChassisDetail_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChassisDetail_Type_descriptor_;
}
bool ChassisDetail_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChassisDetail_Type ChassisDetail::QIRUI_EQ_15;
const ChassisDetail_Type ChassisDetail::CHANGAN_RUICHENG;
const ChassisDetail_Type ChassisDetail::Type_MIN;
const ChassisDetail_Type ChassisDetail::Type_MAX;
const int ChassisDetail::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisDetail::kCarTypeFieldNumber;
const int ChassisDetail::kBasicFieldNumber;
const int ChassisDetail::kSafetyFieldNumber;
const int ChassisDetail::kGearFieldNumber;
const int ChassisDetail::kEmsFieldNumber;
const int ChassisDetail::kEspFieldNumber;
const int ChassisDetail::kGasFieldNumber;
const int ChassisDetail::kEpbFieldNumber;
const int ChassisDetail::kBrakeFieldNumber;
const int ChassisDetail::kDecelerationFieldNumber;
const int ChassisDetail::kVehicleSpdFieldNumber;
const int ChassisDetail::kEpsFieldNumber;
const int ChassisDetail::kLightFieldNumber;
const int ChassisDetail::kBatteryFieldNumber;
const int ChassisDetail::kCheckResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisDetail::ChassisDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.ChassisDetail)
}

void ChassisDetail::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  basic_ = const_cast< ::apollo::canbus::BasicInfo*>(&::apollo::canbus::BasicInfo::default_instance());
  safety_ = const_cast< ::apollo::canbus::Safety*>(&::apollo::canbus::Safety::default_instance());
  gear_ = const_cast< ::apollo::canbus::Gear*>(&::apollo::canbus::Gear::default_instance());
  ems_ = const_cast< ::apollo::canbus::Ems*>(&::apollo::canbus::Ems::default_instance());
  esp_ = const_cast< ::apollo::canbus::Esp*>(&::apollo::canbus::Esp::default_instance());
  gas_ = const_cast< ::apollo::canbus::Gas*>(&::apollo::canbus::Gas::default_instance());
  epb_ = const_cast< ::apollo::canbus::Epb*>(&::apollo::canbus::Epb::default_instance());
  brake_ = const_cast< ::apollo::canbus::Brake*>(&::apollo::canbus::Brake::default_instance());
  deceleration_ = const_cast< ::apollo::canbus::Deceleration*>(&::apollo::canbus::Deceleration::default_instance());
  vehicle_spd_ = const_cast< ::apollo::canbus::VehicleSpd*>(&::apollo::canbus::VehicleSpd::default_instance());
  eps_ = const_cast< ::apollo::canbus::Eps*>(&::apollo::canbus::Eps::default_instance());
  light_ = const_cast< ::apollo::canbus::Light*>(&::apollo::canbus::Light::default_instance());
  battery_ = const_cast< ::apollo::canbus::Battery*>(&::apollo::canbus::Battery::default_instance());
  check_response_ = const_cast< ::apollo::canbus::CheckResponseSignal*>(&::apollo::canbus::CheckResponseSignal::default_instance());
}

ChassisDetail::ChassisDetail(const ChassisDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.ChassisDetail)
}

void ChassisDetail::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  car_type_ = 0;
  basic_ = NULL;
  safety_ = NULL;
  gear_ = NULL;
  ems_ = NULL;
  esp_ = NULL;
  gas_ = NULL;
  epb_ = NULL;
  brake_ = NULL;
  deceleration_ = NULL;
  vehicle_spd_ = NULL;
  eps_ = NULL;
  light_ = NULL;
  battery_ = NULL;
  check_response_ = NULL;
}

ChassisDetail::~ChassisDetail() {
  // @@protoc_insertion_point(destructor:apollo.canbus.ChassisDetail)
  SharedDtor();
}

void ChassisDetail::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
    delete safety_;
    delete gear_;
    delete ems_;
    delete esp_;
    delete gas_;
    delete epb_;
    delete brake_;
    delete deceleration_;
    delete vehicle_spd_;
    delete eps_;
    delete light_;
    delete battery_;
    delete check_response_;
  }
}

void ChassisDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChassisDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChassisDetail_descriptor_;
}

const ChassisDetail& ChassisDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

ChassisDetail* ChassisDetail::default_instance_ = NULL;

ChassisDetail* ChassisDetail::New(::google::protobuf::Arena* arena) const {
  ChassisDetail* n = new ChassisDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChassisDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.ChassisDetail)
  car_type_ = 0;
  if (GetArenaNoVirtual() == NULL && basic_ != NULL) delete basic_;
  basic_ = NULL;
  if (GetArenaNoVirtual() == NULL && safety_ != NULL) delete safety_;
  safety_ = NULL;
  if (GetArenaNoVirtual() == NULL && gear_ != NULL) delete gear_;
  gear_ = NULL;
  if (GetArenaNoVirtual() == NULL && ems_ != NULL) delete ems_;
  ems_ = NULL;
  if (GetArenaNoVirtual() == NULL && esp_ != NULL) delete esp_;
  esp_ = NULL;
  if (GetArenaNoVirtual() == NULL && gas_ != NULL) delete gas_;
  gas_ = NULL;
  if (GetArenaNoVirtual() == NULL && epb_ != NULL) delete epb_;
  epb_ = NULL;
  if (GetArenaNoVirtual() == NULL && brake_ != NULL) delete brake_;
  brake_ = NULL;
  if (GetArenaNoVirtual() == NULL && deceleration_ != NULL) delete deceleration_;
  deceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_spd_ != NULL) delete vehicle_spd_;
  vehicle_spd_ = NULL;
  if (GetArenaNoVirtual() == NULL && eps_ != NULL) delete eps_;
  eps_ = NULL;
  if (GetArenaNoVirtual() == NULL && light_ != NULL) delete light_;
  light_ = NULL;
  if (GetArenaNoVirtual() == NULL && battery_ != NULL) delete battery_;
  battery_ = NULL;
  if (GetArenaNoVirtual() == NULL && check_response_ != NULL) delete check_response_;
  check_response_ = NULL;
}

bool ChassisDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.ChassisDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_car_type(static_cast< ::apollo::canbus::ChassisDetail_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_basic;
        break;
      }

      // optional .apollo.canbus.BasicInfo basic = 2;
      case 2: {
        if (tag == 18) {
         parse_basic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_safety;
        break;
      }

      // optional .apollo.canbus.Safety safety = 3;
      case 3: {
        if (tag == 26) {
         parse_safety:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_safety()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gear;
        break;
      }

      // optional .apollo.canbus.Gear gear = 4;
      case 4: {
        if (tag == 34) {
         parse_gear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ems;
        break;
      }

      // optional .apollo.canbus.Ems ems = 5;
      case 5: {
        if (tag == 42) {
         parse_ems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_esp;
        break;
      }

      // optional .apollo.canbus.Esp esp = 6;
      case 6: {
        if (tag == 50) {
         parse_esp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gas;
        break;
      }

      // optional .apollo.canbus.Gas gas = 7;
      case 7: {
        if (tag == 58) {
         parse_gas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_epb;
        break;
      }

      // optional .apollo.canbus.Epb epb = 8;
      case 8: {
        if (tag == 66) {
         parse_epb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_brake;
        break;
      }

      // optional .apollo.canbus.Brake brake = 9;
      case 9: {
        if (tag == 74) {
         parse_brake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_deceleration;
        break;
      }

      // optional .apollo.canbus.Deceleration deceleration = 10;
      case 10: {
        if (tag == 82) {
         parse_deceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vehicle_spd;
        break;
      }

      // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
      case 11: {
        if (tag == 90) {
         parse_vehicle_spd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_spd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_eps;
        break;
      }

      // optional .apollo.canbus.Eps eps = 12;
      case 12: {
        if (tag == 98) {
         parse_eps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_light;
        break;
      }

      // optional .apollo.canbus.Light light = 13;
      case 13: {
        if (tag == 106) {
         parse_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_battery;
        break;
      }

      // optional .apollo.canbus.Battery battery = 14;
      case 14: {
        if (tag == 114) {
         parse_battery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_check_response;
        break;
      }

      // optional .apollo.canbus.CheckResponseSignal check_response = 15;
      case 15: {
        if (tag == 122) {
         parse_check_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.ChassisDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.ChassisDetail)
  return false;
#undef DO_
}

void ChassisDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.ChassisDetail)
  // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (this->car_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->car_type(), output);
  }

  // optional .apollo.canbus.BasicInfo basic = 2;
  if (this->has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->basic_, output);
  }

  // optional .apollo.canbus.Safety safety = 3;
  if (this->has_safety()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->safety_, output);
  }

  // optional .apollo.canbus.Gear gear = 4;
  if (this->has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->gear_, output);
  }

  // optional .apollo.canbus.Ems ems = 5;
  if (this->has_ems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ems_, output);
  }

  // optional .apollo.canbus.Esp esp = 6;
  if (this->has_esp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->esp_, output);
  }

  // optional .apollo.canbus.Gas gas = 7;
  if (this->has_gas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->gas_, output);
  }

  // optional .apollo.canbus.Epb epb = 8;
  if (this->has_epb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->epb_, output);
  }

  // optional .apollo.canbus.Brake brake = 9;
  if (this->has_brake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->brake_, output);
  }

  // optional .apollo.canbus.Deceleration deceleration = 10;
  if (this->has_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->deceleration_, output);
  }

  // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (this->has_vehicle_spd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->vehicle_spd_, output);
  }

  // optional .apollo.canbus.Eps eps = 12;
  if (this->has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->eps_, output);
  }

  // optional .apollo.canbus.Light light = 13;
  if (this->has_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->light_, output);
  }

  // optional .apollo.canbus.Battery battery = 14;
  if (this->has_battery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->battery_, output);
  }

  // optional .apollo.canbus.CheckResponseSignal check_response = 15;
  if (this->has_check_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->check_response_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.ChassisDetail)
}

::google::protobuf::uint8* ChassisDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.ChassisDetail)
  // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (this->car_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->car_type(), target);
  }

  // optional .apollo.canbus.BasicInfo basic = 2;
  if (this->has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->basic_, false, target);
  }

  // optional .apollo.canbus.Safety safety = 3;
  if (this->has_safety()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->safety_, false, target);
  }

  // optional .apollo.canbus.Gear gear = 4;
  if (this->has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->gear_, false, target);
  }

  // optional .apollo.canbus.Ems ems = 5;
  if (this->has_ems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ems_, false, target);
  }

  // optional .apollo.canbus.Esp esp = 6;
  if (this->has_esp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->esp_, false, target);
  }

  // optional .apollo.canbus.Gas gas = 7;
  if (this->has_gas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->gas_, false, target);
  }

  // optional .apollo.canbus.Epb epb = 8;
  if (this->has_epb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->epb_, false, target);
  }

  // optional .apollo.canbus.Brake brake = 9;
  if (this->has_brake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->brake_, false, target);
  }

  // optional .apollo.canbus.Deceleration deceleration = 10;
  if (this->has_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->deceleration_, false, target);
  }

  // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (this->has_vehicle_spd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->vehicle_spd_, false, target);
  }

  // optional .apollo.canbus.Eps eps = 12;
  if (this->has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->eps_, false, target);
  }

  // optional .apollo.canbus.Light light = 13;
  if (this->has_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->light_, false, target);
  }

  // optional .apollo.canbus.Battery battery = 14;
  if (this->has_battery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->battery_, false, target);
  }

  // optional .apollo.canbus.CheckResponseSignal check_response = 15;
  if (this->has_check_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->check_response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.ChassisDetail)
  return target;
}

int ChassisDetail::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.ChassisDetail)
  int total_size = 0;

  // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (this->car_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->car_type());
  }

  // optional .apollo.canbus.BasicInfo basic = 2;
  if (this->has_basic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->basic_);
  }

  // optional .apollo.canbus.Safety safety = 3;
  if (this->has_safety()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->safety_);
  }

  // optional .apollo.canbus.Gear gear = 4;
  if (this->has_gear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gear_);
  }

  // optional .apollo.canbus.Ems ems = 5;
  if (this->has_ems()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ems_);
  }

  // optional .apollo.canbus.Esp esp = 6;
  if (this->has_esp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->esp_);
  }

  // optional .apollo.canbus.Gas gas = 7;
  if (this->has_gas()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gas_);
  }

  // optional .apollo.canbus.Epb epb = 8;
  if (this->has_epb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->epb_);
  }

  // optional .apollo.canbus.Brake brake = 9;
  if (this->has_brake()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->brake_);
  }

  // optional .apollo.canbus.Deceleration deceleration = 10;
  if (this->has_deceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->deceleration_);
  }

  // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (this->has_vehicle_spd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehicle_spd_);
  }

  // optional .apollo.canbus.Eps eps = 12;
  if (this->has_eps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->eps_);
  }

  // optional .apollo.canbus.Light light = 13;
  if (this->has_light()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->light_);
  }

  // optional .apollo.canbus.Battery battery = 14;
  if (this->has_battery()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->battery_);
  }

  // optional .apollo.canbus.CheckResponseSignal check_response = 15;
  if (this->has_check_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->check_response_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChassisDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.ChassisDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChassisDetail* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.ChassisDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.ChassisDetail)
    MergeFrom(*source);
  }
}

void ChassisDetail::MergeFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.ChassisDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.car_type() != 0) {
    set_car_type(from.car_type());
  }
  if (from.has_basic()) {
    mutable_basic()->::apollo::canbus::BasicInfo::MergeFrom(from.basic());
  }
  if (from.has_safety()) {
    mutable_safety()->::apollo::canbus::Safety::MergeFrom(from.safety());
  }
  if (from.has_gear()) {
    mutable_gear()->::apollo::canbus::Gear::MergeFrom(from.gear());
  }
  if (from.has_ems()) {
    mutable_ems()->::apollo::canbus::Ems::MergeFrom(from.ems());
  }
  if (from.has_esp()) {
    mutable_esp()->::apollo::canbus::Esp::MergeFrom(from.esp());
  }
  if (from.has_gas()) {
    mutable_gas()->::apollo::canbus::Gas::MergeFrom(from.gas());
  }
  if (from.has_epb()) {
    mutable_epb()->::apollo::canbus::Epb::MergeFrom(from.epb());
  }
  if (from.has_brake()) {
    mutable_brake()->::apollo::canbus::Brake::MergeFrom(from.brake());
  }
  if (from.has_deceleration()) {
    mutable_deceleration()->::apollo::canbus::Deceleration::MergeFrom(from.deceleration());
  }
  if (from.has_vehicle_spd()) {
    mutable_vehicle_spd()->::apollo::canbus::VehicleSpd::MergeFrom(from.vehicle_spd());
  }
  if (from.has_eps()) {
    mutable_eps()->::apollo::canbus::Eps::MergeFrom(from.eps());
  }
  if (from.has_light()) {
    mutable_light()->::apollo::canbus::Light::MergeFrom(from.light());
  }
  if (from.has_battery()) {
    mutable_battery()->::apollo::canbus::Battery::MergeFrom(from.battery());
  }
  if (from.has_check_response()) {
    mutable_check_response()->::apollo::canbus::CheckResponseSignal::MergeFrom(from.check_response());
  }
}

void ChassisDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisDetail::CopyFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisDetail::IsInitialized() const {

  return true;
}

void ChassisDetail::Swap(ChassisDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisDetail::InternalSwap(ChassisDetail* other) {
  std::swap(car_type_, other->car_type_);
  std::swap(basic_, other->basic_);
  std::swap(safety_, other->safety_);
  std::swap(gear_, other->gear_);
  std::swap(ems_, other->ems_);
  std::swap(esp_, other->esp_);
  std::swap(gas_, other->gas_);
  std::swap(epb_, other->epb_);
  std::swap(brake_, other->brake_);
  std::swap(deceleration_, other->deceleration_);
  std::swap(vehicle_spd_, other->vehicle_spd_);
  std::swap(eps_, other->eps_);
  std::swap(light_, other->light_);
  std::swap(battery_, other->battery_);
  std::swap(check_response_, other->check_response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChassisDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChassisDetail_descriptor_;
  metadata.reflection = ChassisDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChassisDetail

// optional .apollo.canbus.ChassisDetail.Type car_type = 1;
void ChassisDetail::clear_car_type() {
  car_type_ = 0;
}
 ::apollo::canbus::ChassisDetail_Type ChassisDetail::car_type() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.car_type)
  return static_cast< ::apollo::canbus::ChassisDetail_Type >(car_type_);
}
 void ChassisDetail::set_car_type(::apollo::canbus::ChassisDetail_Type value) {
  
  car_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisDetail.car_type)
}

// optional .apollo.canbus.BasicInfo basic = 2;
bool ChassisDetail::has_basic() const {
  return !_is_default_instance_ && basic_ != NULL;
}
void ChassisDetail::clear_basic() {
  if (GetArenaNoVirtual() == NULL && basic_ != NULL) delete basic_;
  basic_ = NULL;
}
const ::apollo::canbus::BasicInfo& ChassisDetail::basic() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.basic)
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
}
::apollo::canbus::BasicInfo* ChassisDetail::mutable_basic() {
  
  if (basic_ == NULL) {
    basic_ = new ::apollo::canbus::BasicInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.basic)
  return basic_;
}
::apollo::canbus::BasicInfo* ChassisDetail::release_basic() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.basic)
  
  ::apollo::canbus::BasicInfo* temp = basic_;
  basic_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_basic(::apollo::canbus::BasicInfo* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.basic)
}

// optional .apollo.canbus.Safety safety = 3;
bool ChassisDetail::has_safety() const {
  return !_is_default_instance_ && safety_ != NULL;
}
void ChassisDetail::clear_safety() {
  if (GetArenaNoVirtual() == NULL && safety_ != NULL) delete safety_;
  safety_ = NULL;
}
const ::apollo::canbus::Safety& ChassisDetail::safety() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.safety)
  return safety_ != NULL ? *safety_ : *default_instance_->safety_;
}
::apollo::canbus::Safety* ChassisDetail::mutable_safety() {
  
  if (safety_ == NULL) {
    safety_ = new ::apollo::canbus::Safety;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.safety)
  return safety_;
}
::apollo::canbus::Safety* ChassisDetail::release_safety() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.safety)
  
  ::apollo::canbus::Safety* temp = safety_;
  safety_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_safety(::apollo::canbus::Safety* safety) {
  delete safety_;
  safety_ = safety;
  if (safety) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.safety)
}

// optional .apollo.canbus.Gear gear = 4;
bool ChassisDetail::has_gear() const {
  return !_is_default_instance_ && gear_ != NULL;
}
void ChassisDetail::clear_gear() {
  if (GetArenaNoVirtual() == NULL && gear_ != NULL) delete gear_;
  gear_ = NULL;
}
const ::apollo::canbus::Gear& ChassisDetail::gear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.gear)
  return gear_ != NULL ? *gear_ : *default_instance_->gear_;
}
::apollo::canbus::Gear* ChassisDetail::mutable_gear() {
  
  if (gear_ == NULL) {
    gear_ = new ::apollo::canbus::Gear;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.gear)
  return gear_;
}
::apollo::canbus::Gear* ChassisDetail::release_gear() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.gear)
  
  ::apollo::canbus::Gear* temp = gear_;
  gear_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_gear(::apollo::canbus::Gear* gear) {
  delete gear_;
  gear_ = gear;
  if (gear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.gear)
}

// optional .apollo.canbus.Ems ems = 5;
bool ChassisDetail::has_ems() const {
  return !_is_default_instance_ && ems_ != NULL;
}
void ChassisDetail::clear_ems() {
  if (GetArenaNoVirtual() == NULL && ems_ != NULL) delete ems_;
  ems_ = NULL;
}
const ::apollo::canbus::Ems& ChassisDetail::ems() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.ems)
  return ems_ != NULL ? *ems_ : *default_instance_->ems_;
}
::apollo::canbus::Ems* ChassisDetail::mutable_ems() {
  
  if (ems_ == NULL) {
    ems_ = new ::apollo::canbus::Ems;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.ems)
  return ems_;
}
::apollo::canbus::Ems* ChassisDetail::release_ems() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.ems)
  
  ::apollo::canbus::Ems* temp = ems_;
  ems_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_ems(::apollo::canbus::Ems* ems) {
  delete ems_;
  ems_ = ems;
  if (ems) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.ems)
}

// optional .apollo.canbus.Esp esp = 6;
bool ChassisDetail::has_esp() const {
  return !_is_default_instance_ && esp_ != NULL;
}
void ChassisDetail::clear_esp() {
  if (GetArenaNoVirtual() == NULL && esp_ != NULL) delete esp_;
  esp_ = NULL;
}
const ::apollo::canbus::Esp& ChassisDetail::esp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.esp)
  return esp_ != NULL ? *esp_ : *default_instance_->esp_;
}
::apollo::canbus::Esp* ChassisDetail::mutable_esp() {
  
  if (esp_ == NULL) {
    esp_ = new ::apollo::canbus::Esp;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.esp)
  return esp_;
}
::apollo::canbus::Esp* ChassisDetail::release_esp() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.esp)
  
  ::apollo::canbus::Esp* temp = esp_;
  esp_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_esp(::apollo::canbus::Esp* esp) {
  delete esp_;
  esp_ = esp;
  if (esp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.esp)
}

// optional .apollo.canbus.Gas gas = 7;
bool ChassisDetail::has_gas() const {
  return !_is_default_instance_ && gas_ != NULL;
}
void ChassisDetail::clear_gas() {
  if (GetArenaNoVirtual() == NULL && gas_ != NULL) delete gas_;
  gas_ = NULL;
}
const ::apollo::canbus::Gas& ChassisDetail::gas() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.gas)
  return gas_ != NULL ? *gas_ : *default_instance_->gas_;
}
::apollo::canbus::Gas* ChassisDetail::mutable_gas() {
  
  if (gas_ == NULL) {
    gas_ = new ::apollo::canbus::Gas;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.gas)
  return gas_;
}
::apollo::canbus::Gas* ChassisDetail::release_gas() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.gas)
  
  ::apollo::canbus::Gas* temp = gas_;
  gas_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_gas(::apollo::canbus::Gas* gas) {
  delete gas_;
  gas_ = gas;
  if (gas) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.gas)
}

// optional .apollo.canbus.Epb epb = 8;
bool ChassisDetail::has_epb() const {
  return !_is_default_instance_ && epb_ != NULL;
}
void ChassisDetail::clear_epb() {
  if (GetArenaNoVirtual() == NULL && epb_ != NULL) delete epb_;
  epb_ = NULL;
}
const ::apollo::canbus::Epb& ChassisDetail::epb() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.epb)
  return epb_ != NULL ? *epb_ : *default_instance_->epb_;
}
::apollo::canbus::Epb* ChassisDetail::mutable_epb() {
  
  if (epb_ == NULL) {
    epb_ = new ::apollo::canbus::Epb;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.epb)
  return epb_;
}
::apollo::canbus::Epb* ChassisDetail::release_epb() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.epb)
  
  ::apollo::canbus::Epb* temp = epb_;
  epb_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_epb(::apollo::canbus::Epb* epb) {
  delete epb_;
  epb_ = epb;
  if (epb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.epb)
}

// optional .apollo.canbus.Brake brake = 9;
bool ChassisDetail::has_brake() const {
  return !_is_default_instance_ && brake_ != NULL;
}
void ChassisDetail::clear_brake() {
  if (GetArenaNoVirtual() == NULL && brake_ != NULL) delete brake_;
  brake_ = NULL;
}
const ::apollo::canbus::Brake& ChassisDetail::brake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.brake)
  return brake_ != NULL ? *brake_ : *default_instance_->brake_;
}
::apollo::canbus::Brake* ChassisDetail::mutable_brake() {
  
  if (brake_ == NULL) {
    brake_ = new ::apollo::canbus::Brake;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.brake)
  return brake_;
}
::apollo::canbus::Brake* ChassisDetail::release_brake() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.brake)
  
  ::apollo::canbus::Brake* temp = brake_;
  brake_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_brake(::apollo::canbus::Brake* brake) {
  delete brake_;
  brake_ = brake;
  if (brake) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.brake)
}

// optional .apollo.canbus.Deceleration deceleration = 10;
bool ChassisDetail::has_deceleration() const {
  return !_is_default_instance_ && deceleration_ != NULL;
}
void ChassisDetail::clear_deceleration() {
  if (GetArenaNoVirtual() == NULL && deceleration_ != NULL) delete deceleration_;
  deceleration_ = NULL;
}
const ::apollo::canbus::Deceleration& ChassisDetail::deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.deceleration)
  return deceleration_ != NULL ? *deceleration_ : *default_instance_->deceleration_;
}
::apollo::canbus::Deceleration* ChassisDetail::mutable_deceleration() {
  
  if (deceleration_ == NULL) {
    deceleration_ = new ::apollo::canbus::Deceleration;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.deceleration)
  return deceleration_;
}
::apollo::canbus::Deceleration* ChassisDetail::release_deceleration() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.deceleration)
  
  ::apollo::canbus::Deceleration* temp = deceleration_;
  deceleration_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_deceleration(::apollo::canbus::Deceleration* deceleration) {
  delete deceleration_;
  deceleration_ = deceleration;
  if (deceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.deceleration)
}

// optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
bool ChassisDetail::has_vehicle_spd() const {
  return !_is_default_instance_ && vehicle_spd_ != NULL;
}
void ChassisDetail::clear_vehicle_spd() {
  if (GetArenaNoVirtual() == NULL && vehicle_spd_ != NULL) delete vehicle_spd_;
  vehicle_spd_ = NULL;
}
const ::apollo::canbus::VehicleSpd& ChassisDetail::vehicle_spd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.vehicle_spd)
  return vehicle_spd_ != NULL ? *vehicle_spd_ : *default_instance_->vehicle_spd_;
}
::apollo::canbus::VehicleSpd* ChassisDetail::mutable_vehicle_spd() {
  
  if (vehicle_spd_ == NULL) {
    vehicle_spd_ = new ::apollo::canbus::VehicleSpd;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.vehicle_spd)
  return vehicle_spd_;
}
::apollo::canbus::VehicleSpd* ChassisDetail::release_vehicle_spd() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.vehicle_spd)
  
  ::apollo::canbus::VehicleSpd* temp = vehicle_spd_;
  vehicle_spd_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_vehicle_spd(::apollo::canbus::VehicleSpd* vehicle_spd) {
  delete vehicle_spd_;
  vehicle_spd_ = vehicle_spd;
  if (vehicle_spd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.vehicle_spd)
}

// optional .apollo.canbus.Eps eps = 12;
bool ChassisDetail::has_eps() const {
  return !_is_default_instance_ && eps_ != NULL;
}
void ChassisDetail::clear_eps() {
  if (GetArenaNoVirtual() == NULL && eps_ != NULL) delete eps_;
  eps_ = NULL;
}
const ::apollo::canbus::Eps& ChassisDetail::eps() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.eps)
  return eps_ != NULL ? *eps_ : *default_instance_->eps_;
}
::apollo::canbus::Eps* ChassisDetail::mutable_eps() {
  
  if (eps_ == NULL) {
    eps_ = new ::apollo::canbus::Eps;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.eps)
  return eps_;
}
::apollo::canbus::Eps* ChassisDetail::release_eps() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.eps)
  
  ::apollo::canbus::Eps* temp = eps_;
  eps_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_eps(::apollo::canbus::Eps* eps) {
  delete eps_;
  eps_ = eps;
  if (eps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.eps)
}

// optional .apollo.canbus.Light light = 13;
bool ChassisDetail::has_light() const {
  return !_is_default_instance_ && light_ != NULL;
}
void ChassisDetail::clear_light() {
  if (GetArenaNoVirtual() == NULL && light_ != NULL) delete light_;
  light_ = NULL;
}
const ::apollo::canbus::Light& ChassisDetail::light() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.light)
  return light_ != NULL ? *light_ : *default_instance_->light_;
}
::apollo::canbus::Light* ChassisDetail::mutable_light() {
  
  if (light_ == NULL) {
    light_ = new ::apollo::canbus::Light;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.light)
  return light_;
}
::apollo::canbus::Light* ChassisDetail::release_light() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.light)
  
  ::apollo::canbus::Light* temp = light_;
  light_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_light(::apollo::canbus::Light* light) {
  delete light_;
  light_ = light;
  if (light) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.light)
}

// optional .apollo.canbus.Battery battery = 14;
bool ChassisDetail::has_battery() const {
  return !_is_default_instance_ && battery_ != NULL;
}
void ChassisDetail::clear_battery() {
  if (GetArenaNoVirtual() == NULL && battery_ != NULL) delete battery_;
  battery_ = NULL;
}
const ::apollo::canbus::Battery& ChassisDetail::battery() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.battery)
  return battery_ != NULL ? *battery_ : *default_instance_->battery_;
}
::apollo::canbus::Battery* ChassisDetail::mutable_battery() {
  
  if (battery_ == NULL) {
    battery_ = new ::apollo::canbus::Battery;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.battery)
  return battery_;
}
::apollo::canbus::Battery* ChassisDetail::release_battery() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.battery)
  
  ::apollo::canbus::Battery* temp = battery_;
  battery_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_battery(::apollo::canbus::Battery* battery) {
  delete battery_;
  battery_ = battery;
  if (battery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.battery)
}

// optional .apollo.canbus.CheckResponseSignal check_response = 15;
bool ChassisDetail::has_check_response() const {
  return !_is_default_instance_ && check_response_ != NULL;
}
void ChassisDetail::clear_check_response() {
  if (GetArenaNoVirtual() == NULL && check_response_ != NULL) delete check_response_;
  check_response_ = NULL;
}
const ::apollo::canbus::CheckResponseSignal& ChassisDetail::check_response() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.check_response)
  return check_response_ != NULL ? *check_response_ : *default_instance_->check_response_;
}
::apollo::canbus::CheckResponseSignal* ChassisDetail::mutable_check_response() {
  
  if (check_response_ == NULL) {
    check_response_ = new ::apollo::canbus::CheckResponseSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.check_response)
  return check_response_;
}
::apollo::canbus::CheckResponseSignal* ChassisDetail::release_check_response() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.check_response)
  
  ::apollo::canbus::CheckResponseSignal* temp = check_response_;
  check_response_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_check_response(::apollo::canbus::CheckResponseSignal* check_response) {
  delete check_response_;
  check_response_ = check_response;
  if (check_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.check_response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckResponseSignal::kIsEpsOnlineFieldNumber;
const int CheckResponseSignal::kIsEpbOnlineFieldNumber;
const int CheckResponseSignal::kIsEspOnlineFieldNumber;
const int CheckResponseSignal::kIsVtogOnlineFieldNumber;
const int CheckResponseSignal::kIsScuOnlineFieldNumber;
const int CheckResponseSignal::kIsSwitchOnlineFieldNumber;
const int CheckResponseSignal::kIsVcuOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckResponseSignal::CheckResponseSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.CheckResponseSignal)
}

void CheckResponseSignal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CheckResponseSignal::CheckResponseSignal(const CheckResponseSignal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.CheckResponseSignal)
}

void CheckResponseSignal::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_eps_online_ = false;
  is_epb_online_ = false;
  is_esp_online_ = false;
  is_vtog_online_ = false;
  is_scu_online_ = false;
  is_switch_online_ = false;
  is_vcu_online_ = false;
}

CheckResponseSignal::~CheckResponseSignal() {
  // @@protoc_insertion_point(destructor:apollo.canbus.CheckResponseSignal)
  SharedDtor();
}

void CheckResponseSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckResponseSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckResponseSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckResponseSignal_descriptor_;
}

const CheckResponseSignal& CheckResponseSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

CheckResponseSignal* CheckResponseSignal::default_instance_ = NULL;

CheckResponseSignal* CheckResponseSignal::New(::google::protobuf::Arena* arena) const {
  CheckResponseSignal* n = new CheckResponseSignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckResponseSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.CheckResponseSignal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CheckResponseSignal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CheckResponseSignal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_eps_online_, is_vcu_online_);

#undef ZR_HELPER_
#undef ZR_

}

bool CheckResponseSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.CheckResponseSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_eps_online = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_eps_online_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_epb_online;
        break;
      }

      // optional bool is_epb_online = 2;
      case 2: {
        if (tag == 16) {
         parse_is_epb_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_online_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_esp_online;
        break;
      }

      // optional bool is_esp_online = 3;
      case 3: {
        if (tag == 24) {
         parse_is_esp_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_online_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_vtog_online;
        break;
      }

      // optional bool is_vtog_online = 4;
      case 4: {
        if (tag == 32) {
         parse_is_vtog_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vtog_online_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_scu_online;
        break;
      }

      // optional bool is_scu_online = 5;
      case 5: {
        if (tag == 40) {
         parse_is_scu_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_scu_online_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_switch_online;
        break;
      }

      // optional bool is_switch_online = 6;
      case 6: {
        if (tag == 48) {
         parse_is_switch_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_switch_online_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_vcu_online;
        break;
      }

      // optional bool is_vcu_online = 7;
      case 7: {
        if (tag == 56) {
         parse_is_vcu_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vcu_online_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.CheckResponseSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.CheckResponseSignal)
  return false;
#undef DO_
}

void CheckResponseSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.CheckResponseSignal)
  // optional bool is_eps_online = 1;
  if (this->is_eps_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_eps_online(), output);
  }

  // optional bool is_epb_online = 2;
  if (this->is_epb_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_epb_online(), output);
  }

  // optional bool is_esp_online = 3;
  if (this->is_esp_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_esp_online(), output);
  }

  // optional bool is_vtog_online = 4;
  if (this->is_vtog_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_vtog_online(), output);
  }

  // optional bool is_scu_online = 5;
  if (this->is_scu_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_scu_online(), output);
  }

  // optional bool is_switch_online = 6;
  if (this->is_switch_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_switch_online(), output);
  }

  // optional bool is_vcu_online = 7;
  if (this->is_vcu_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_vcu_online(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.CheckResponseSignal)
}

::google::protobuf::uint8* CheckResponseSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.CheckResponseSignal)
  // optional bool is_eps_online = 1;
  if (this->is_eps_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_eps_online(), target);
  }

  // optional bool is_epb_online = 2;
  if (this->is_epb_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_epb_online(), target);
  }

  // optional bool is_esp_online = 3;
  if (this->is_esp_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_esp_online(), target);
  }

  // optional bool is_vtog_online = 4;
  if (this->is_vtog_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_vtog_online(), target);
  }

  // optional bool is_scu_online = 5;
  if (this->is_scu_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_scu_online(), target);
  }

  // optional bool is_switch_online = 6;
  if (this->is_switch_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_switch_online(), target);
  }

  // optional bool is_vcu_online = 7;
  if (this->is_vcu_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_vcu_online(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.CheckResponseSignal)
  return target;
}

int CheckResponseSignal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.CheckResponseSignal)
  int total_size = 0;

  // optional bool is_eps_online = 1;
  if (this->is_eps_online() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_epb_online = 2;
  if (this->is_epb_online() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_esp_online = 3;
  if (this->is_esp_online() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_vtog_online = 4;
  if (this->is_vtog_online() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_scu_online = 5;
  if (this->is_scu_online() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_switch_online = 6;
  if (this->is_switch_online() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_vcu_online = 7;
  if (this->is_vcu_online() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckResponseSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.CheckResponseSignal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CheckResponseSignal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckResponseSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.CheckResponseSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.CheckResponseSignal)
    MergeFrom(*source);
  }
}

void CheckResponseSignal::MergeFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.CheckResponseSignal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_eps_online() != 0) {
    set_is_eps_online(from.is_eps_online());
  }
  if (from.is_epb_online() != 0) {
    set_is_epb_online(from.is_epb_online());
  }
  if (from.is_esp_online() != 0) {
    set_is_esp_online(from.is_esp_online());
  }
  if (from.is_vtog_online() != 0) {
    set_is_vtog_online(from.is_vtog_online());
  }
  if (from.is_scu_online() != 0) {
    set_is_scu_online(from.is_scu_online());
  }
  if (from.is_switch_online() != 0) {
    set_is_switch_online(from.is_switch_online());
  }
  if (from.is_vcu_online() != 0) {
    set_is_vcu_online(from.is_vcu_online());
  }
}

void CheckResponseSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponseSignal::CopyFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponseSignal::IsInitialized() const {

  return true;
}

void CheckResponseSignal::Swap(CheckResponseSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckResponseSignal::InternalSwap(CheckResponseSignal* other) {
  std::swap(is_eps_online_, other->is_eps_online_);
  std::swap(is_epb_online_, other->is_epb_online_);
  std::swap(is_esp_online_, other->is_esp_online_);
  std::swap(is_vtog_online_, other->is_vtog_online_);
  std::swap(is_scu_online_, other->is_scu_online_);
  std::swap(is_switch_online_, other->is_switch_online_);
  std::swap(is_vcu_online_, other->is_vcu_online_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckResponseSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckResponseSignal_descriptor_;
  metadata.reflection = CheckResponseSignal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckResponseSignal

// optional bool is_eps_online = 1;
void CheckResponseSignal::clear_is_eps_online() {
  is_eps_online_ = false;
}
 bool CheckResponseSignal::is_eps_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_eps_online)
  return is_eps_online_;
}
 void CheckResponseSignal::set_is_eps_online(bool value) {
  
  is_eps_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_eps_online)
}

// optional bool is_epb_online = 2;
void CheckResponseSignal::clear_is_epb_online() {
  is_epb_online_ = false;
}
 bool CheckResponseSignal::is_epb_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_epb_online)
  return is_epb_online_;
}
 void CheckResponseSignal::set_is_epb_online(bool value) {
  
  is_epb_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_epb_online)
}

// optional bool is_esp_online = 3;
void CheckResponseSignal::clear_is_esp_online() {
  is_esp_online_ = false;
}
 bool CheckResponseSignal::is_esp_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_esp_online)
  return is_esp_online_;
}
 void CheckResponseSignal::set_is_esp_online(bool value) {
  
  is_esp_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_esp_online)
}

// optional bool is_vtog_online = 4;
void CheckResponseSignal::clear_is_vtog_online() {
  is_vtog_online_ = false;
}
 bool CheckResponseSignal::is_vtog_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_vtog_online)
  return is_vtog_online_;
}
 void CheckResponseSignal::set_is_vtog_online(bool value) {
  
  is_vtog_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_vtog_online)
}

// optional bool is_scu_online = 5;
void CheckResponseSignal::clear_is_scu_online() {
  is_scu_online_ = false;
}
 bool CheckResponseSignal::is_scu_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_scu_online)
  return is_scu_online_;
}
 void CheckResponseSignal::set_is_scu_online(bool value) {
  
  is_scu_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_scu_online)
}

// optional bool is_switch_online = 6;
void CheckResponseSignal::clear_is_switch_online() {
  is_switch_online_ = false;
}
 bool CheckResponseSignal::is_switch_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_switch_online)
  return is_switch_online_;
}
 void CheckResponseSignal::set_is_switch_online(bool value) {
  
  is_switch_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_switch_online)
}

// optional bool is_vcu_online = 7;
void CheckResponseSignal::clear_is_vcu_online() {
  is_vcu_online_ = false;
}
 bool CheckResponseSignal::is_vcu_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_vcu_online)
  return is_vcu_online_;
}
 void CheckResponseSignal::set_is_vcu_online(bool value) {
  
  is_vcu_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_vcu_online)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Battery::kBatteryPercentFieldNumber;
const int Battery::kFuelLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Battery::Battery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Battery)
}

void Battery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Battery::Battery(const Battery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Battery)
}

void Battery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  battery_percent_ = 0;
  fuel_level_ = 0;
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Battery)
  SharedDtor();
}

void Battery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battery_descriptor_;
}

const Battery& Battery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Battery* Battery::default_instance_ = NULL;

Battery* Battery::New(::google::protobuf::Arena* arena) const {
  Battery* n = new Battery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Battery)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Battery, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Battery*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(battery_percent_, fuel_level_);

#undef ZR_HELPER_
#undef ZR_

}

bool Battery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Battery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double battery_percent = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &battery_percent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_fuel_level;
        break;
      }

      // optional double fuel_level = 2;
      case 2: {
        if (tag == 17) {
         parse_fuel_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fuel_level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Battery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Battery)
  return false;
#undef DO_
}

void Battery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Battery)
  // optional double battery_percent = 1;
  if (this->battery_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->battery_percent(), output);
  }

  // optional double fuel_level = 2;
  if (this->fuel_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fuel_level(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Battery)
}

::google::protobuf::uint8* Battery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Battery)
  // optional double battery_percent = 1;
  if (this->battery_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->battery_percent(), target);
  }

  // optional double fuel_level = 2;
  if (this->fuel_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fuel_level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Battery)
  return target;
}

int Battery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Battery)
  int total_size = 0;

  // optional double battery_percent = 1;
  if (this->battery_percent() != 0) {
    total_size += 1 + 8;
  }

  // optional double fuel_level = 2;
  if (this->fuel_level() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Battery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Battery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Battery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Battery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Battery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.battery_percent() != 0) {
    set_battery_percent(from.battery_percent());
  }
  if (from.fuel_level() != 0) {
    set_fuel_level(from.fuel_level());
  }
}

void Battery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {

  return true;
}

void Battery::Swap(Battery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Battery::InternalSwap(Battery* other) {
  std::swap(battery_percent_, other->battery_percent_);
  std::swap(fuel_level_, other->fuel_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Battery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battery_descriptor_;
  metadata.reflection = Battery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Battery

// optional double battery_percent = 1;
void Battery::clear_battery_percent() {
  battery_percent_ = 0;
}
 double Battery::battery_percent() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Battery.battery_percent)
  return battery_percent_;
}
 void Battery::set_battery_percent(double value) {
  
  battery_percent_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Battery.battery_percent)
}

// optional double fuel_level = 2;
void Battery::clear_fuel_level() {
  fuel_level_ = 0;
}
 double Battery::fuel_level() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Battery.fuel_level)
  return fuel_level_;
}
 void Battery::set_fuel_level(double value) {
  
  fuel_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Battery.fuel_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Light_TurnLightType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_TurnLightType_descriptor_;
}
bool Light_TurnLightType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_TurnLightType Light::TURN_LIGHT_OFF;
const Light_TurnLightType Light::TURN_LEFT_ON;
const Light_TurnLightType Light::TURN_RIGHT_ON;
const Light_TurnLightType Light::TURN_LIGHT_ON;
const Light_TurnLightType Light::TurnLightType_MIN;
const Light_TurnLightType Light::TurnLightType_MAX;
const int Light::TurnLightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LampType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_LampType_descriptor_;
}
bool Light_LampType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LampType Light::BEAM_OFF;
const Light_LampType Light::HIGH_BEAM_ON;
const Light_LampType Light::LOW_BEAM_ON;
const Light_LampType Light::LampType_MIN;
const Light_LampType Light::LampType_MAX;
const int Light::LampType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnLampType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_LincolnLampType_descriptor_;
}
bool Light_LincolnLampType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnLampType Light::BEAM_NULL;
const Light_LincolnLampType Light::BEAM_FLASH_TO_PASS;
const Light_LincolnLampType Light::BEAM_HIGH;
const Light_LincolnLampType Light::BEAM_INVALID;
const Light_LincolnLampType Light::LincolnLampType_MIN;
const Light_LincolnLampType Light::LincolnLampType_MAX;
const int Light::LincolnLampType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnWiperType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_LincolnWiperType_descriptor_;
}
bool Light_LincolnWiperType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnWiperType Light::WIPER_OFF;
const Light_LincolnWiperType Light::WIPER_AUTO_OFF;
const Light_LincolnWiperType Light::WIPER_OFF_MOVING;
const Light_LincolnWiperType Light::WIPER_MANUAL_OFF;
const Light_LincolnWiperType Light::WIPER_MANUAL_ON;
const Light_LincolnWiperType Light::WIPER_MANUAL_LOW;
const Light_LincolnWiperType Light::WIPER_MANUAL_HIGH;
const Light_LincolnWiperType Light::WIPER_MIST_FLICK;
const Light_LincolnWiperType Light::WIPER_WASH;
const Light_LincolnWiperType Light::WIPER_AUTO_LOW;
const Light_LincolnWiperType Light::WIPER_AUTO_HIGH;
const Light_LincolnWiperType Light::WIPER_COURTESY_WIPE;
const Light_LincolnWiperType Light::WIPER_AUTO_ADJUST;
const Light_LincolnWiperType Light::WIPER_RESERVED;
const Light_LincolnWiperType Light::WIPER_STALLED;
const Light_LincolnWiperType Light::WIPER_NO_DATA;
const Light_LincolnWiperType Light::LincolnWiperType_MIN;
const Light_LincolnWiperType Light::LincolnWiperType_MAX;
const int Light::LincolnWiperType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnAmbientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_LincolnAmbientType_descriptor_;
}
bool Light_LincolnAmbientType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnAmbientType Light::AMBIENT_DARK;
const Light_LincolnAmbientType Light::AMBIENT_LIGHT;
const Light_LincolnAmbientType Light::AMBIENT_TWILIGHT;
const Light_LincolnAmbientType Light::AMBIENT_TUNNEL_ON;
const Light_LincolnAmbientType Light::AMBIENT_TUNNEL_OFF;
const Light_LincolnAmbientType Light::AMBIENT_INVALID;
const Light_LincolnAmbientType Light::AMBIENT_NO_DATA;
const Light_LincolnAmbientType Light::LincolnAmbientType_MIN;
const Light_LincolnAmbientType Light::LincolnAmbientType_MAX;
const int Light::LincolnAmbientType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Light::kTurnLightTypeFieldNumber;
const int Light::kLampTypeFieldNumber;
const int Light::kIsBrakeLampOnFieldNumber;
const int Light::kIsAutoLightFieldNumber;
const int Light::kWiperGearFieldNumber;
const int Light::kLotionGearFieldNumber;
const int Light::kIsHornOnFieldNumber;
const int Light::kLincolnLampTypeFieldNumber;
const int Light::kLincolnWiperFieldNumber;
const int Light::kLincolnAmbientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Light::Light()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Light)
}

void Light::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Light::Light(const Light& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Light)
}

void Light::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  turn_light_type_ = 0;
  lamp_type_ = 0;
  is_brake_lamp_on_ = false;
  is_auto_light_ = false;
  wiper_gear_ = 0;
  lotion_gear_ = 0;
  is_horn_on_ = false;
  lincoln_lamp_type_ = 0;
  lincoln_wiper_ = 0;
  lincoln_ambient_ = 0;
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Light)
  SharedDtor();
}

void Light::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Light::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Light::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_descriptor_;
}

const Light& Light::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Light* Light::default_instance_ = NULL;

Light* Light::New(::google::protobuf::Arena* arena) const {
  Light* n = new Light;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Light)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Light, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Light*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(turn_light_type_, lincoln_lamp_type_);
  ZR_(lincoln_wiper_, lincoln_ambient_);

#undef ZR_HELPER_
#undef ZR_

}

bool Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Light)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_turn_light_type(static_cast< ::apollo::canbus::Light_TurnLightType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lamp_type;
        break;
      }

      // optional .apollo.canbus.Light.LampType lamp_type = 2;
      case 2: {
        if (tag == 16) {
         parse_lamp_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lamp_type(static_cast< ::apollo::canbus::Light_LampType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_brake_lamp_on;
        break;
      }

      // optional bool is_brake_lamp_on = 3;
      case 3: {
        if (tag == 24) {
         parse_is_brake_lamp_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_lamp_on_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_auto_light;
        break;
      }

      // optional bool is_auto_light = 4;
      case 4: {
        if (tag == 32) {
         parse_is_auto_light:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_light_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wiper_gear;
        break;
      }

      // optional int32 wiper_gear = 5;
      case 5: {
        if (tag == 40) {
         parse_wiper_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiper_gear_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lotion_gear;
        break;
      }

      // optional int32 lotion_gear = 6;
      case 6: {
        if (tag == 48) {
         parse_lotion_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotion_gear_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_horn_on;
        break;
      }

      // optional bool is_horn_on = 7;
      case 7: {
        if (tag == 56) {
         parse_is_horn_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_horn_on_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lincoln_lamp_type;
        break;
      }

      // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
      case 8: {
        if (tag == 64) {
         parse_lincoln_lamp_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lincoln_lamp_type(static_cast< ::apollo::canbus::Light_LincolnLampType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lincoln_wiper;
        break;
      }

      // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
      case 9: {
        if (tag == 72) {
         parse_lincoln_wiper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lincoln_wiper(static_cast< ::apollo::canbus::Light_LincolnWiperType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_lincoln_ambient;
        break;
      }

      // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
      case 10: {
        if (tag == 80) {
         parse_lincoln_ambient:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lincoln_ambient(static_cast< ::apollo::canbus::Light_LincolnAmbientType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Light)
  return false;
#undef DO_
}

void Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Light)
  // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (this->turn_light_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_light_type(), output);
  }

  // optional .apollo.canbus.Light.LampType lamp_type = 2;
  if (this->lamp_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lamp_type(), output);
  }

  // optional bool is_brake_lamp_on = 3;
  if (this->is_brake_lamp_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_brake_lamp_on(), output);
  }

  // optional bool is_auto_light = 4;
  if (this->is_auto_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_auto_light(), output);
  }

  // optional int32 wiper_gear = 5;
  if (this->wiper_gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wiper_gear(), output);
  }

  // optional int32 lotion_gear = 6;
  if (this->lotion_gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lotion_gear(), output);
  }

  // optional bool is_horn_on = 7;
  if (this->is_horn_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_horn_on(), output);
  }

  // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (this->lincoln_lamp_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->lincoln_lamp_type(), output);
  }

  // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (this->lincoln_wiper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->lincoln_wiper(), output);
  }

  // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (this->lincoln_ambient() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->lincoln_ambient(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Light)
}

::google::protobuf::uint8* Light::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Light)
  // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (this->turn_light_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_light_type(), target);
  }

  // optional .apollo.canbus.Light.LampType lamp_type = 2;
  if (this->lamp_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lamp_type(), target);
  }

  // optional bool is_brake_lamp_on = 3;
  if (this->is_brake_lamp_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_brake_lamp_on(), target);
  }

  // optional bool is_auto_light = 4;
  if (this->is_auto_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_auto_light(), target);
  }

  // optional int32 wiper_gear = 5;
  if (this->wiper_gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wiper_gear(), target);
  }

  // optional int32 lotion_gear = 6;
  if (this->lotion_gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lotion_gear(), target);
  }

  // optional bool is_horn_on = 7;
  if (this->is_horn_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_horn_on(), target);
  }

  // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (this->lincoln_lamp_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->lincoln_lamp_type(), target);
  }

  // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (this->lincoln_wiper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->lincoln_wiper(), target);
  }

  // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (this->lincoln_ambient() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->lincoln_ambient(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Light)
  return target;
}

int Light::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Light)
  int total_size = 0;

  // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (this->turn_light_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_light_type());
  }

  // optional .apollo.canbus.Light.LampType lamp_type = 2;
  if (this->lamp_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lamp_type());
  }

  // optional bool is_brake_lamp_on = 3;
  if (this->is_brake_lamp_on() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_auto_light = 4;
  if (this->is_auto_light() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 wiper_gear = 5;
  if (this->wiper_gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wiper_gear());
  }

  // optional int32 lotion_gear = 6;
  if (this->lotion_gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lotion_gear());
  }

  // optional bool is_horn_on = 7;
  if (this->is_horn_on() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (this->lincoln_lamp_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_lamp_type());
  }

  // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (this->lincoln_wiper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_wiper());
  }

  // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (this->lincoln_ambient() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_ambient());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Light::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Light)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Light* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Light>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Light)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Light)
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Light)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.turn_light_type() != 0) {
    set_turn_light_type(from.turn_light_type());
  }
  if (from.lamp_type() != 0) {
    set_lamp_type(from.lamp_type());
  }
  if (from.is_brake_lamp_on() != 0) {
    set_is_brake_lamp_on(from.is_brake_lamp_on());
  }
  if (from.is_auto_light() != 0) {
    set_is_auto_light(from.is_auto_light());
  }
  if (from.wiper_gear() != 0) {
    set_wiper_gear(from.wiper_gear());
  }
  if (from.lotion_gear() != 0) {
    set_lotion_gear(from.lotion_gear());
  }
  if (from.is_horn_on() != 0) {
    set_is_horn_on(from.is_horn_on());
  }
  if (from.lincoln_lamp_type() != 0) {
    set_lincoln_lamp_type(from.lincoln_lamp_type());
  }
  if (from.lincoln_wiper() != 0) {
    set_lincoln_wiper(from.lincoln_wiper());
  }
  if (from.lincoln_ambient() != 0) {
    set_lincoln_ambient(from.lincoln_ambient());
  }
}

void Light::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {

  return true;
}

void Light::Swap(Light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light::InternalSwap(Light* other) {
  std::swap(turn_light_type_, other->turn_light_type_);
  std::swap(lamp_type_, other->lamp_type_);
  std::swap(is_brake_lamp_on_, other->is_brake_lamp_on_);
  std::swap(is_auto_light_, other->is_auto_light_);
  std::swap(wiper_gear_, other->wiper_gear_);
  std::swap(lotion_gear_, other->lotion_gear_);
  std::swap(is_horn_on_, other->is_horn_on_);
  std::swap(lincoln_lamp_type_, other->lincoln_lamp_type_);
  std::swap(lincoln_wiper_, other->lincoln_wiper_);
  std::swap(lincoln_ambient_, other->lincoln_ambient_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Light::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Light_descriptor_;
  metadata.reflection = Light_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Light

// optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
void Light::clear_turn_light_type() {
  turn_light_type_ = 0;
}
 ::apollo::canbus::Light_TurnLightType Light::turn_light_type() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.turn_light_type)
  return static_cast< ::apollo::canbus::Light_TurnLightType >(turn_light_type_);
}
 void Light::set_turn_light_type(::apollo::canbus::Light_TurnLightType value) {
  
  turn_light_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.turn_light_type)
}

// optional .apollo.canbus.Light.LampType lamp_type = 2;
void Light::clear_lamp_type() {
  lamp_type_ = 0;
}
 ::apollo::canbus::Light_LampType Light::lamp_type() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.lamp_type)
  return static_cast< ::apollo::canbus::Light_LampType >(lamp_type_);
}
 void Light::set_lamp_type(::apollo::canbus::Light_LampType value) {
  
  lamp_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.lamp_type)
}

// optional bool is_brake_lamp_on = 3;
void Light::clear_is_brake_lamp_on() {
  is_brake_lamp_on_ = false;
}
 bool Light::is_brake_lamp_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.is_brake_lamp_on)
  return is_brake_lamp_on_;
}
 void Light::set_is_brake_lamp_on(bool value) {
  
  is_brake_lamp_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.is_brake_lamp_on)
}

// optional bool is_auto_light = 4;
void Light::clear_is_auto_light() {
  is_auto_light_ = false;
}
 bool Light::is_auto_light() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.is_auto_light)
  return is_auto_light_;
}
 void Light::set_is_auto_light(bool value) {
  
  is_auto_light_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.is_auto_light)
}

// optional int32 wiper_gear = 5;
void Light::clear_wiper_gear() {
  wiper_gear_ = 0;
}
 ::google::protobuf::int32 Light::wiper_gear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.wiper_gear)
  return wiper_gear_;
}
 void Light::set_wiper_gear(::google::protobuf::int32 value) {
  
  wiper_gear_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.wiper_gear)
}

// optional int32 lotion_gear = 6;
void Light::clear_lotion_gear() {
  lotion_gear_ = 0;
}
 ::google::protobuf::int32 Light::lotion_gear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.lotion_gear)
  return lotion_gear_;
}
 void Light::set_lotion_gear(::google::protobuf::int32 value) {
  
  lotion_gear_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.lotion_gear)
}

// optional bool is_horn_on = 7;
void Light::clear_is_horn_on() {
  is_horn_on_ = false;
}
 bool Light::is_horn_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.is_horn_on)
  return is_horn_on_;
}
 void Light::set_is_horn_on(bool value) {
  
  is_horn_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.is_horn_on)
}

// optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
void Light::clear_lincoln_lamp_type() {
  lincoln_lamp_type_ = 0;
}
 ::apollo::canbus::Light_LincolnLampType Light::lincoln_lamp_type() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.lincoln_lamp_type)
  return static_cast< ::apollo::canbus::Light_LincolnLampType >(lincoln_lamp_type_);
}
 void Light::set_lincoln_lamp_type(::apollo::canbus::Light_LincolnLampType value) {
  
  lincoln_lamp_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.lincoln_lamp_type)
}

// optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
void Light::clear_lincoln_wiper() {
  lincoln_wiper_ = 0;
}
 ::apollo::canbus::Light_LincolnWiperType Light::lincoln_wiper() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.lincoln_wiper)
  return static_cast< ::apollo::canbus::Light_LincolnWiperType >(lincoln_wiper_);
}
 void Light::set_lincoln_wiper(::apollo::canbus::Light_LincolnWiperType value) {
  
  lincoln_wiper_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.lincoln_wiper)
}

// optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
void Light::clear_lincoln_ambient() {
  lincoln_ambient_ = 0;
}
 ::apollo::canbus::Light_LincolnAmbientType Light::lincoln_ambient() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.lincoln_ambient)
  return static_cast< ::apollo::canbus::Light_LincolnAmbientType >(lincoln_ambient_);
}
 void Light::set_lincoln_ambient(::apollo::canbus::Light_LincolnAmbientType value) {
  
  lincoln_ambient_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.lincoln_ambient)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Eps_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Eps_Type_descriptor_;
}
bool Eps_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_Type Eps::NOT_AVAILABLE;
const Eps_Type Eps::READY;
const Eps_Type Eps::ACTIVE;
const Eps_Type Eps::INVALID;
const Eps_Type Eps::Type_MIN;
const Eps_Type Eps::Type_MAX;
const int Eps::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Eps::kIsEpsFailFieldNumber;
const int Eps::kEpsControlStateFieldNumber;
const int Eps::kEpsDriverHandTorqFieldNumber;
const int Eps::kIsSteeringAngleValidFieldNumber;
const int Eps::kSteeringAngleFieldNumber;
const int Eps::kSteeringAngleSpdFieldNumber;
const int Eps::kIsTrimmingStatusFieldNumber;
const int Eps::kIsCalibrationStatusFieldNumber;
const int Eps::kIsFailureStatusFieldNumber;
const int Eps::kAllowEnterAutonomousModeFieldNumber;
const int Eps::kCurrentDrivingModeFieldNumber;
const int Eps::kSteeringAngleCmdFieldNumber;
const int Eps::kVehicleSpeedFieldNumber;
const int Eps::kEpasTorqueFieldNumber;
const int Eps::kSteeringEnabledFieldNumber;
const int Eps::kDriverOverrideFieldNumber;
const int Eps::kDriverActivityFieldNumber;
const int Eps::kWatchdogFaultFieldNumber;
const int Eps::kChannel1FaultFieldNumber;
const int Eps::kChannel2FaultFieldNumber;
const int Eps::kCalibrationFaultFieldNumber;
const int Eps::kConnectorFaultFieldNumber;
const int Eps::kTimestamp65FieldNumber;
const int Eps::kMajorVersionFieldNumber;
const int Eps::kMinorVersionFieldNumber;
const int Eps::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Eps::Eps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Eps)
}

void Eps::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Eps::Eps(const Eps& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Eps)
}

void Eps::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_eps_fail_ = false;
  eps_control_state_ = 0;
  eps_driver_hand_torq_ = 0;
  is_steering_angle_valid_ = false;
  steering_angle_ = 0;
  steering_angle_spd_ = 0;
  is_trimming_status_ = false;
  is_calibration_status_ = false;
  is_failure_status_ = false;
  allow_enter_autonomous_mode_ = 0;
  current_driving_mode_ = 0;
  steering_angle_cmd_ = 0;
  vehicle_speed_ = 0;
  epas_torque_ = 0;
  steering_enabled_ = false;
  driver_override_ = false;
  driver_activity_ = false;
  watchdog_fault_ = false;
  channel_1_fault_ = false;
  channel_2_fault_ = false;
  calibration_fault_ = false;
  connector_fault_ = false;
  timestamp_65_ = 0;
  major_version_ = 0;
  minor_version_ = 0;
  build_number_ = 0;
}

Eps::~Eps() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Eps)
  SharedDtor();
}

void Eps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Eps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Eps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Eps_descriptor_;
}

const Eps& Eps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Eps* Eps::default_instance_ = NULL;

Eps* Eps::New(::google::protobuf::Arena* arena) const {
  Eps* n = new Eps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Eps::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Eps)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Eps, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Eps*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(eps_driver_hand_torq_, steering_angle_spd_);
  ZR_(allow_enter_autonomous_mode_, driver_override_);
  ZR_(driver_activity_, major_version_);
  ZR_(minor_version_, build_number_);

#undef ZR_HELPER_
#undef ZR_

}

bool Eps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Eps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_eps_fail = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_eps_fail_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eps_control_state;
        break;
      }

      // optional .apollo.canbus.Eps.Type eps_control_state = 2;
      case 2: {
        if (tag == 16) {
         parse_eps_control_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eps_control_state(static_cast< ::apollo::canbus::Eps_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_eps_driver_hand_torq;
        break;
      }

      // optional double eps_driver_hand_torq = 3;
      case 3: {
        if (tag == 25) {
         parse_eps_driver_hand_torq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_driver_hand_torq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_steering_angle_valid;
        break;
      }

      // optional bool is_steering_angle_valid = 4;
      case 4: {
        if (tag == 32) {
         parse_is_steering_angle_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steering_angle_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_steering_angle;
        break;
      }

      // optional double steering_angle = 5;
      case 5: {
        if (tag == 41) {
         parse_steering_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_steering_angle_spd;
        break;
      }

      // optional double steering_angle_spd = 6;
      case 6: {
        if (tag == 49) {
         parse_steering_angle_spd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_spd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_trimming_status;
        break;
      }

      // optional bool is_trimming_status = 7;
      case 7: {
        if (tag == 56) {
         parse_is_trimming_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trimming_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_calibration_status;
        break;
      }

      // optional bool is_calibration_status = 8;
      case 8: {
        if (tag == 64) {
         parse_is_calibration_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_calibration_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_failure_status;
        break;
      }

      // optional bool is_failure_status = 9;
      case 9: {
        if (tag == 72) {
         parse_is_failure_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_failure_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_allow_enter_autonomous_mode;
        break;
      }

      // optional int32 allow_enter_autonomous_mode = 10;
      case 10: {
        if (tag == 80) {
         parse_allow_enter_autonomous_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_enter_autonomous_mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_current_driving_mode;
        break;
      }

      // optional int32 current_driving_mode = 11;
      case 11: {
        if (tag == 88) {
         parse_current_driving_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_driving_mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_steering_angle_cmd;
        break;
      }

      // optional double steering_angle_cmd = 12;
      case 12: {
        if (tag == 97) {
         parse_steering_angle_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_cmd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_vehicle_speed;
        break;
      }

      // optional double vehicle_speed = 13;
      case 13: {
        if (tag == 105) {
         parse_vehicle_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_epas_torque;
        break;
      }

      // optional double epas_torque = 14;
      case 14: {
        if (tag == 113) {
         parse_epas_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epas_torque_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_steering_enabled;
        break;
      }

      // optional bool steering_enabled = 15;
      case 15: {
        if (tag == 120) {
         parse_steering_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steering_enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_driver_override;
        break;
      }

      // optional bool driver_override = 16;
      case 16: {
        if (tag == 128) {
         parse_driver_override:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_driver_activity;
        break;
      }

      // optional bool driver_activity = 17;
      case 17: {
        if (tag == 136) {
         parse_driver_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_watchdog_fault;
        break;
      }

      // optional bool watchdog_fault = 18;
      case 18: {
        if (tag == 144) {
         parse_watchdog_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_channel_1_fault;
        break;
      }

      // optional bool channel_1_fault = 19;
      case 19: {
        if (tag == 152) {
         parse_channel_1_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_channel_2_fault;
        break;
      }

      // optional bool channel_2_fault = 20;
      case 20: {
        if (tag == 160) {
         parse_channel_2_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_calibration_fault;
        break;
      }

      // optional bool calibration_fault = 21;
      case 21: {
        if (tag == 168) {
         parse_calibration_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calibration_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_connector_fault;
        break;
      }

      // optional bool connector_fault = 22;
      case 22: {
        if (tag == 176) {
         parse_connector_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_timestamp_65;
        break;
      }

      // optional double timestamp_65 = 23;
      case 23: {
        if (tag == 185) {
         parse_timestamp_65:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_65_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_major_version;
        break;
      }

      // optional int32 major_version = 24;
      case 24: {
        if (tag == 192) {
         parse_major_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_minor_version;
        break;
      }

      // optional int32 minor_version = 25;
      case 25: {
        if (tag == 200) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_build_number;
        break;
      }

      // optional int32 build_number = 26;
      case 26: {
        if (tag == 208) {
         parse_build_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Eps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Eps)
  return false;
#undef DO_
}

void Eps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Eps)
  // optional bool is_eps_fail = 1;
  if (this->is_eps_fail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_eps_fail(), output);
  }

  // optional .apollo.canbus.Eps.Type eps_control_state = 2;
  if (this->eps_control_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eps_control_state(), output);
  }

  // optional double eps_driver_hand_torq = 3;
  if (this->eps_driver_hand_torq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->eps_driver_hand_torq(), output);
  }

  // optional bool is_steering_angle_valid = 4;
  if (this->is_steering_angle_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_steering_angle_valid(), output);
  }

  // optional double steering_angle = 5;
  if (this->steering_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->steering_angle(), output);
  }

  // optional double steering_angle_spd = 6;
  if (this->steering_angle_spd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steering_angle_spd(), output);
  }

  // optional bool is_trimming_status = 7;
  if (this->is_trimming_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_trimming_status(), output);
  }

  // optional bool is_calibration_status = 8;
  if (this->is_calibration_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_calibration_status(), output);
  }

  // optional bool is_failure_status = 9;
  if (this->is_failure_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_failure_status(), output);
  }

  // optional int32 allow_enter_autonomous_mode = 10;
  if (this->allow_enter_autonomous_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->allow_enter_autonomous_mode(), output);
  }

  // optional int32 current_driving_mode = 11;
  if (this->current_driving_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->current_driving_mode(), output);
  }

  // optional double steering_angle_cmd = 12;
  if (this->steering_angle_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->steering_angle_cmd(), output);
  }

  // optional double vehicle_speed = 13;
  if (this->vehicle_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->vehicle_speed(), output);
  }

  // optional double epas_torque = 14;
  if (this->epas_torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->epas_torque(), output);
  }

  // optional bool steering_enabled = 15;
  if (this->steering_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->steering_enabled(), output);
  }

  // optional bool driver_override = 16;
  if (this->driver_override() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->driver_override(), output);
  }

  // optional bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->driver_activity(), output);
  }

  // optional bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->watchdog_fault(), output);
  }

  // optional bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->channel_1_fault(), output);
  }

  // optional bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->channel_2_fault(), output);
  }

  // optional bool calibration_fault = 21;
  if (this->calibration_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->calibration_fault(), output);
  }

  // optional bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->connector_fault(), output);
  }

  // optional double timestamp_65 = 23;
  if (this->timestamp_65() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->timestamp_65(), output);
  }

  // optional int32 major_version = 24;
  if (this->major_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->major_version(), output);
  }

  // optional int32 minor_version = 25;
  if (this->minor_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->minor_version(), output);
  }

  // optional int32 build_number = 26;
  if (this->build_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->build_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Eps)
}

::google::protobuf::uint8* Eps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Eps)
  // optional bool is_eps_fail = 1;
  if (this->is_eps_fail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_eps_fail(), target);
  }

  // optional .apollo.canbus.Eps.Type eps_control_state = 2;
  if (this->eps_control_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eps_control_state(), target);
  }

  // optional double eps_driver_hand_torq = 3;
  if (this->eps_driver_hand_torq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->eps_driver_hand_torq(), target);
  }

  // optional bool is_steering_angle_valid = 4;
  if (this->is_steering_angle_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_steering_angle_valid(), target);
  }

  // optional double steering_angle = 5;
  if (this->steering_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->steering_angle(), target);
  }

  // optional double steering_angle_spd = 6;
  if (this->steering_angle_spd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steering_angle_spd(), target);
  }

  // optional bool is_trimming_status = 7;
  if (this->is_trimming_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_trimming_status(), target);
  }

  // optional bool is_calibration_status = 8;
  if (this->is_calibration_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_calibration_status(), target);
  }

  // optional bool is_failure_status = 9;
  if (this->is_failure_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_failure_status(), target);
  }

  // optional int32 allow_enter_autonomous_mode = 10;
  if (this->allow_enter_autonomous_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->allow_enter_autonomous_mode(), target);
  }

  // optional int32 current_driving_mode = 11;
  if (this->current_driving_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->current_driving_mode(), target);
  }

  // optional double steering_angle_cmd = 12;
  if (this->steering_angle_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->steering_angle_cmd(), target);
  }

  // optional double vehicle_speed = 13;
  if (this->vehicle_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->vehicle_speed(), target);
  }

  // optional double epas_torque = 14;
  if (this->epas_torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->epas_torque(), target);
  }

  // optional bool steering_enabled = 15;
  if (this->steering_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->steering_enabled(), target);
  }

  // optional bool driver_override = 16;
  if (this->driver_override() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->driver_override(), target);
  }

  // optional bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->driver_activity(), target);
  }

  // optional bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->channel_2_fault(), target);
  }

  // optional bool calibration_fault = 21;
  if (this->calibration_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->calibration_fault(), target);
  }

  // optional bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->connector_fault(), target);
  }

  // optional double timestamp_65 = 23;
  if (this->timestamp_65() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->timestamp_65(), target);
  }

  // optional int32 major_version = 24;
  if (this->major_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->major_version(), target);
  }

  // optional int32 minor_version = 25;
  if (this->minor_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->minor_version(), target);
  }

  // optional int32 build_number = 26;
  if (this->build_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->build_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Eps)
  return target;
}

int Eps::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Eps)
  int total_size = 0;

  // optional bool is_eps_fail = 1;
  if (this->is_eps_fail() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.Eps.Type eps_control_state = 2;
  if (this->eps_control_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_control_state());
  }

  // optional double eps_driver_hand_torq = 3;
  if (this->eps_driver_hand_torq() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_steering_angle_valid = 4;
  if (this->is_steering_angle_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional double steering_angle = 5;
  if (this->steering_angle() != 0) {
    total_size += 1 + 8;
  }

  // optional double steering_angle_spd = 6;
  if (this->steering_angle_spd() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_trimming_status = 7;
  if (this->is_trimming_status() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_calibration_status = 8;
  if (this->is_calibration_status() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_failure_status = 9;
  if (this->is_failure_status() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 allow_enter_autonomous_mode = 10;
  if (this->allow_enter_autonomous_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->allow_enter_autonomous_mode());
  }

  // optional int32 current_driving_mode = 11;
  if (this->current_driving_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_driving_mode());
  }

  // optional double steering_angle_cmd = 12;
  if (this->steering_angle_cmd() != 0) {
    total_size += 1 + 8;
  }

  // optional double vehicle_speed = 13;
  if (this->vehicle_speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double epas_torque = 14;
  if (this->epas_torque() != 0) {
    total_size += 1 + 8;
  }

  // optional bool steering_enabled = 15;
  if (this->steering_enabled() != 0) {
    total_size += 1 + 1;
  }

  // optional bool driver_override = 16;
  if (this->driver_override() != 0) {
    total_size += 2 + 1;
  }

  // optional bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    total_size += 2 + 1;
  }

  // optional bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool calibration_fault = 21;
  if (this->calibration_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional double timestamp_65 = 23;
  if (this->timestamp_65() != 0) {
    total_size += 2 + 8;
  }

  // optional int32 major_version = 24;
  if (this->major_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->major_version());
  }

  // optional int32 minor_version = 25;
  if (this->minor_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minor_version());
  }

  // optional int32 build_number = 26;
  if (this->build_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->build_number());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Eps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Eps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Eps* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Eps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Eps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Eps)
    MergeFrom(*source);
  }
}

void Eps::MergeFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Eps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_eps_fail() != 0) {
    set_is_eps_fail(from.is_eps_fail());
  }
  if (from.eps_control_state() != 0) {
    set_eps_control_state(from.eps_control_state());
  }
  if (from.eps_driver_hand_torq() != 0) {
    set_eps_driver_hand_torq(from.eps_driver_hand_torq());
  }
  if (from.is_steering_angle_valid() != 0) {
    set_is_steering_angle_valid(from.is_steering_angle_valid());
  }
  if (from.steering_angle() != 0) {
    set_steering_angle(from.steering_angle());
  }
  if (from.steering_angle_spd() != 0) {
    set_steering_angle_spd(from.steering_angle_spd());
  }
  if (from.is_trimming_status() != 0) {
    set_is_trimming_status(from.is_trimming_status());
  }
  if (from.is_calibration_status() != 0) {
    set_is_calibration_status(from.is_calibration_status());
  }
  if (from.is_failure_status() != 0) {
    set_is_failure_status(from.is_failure_status());
  }
  if (from.allow_enter_autonomous_mode() != 0) {
    set_allow_enter_autonomous_mode(from.allow_enter_autonomous_mode());
  }
  if (from.current_driving_mode() != 0) {
    set_current_driving_mode(from.current_driving_mode());
  }
  if (from.steering_angle_cmd() != 0) {
    set_steering_angle_cmd(from.steering_angle_cmd());
  }
  if (from.vehicle_speed() != 0) {
    set_vehicle_speed(from.vehicle_speed());
  }
  if (from.epas_torque() != 0) {
    set_epas_torque(from.epas_torque());
  }
  if (from.steering_enabled() != 0) {
    set_steering_enabled(from.steering_enabled());
  }
  if (from.driver_override() != 0) {
    set_driver_override(from.driver_override());
  }
  if (from.driver_activity() != 0) {
    set_driver_activity(from.driver_activity());
  }
  if (from.watchdog_fault() != 0) {
    set_watchdog_fault(from.watchdog_fault());
  }
  if (from.channel_1_fault() != 0) {
    set_channel_1_fault(from.channel_1_fault());
  }
  if (from.channel_2_fault() != 0) {
    set_channel_2_fault(from.channel_2_fault());
  }
  if (from.calibration_fault() != 0) {
    set_calibration_fault(from.calibration_fault());
  }
  if (from.connector_fault() != 0) {
    set_connector_fault(from.connector_fault());
  }
  if (from.timestamp_65() != 0) {
    set_timestamp_65(from.timestamp_65());
  }
  if (from.major_version() != 0) {
    set_major_version(from.major_version());
  }
  if (from.minor_version() != 0) {
    set_minor_version(from.minor_version());
  }
  if (from.build_number() != 0) {
    set_build_number(from.build_number());
  }
}

void Eps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eps::CopyFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eps::IsInitialized() const {

  return true;
}

void Eps::Swap(Eps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Eps::InternalSwap(Eps* other) {
  std::swap(is_eps_fail_, other->is_eps_fail_);
  std::swap(eps_control_state_, other->eps_control_state_);
  std::swap(eps_driver_hand_torq_, other->eps_driver_hand_torq_);
  std::swap(is_steering_angle_valid_, other->is_steering_angle_valid_);
  std::swap(steering_angle_, other->steering_angle_);
  std::swap(steering_angle_spd_, other->steering_angle_spd_);
  std::swap(is_trimming_status_, other->is_trimming_status_);
  std::swap(is_calibration_status_, other->is_calibration_status_);
  std::swap(is_failure_status_, other->is_failure_status_);
  std::swap(allow_enter_autonomous_mode_, other->allow_enter_autonomous_mode_);
  std::swap(current_driving_mode_, other->current_driving_mode_);
  std::swap(steering_angle_cmd_, other->steering_angle_cmd_);
  std::swap(vehicle_speed_, other->vehicle_speed_);
  std::swap(epas_torque_, other->epas_torque_);
  std::swap(steering_enabled_, other->steering_enabled_);
  std::swap(driver_override_, other->driver_override_);
  std::swap(driver_activity_, other->driver_activity_);
  std::swap(watchdog_fault_, other->watchdog_fault_);
  std::swap(channel_1_fault_, other->channel_1_fault_);
  std::swap(channel_2_fault_, other->channel_2_fault_);
  std::swap(calibration_fault_, other->calibration_fault_);
  std::swap(connector_fault_, other->connector_fault_);
  std::swap(timestamp_65_, other->timestamp_65_);
  std::swap(major_version_, other->major_version_);
  std::swap(minor_version_, other->minor_version_);
  std::swap(build_number_, other->build_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Eps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Eps_descriptor_;
  metadata.reflection = Eps_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Eps

// optional bool is_eps_fail = 1;
void Eps::clear_is_eps_fail() {
  is_eps_fail_ = false;
}
 bool Eps::is_eps_fail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.is_eps_fail)
  return is_eps_fail_;
}
 void Eps::set_is_eps_fail(bool value) {
  
  is_eps_fail_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.is_eps_fail)
}

// optional .apollo.canbus.Eps.Type eps_control_state = 2;
void Eps::clear_eps_control_state() {
  eps_control_state_ = 0;
}
 ::apollo::canbus::Eps_Type Eps::eps_control_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.eps_control_state)
  return static_cast< ::apollo::canbus::Eps_Type >(eps_control_state_);
}
 void Eps::set_eps_control_state(::apollo::canbus::Eps_Type value) {
  
  eps_control_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.eps_control_state)
}

// optional double eps_driver_hand_torq = 3;
void Eps::clear_eps_driver_hand_torq() {
  eps_driver_hand_torq_ = 0;
}
 double Eps::eps_driver_hand_torq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.eps_driver_hand_torq)
  return eps_driver_hand_torq_;
}
 void Eps::set_eps_driver_hand_torq(double value) {
  
  eps_driver_hand_torq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.eps_driver_hand_torq)
}

// optional bool is_steering_angle_valid = 4;
void Eps::clear_is_steering_angle_valid() {
  is_steering_angle_valid_ = false;
}
 bool Eps::is_steering_angle_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.is_steering_angle_valid)
  return is_steering_angle_valid_;
}
 void Eps::set_is_steering_angle_valid(bool value) {
  
  is_steering_angle_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.is_steering_angle_valid)
}

// optional double steering_angle = 5;
void Eps::clear_steering_angle() {
  steering_angle_ = 0;
}
 double Eps::steering_angle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.steering_angle)
  return steering_angle_;
}
 void Eps::set_steering_angle(double value) {
  
  steering_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.steering_angle)
}

// optional double steering_angle_spd = 6;
void Eps::clear_steering_angle_spd() {
  steering_angle_spd_ = 0;
}
 double Eps::steering_angle_spd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.steering_angle_spd)
  return steering_angle_spd_;
}
 void Eps::set_steering_angle_spd(double value) {
  
  steering_angle_spd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.steering_angle_spd)
}

// optional bool is_trimming_status = 7;
void Eps::clear_is_trimming_status() {
  is_trimming_status_ = false;
}
 bool Eps::is_trimming_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.is_trimming_status)
  return is_trimming_status_;
}
 void Eps::set_is_trimming_status(bool value) {
  
  is_trimming_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.is_trimming_status)
}

// optional bool is_calibration_status = 8;
void Eps::clear_is_calibration_status() {
  is_calibration_status_ = false;
}
 bool Eps::is_calibration_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.is_calibration_status)
  return is_calibration_status_;
}
 void Eps::set_is_calibration_status(bool value) {
  
  is_calibration_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.is_calibration_status)
}

// optional bool is_failure_status = 9;
void Eps::clear_is_failure_status() {
  is_failure_status_ = false;
}
 bool Eps::is_failure_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.is_failure_status)
  return is_failure_status_;
}
 void Eps::set_is_failure_status(bool value) {
  
  is_failure_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.is_failure_status)
}

// optional int32 allow_enter_autonomous_mode = 10;
void Eps::clear_allow_enter_autonomous_mode() {
  allow_enter_autonomous_mode_ = 0;
}
 ::google::protobuf::int32 Eps::allow_enter_autonomous_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.allow_enter_autonomous_mode)
  return allow_enter_autonomous_mode_;
}
 void Eps::set_allow_enter_autonomous_mode(::google::protobuf::int32 value) {
  
  allow_enter_autonomous_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.allow_enter_autonomous_mode)
}

// optional int32 current_driving_mode = 11;
void Eps::clear_current_driving_mode() {
  current_driving_mode_ = 0;
}
 ::google::protobuf::int32 Eps::current_driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.current_driving_mode)
  return current_driving_mode_;
}
 void Eps::set_current_driving_mode(::google::protobuf::int32 value) {
  
  current_driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.current_driving_mode)
}

// optional double steering_angle_cmd = 12;
void Eps::clear_steering_angle_cmd() {
  steering_angle_cmd_ = 0;
}
 double Eps::steering_angle_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.steering_angle_cmd)
  return steering_angle_cmd_;
}
 void Eps::set_steering_angle_cmd(double value) {
  
  steering_angle_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.steering_angle_cmd)
}

// optional double vehicle_speed = 13;
void Eps::clear_vehicle_speed() {
  vehicle_speed_ = 0;
}
 double Eps::vehicle_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.vehicle_speed)
  return vehicle_speed_;
}
 void Eps::set_vehicle_speed(double value) {
  
  vehicle_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.vehicle_speed)
}

// optional double epas_torque = 14;
void Eps::clear_epas_torque() {
  epas_torque_ = 0;
}
 double Eps::epas_torque() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.epas_torque)
  return epas_torque_;
}
 void Eps::set_epas_torque(double value) {
  
  epas_torque_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.epas_torque)
}

// optional bool steering_enabled = 15;
void Eps::clear_steering_enabled() {
  steering_enabled_ = false;
}
 bool Eps::steering_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.steering_enabled)
  return steering_enabled_;
}
 void Eps::set_steering_enabled(bool value) {
  
  steering_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.steering_enabled)
}

// optional bool driver_override = 16;
void Eps::clear_driver_override() {
  driver_override_ = false;
}
 bool Eps::driver_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.driver_override)
  return driver_override_;
}
 void Eps::set_driver_override(bool value) {
  
  driver_override_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.driver_override)
}

// optional bool driver_activity = 17;
void Eps::clear_driver_activity() {
  driver_activity_ = false;
}
 bool Eps::driver_activity() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.driver_activity)
  return driver_activity_;
}
 void Eps::set_driver_activity(bool value) {
  
  driver_activity_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.driver_activity)
}

// optional bool watchdog_fault = 18;
void Eps::clear_watchdog_fault() {
  watchdog_fault_ = false;
}
 bool Eps::watchdog_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.watchdog_fault)
  return watchdog_fault_;
}
 void Eps::set_watchdog_fault(bool value) {
  
  watchdog_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.watchdog_fault)
}

// optional bool channel_1_fault = 19;
void Eps::clear_channel_1_fault() {
  channel_1_fault_ = false;
}
 bool Eps::channel_1_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.channel_1_fault)
  return channel_1_fault_;
}
 void Eps::set_channel_1_fault(bool value) {
  
  channel_1_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.channel_1_fault)
}

// optional bool channel_2_fault = 20;
void Eps::clear_channel_2_fault() {
  channel_2_fault_ = false;
}
 bool Eps::channel_2_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.channel_2_fault)
  return channel_2_fault_;
}
 void Eps::set_channel_2_fault(bool value) {
  
  channel_2_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.channel_2_fault)
}

// optional bool calibration_fault = 21;
void Eps::clear_calibration_fault() {
  calibration_fault_ = false;
}
 bool Eps::calibration_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.calibration_fault)
  return calibration_fault_;
}
 void Eps::set_calibration_fault(bool value) {
  
  calibration_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.calibration_fault)
}

// optional bool connector_fault = 22;
void Eps::clear_connector_fault() {
  connector_fault_ = false;
}
 bool Eps::connector_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.connector_fault)
  return connector_fault_;
}
 void Eps::set_connector_fault(bool value) {
  
  connector_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.connector_fault)
}

// optional double timestamp_65 = 23;
void Eps::clear_timestamp_65() {
  timestamp_65_ = 0;
}
 double Eps::timestamp_65() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.timestamp_65)
  return timestamp_65_;
}
 void Eps::set_timestamp_65(double value) {
  
  timestamp_65_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.timestamp_65)
}

// optional int32 major_version = 24;
void Eps::clear_major_version() {
  major_version_ = 0;
}
 ::google::protobuf::int32 Eps::major_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.major_version)
  return major_version_;
}
 void Eps::set_major_version(::google::protobuf::int32 value) {
  
  major_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.major_version)
}

// optional int32 minor_version = 25;
void Eps::clear_minor_version() {
  minor_version_ = 0;
}
 ::google::protobuf::int32 Eps::minor_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.minor_version)
  return minor_version_;
}
 void Eps::set_minor_version(::google::protobuf::int32 value) {
  
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.minor_version)
}

// optional int32 build_number = 26;
void Eps::clear_build_number() {
  build_number_ = 0;
}
 ::google::protobuf::int32 Eps::build_number() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.build_number)
  return build_number_;
}
 void Eps::set_build_number(::google::protobuf::int32 value) {
  
  build_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.build_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* VehicleSpd_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleSpd_Type_descriptor_;
}
bool VehicleSpd_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleSpd_Type VehicleSpd::FORWARD;
const VehicleSpd_Type VehicleSpd::BACKWARD;
const VehicleSpd_Type VehicleSpd::STANDSTILL;
const VehicleSpd_Type VehicleSpd::INVALID;
const VehicleSpd_Type VehicleSpd::Type_MIN;
const VehicleSpd_Type VehicleSpd::Type_MAX;
const int VehicleSpd::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSpd::kIsVehicleStandstillFieldNumber;
const int VehicleSpd::kIsVehicleSpdValidFieldNumber;
const int VehicleSpd::kVehicleSpdFieldNumber;
const int VehicleSpd::kIsWheelSpdRrValidFieldNumber;
const int VehicleSpd::kWheelDirectionRrFieldNumber;
const int VehicleSpd::kWheelSpdRrFieldNumber;
const int VehicleSpd::kIsWheelSpdRlValidFieldNumber;
const int VehicleSpd::kWheelDirectionRlFieldNumber;
const int VehicleSpd::kWheelSpdRlFieldNumber;
const int VehicleSpd::kIsWheelSpdFrValidFieldNumber;
const int VehicleSpd::kWheelDirectionFrFieldNumber;
const int VehicleSpd::kWheelSpdFrFieldNumber;
const int VehicleSpd::kIsWheelSpdFlValidFieldNumber;
const int VehicleSpd::kWheelDirectionFlFieldNumber;
const int VehicleSpd::kWheelSpdFlFieldNumber;
const int VehicleSpd::kIsYawRateValidFieldNumber;
const int VehicleSpd::kYawRateFieldNumber;
const int VehicleSpd::kYawRateOffsetFieldNumber;
const int VehicleSpd::kIsAxValidFieldNumber;
const int VehicleSpd::kAxFieldNumber;
const int VehicleSpd::kAxOffsetFieldNumber;
const int VehicleSpd::kIsAyValidFieldNumber;
const int VehicleSpd::kAyFieldNumber;
const int VehicleSpd::kAyOffsetFieldNumber;
const int VehicleSpd::kLatAccFieldNumber;
const int VehicleSpd::kLongAccFieldNumber;
const int VehicleSpd::kVertAccFieldNumber;
const int VehicleSpd::kRollRateFieldNumber;
const int VehicleSpd::kAccEstFieldNumber;
const int VehicleSpd::kTimestampSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSpd::VehicleSpd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.VehicleSpd)
}

void VehicleSpd::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VehicleSpd::VehicleSpd(const VehicleSpd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.VehicleSpd)
}

void VehicleSpd::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_vehicle_standstill_ = false;
  is_vehicle_spd_valid_ = false;
  vehicle_spd_ = 0;
  is_wheel_spd_rr_valid_ = false;
  wheel_direction_rr_ = 0;
  wheel_spd_rr_ = 0;
  is_wheel_spd_rl_valid_ = false;
  wheel_direction_rl_ = 0;
  wheel_spd_rl_ = 0;
  is_wheel_spd_fr_valid_ = false;
  wheel_direction_fr_ = 0;
  wheel_spd_fr_ = 0;
  is_wheel_spd_fl_valid_ = false;
  wheel_direction_fl_ = 0;
  wheel_spd_fl_ = 0;
  is_yaw_rate_valid_ = false;
  yaw_rate_ = 0;
  yaw_rate_offset_ = 0;
  is_ax_valid_ = false;
  ax_ = 0;
  ax_offset_ = 0;
  is_ay_valid_ = false;
  ay_ = 0;
  ay_offset_ = 0;
  lat_acc_ = 0;
  long_acc_ = 0;
  vert_acc_ = 0;
  roll_rate_ = 0;
  acc_est_ = 0;
  timestamp_sec_ = 0;
}

VehicleSpd::~VehicleSpd() {
  // @@protoc_insertion_point(destructor:apollo.canbus.VehicleSpd)
  SharedDtor();
}

void VehicleSpd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleSpd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleSpd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleSpd_descriptor_;
}

const VehicleSpd& VehicleSpd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

VehicleSpd* VehicleSpd::default_instance_ = NULL;

VehicleSpd* VehicleSpd::New(::google::protobuf::Arena* arena) const {
  VehicleSpd* n = new VehicleSpd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleSpd::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.VehicleSpd)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleSpd, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleSpd*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(vehicle_spd_, wheel_spd_rr_);
  wheel_direction_rl_ = 0;
  ZR_(wheel_direction_fr_, is_yaw_rate_valid_);
  wheel_spd_rl_ = 0;
  wheel_spd_fl_ = 0;
  ZR_(yaw_rate_, ay_offset_);
  is_ax_valid_ = false;
  is_ay_valid_ = false;
  ZR_(lat_acc_, timestamp_sec_);

#undef ZR_HELPER_
#undef ZR_

}

bool VehicleSpd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.VehicleSpd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_vehicle_standstill = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vehicle_standstill_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_vehicle_spd_valid;
        break;
      }

      // optional bool is_vehicle_spd_valid = 2;
      case 2: {
        if (tag == 16) {
         parse_is_vehicle_spd_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vehicle_spd_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_vehicle_spd;
        break;
      }

      // optional double vehicle_spd = 3;
      case 3: {
        if (tag == 25) {
         parse_vehicle_spd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_spd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_wheel_spd_rr_valid;
        break;
      }

      // optional bool is_wheel_spd_rr_valid = 4;
      case 4: {
        if (tag == 32) {
         parse_is_wheel_spd_rr_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rr_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wheel_direction_rr;
        break;
      }

      // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
      case 5: {
        if (tag == 40) {
         parse_wheel_direction_rr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wheel_direction_rr(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_wheel_spd_rr;
        break;
      }

      // optional double wheel_spd_rr = 6;
      case 6: {
        if (tag == 49) {
         parse_wheel_spd_rr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_wheel_spd_rl_valid;
        break;
      }

      // optional bool is_wheel_spd_rl_valid = 7;
      case 7: {
        if (tag == 56) {
         parse_is_wheel_spd_rl_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rl_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_wheel_direction_rl;
        break;
      }

      // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
      case 8: {
        if (tag == 64) {
         parse_wheel_direction_rl:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wheel_direction_rl(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_wheel_spd_rl;
        break;
      }

      // optional double wheel_spd_rl = 9;
      case 9: {
        if (tag == 73) {
         parse_wheel_spd_rl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_wheel_spd_fr_valid;
        break;
      }

      // optional bool is_wheel_spd_fr_valid = 10;
      case 10: {
        if (tag == 80) {
         parse_is_wheel_spd_fr_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fr_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wheel_direction_fr;
        break;
      }

      // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
      case 11: {
        if (tag == 88) {
         parse_wheel_direction_fr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wheel_direction_fr(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_wheel_spd_fr;
        break;
      }

      // optional double wheel_spd_fr = 12;
      case 12: {
        if (tag == 97) {
         parse_wheel_spd_fr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_wheel_spd_fl_valid;
        break;
      }

      // optional bool is_wheel_spd_fl_valid = 13;
      case 13: {
        if (tag == 104) {
         parse_is_wheel_spd_fl_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fl_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_wheel_direction_fl;
        break;
      }

      // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
      case 14: {
        if (tag == 112) {
         parse_wheel_direction_fl:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wheel_direction_fl(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_wheel_spd_fl;
        break;
      }

      // optional double wheel_spd_fl = 15;
      case 15: {
        if (tag == 121) {
         parse_wheel_spd_fl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_is_yaw_rate_valid;
        break;
      }

      // optional bool is_yaw_rate_valid = 16;
      case 16: {
        if (tag == 128) {
         parse_is_yaw_rate_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yaw_rate_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_yaw_rate;
        break;
      }

      // optional double yaw_rate = 17;
      case 17: {
        if (tag == 137) {
         parse_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_yaw_rate_offset;
        break;
      }

      // optional double yaw_rate_offset = 18;
      case 18: {
        if (tag == 145) {
         parse_yaw_rate_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_is_ax_valid;
        break;
      }

      // optional bool is_ax_valid = 19;
      case 19: {
        if (tag == 152) {
         parse_is_ax_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ax_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_ax;
        break;
      }

      // optional double ax = 20;
      case 20: {
        if (tag == 161) {
         parse_ax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ax_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_ax_offset;
        break;
      }

      // optional double ax_offset = 21;
      case 21: {
        if (tag == 169) {
         parse_ax_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ax_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_is_ay_valid;
        break;
      }

      // optional bool is_ay_valid = 22;
      case 22: {
        if (tag == 176) {
         parse_is_ay_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ay_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_ay;
        break;
      }

      // optional double ay = 23;
      case 23: {
        if (tag == 185) {
         parse_ay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ay_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_ay_offset;
        break;
      }

      // optional double ay_offset = 24;
      case 24: {
        if (tag == 193) {
         parse_ay_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ay_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_lat_acc;
        break;
      }

      // optional double lat_acc = 25;
      case 25: {
        if (tag == 201) {
         parse_lat_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_acc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_long_acc;
        break;
      }

      // optional double long_acc = 26;
      case 26: {
        if (tag == 209) {
         parse_long_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_acc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_vert_acc;
        break;
      }

      // optional double vert_acc = 27;
      case 27: {
        if (tag == 217) {
         parse_vert_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vert_acc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_roll_rate;
        break;
      }

      // optional double roll_rate = 28;
      case 28: {
        if (tag == 225) {
         parse_roll_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_acc_est;
        break;
      }

      // optional double acc_est = 29;
      case 29: {
        if (tag == 233) {
         parse_acc_est:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_est_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_timestamp_sec;
        break;
      }

      // optional double timestamp_sec = 30;
      case 30: {
        if (tag == 241) {
         parse_timestamp_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.VehicleSpd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.VehicleSpd)
  return false;
#undef DO_
}

void VehicleSpd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.VehicleSpd)
  // optional bool is_vehicle_standstill = 1;
  if (this->is_vehicle_standstill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_vehicle_standstill(), output);
  }

  // optional bool is_vehicle_spd_valid = 2;
  if (this->is_vehicle_spd_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_vehicle_spd_valid(), output);
  }

  // optional double vehicle_spd = 3;
  if (this->vehicle_spd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vehicle_spd(), output);
  }

  // optional bool is_wheel_spd_rr_valid = 4;
  if (this->is_wheel_spd_rr_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_wheel_spd_rr_valid(), output);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
  if (this->wheel_direction_rr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->wheel_direction_rr(), output);
  }

  // optional double wheel_spd_rr = 6;
  if (this->wheel_spd_rr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wheel_spd_rr(), output);
  }

  // optional bool is_wheel_spd_rl_valid = 7;
  if (this->is_wheel_spd_rl_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wheel_spd_rl_valid(), output);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
  if (this->wheel_direction_rl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->wheel_direction_rl(), output);
  }

  // optional double wheel_spd_rl = 9;
  if (this->wheel_spd_rl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->wheel_spd_rl(), output);
  }

  // optional bool is_wheel_spd_fr_valid = 10;
  if (this->is_wheel_spd_fr_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_wheel_spd_fr_valid(), output);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
  if (this->wheel_direction_fr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->wheel_direction_fr(), output);
  }

  // optional double wheel_spd_fr = 12;
  if (this->wheel_spd_fr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wheel_spd_fr(), output);
  }

  // optional bool is_wheel_spd_fl_valid = 13;
  if (this->is_wheel_spd_fl_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_wheel_spd_fl_valid(), output);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
  if (this->wheel_direction_fl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->wheel_direction_fl(), output);
  }

  // optional double wheel_spd_fl = 15;
  if (this->wheel_spd_fl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->wheel_spd_fl(), output);
  }

  // optional bool is_yaw_rate_valid = 16;
  if (this->is_yaw_rate_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_yaw_rate_valid(), output);
  }

  // optional double yaw_rate = 17;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->yaw_rate(), output);
  }

  // optional double yaw_rate_offset = 18;
  if (this->yaw_rate_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->yaw_rate_offset(), output);
  }

  // optional bool is_ax_valid = 19;
  if (this->is_ax_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_ax_valid(), output);
  }

  // optional double ax = 20;
  if (this->ax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->ax(), output);
  }

  // optional double ax_offset = 21;
  if (this->ax_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->ax_offset(), output);
  }

  // optional bool is_ay_valid = 22;
  if (this->is_ay_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_ay_valid(), output);
  }

  // optional double ay = 23;
  if (this->ay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->ay(), output);
  }

  // optional double ay_offset = 24;
  if (this->ay_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->ay_offset(), output);
  }

  // optional double lat_acc = 25;
  if (this->lat_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lat_acc(), output);
  }

  // optional double long_acc = 26;
  if (this->long_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->long_acc(), output);
  }

  // optional double vert_acc = 27;
  if (this->vert_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->vert_acc(), output);
  }

  // optional double roll_rate = 28;
  if (this->roll_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->roll_rate(), output);
  }

  // optional double acc_est = 29;
  if (this->acc_est() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->acc_est(), output);
  }

  // optional double timestamp_sec = 30;
  if (this->timestamp_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->timestamp_sec(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.VehicleSpd)
}

::google::protobuf::uint8* VehicleSpd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.VehicleSpd)
  // optional bool is_vehicle_standstill = 1;
  if (this->is_vehicle_standstill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_vehicle_standstill(), target);
  }

  // optional bool is_vehicle_spd_valid = 2;
  if (this->is_vehicle_spd_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_vehicle_spd_valid(), target);
  }

  // optional double vehicle_spd = 3;
  if (this->vehicle_spd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vehicle_spd(), target);
  }

  // optional bool is_wheel_spd_rr_valid = 4;
  if (this->is_wheel_spd_rr_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_wheel_spd_rr_valid(), target);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
  if (this->wheel_direction_rr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->wheel_direction_rr(), target);
  }

  // optional double wheel_spd_rr = 6;
  if (this->wheel_spd_rr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wheel_spd_rr(), target);
  }

  // optional bool is_wheel_spd_rl_valid = 7;
  if (this->is_wheel_spd_rl_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_wheel_spd_rl_valid(), target);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
  if (this->wheel_direction_rl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->wheel_direction_rl(), target);
  }

  // optional double wheel_spd_rl = 9;
  if (this->wheel_spd_rl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->wheel_spd_rl(), target);
  }

  // optional bool is_wheel_spd_fr_valid = 10;
  if (this->is_wheel_spd_fr_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_wheel_spd_fr_valid(), target);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
  if (this->wheel_direction_fr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->wheel_direction_fr(), target);
  }

  // optional double wheel_spd_fr = 12;
  if (this->wheel_spd_fr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wheel_spd_fr(), target);
  }

  // optional bool is_wheel_spd_fl_valid = 13;
  if (this->is_wheel_spd_fl_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_wheel_spd_fl_valid(), target);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
  if (this->wheel_direction_fl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->wheel_direction_fl(), target);
  }

  // optional double wheel_spd_fl = 15;
  if (this->wheel_spd_fl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->wheel_spd_fl(), target);
  }

  // optional bool is_yaw_rate_valid = 16;
  if (this->is_yaw_rate_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_yaw_rate_valid(), target);
  }

  // optional double yaw_rate = 17;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->yaw_rate(), target);
  }

  // optional double yaw_rate_offset = 18;
  if (this->yaw_rate_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->yaw_rate_offset(), target);
  }

  // optional bool is_ax_valid = 19;
  if (this->is_ax_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_ax_valid(), target);
  }

  // optional double ax = 20;
  if (this->ax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->ax(), target);
  }

  // optional double ax_offset = 21;
  if (this->ax_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->ax_offset(), target);
  }

  // optional bool is_ay_valid = 22;
  if (this->is_ay_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->is_ay_valid(), target);
  }

  // optional double ay = 23;
  if (this->ay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->ay(), target);
  }

  // optional double ay_offset = 24;
  if (this->ay_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->ay_offset(), target);
  }

  // optional double lat_acc = 25;
  if (this->lat_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lat_acc(), target);
  }

  // optional double long_acc = 26;
  if (this->long_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->long_acc(), target);
  }

  // optional double vert_acc = 27;
  if (this->vert_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->vert_acc(), target);
  }

  // optional double roll_rate = 28;
  if (this->roll_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->roll_rate(), target);
  }

  // optional double acc_est = 29;
  if (this->acc_est() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->acc_est(), target);
  }

  // optional double timestamp_sec = 30;
  if (this->timestamp_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->timestamp_sec(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.VehicleSpd)
  return target;
}

int VehicleSpd::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.VehicleSpd)
  int total_size = 0;

  // optional bool is_vehicle_standstill = 1;
  if (this->is_vehicle_standstill() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_vehicle_spd_valid = 2;
  if (this->is_vehicle_spd_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional double vehicle_spd = 3;
  if (this->vehicle_spd() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_wheel_spd_rr_valid = 4;
  if (this->is_wheel_spd_rr_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
  if (this->wheel_direction_rr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rr());
  }

  // optional double wheel_spd_rr = 6;
  if (this->wheel_spd_rr() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_wheel_spd_rl_valid = 7;
  if (this->is_wheel_spd_rl_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
  if (this->wheel_direction_rl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rl());
  }

  // optional double wheel_spd_rl = 9;
  if (this->wheel_spd_rl() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_wheel_spd_fr_valid = 10;
  if (this->is_wheel_spd_fr_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
  if (this->wheel_direction_fr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fr());
  }

  // optional double wheel_spd_fr = 12;
  if (this->wheel_spd_fr() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_wheel_spd_fl_valid = 13;
  if (this->is_wheel_spd_fl_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
  if (this->wheel_direction_fl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fl());
  }

  // optional double wheel_spd_fl = 15;
  if (this->wheel_spd_fl() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_yaw_rate_valid = 16;
  if (this->is_yaw_rate_valid() != 0) {
    total_size += 2 + 1;
  }

  // optional double yaw_rate = 17;
  if (this->yaw_rate() != 0) {
    total_size += 2 + 8;
  }

  // optional double yaw_rate_offset = 18;
  if (this->yaw_rate_offset() != 0) {
    total_size += 2 + 8;
  }

  // optional bool is_ax_valid = 19;
  if (this->is_ax_valid() != 0) {
    total_size += 2 + 1;
  }

  // optional double ax = 20;
  if (this->ax() != 0) {
    total_size += 2 + 8;
  }

  // optional double ax_offset = 21;
  if (this->ax_offset() != 0) {
    total_size += 2 + 8;
  }

  // optional bool is_ay_valid = 22;
  if (this->is_ay_valid() != 0) {
    total_size += 2 + 1;
  }

  // optional double ay = 23;
  if (this->ay() != 0) {
    total_size += 2 + 8;
  }

  // optional double ay_offset = 24;
  if (this->ay_offset() != 0) {
    total_size += 2 + 8;
  }

  // optional double lat_acc = 25;
  if (this->lat_acc() != 0) {
    total_size += 2 + 8;
  }

  // optional double long_acc = 26;
  if (this->long_acc() != 0) {
    total_size += 2 + 8;
  }

  // optional double vert_acc = 27;
  if (this->vert_acc() != 0) {
    total_size += 2 + 8;
  }

  // optional double roll_rate = 28;
  if (this->roll_rate() != 0) {
    total_size += 2 + 8;
  }

  // optional double acc_est = 29;
  if (this->acc_est() != 0) {
    total_size += 2 + 8;
  }

  // optional double timestamp_sec = 30;
  if (this->timestamp_sec() != 0) {
    total_size += 2 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleSpd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.VehicleSpd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleSpd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleSpd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.VehicleSpd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.VehicleSpd)
    MergeFrom(*source);
  }
}

void VehicleSpd::MergeFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.VehicleSpd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_vehicle_standstill() != 0) {
    set_is_vehicle_standstill(from.is_vehicle_standstill());
  }
  if (from.is_vehicle_spd_valid() != 0) {
    set_is_vehicle_spd_valid(from.is_vehicle_spd_valid());
  }
  if (from.vehicle_spd() != 0) {
    set_vehicle_spd(from.vehicle_spd());
  }
  if (from.is_wheel_spd_rr_valid() != 0) {
    set_is_wheel_spd_rr_valid(from.is_wheel_spd_rr_valid());
  }
  if (from.wheel_direction_rr() != 0) {
    set_wheel_direction_rr(from.wheel_direction_rr());
  }
  if (from.wheel_spd_rr() != 0) {
    set_wheel_spd_rr(from.wheel_spd_rr());
  }
  if (from.is_wheel_spd_rl_valid() != 0) {
    set_is_wheel_spd_rl_valid(from.is_wheel_spd_rl_valid());
  }
  if (from.wheel_direction_rl() != 0) {
    set_wheel_direction_rl(from.wheel_direction_rl());
  }
  if (from.wheel_spd_rl() != 0) {
    set_wheel_spd_rl(from.wheel_spd_rl());
  }
  if (from.is_wheel_spd_fr_valid() != 0) {
    set_is_wheel_spd_fr_valid(from.is_wheel_spd_fr_valid());
  }
  if (from.wheel_direction_fr() != 0) {
    set_wheel_direction_fr(from.wheel_direction_fr());
  }
  if (from.wheel_spd_fr() != 0) {
    set_wheel_spd_fr(from.wheel_spd_fr());
  }
  if (from.is_wheel_spd_fl_valid() != 0) {
    set_is_wheel_spd_fl_valid(from.is_wheel_spd_fl_valid());
  }
  if (from.wheel_direction_fl() != 0) {
    set_wheel_direction_fl(from.wheel_direction_fl());
  }
  if (from.wheel_spd_fl() != 0) {
    set_wheel_spd_fl(from.wheel_spd_fl());
  }
  if (from.is_yaw_rate_valid() != 0) {
    set_is_yaw_rate_valid(from.is_yaw_rate_valid());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
  if (from.yaw_rate_offset() != 0) {
    set_yaw_rate_offset(from.yaw_rate_offset());
  }
  if (from.is_ax_valid() != 0) {
    set_is_ax_valid(from.is_ax_valid());
  }
  if (from.ax() != 0) {
    set_ax(from.ax());
  }
  if (from.ax_offset() != 0) {
    set_ax_offset(from.ax_offset());
  }
  if (from.is_ay_valid() != 0) {
    set_is_ay_valid(from.is_ay_valid());
  }
  if (from.ay() != 0) {
    set_ay(from.ay());
  }
  if (from.ay_offset() != 0) {
    set_ay_offset(from.ay_offset());
  }
  if (from.lat_acc() != 0) {
    set_lat_acc(from.lat_acc());
  }
  if (from.long_acc() != 0) {
    set_long_acc(from.long_acc());
  }
  if (from.vert_acc() != 0) {
    set_vert_acc(from.vert_acc());
  }
  if (from.roll_rate() != 0) {
    set_roll_rate(from.roll_rate());
  }
  if (from.acc_est() != 0) {
    set_acc_est(from.acc_est());
  }
  if (from.timestamp_sec() != 0) {
    set_timestamp_sec(from.timestamp_sec());
  }
}

void VehicleSpd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSpd::CopyFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSpd::IsInitialized() const {

  return true;
}

void VehicleSpd::Swap(VehicleSpd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleSpd::InternalSwap(VehicleSpd* other) {
  std::swap(is_vehicle_standstill_, other->is_vehicle_standstill_);
  std::swap(is_vehicle_spd_valid_, other->is_vehicle_spd_valid_);
  std::swap(vehicle_spd_, other->vehicle_spd_);
  std::swap(is_wheel_spd_rr_valid_, other->is_wheel_spd_rr_valid_);
  std::swap(wheel_direction_rr_, other->wheel_direction_rr_);
  std::swap(wheel_spd_rr_, other->wheel_spd_rr_);
  std::swap(is_wheel_spd_rl_valid_, other->is_wheel_spd_rl_valid_);
  std::swap(wheel_direction_rl_, other->wheel_direction_rl_);
  std::swap(wheel_spd_rl_, other->wheel_spd_rl_);
  std::swap(is_wheel_spd_fr_valid_, other->is_wheel_spd_fr_valid_);
  std::swap(wheel_direction_fr_, other->wheel_direction_fr_);
  std::swap(wheel_spd_fr_, other->wheel_spd_fr_);
  std::swap(is_wheel_spd_fl_valid_, other->is_wheel_spd_fl_valid_);
  std::swap(wheel_direction_fl_, other->wheel_direction_fl_);
  std::swap(wheel_spd_fl_, other->wheel_spd_fl_);
  std::swap(is_yaw_rate_valid_, other->is_yaw_rate_valid_);
  std::swap(yaw_rate_, other->yaw_rate_);
  std::swap(yaw_rate_offset_, other->yaw_rate_offset_);
  std::swap(is_ax_valid_, other->is_ax_valid_);
  std::swap(ax_, other->ax_);
  std::swap(ax_offset_, other->ax_offset_);
  std::swap(is_ay_valid_, other->is_ay_valid_);
  std::swap(ay_, other->ay_);
  std::swap(ay_offset_, other->ay_offset_);
  std::swap(lat_acc_, other->lat_acc_);
  std::swap(long_acc_, other->long_acc_);
  std::swap(vert_acc_, other->vert_acc_);
  std::swap(roll_rate_, other->roll_rate_);
  std::swap(acc_est_, other->acc_est_);
  std::swap(timestamp_sec_, other->timestamp_sec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleSpd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleSpd_descriptor_;
  metadata.reflection = VehicleSpd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleSpd

// optional bool is_vehicle_standstill = 1;
void VehicleSpd::clear_is_vehicle_standstill() {
  is_vehicle_standstill_ = false;
}
 bool VehicleSpd::is_vehicle_standstill() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_vehicle_standstill)
  return is_vehicle_standstill_;
}
 void VehicleSpd::set_is_vehicle_standstill(bool value) {
  
  is_vehicle_standstill_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_vehicle_standstill)
}

// optional bool is_vehicle_spd_valid = 2;
void VehicleSpd::clear_is_vehicle_spd_valid() {
  is_vehicle_spd_valid_ = false;
}
 bool VehicleSpd::is_vehicle_spd_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_vehicle_spd_valid)
  return is_vehicle_spd_valid_;
}
 void VehicleSpd::set_is_vehicle_spd_valid(bool value) {
  
  is_vehicle_spd_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_vehicle_spd_valid)
}

// optional double vehicle_spd = 3;
void VehicleSpd::clear_vehicle_spd() {
  vehicle_spd_ = 0;
}
 double VehicleSpd::vehicle_spd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.vehicle_spd)
  return vehicle_spd_;
}
 void VehicleSpd::set_vehicle_spd(double value) {
  
  vehicle_spd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.vehicle_spd)
}

// optional bool is_wheel_spd_rr_valid = 4;
void VehicleSpd::clear_is_wheel_spd_rr_valid() {
  is_wheel_spd_rr_valid_ = false;
}
 bool VehicleSpd::is_wheel_spd_rr_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_wheel_spd_rr_valid)
  return is_wheel_spd_rr_valid_;
}
 void VehicleSpd::set_is_wheel_spd_rr_valid(bool value) {
  
  is_wheel_spd_rr_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_wheel_spd_rr_valid)
}

// optional .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
void VehicleSpd::clear_wheel_direction_rr() {
  wheel_direction_rr_ = 0;
}
 ::apollo::canbus::VehicleSpd_Type VehicleSpd::wheel_direction_rr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_direction_rr)
  return static_cast< ::apollo::canbus::VehicleSpd_Type >(wheel_direction_rr_);
}
 void VehicleSpd::set_wheel_direction_rr(::apollo::canbus::VehicleSpd_Type value) {
  
  wheel_direction_rr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_direction_rr)
}

// optional double wheel_spd_rr = 6;
void VehicleSpd::clear_wheel_spd_rr() {
  wheel_spd_rr_ = 0;
}
 double VehicleSpd::wheel_spd_rr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_spd_rr)
  return wheel_spd_rr_;
}
 void VehicleSpd::set_wheel_spd_rr(double value) {
  
  wheel_spd_rr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_spd_rr)
}

// optional bool is_wheel_spd_rl_valid = 7;
void VehicleSpd::clear_is_wheel_spd_rl_valid() {
  is_wheel_spd_rl_valid_ = false;
}
 bool VehicleSpd::is_wheel_spd_rl_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_wheel_spd_rl_valid)
  return is_wheel_spd_rl_valid_;
}
 void VehicleSpd::set_is_wheel_spd_rl_valid(bool value) {
  
  is_wheel_spd_rl_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_wheel_spd_rl_valid)
}

// optional .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
void VehicleSpd::clear_wheel_direction_rl() {
  wheel_direction_rl_ = 0;
}
 ::apollo::canbus::VehicleSpd_Type VehicleSpd::wheel_direction_rl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_direction_rl)
  return static_cast< ::apollo::canbus::VehicleSpd_Type >(wheel_direction_rl_);
}
 void VehicleSpd::set_wheel_direction_rl(::apollo::canbus::VehicleSpd_Type value) {
  
  wheel_direction_rl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_direction_rl)
}

// optional double wheel_spd_rl = 9;
void VehicleSpd::clear_wheel_spd_rl() {
  wheel_spd_rl_ = 0;
}
 double VehicleSpd::wheel_spd_rl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_spd_rl)
  return wheel_spd_rl_;
}
 void VehicleSpd::set_wheel_spd_rl(double value) {
  
  wheel_spd_rl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_spd_rl)
}

// optional bool is_wheel_spd_fr_valid = 10;
void VehicleSpd::clear_is_wheel_spd_fr_valid() {
  is_wheel_spd_fr_valid_ = false;
}
 bool VehicleSpd::is_wheel_spd_fr_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_wheel_spd_fr_valid)
  return is_wheel_spd_fr_valid_;
}
 void VehicleSpd::set_is_wheel_spd_fr_valid(bool value) {
  
  is_wheel_spd_fr_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_wheel_spd_fr_valid)
}

// optional .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
void VehicleSpd::clear_wheel_direction_fr() {
  wheel_direction_fr_ = 0;
}
 ::apollo::canbus::VehicleSpd_Type VehicleSpd::wheel_direction_fr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_direction_fr)
  return static_cast< ::apollo::canbus::VehicleSpd_Type >(wheel_direction_fr_);
}
 void VehicleSpd::set_wheel_direction_fr(::apollo::canbus::VehicleSpd_Type value) {
  
  wheel_direction_fr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_direction_fr)
}

// optional double wheel_spd_fr = 12;
void VehicleSpd::clear_wheel_spd_fr() {
  wheel_spd_fr_ = 0;
}
 double VehicleSpd::wheel_spd_fr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_spd_fr)
  return wheel_spd_fr_;
}
 void VehicleSpd::set_wheel_spd_fr(double value) {
  
  wheel_spd_fr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_spd_fr)
}

// optional bool is_wheel_spd_fl_valid = 13;
void VehicleSpd::clear_is_wheel_spd_fl_valid() {
  is_wheel_spd_fl_valid_ = false;
}
 bool VehicleSpd::is_wheel_spd_fl_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_wheel_spd_fl_valid)
  return is_wheel_spd_fl_valid_;
}
 void VehicleSpd::set_is_wheel_spd_fl_valid(bool value) {
  
  is_wheel_spd_fl_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_wheel_spd_fl_valid)
}

// optional .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
void VehicleSpd::clear_wheel_direction_fl() {
  wheel_direction_fl_ = 0;
}
 ::apollo::canbus::VehicleSpd_Type VehicleSpd::wheel_direction_fl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_direction_fl)
  return static_cast< ::apollo::canbus::VehicleSpd_Type >(wheel_direction_fl_);
}
 void VehicleSpd::set_wheel_direction_fl(::apollo::canbus::VehicleSpd_Type value) {
  
  wheel_direction_fl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_direction_fl)
}

// optional double wheel_spd_fl = 15;
void VehicleSpd::clear_wheel_spd_fl() {
  wheel_spd_fl_ = 0;
}
 double VehicleSpd::wheel_spd_fl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_spd_fl)
  return wheel_spd_fl_;
}
 void VehicleSpd::set_wheel_spd_fl(double value) {
  
  wheel_spd_fl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_spd_fl)
}

// optional bool is_yaw_rate_valid = 16;
void VehicleSpd::clear_is_yaw_rate_valid() {
  is_yaw_rate_valid_ = false;
}
 bool VehicleSpd::is_yaw_rate_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_yaw_rate_valid)
  return is_yaw_rate_valid_;
}
 void VehicleSpd::set_is_yaw_rate_valid(bool value) {
  
  is_yaw_rate_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_yaw_rate_valid)
}

// optional double yaw_rate = 17;
void VehicleSpd::clear_yaw_rate() {
  yaw_rate_ = 0;
}
 double VehicleSpd::yaw_rate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.yaw_rate)
  return yaw_rate_;
}
 void VehicleSpd::set_yaw_rate(double value) {
  
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.yaw_rate)
}

// optional double yaw_rate_offset = 18;
void VehicleSpd::clear_yaw_rate_offset() {
  yaw_rate_offset_ = 0;
}
 double VehicleSpd::yaw_rate_offset() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.yaw_rate_offset)
  return yaw_rate_offset_;
}
 void VehicleSpd::set_yaw_rate_offset(double value) {
  
  yaw_rate_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.yaw_rate_offset)
}

// optional bool is_ax_valid = 19;
void VehicleSpd::clear_is_ax_valid() {
  is_ax_valid_ = false;
}
 bool VehicleSpd::is_ax_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_ax_valid)
  return is_ax_valid_;
}
 void VehicleSpd::set_is_ax_valid(bool value) {
  
  is_ax_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_ax_valid)
}

// optional double ax = 20;
void VehicleSpd::clear_ax() {
  ax_ = 0;
}
 double VehicleSpd::ax() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.ax)
  return ax_;
}
 void VehicleSpd::set_ax(double value) {
  
  ax_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.ax)
}

// optional double ax_offset = 21;
void VehicleSpd::clear_ax_offset() {
  ax_offset_ = 0;
}
 double VehicleSpd::ax_offset() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.ax_offset)
  return ax_offset_;
}
 void VehicleSpd::set_ax_offset(double value) {
  
  ax_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.ax_offset)
}

// optional bool is_ay_valid = 22;
void VehicleSpd::clear_is_ay_valid() {
  is_ay_valid_ = false;
}
 bool VehicleSpd::is_ay_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_ay_valid)
  return is_ay_valid_;
}
 void VehicleSpd::set_is_ay_valid(bool value) {
  
  is_ay_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_ay_valid)
}

// optional double ay = 23;
void VehicleSpd::clear_ay() {
  ay_ = 0;
}
 double VehicleSpd::ay() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.ay)
  return ay_;
}
 void VehicleSpd::set_ay(double value) {
  
  ay_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.ay)
}

// optional double ay_offset = 24;
void VehicleSpd::clear_ay_offset() {
  ay_offset_ = 0;
}
 double VehicleSpd::ay_offset() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.ay_offset)
  return ay_offset_;
}
 void VehicleSpd::set_ay_offset(double value) {
  
  ay_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.ay_offset)
}

// optional double lat_acc = 25;
void VehicleSpd::clear_lat_acc() {
  lat_acc_ = 0;
}
 double VehicleSpd::lat_acc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.lat_acc)
  return lat_acc_;
}
 void VehicleSpd::set_lat_acc(double value) {
  
  lat_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.lat_acc)
}

// optional double long_acc = 26;
void VehicleSpd::clear_long_acc() {
  long_acc_ = 0;
}
 double VehicleSpd::long_acc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.long_acc)
  return long_acc_;
}
 void VehicleSpd::set_long_acc(double value) {
  
  long_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.long_acc)
}

// optional double vert_acc = 27;
void VehicleSpd::clear_vert_acc() {
  vert_acc_ = 0;
}
 double VehicleSpd::vert_acc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.vert_acc)
  return vert_acc_;
}
 void VehicleSpd::set_vert_acc(double value) {
  
  vert_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.vert_acc)
}

// optional double roll_rate = 28;
void VehicleSpd::clear_roll_rate() {
  roll_rate_ = 0;
}
 double VehicleSpd::roll_rate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.roll_rate)
  return roll_rate_;
}
 void VehicleSpd::set_roll_rate(double value) {
  
  roll_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.roll_rate)
}

// optional double acc_est = 29;
void VehicleSpd::clear_acc_est() {
  acc_est_ = 0;
}
 double VehicleSpd::acc_est() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.acc_est)
  return acc_est_;
}
 void VehicleSpd::set_acc_est(double value) {
  
  acc_est_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.acc_est)
}

// optional double timestamp_sec = 30;
void VehicleSpd::clear_timestamp_sec() {
  timestamp_sec_ = 0;
}
 double VehicleSpd::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.timestamp_sec)
  return timestamp_sec_;
}
 void VehicleSpd::set_timestamp_sec(double value) {
  
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.timestamp_sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Deceleration::kIsDecelerationAvailableFieldNumber;
const int Deceleration::kIsDecelerationActiveFieldNumber;
const int Deceleration::kDecelerationFieldNumber;
const int Deceleration::kIsEvbFailFieldNumber;
const int Deceleration::kEvbPressureFieldNumber;
const int Deceleration::kBrakePressureFieldNumber;
const int Deceleration::kBrakePressureSpdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Deceleration::Deceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Deceleration)
}

void Deceleration::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Deceleration::Deceleration(const Deceleration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Deceleration)
}

void Deceleration::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_deceleration_available_ = false;
  is_deceleration_active_ = false;
  deceleration_ = 0;
  is_evb_fail_ = 0;
  evb_pressure_ = 0;
  brake_pressure_ = 0;
  brake_pressure_spd_ = 0;
}

Deceleration::~Deceleration() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Deceleration)
  SharedDtor();
}

void Deceleration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Deceleration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Deceleration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Deceleration_descriptor_;
}

const Deceleration& Deceleration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Deceleration* Deceleration::default_instance_ = NULL;

Deceleration* Deceleration::New(::google::protobuf::Arena* arena) const {
  Deceleration* n = new Deceleration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Deceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Deceleration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Deceleration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Deceleration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deceleration_, is_deceleration_active_);

#undef ZR_HELPER_
#undef ZR_

}

bool Deceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Deceleration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_deceleration_available = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deceleration_available_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_deceleration_active;
        break;
      }

      // optional bool is_deceleration_active = 2;
      case 2: {
        if (tag == 16) {
         parse_is_deceleration_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deceleration_active_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_deceleration;
        break;
      }

      // optional double deceleration = 3;
      case 3: {
        if (tag == 25) {
         parse_deceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deceleration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_is_evb_fail;
        break;
      }

      // optional double is_evb_fail = 4;
      case 4: {
        if (tag == 33) {
         parse_is_evb_fail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_evb_fail_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_evb_pressure;
        break;
      }

      // optional double evb_pressure = 5;
      case 5: {
        if (tag == 41) {
         parse_evb_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &evb_pressure_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_brake_pressure;
        break;
      }

      // optional double brake_pressure = 6;
      case 6: {
        if (tag == 49) {
         parse_brake_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pressure_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_brake_pressure_spd;
        break;
      }

      // optional double brake_pressure_spd = 7;
      case 7: {
        if (tag == 57) {
         parse_brake_pressure_spd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pressure_spd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Deceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Deceleration)
  return false;
#undef DO_
}

void Deceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Deceleration)
  // optional bool is_deceleration_available = 1;
  if (this->is_deceleration_available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_deceleration_available(), output);
  }

  // optional bool is_deceleration_active = 2;
  if (this->is_deceleration_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_deceleration_active(), output);
  }

  // optional double deceleration = 3;
  if (this->deceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->deceleration(), output);
  }

  // optional double is_evb_fail = 4;
  if (this->is_evb_fail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->is_evb_fail(), output);
  }

  // optional double evb_pressure = 5;
  if (this->evb_pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->evb_pressure(), output);
  }

  // optional double brake_pressure = 6;
  if (this->brake_pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->brake_pressure(), output);
  }

  // optional double brake_pressure_spd = 7;
  if (this->brake_pressure_spd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->brake_pressure_spd(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Deceleration)
}

::google::protobuf::uint8* Deceleration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Deceleration)
  // optional bool is_deceleration_available = 1;
  if (this->is_deceleration_available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_deceleration_available(), target);
  }

  // optional bool is_deceleration_active = 2;
  if (this->is_deceleration_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_deceleration_active(), target);
  }

  // optional double deceleration = 3;
  if (this->deceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->deceleration(), target);
  }

  // optional double is_evb_fail = 4;
  if (this->is_evb_fail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->is_evb_fail(), target);
  }

  // optional double evb_pressure = 5;
  if (this->evb_pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->evb_pressure(), target);
  }

  // optional double brake_pressure = 6;
  if (this->brake_pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->brake_pressure(), target);
  }

  // optional double brake_pressure_spd = 7;
  if (this->brake_pressure_spd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->brake_pressure_spd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Deceleration)
  return target;
}

int Deceleration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Deceleration)
  int total_size = 0;

  // optional bool is_deceleration_available = 1;
  if (this->is_deceleration_available() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_deceleration_active = 2;
  if (this->is_deceleration_active() != 0) {
    total_size += 1 + 1;
  }

  // optional double deceleration = 3;
  if (this->deceleration() != 0) {
    total_size += 1 + 8;
  }

  // optional double is_evb_fail = 4;
  if (this->is_evb_fail() != 0) {
    total_size += 1 + 8;
  }

  // optional double evb_pressure = 5;
  if (this->evb_pressure() != 0) {
    total_size += 1 + 8;
  }

  // optional double brake_pressure = 6;
  if (this->brake_pressure() != 0) {
    total_size += 1 + 8;
  }

  // optional double brake_pressure_spd = 7;
  if (this->brake_pressure_spd() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Deceleration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Deceleration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Deceleration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Deceleration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Deceleration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Deceleration)
    MergeFrom(*source);
  }
}

void Deceleration::MergeFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Deceleration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_deceleration_available() != 0) {
    set_is_deceleration_available(from.is_deceleration_available());
  }
  if (from.is_deceleration_active() != 0) {
    set_is_deceleration_active(from.is_deceleration_active());
  }
  if (from.deceleration() != 0) {
    set_deceleration(from.deceleration());
  }
  if (from.is_evb_fail() != 0) {
    set_is_evb_fail(from.is_evb_fail());
  }
  if (from.evb_pressure() != 0) {
    set_evb_pressure(from.evb_pressure());
  }
  if (from.brake_pressure() != 0) {
    set_brake_pressure(from.brake_pressure());
  }
  if (from.brake_pressure_spd() != 0) {
    set_brake_pressure_spd(from.brake_pressure_spd());
  }
}

void Deceleration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deceleration::CopyFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deceleration::IsInitialized() const {

  return true;
}

void Deceleration::Swap(Deceleration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Deceleration::InternalSwap(Deceleration* other) {
  std::swap(is_deceleration_available_, other->is_deceleration_available_);
  std::swap(is_deceleration_active_, other->is_deceleration_active_);
  std::swap(deceleration_, other->deceleration_);
  std::swap(is_evb_fail_, other->is_evb_fail_);
  std::swap(evb_pressure_, other->evb_pressure_);
  std::swap(brake_pressure_, other->brake_pressure_);
  std::swap(brake_pressure_spd_, other->brake_pressure_spd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Deceleration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Deceleration_descriptor_;
  metadata.reflection = Deceleration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Deceleration

// optional bool is_deceleration_available = 1;
void Deceleration::clear_is_deceleration_available() {
  is_deceleration_available_ = false;
}
 bool Deceleration::is_deceleration_available() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.is_deceleration_available)
  return is_deceleration_available_;
}
 void Deceleration::set_is_deceleration_available(bool value) {
  
  is_deceleration_available_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.is_deceleration_available)
}

// optional bool is_deceleration_active = 2;
void Deceleration::clear_is_deceleration_active() {
  is_deceleration_active_ = false;
}
 bool Deceleration::is_deceleration_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.is_deceleration_active)
  return is_deceleration_active_;
}
 void Deceleration::set_is_deceleration_active(bool value) {
  
  is_deceleration_active_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.is_deceleration_active)
}

// optional double deceleration = 3;
void Deceleration::clear_deceleration() {
  deceleration_ = 0;
}
 double Deceleration::deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.deceleration)
  return deceleration_;
}
 void Deceleration::set_deceleration(double value) {
  
  deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.deceleration)
}

// optional double is_evb_fail = 4;
void Deceleration::clear_is_evb_fail() {
  is_evb_fail_ = 0;
}
 double Deceleration::is_evb_fail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.is_evb_fail)
  return is_evb_fail_;
}
 void Deceleration::set_is_evb_fail(double value) {
  
  is_evb_fail_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.is_evb_fail)
}

// optional double evb_pressure = 5;
void Deceleration::clear_evb_pressure() {
  evb_pressure_ = 0;
}
 double Deceleration::evb_pressure() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.evb_pressure)
  return evb_pressure_;
}
 void Deceleration::set_evb_pressure(double value) {
  
  evb_pressure_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.evb_pressure)
}

// optional double brake_pressure = 6;
void Deceleration::clear_brake_pressure() {
  brake_pressure_ = 0;
}
 double Deceleration::brake_pressure() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.brake_pressure)
  return brake_pressure_;
}
 void Deceleration::set_brake_pressure(double value) {
  
  brake_pressure_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.brake_pressure)
}

// optional double brake_pressure_spd = 7;
void Deceleration::clear_brake_pressure_spd() {
  brake_pressure_spd_ = 0;
}
 double Deceleration::brake_pressure_spd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.brake_pressure_spd)
  return brake_pressure_spd_;
}
 void Deceleration::set_brake_pressure_spd(double value) {
  
  brake_pressure_spd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.brake_pressure_spd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Brake_HSAStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Brake_HSAStatusType_descriptor_;
}
bool Brake_HSAStatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_HSAStatusType Brake::HSA_INACTIVE;
const Brake_HSAStatusType Brake::HSA_FINDING_GRADIENT;
const Brake_HSAStatusType Brake::HSA_ACTIVE_PRESSED;
const Brake_HSAStatusType Brake::HSA_ACTIVE_RELEASED;
const Brake_HSAStatusType Brake::HSA_FAST_RELEASE;
const Brake_HSAStatusType Brake::HSA_SLOW_RELEASE;
const Brake_HSAStatusType Brake::HSA_FAILED;
const Brake_HSAStatusType Brake::HSA_UNDEFINED;
const Brake_HSAStatusType Brake::HSAStatusType_MIN;
const Brake_HSAStatusType Brake::HSAStatusType_MAX;
const int Brake::HSAStatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_HSAModeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Brake_HSAModeType_descriptor_;
}
bool Brake_HSAModeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_HSAModeType Brake::HSA_OFF;
const Brake_HSAModeType Brake::HSA_AUTO;
const Brake_HSAModeType Brake::HSA_MANUAL;
const Brake_HSAModeType Brake::HSA_MODE_UNDEFINED;
const Brake_HSAModeType Brake::HSAModeType_MIN;
const Brake_HSAModeType Brake::HSAModeType_MAX;
const int Brake::HSAModeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake::kIsBrakePedalPressedFieldNumber;
const int Brake::kIsBrakeForceExistFieldNumber;
const int Brake::kIsBrakeOverHeatFieldNumber;
const int Brake::kIsHandBrakeOnFieldNumber;
const int Brake::kBrakePedalPositionFieldNumber;
const int Brake::kIsBrakeValidFieldNumber;
const int Brake::kBrakeInputFieldNumber;
const int Brake::kBrakeCmdFieldNumber;
const int Brake::kBrakeOutputFieldNumber;
const int Brake::kBooInputFieldNumber;
const int Brake::kBooCmdFieldNumber;
const int Brake::kBooOutputFieldNumber;
const int Brake::kWatchdogApplyingBrakesFieldNumber;
const int Brake::kWatchdogSourceFieldNumber;
const int Brake::kBrakeEnabledFieldNumber;
const int Brake::kDriverOverrideFieldNumber;
const int Brake::kDriverActivityFieldNumber;
const int Brake::kWatchdogFaultFieldNumber;
const int Brake::kChannel1FaultFieldNumber;
const int Brake::kChannel2FaultFieldNumber;
const int Brake::kBooFaultFieldNumber;
const int Brake::kConnectorFaultFieldNumber;
const int Brake::kBrakeTorqueReqFieldNumber;
const int Brake::kHsaStatusFieldNumber;
const int Brake::kBrakeTorqueActFieldNumber;
const int Brake::kHsaModeFieldNumber;
const int Brake::kWheelTorqueActFieldNumber;
const int Brake::kMajorVersionFieldNumber;
const int Brake::kMinorVersionFieldNumber;
const int Brake::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake::Brake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake)
}

void Brake::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Brake::Brake(const Brake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake)
}

void Brake::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_brake_pedal_pressed_ = false;
  is_brake_force_exist_ = false;
  is_brake_over_heat_ = false;
  is_hand_brake_on_ = false;
  brake_pedal_position_ = 0;
  is_brake_valid_ = false;
  brake_input_ = 0;
  brake_cmd_ = 0;
  brake_output_ = 0;
  boo_input_ = false;
  boo_cmd_ = false;
  boo_output_ = false;
  watchdog_applying_brakes_ = false;
  watchdog_source_ = 0;
  brake_enabled_ = false;
  driver_override_ = false;
  driver_activity_ = false;
  watchdog_fault_ = false;
  channel_1_fault_ = false;
  channel_2_fault_ = false;
  boo_fault_ = false;
  connector_fault_ = false;
  brake_torque_req_ = 0;
  hsa_status_ = 0;
  brake_torque_act_ = 0;
  hsa_mode_ = 0;
  wheel_torque_act_ = 0;
  major_version_ = 0;
  minor_version_ = 0;
  build_number_ = 0;
}

Brake::~Brake() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake)
  SharedDtor();
}

void Brake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Brake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Brake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Brake_descriptor_;
}

const Brake& Brake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Brake* Brake::default_instance_ = NULL;

Brake* Brake::New(::google::protobuf::Arena* arena) const {
  Brake* n = new Brake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Brake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Brake, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Brake*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(brake_pedal_position_, is_brake_valid_);
  ZR_(brake_input_, brake_cmd_);
  ZR_(boo_input_, boo_output_);
  ZR_(brake_output_, driver_override_);
  ZR_(driver_activity_, hsa_status_);
  ZR_(brake_torque_act_, build_number_);

#undef ZR_HELPER_
#undef ZR_

}

bool Brake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Brake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_brake_pedal_pressed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_pedal_pressed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_brake_force_exist;
        break;
      }

      // optional bool is_brake_force_exist = 2;
      case 2: {
        if (tag == 16) {
         parse_is_brake_force_exist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_force_exist_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_brake_over_heat;
        break;
      }

      // optional bool is_brake_over_heat = 3;
      case 3: {
        if (tag == 24) {
         parse_is_brake_over_heat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_over_heat_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_hand_brake_on;
        break;
      }

      // optional bool is_hand_brake_on = 4;
      case 4: {
        if (tag == 32) {
         parse_is_hand_brake_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hand_brake_on_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_brake_pedal_position;
        break;
      }

      // optional double brake_pedal_position = 5;
      case 5: {
        if (tag == 41) {
         parse_brake_pedal_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pedal_position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_brake_valid;
        break;
      }

      // optional bool is_brake_valid = 6;
      case 6: {
        if (tag == 48) {
         parse_is_brake_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_brake_input;
        break;
      }

      // optional double brake_input = 7;
      case 7: {
        if (tag == 57) {
         parse_brake_input:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_input_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_brake_cmd;
        break;
      }

      // optional double brake_cmd = 8;
      case 8: {
        if (tag == 65) {
         parse_brake_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_cmd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_brake_output;
        break;
      }

      // optional double brake_output = 9;
      case 9: {
        if (tag == 73) {
         parse_brake_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_output_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_boo_input;
        break;
      }

      // optional bool boo_input = 10;
      case 10: {
        if (tag == 80) {
         parse_boo_input:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_input_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_boo_cmd;
        break;
      }

      // optional bool boo_cmd = 11;
      case 11: {
        if (tag == 88) {
         parse_boo_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_cmd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_boo_output;
        break;
      }

      // optional bool boo_output = 12;
      case 12: {
        if (tag == 96) {
         parse_boo_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_output_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_watchdog_applying_brakes;
        break;
      }

      // optional bool watchdog_applying_brakes = 13;
      case 13: {
        if (tag == 104) {
         parse_watchdog_applying_brakes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_applying_brakes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_watchdog_source;
        break;
      }

      // optional int32 watchdog_source = 14;
      case 14: {
        if (tag == 112) {
         parse_watchdog_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchdog_source_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_brake_enabled;
        break;
      }

      // optional bool brake_enabled = 15;
      case 15: {
        if (tag == 120) {
         parse_brake_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brake_enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_driver_override;
        break;
      }

      // optional bool driver_override = 16;
      case 16: {
        if (tag == 128) {
         parse_driver_override:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_driver_activity;
        break;
      }

      // optional bool driver_activity = 17;
      case 17: {
        if (tag == 136) {
         parse_driver_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_watchdog_fault;
        break;
      }

      // optional bool watchdog_fault = 18;
      case 18: {
        if (tag == 144) {
         parse_watchdog_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_channel_1_fault;
        break;
      }

      // optional bool channel_1_fault = 19;
      case 19: {
        if (tag == 152) {
         parse_channel_1_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_channel_2_fault;
        break;
      }

      // optional bool channel_2_fault = 20;
      case 20: {
        if (tag == 160) {
         parse_channel_2_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_boo_fault;
        break;
      }

      // optional bool boo_fault = 21;
      case 21: {
        if (tag == 168) {
         parse_boo_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_connector_fault;
        break;
      }

      // optional bool connector_fault = 22;
      case 22: {
        if (tag == 176) {
         parse_connector_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_brake_torque_req;
        break;
      }

      // optional int32 brake_torque_req = 23;
      case 23: {
        if (tag == 184) {
         parse_brake_torque_req:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_torque_req_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_hsa_status;
        break;
      }

      // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
      case 24: {
        if (tag == 192) {
         parse_hsa_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hsa_status(static_cast< ::apollo::canbus::Brake_HSAStatusType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_brake_torque_act;
        break;
      }

      // optional int32 brake_torque_act = 25;
      case 25: {
        if (tag == 200) {
         parse_brake_torque_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_torque_act_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_hsa_mode;
        break;
      }

      // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
      case 26: {
        if (tag == 208) {
         parse_hsa_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hsa_mode(static_cast< ::apollo::canbus::Brake_HSAModeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_wheel_torque_act;
        break;
      }

      // optional int32 wheel_torque_act = 27;
      case 27: {
        if (tag == 216) {
         parse_wheel_torque_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wheel_torque_act_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_major_version;
        break;
      }

      // optional int32 major_version = 28;
      case 28: {
        if (tag == 224) {
         parse_major_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_minor_version;
        break;
      }

      // optional int32 minor_version = 29;
      case 29: {
        if (tag == 232) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_build_number;
        break;
      }

      // optional int32 build_number = 30;
      case 30: {
        if (tag == 240) {
         parse_build_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Brake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Brake)
  return false;
#undef DO_
}

void Brake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Brake)
  // optional bool is_brake_pedal_pressed = 1;
  if (this->is_brake_pedal_pressed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_brake_pedal_pressed(), output);
  }

  // optional bool is_brake_force_exist = 2;
  if (this->is_brake_force_exist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_brake_force_exist(), output);
  }

  // optional bool is_brake_over_heat = 3;
  if (this->is_brake_over_heat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_brake_over_heat(), output);
  }

  // optional bool is_hand_brake_on = 4;
  if (this->is_hand_brake_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_hand_brake_on(), output);
  }

  // optional double brake_pedal_position = 5;
  if (this->brake_pedal_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->brake_pedal_position(), output);
  }

  // optional bool is_brake_valid = 6;
  if (this->is_brake_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_brake_valid(), output);
  }

  // optional double brake_input = 7;
  if (this->brake_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->brake_input(), output);
  }

  // optional double brake_cmd = 8;
  if (this->brake_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->brake_cmd(), output);
  }

  // optional double brake_output = 9;
  if (this->brake_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->brake_output(), output);
  }

  // optional bool boo_input = 10;
  if (this->boo_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->boo_input(), output);
  }

  // optional bool boo_cmd = 11;
  if (this->boo_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->boo_cmd(), output);
  }

  // optional bool boo_output = 12;
  if (this->boo_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->boo_output(), output);
  }

  // optional bool watchdog_applying_brakes = 13;
  if (this->watchdog_applying_brakes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->watchdog_applying_brakes(), output);
  }

  // optional int32 watchdog_source = 14;
  if (this->watchdog_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->watchdog_source(), output);
  }

  // optional bool brake_enabled = 15;
  if (this->brake_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->brake_enabled(), output);
  }

  // optional bool driver_override = 16;
  if (this->driver_override() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->driver_override(), output);
  }

  // optional bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->driver_activity(), output);
  }

  // optional bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->watchdog_fault(), output);
  }

  // optional bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->channel_1_fault(), output);
  }

  // optional bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->channel_2_fault(), output);
  }

  // optional bool boo_fault = 21;
  if (this->boo_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->boo_fault(), output);
  }

  // optional bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->connector_fault(), output);
  }

  // optional int32 brake_torque_req = 23;
  if (this->brake_torque_req() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->brake_torque_req(), output);
  }

  // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (this->hsa_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->hsa_status(), output);
  }

  // optional int32 brake_torque_act = 25;
  if (this->brake_torque_act() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->brake_torque_act(), output);
  }

  // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (this->hsa_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->hsa_mode(), output);
  }

  // optional int32 wheel_torque_act = 27;
  if (this->wheel_torque_act() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->wheel_torque_act(), output);
  }

  // optional int32 major_version = 28;
  if (this->major_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->major_version(), output);
  }

  // optional int32 minor_version = 29;
  if (this->minor_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->minor_version(), output);
  }

  // optional int32 build_number = 30;
  if (this->build_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->build_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Brake)
}

::google::protobuf::uint8* Brake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake)
  // optional bool is_brake_pedal_pressed = 1;
  if (this->is_brake_pedal_pressed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_brake_pedal_pressed(), target);
  }

  // optional bool is_brake_force_exist = 2;
  if (this->is_brake_force_exist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_brake_force_exist(), target);
  }

  // optional bool is_brake_over_heat = 3;
  if (this->is_brake_over_heat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_brake_over_heat(), target);
  }

  // optional bool is_hand_brake_on = 4;
  if (this->is_hand_brake_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_hand_brake_on(), target);
  }

  // optional double brake_pedal_position = 5;
  if (this->brake_pedal_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->brake_pedal_position(), target);
  }

  // optional bool is_brake_valid = 6;
  if (this->is_brake_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_brake_valid(), target);
  }

  // optional double brake_input = 7;
  if (this->brake_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->brake_input(), target);
  }

  // optional double brake_cmd = 8;
  if (this->brake_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->brake_cmd(), target);
  }

  // optional double brake_output = 9;
  if (this->brake_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->brake_output(), target);
  }

  // optional bool boo_input = 10;
  if (this->boo_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->boo_input(), target);
  }

  // optional bool boo_cmd = 11;
  if (this->boo_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->boo_cmd(), target);
  }

  // optional bool boo_output = 12;
  if (this->boo_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->boo_output(), target);
  }

  // optional bool watchdog_applying_brakes = 13;
  if (this->watchdog_applying_brakes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->watchdog_applying_brakes(), target);
  }

  // optional int32 watchdog_source = 14;
  if (this->watchdog_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->watchdog_source(), target);
  }

  // optional bool brake_enabled = 15;
  if (this->brake_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->brake_enabled(), target);
  }

  // optional bool driver_override = 16;
  if (this->driver_override() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->driver_override(), target);
  }

  // optional bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->driver_activity(), target);
  }

  // optional bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->channel_2_fault(), target);
  }

  // optional bool boo_fault = 21;
  if (this->boo_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->boo_fault(), target);
  }

  // optional bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->connector_fault(), target);
  }

  // optional int32 brake_torque_req = 23;
  if (this->brake_torque_req() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->brake_torque_req(), target);
  }

  // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (this->hsa_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->hsa_status(), target);
  }

  // optional int32 brake_torque_act = 25;
  if (this->brake_torque_act() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->brake_torque_act(), target);
  }

  // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (this->hsa_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->hsa_mode(), target);
  }

  // optional int32 wheel_torque_act = 27;
  if (this->wheel_torque_act() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->wheel_torque_act(), target);
  }

  // optional int32 major_version = 28;
  if (this->major_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->major_version(), target);
  }

  // optional int32 minor_version = 29;
  if (this->minor_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->minor_version(), target);
  }

  // optional int32 build_number = 30;
  if (this->build_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->build_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake)
  return target;
}

int Brake::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake)
  int total_size = 0;

  // optional bool is_brake_pedal_pressed = 1;
  if (this->is_brake_pedal_pressed() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_brake_force_exist = 2;
  if (this->is_brake_force_exist() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_brake_over_heat = 3;
  if (this->is_brake_over_heat() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_hand_brake_on = 4;
  if (this->is_hand_brake_on() != 0) {
    total_size += 1 + 1;
  }

  // optional double brake_pedal_position = 5;
  if (this->brake_pedal_position() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_brake_valid = 6;
  if (this->is_brake_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional double brake_input = 7;
  if (this->brake_input() != 0) {
    total_size += 1 + 8;
  }

  // optional double brake_cmd = 8;
  if (this->brake_cmd() != 0) {
    total_size += 1 + 8;
  }

  // optional double brake_output = 9;
  if (this->brake_output() != 0) {
    total_size += 1 + 8;
  }

  // optional bool boo_input = 10;
  if (this->boo_input() != 0) {
    total_size += 1 + 1;
  }

  // optional bool boo_cmd = 11;
  if (this->boo_cmd() != 0) {
    total_size += 1 + 1;
  }

  // optional bool boo_output = 12;
  if (this->boo_output() != 0) {
    total_size += 1 + 1;
  }

  // optional bool watchdog_applying_brakes = 13;
  if (this->watchdog_applying_brakes() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 watchdog_source = 14;
  if (this->watchdog_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->watchdog_source());
  }

  // optional bool brake_enabled = 15;
  if (this->brake_enabled() != 0) {
    total_size += 1 + 1;
  }

  // optional bool driver_override = 16;
  if (this->driver_override() != 0) {
    total_size += 2 + 1;
  }

  // optional bool driver_activity = 17;
  if (this->driver_activity() != 0) {
    total_size += 2 + 1;
  }

  // optional bool watchdog_fault = 18;
  if (this->watchdog_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool channel_1_fault = 19;
  if (this->channel_1_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool channel_2_fault = 20;
  if (this->channel_2_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool boo_fault = 21;
  if (this->boo_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool connector_fault = 22;
  if (this->connector_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional int32 brake_torque_req = 23;
  if (this->brake_torque_req() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake_torque_req());
  }

  // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (this->hsa_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hsa_status());
  }

  // optional int32 brake_torque_act = 25;
  if (this->brake_torque_act() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake_torque_act());
  }

  // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (this->hsa_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hsa_mode());
  }

  // optional int32 wheel_torque_act = 27;
  if (this->wheel_torque_act() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wheel_torque_act());
  }

  // optional int32 major_version = 28;
  if (this->major_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->major_version());
  }

  // optional int32 minor_version = 29;
  if (this->minor_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minor_version());
  }

  // optional int32 build_number = 30;
  if (this->build_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->build_number());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Brake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Brake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake)
    MergeFrom(*source);
  }
}

void Brake::MergeFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_brake_pedal_pressed() != 0) {
    set_is_brake_pedal_pressed(from.is_brake_pedal_pressed());
  }
  if (from.is_brake_force_exist() != 0) {
    set_is_brake_force_exist(from.is_brake_force_exist());
  }
  if (from.is_brake_over_heat() != 0) {
    set_is_brake_over_heat(from.is_brake_over_heat());
  }
  if (from.is_hand_brake_on() != 0) {
    set_is_hand_brake_on(from.is_hand_brake_on());
  }
  if (from.brake_pedal_position() != 0) {
    set_brake_pedal_position(from.brake_pedal_position());
  }
  if (from.is_brake_valid() != 0) {
    set_is_brake_valid(from.is_brake_valid());
  }
  if (from.brake_input() != 0) {
    set_brake_input(from.brake_input());
  }
  if (from.brake_cmd() != 0) {
    set_brake_cmd(from.brake_cmd());
  }
  if (from.brake_output() != 0) {
    set_brake_output(from.brake_output());
  }
  if (from.boo_input() != 0) {
    set_boo_input(from.boo_input());
  }
  if (from.boo_cmd() != 0) {
    set_boo_cmd(from.boo_cmd());
  }
  if (from.boo_output() != 0) {
    set_boo_output(from.boo_output());
  }
  if (from.watchdog_applying_brakes() != 0) {
    set_watchdog_applying_brakes(from.watchdog_applying_brakes());
  }
  if (from.watchdog_source() != 0) {
    set_watchdog_source(from.watchdog_source());
  }
  if (from.brake_enabled() != 0) {
    set_brake_enabled(from.brake_enabled());
  }
  if (from.driver_override() != 0) {
    set_driver_override(from.driver_override());
  }
  if (from.driver_activity() != 0) {
    set_driver_activity(from.driver_activity());
  }
  if (from.watchdog_fault() != 0) {
    set_watchdog_fault(from.watchdog_fault());
  }
  if (from.channel_1_fault() != 0) {
    set_channel_1_fault(from.channel_1_fault());
  }
  if (from.channel_2_fault() != 0) {
    set_channel_2_fault(from.channel_2_fault());
  }
  if (from.boo_fault() != 0) {
    set_boo_fault(from.boo_fault());
  }
  if (from.connector_fault() != 0) {
    set_connector_fault(from.connector_fault());
  }
  if (from.brake_torque_req() != 0) {
    set_brake_torque_req(from.brake_torque_req());
  }
  if (from.hsa_status() != 0) {
    set_hsa_status(from.hsa_status());
  }
  if (from.brake_torque_act() != 0) {
    set_brake_torque_act(from.brake_torque_act());
  }
  if (from.hsa_mode() != 0) {
    set_hsa_mode(from.hsa_mode());
  }
  if (from.wheel_torque_act() != 0) {
    set_wheel_torque_act(from.wheel_torque_act());
  }
  if (from.major_version() != 0) {
    set_major_version(from.major_version());
  }
  if (from.minor_version() != 0) {
    set_minor_version(from.minor_version());
  }
  if (from.build_number() != 0) {
    set_build_number(from.build_number());
  }
}

void Brake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake::CopyFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake::IsInitialized() const {

  return true;
}

void Brake::Swap(Brake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake::InternalSwap(Brake* other) {
  std::swap(is_brake_pedal_pressed_, other->is_brake_pedal_pressed_);
  std::swap(is_brake_force_exist_, other->is_brake_force_exist_);
  std::swap(is_brake_over_heat_, other->is_brake_over_heat_);
  std::swap(is_hand_brake_on_, other->is_hand_brake_on_);
  std::swap(brake_pedal_position_, other->brake_pedal_position_);
  std::swap(is_brake_valid_, other->is_brake_valid_);
  std::swap(brake_input_, other->brake_input_);
  std::swap(brake_cmd_, other->brake_cmd_);
  std::swap(brake_output_, other->brake_output_);
  std::swap(boo_input_, other->boo_input_);
  std::swap(boo_cmd_, other->boo_cmd_);
  std::swap(boo_output_, other->boo_output_);
  std::swap(watchdog_applying_brakes_, other->watchdog_applying_brakes_);
  std::swap(watchdog_source_, other->watchdog_source_);
  std::swap(brake_enabled_, other->brake_enabled_);
  std::swap(driver_override_, other->driver_override_);
  std::swap(driver_activity_, other->driver_activity_);
  std::swap(watchdog_fault_, other->watchdog_fault_);
  std::swap(channel_1_fault_, other->channel_1_fault_);
  std::swap(channel_2_fault_, other->channel_2_fault_);
  std::swap(boo_fault_, other->boo_fault_);
  std::swap(connector_fault_, other->connector_fault_);
  std::swap(brake_torque_req_, other->brake_torque_req_);
  std::swap(hsa_status_, other->hsa_status_);
  std::swap(brake_torque_act_, other->brake_torque_act_);
  std::swap(hsa_mode_, other->hsa_mode_);
  std::swap(wheel_torque_act_, other->wheel_torque_act_);
  std::swap(major_version_, other->major_version_);
  std::swap(minor_version_, other->minor_version_);
  std::swap(build_number_, other->build_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Brake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Brake_descriptor_;
  metadata.reflection = Brake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Brake

// optional bool is_brake_pedal_pressed = 1;
void Brake::clear_is_brake_pedal_pressed() {
  is_brake_pedal_pressed_ = false;
}
 bool Brake::is_brake_pedal_pressed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.is_brake_pedal_pressed)
  return is_brake_pedal_pressed_;
}
 void Brake::set_is_brake_pedal_pressed(bool value) {
  
  is_brake_pedal_pressed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.is_brake_pedal_pressed)
}

// optional bool is_brake_force_exist = 2;
void Brake::clear_is_brake_force_exist() {
  is_brake_force_exist_ = false;
}
 bool Brake::is_brake_force_exist() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.is_brake_force_exist)
  return is_brake_force_exist_;
}
 void Brake::set_is_brake_force_exist(bool value) {
  
  is_brake_force_exist_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.is_brake_force_exist)
}

// optional bool is_brake_over_heat = 3;
void Brake::clear_is_brake_over_heat() {
  is_brake_over_heat_ = false;
}
 bool Brake::is_brake_over_heat() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.is_brake_over_heat)
  return is_brake_over_heat_;
}
 void Brake::set_is_brake_over_heat(bool value) {
  
  is_brake_over_heat_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.is_brake_over_heat)
}

// optional bool is_hand_brake_on = 4;
void Brake::clear_is_hand_brake_on() {
  is_hand_brake_on_ = false;
}
 bool Brake::is_hand_brake_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.is_hand_brake_on)
  return is_hand_brake_on_;
}
 void Brake::set_is_hand_brake_on(bool value) {
  
  is_hand_brake_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.is_hand_brake_on)
}

// optional double brake_pedal_position = 5;
void Brake::clear_brake_pedal_position() {
  brake_pedal_position_ = 0;
}
 double Brake::brake_pedal_position() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_pedal_position)
  return brake_pedal_position_;
}
 void Brake::set_brake_pedal_position(double value) {
  
  brake_pedal_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_pedal_position)
}

// optional bool is_brake_valid = 6;
void Brake::clear_is_brake_valid() {
  is_brake_valid_ = false;
}
 bool Brake::is_brake_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.is_brake_valid)
  return is_brake_valid_;
}
 void Brake::set_is_brake_valid(bool value) {
  
  is_brake_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.is_brake_valid)
}

// optional double brake_input = 7;
void Brake::clear_brake_input() {
  brake_input_ = 0;
}
 double Brake::brake_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_input)
  return brake_input_;
}
 void Brake::set_brake_input(double value) {
  
  brake_input_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_input)
}

// optional double brake_cmd = 8;
void Brake::clear_brake_cmd() {
  brake_cmd_ = 0;
}
 double Brake::brake_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_cmd)
  return brake_cmd_;
}
 void Brake::set_brake_cmd(double value) {
  
  brake_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_cmd)
}

// optional double brake_output = 9;
void Brake::clear_brake_output() {
  brake_output_ = 0;
}
 double Brake::brake_output() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_output)
  return brake_output_;
}
 void Brake::set_brake_output(double value) {
  
  brake_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_output)
}

// optional bool boo_input = 10;
void Brake::clear_boo_input() {
  boo_input_ = false;
}
 bool Brake::boo_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.boo_input)
  return boo_input_;
}
 void Brake::set_boo_input(bool value) {
  
  boo_input_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.boo_input)
}

// optional bool boo_cmd = 11;
void Brake::clear_boo_cmd() {
  boo_cmd_ = false;
}
 bool Brake::boo_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.boo_cmd)
  return boo_cmd_;
}
 void Brake::set_boo_cmd(bool value) {
  
  boo_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.boo_cmd)
}

// optional bool boo_output = 12;
void Brake::clear_boo_output() {
  boo_output_ = false;
}
 bool Brake::boo_output() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.boo_output)
  return boo_output_;
}
 void Brake::set_boo_output(bool value) {
  
  boo_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.boo_output)
}

// optional bool watchdog_applying_brakes = 13;
void Brake::clear_watchdog_applying_brakes() {
  watchdog_applying_brakes_ = false;
}
 bool Brake::watchdog_applying_brakes() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.watchdog_applying_brakes)
  return watchdog_applying_brakes_;
}
 void Brake::set_watchdog_applying_brakes(bool value) {
  
  watchdog_applying_brakes_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.watchdog_applying_brakes)
}

// optional int32 watchdog_source = 14;
void Brake::clear_watchdog_source() {
  watchdog_source_ = 0;
}
 ::google::protobuf::int32 Brake::watchdog_source() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.watchdog_source)
  return watchdog_source_;
}
 void Brake::set_watchdog_source(::google::protobuf::int32 value) {
  
  watchdog_source_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.watchdog_source)
}

// optional bool brake_enabled = 15;
void Brake::clear_brake_enabled() {
  brake_enabled_ = false;
}
 bool Brake::brake_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_enabled)
  return brake_enabled_;
}
 void Brake::set_brake_enabled(bool value) {
  
  brake_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_enabled)
}

// optional bool driver_override = 16;
void Brake::clear_driver_override() {
  driver_override_ = false;
}
 bool Brake::driver_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.driver_override)
  return driver_override_;
}
 void Brake::set_driver_override(bool value) {
  
  driver_override_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.driver_override)
}

// optional bool driver_activity = 17;
void Brake::clear_driver_activity() {
  driver_activity_ = false;
}
 bool Brake::driver_activity() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.driver_activity)
  return driver_activity_;
}
 void Brake::set_driver_activity(bool value) {
  
  driver_activity_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.driver_activity)
}

// optional bool watchdog_fault = 18;
void Brake::clear_watchdog_fault() {
  watchdog_fault_ = false;
}
 bool Brake::watchdog_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.watchdog_fault)
  return watchdog_fault_;
}
 void Brake::set_watchdog_fault(bool value) {
  
  watchdog_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.watchdog_fault)
}

// optional bool channel_1_fault = 19;
void Brake::clear_channel_1_fault() {
  channel_1_fault_ = false;
}
 bool Brake::channel_1_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.channel_1_fault)
  return channel_1_fault_;
}
 void Brake::set_channel_1_fault(bool value) {
  
  channel_1_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.channel_1_fault)
}

// optional bool channel_2_fault = 20;
void Brake::clear_channel_2_fault() {
  channel_2_fault_ = false;
}
 bool Brake::channel_2_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.channel_2_fault)
  return channel_2_fault_;
}
 void Brake::set_channel_2_fault(bool value) {
  
  channel_2_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.channel_2_fault)
}

// optional bool boo_fault = 21;
void Brake::clear_boo_fault() {
  boo_fault_ = false;
}
 bool Brake::boo_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.boo_fault)
  return boo_fault_;
}
 void Brake::set_boo_fault(bool value) {
  
  boo_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.boo_fault)
}

// optional bool connector_fault = 22;
void Brake::clear_connector_fault() {
  connector_fault_ = false;
}
 bool Brake::connector_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.connector_fault)
  return connector_fault_;
}
 void Brake::set_connector_fault(bool value) {
  
  connector_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.connector_fault)
}

// optional int32 brake_torque_req = 23;
void Brake::clear_brake_torque_req() {
  brake_torque_req_ = 0;
}
 ::google::protobuf::int32 Brake::brake_torque_req() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_torque_req)
  return brake_torque_req_;
}
 void Brake::set_brake_torque_req(::google::protobuf::int32 value) {
  
  brake_torque_req_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_torque_req)
}

// optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
void Brake::clear_hsa_status() {
  hsa_status_ = 0;
}
 ::apollo::canbus::Brake_HSAStatusType Brake::hsa_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.hsa_status)
  return static_cast< ::apollo::canbus::Brake_HSAStatusType >(hsa_status_);
}
 void Brake::set_hsa_status(::apollo::canbus::Brake_HSAStatusType value) {
  
  hsa_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.hsa_status)
}

// optional int32 brake_torque_act = 25;
void Brake::clear_brake_torque_act() {
  brake_torque_act_ = 0;
}
 ::google::protobuf::int32 Brake::brake_torque_act() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_torque_act)
  return brake_torque_act_;
}
 void Brake::set_brake_torque_act(::google::protobuf::int32 value) {
  
  brake_torque_act_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_torque_act)
}

// optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
void Brake::clear_hsa_mode() {
  hsa_mode_ = 0;
}
 ::apollo::canbus::Brake_HSAModeType Brake::hsa_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.hsa_mode)
  return static_cast< ::apollo::canbus::Brake_HSAModeType >(hsa_mode_);
}
 void Brake::set_hsa_mode(::apollo::canbus::Brake_HSAModeType value) {
  
  hsa_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.hsa_mode)
}

// optional int32 wheel_torque_act = 27;
void Brake::clear_wheel_torque_act() {
  wheel_torque_act_ = 0;
}
 ::google::protobuf::int32 Brake::wheel_torque_act() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.wheel_torque_act)
  return wheel_torque_act_;
}
 void Brake::set_wheel_torque_act(::google::protobuf::int32 value) {
  
  wheel_torque_act_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.wheel_torque_act)
}

// optional int32 major_version = 28;
void Brake::clear_major_version() {
  major_version_ = 0;
}
 ::google::protobuf::int32 Brake::major_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.major_version)
  return major_version_;
}
 void Brake::set_major_version(::google::protobuf::int32 value) {
  
  major_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.major_version)
}

// optional int32 minor_version = 29;
void Brake::clear_minor_version() {
  minor_version_ = 0;
}
 ::google::protobuf::int32 Brake::minor_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.minor_version)
  return minor_version_;
}
 void Brake::set_minor_version(::google::protobuf::int32 value) {
  
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.minor_version)
}

// optional int32 build_number = 30;
void Brake::clear_build_number() {
  build_number_ = 0;
}
 ::google::protobuf::int32 Brake::build_number() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.build_number)
  return build_number_;
}
 void Brake::set_build_number(::google::protobuf::int32 value) {
  
  build_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.build_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Epb_PBrakeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Epb_PBrakeType_descriptor_;
}
bool Epb_PBrakeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Epb_PBrakeType Epb::PBRAKE_OFF;
const Epb_PBrakeType Epb::PBRAKE_TRANSITION;
const Epb_PBrakeType Epb::PBRAKE_ON;
const Epb_PBrakeType Epb::PBRAKE_FAULT;
const Epb_PBrakeType Epb::PBrakeType_MIN;
const Epb_PBrakeType Epb::PBrakeType_MAX;
const int Epb::PBrakeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Epb::kIsEpbErrorFieldNumber;
const int Epb::kIsEpbReleasedFieldNumber;
const int Epb::kEpbStatusFieldNumber;
const int Epb::kParkingBrakeStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Epb::Epb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Epb)
}

void Epb::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Epb::Epb(const Epb& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Epb)
}

void Epb::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_epb_error_ = false;
  is_epb_released_ = false;
  epb_status_ = 0;
  parking_brake_status_ = 0;
}

Epb::~Epb() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Epb)
  SharedDtor();
}

void Epb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Epb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Epb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Epb_descriptor_;
}

const Epb& Epb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Epb* Epb::default_instance_ = NULL;

Epb* Epb::New(::google::protobuf::Arena* arena) const {
  Epb* n = new Epb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Epb::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Epb)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Epb, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Epb*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_epb_error_, parking_brake_status_);

#undef ZR_HELPER_
#undef ZR_

}

bool Epb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Epb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_epb_error = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_epb_released;
        break;
      }

      // optional bool is_epb_released = 2;
      case 2: {
        if (tag == 16) {
         parse_is_epb_released:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_released_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_epb_status;
        break;
      }

      // optional int32 epb_status = 3;
      case 3: {
        if (tag == 24) {
         parse_epb_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epb_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_parking_brake_status;
        break;
      }

      // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
      case 4: {
        if (tag == 32) {
         parse_parking_brake_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parking_brake_status(static_cast< ::apollo::canbus::Epb_PBrakeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Epb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Epb)
  return false;
#undef DO_
}

void Epb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Epb)
  // optional bool is_epb_error = 1;
  if (this->is_epb_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_epb_error(), output);
  }

  // optional bool is_epb_released = 2;
  if (this->is_epb_released() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_epb_released(), output);
  }

  // optional int32 epb_status = 3;
  if (this->epb_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->epb_status(), output);
  }

  // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (this->parking_brake_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->parking_brake_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Epb)
}

::google::protobuf::uint8* Epb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Epb)
  // optional bool is_epb_error = 1;
  if (this->is_epb_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_epb_error(), target);
  }

  // optional bool is_epb_released = 2;
  if (this->is_epb_released() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_epb_released(), target);
  }

  // optional int32 epb_status = 3;
  if (this->epb_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->epb_status(), target);
  }

  // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (this->parking_brake_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->parking_brake_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Epb)
  return target;
}

int Epb::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Epb)
  int total_size = 0;

  // optional bool is_epb_error = 1;
  if (this->is_epb_error() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_epb_released = 2;
  if (this->is_epb_released() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 epb_status = 3;
  if (this->epb_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epb_status());
  }

  // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (this->parking_brake_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parking_brake_status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Epb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Epb)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Epb* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Epb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Epb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Epb)
    MergeFrom(*source);
  }
}

void Epb::MergeFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Epb)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_epb_error() != 0) {
    set_is_epb_error(from.is_epb_error());
  }
  if (from.is_epb_released() != 0) {
    set_is_epb_released(from.is_epb_released());
  }
  if (from.epb_status() != 0) {
    set_epb_status(from.epb_status());
  }
  if (from.parking_brake_status() != 0) {
    set_parking_brake_status(from.parking_brake_status());
  }
}

void Epb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Epb::CopyFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Epb::IsInitialized() const {

  return true;
}

void Epb::Swap(Epb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Epb::InternalSwap(Epb* other) {
  std::swap(is_epb_error_, other->is_epb_error_);
  std::swap(is_epb_released_, other->is_epb_released_);
  std::swap(epb_status_, other->epb_status_);
  std::swap(parking_brake_status_, other->parking_brake_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Epb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Epb_descriptor_;
  metadata.reflection = Epb_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Epb

// optional bool is_epb_error = 1;
void Epb::clear_is_epb_error() {
  is_epb_error_ = false;
}
 bool Epb::is_epb_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epb.is_epb_error)
  return is_epb_error_;
}
 void Epb::set_is_epb_error(bool value) {
  
  is_epb_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Epb.is_epb_error)
}

// optional bool is_epb_released = 2;
void Epb::clear_is_epb_released() {
  is_epb_released_ = false;
}
 bool Epb::is_epb_released() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epb.is_epb_released)
  return is_epb_released_;
}
 void Epb::set_is_epb_released(bool value) {
  
  is_epb_released_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Epb.is_epb_released)
}

// optional int32 epb_status = 3;
void Epb::clear_epb_status() {
  epb_status_ = 0;
}
 ::google::protobuf::int32 Epb::epb_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epb.epb_status)
  return epb_status_;
}
 void Epb::set_epb_status(::google::protobuf::int32 value) {
  
  epb_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Epb.epb_status)
}

// optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
void Epb::clear_parking_brake_status() {
  parking_brake_status_ = 0;
}
 ::apollo::canbus::Epb_PBrakeType Epb::parking_brake_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epb.parking_brake_status)
  return static_cast< ::apollo::canbus::Epb_PBrakeType >(parking_brake_status_);
}
 void Epb::set_parking_brake_status(::apollo::canbus::Epb_PBrakeType value) {
  
  parking_brake_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Epb.parking_brake_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gas::kIsGasPedalErrorFieldNumber;
const int Gas::kIsGasPedalPressedMoreFieldNumber;
const int Gas::kGasPedalPositionFieldNumber;
const int Gas::kIsGasValidFieldNumber;
const int Gas::kThrottleInputFieldNumber;
const int Gas::kThrottleCmdFieldNumber;
const int Gas::kThrottleOutputFieldNumber;
const int Gas::kWatchdogSourceFieldNumber;
const int Gas::kThrottleEnabledFieldNumber;
const int Gas::kDriverOverrideFieldNumber;
const int Gas::kDriverActivityFieldNumber;
const int Gas::kWatchdogFaultFieldNumber;
const int Gas::kChannel1FaultFieldNumber;
const int Gas::kChannel2FaultFieldNumber;
const int Gas::kConnectorFaultFieldNumber;
const int Gas::kAcceleratorPedalFieldNumber;
const int Gas::kAcceleratorPedalRateFieldNumber;
const int Gas::kMajorVersionFieldNumber;
const int Gas::kMinorVersionFieldNumber;
const int Gas::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gas::Gas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gas)
}

void Gas::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Gas::Gas(const Gas& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gas)
}

void Gas::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_gas_pedal_error_ = false;
  is_gas_pedal_pressed_more_ = false;
  gas_pedal_position_ = 0;
  is_gas_valid_ = false;
  throttle_input_ = 0;
  throttle_cmd_ = 0;
  throttle_output_ = 0;
  watchdog_source_ = 0;
  throttle_enabled_ = false;
  driver_override_ = false;
  driver_activity_ = false;
  watchdog_fault_ = false;
  channel_1_fault_ = false;
  channel_2_fault_ = false;
  connector_fault_ = false;
  accelerator_pedal_ = 0;
  accelerator_pedal_rate_ = 0;
  major_version_ = 0;
  minor_version_ = 0;
  build_number_ = 0;
}

Gas::~Gas() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gas)
  SharedDtor();
}

void Gas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gas_descriptor_;
}

const Gas& Gas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Gas* Gas::default_instance_ = NULL;

Gas* Gas::New(::google::protobuf::Arena* arena) const {
  Gas* n = new Gas;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gas::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gas)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Gas, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Gas*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gas_pedal_position_, is_gas_valid_);
  ZR_(watchdog_source_, throttle_output_);
  ZR_(driver_override_, accelerator_pedal_);
  throttle_enabled_ = false;
  ZR_(accelerator_pedal_rate_, build_number_);

#undef ZR_HELPER_
#undef ZR_

}

bool Gas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Gas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_gas_pedal_error = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_pedal_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_gas_pedal_pressed_more;
        break;
      }

      // optional bool is_gas_pedal_pressed_more = 2;
      case 2: {
        if (tag == 16) {
         parse_is_gas_pedal_pressed_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_pedal_pressed_more_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_gas_pedal_position;
        break;
      }

      // optional double gas_pedal_position = 3;
      case 3: {
        if (tag == 25) {
         parse_gas_pedal_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gas_pedal_position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_gas_valid;
        break;
      }

      // optional bool is_gas_valid = 4;
      case 4: {
        if (tag == 32) {
         parse_is_gas_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_throttle_input;
        break;
      }

      // optional double throttle_input = 5;
      case 5: {
        if (tag == 41) {
         parse_throttle_input:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_input_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_throttle_cmd;
        break;
      }

      // optional double throttle_cmd = 6;
      case 6: {
        if (tag == 49) {
         parse_throttle_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_cmd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_throttle_output;
        break;
      }

      // optional double throttle_output = 7;
      case 7: {
        if (tag == 57) {
         parse_throttle_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_output_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_watchdog_source;
        break;
      }

      // optional int32 watchdog_source = 8;
      case 8: {
        if (tag == 64) {
         parse_watchdog_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchdog_source_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_throttle_enabled;
        break;
      }

      // optional bool throttle_enabled = 9;
      case 9: {
        if (tag == 72) {
         parse_throttle_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &throttle_enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_driver_override;
        break;
      }

      // optional bool driver_override = 10;
      case 10: {
        if (tag == 80) {
         parse_driver_override:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_driver_activity;
        break;
      }

      // optional bool driver_activity = 11;
      case 11: {
        if (tag == 88) {
         parse_driver_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_watchdog_fault;
        break;
      }

      // optional bool watchdog_fault = 12;
      case 12: {
        if (tag == 96) {
         parse_watchdog_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_channel_1_fault;
        break;
      }

      // optional bool channel_1_fault = 13;
      case 13: {
        if (tag == 104) {
         parse_channel_1_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_channel_2_fault;
        break;
      }

      // optional bool channel_2_fault = 14;
      case 14: {
        if (tag == 112) {
         parse_channel_2_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_connector_fault;
        break;
      }

      // optional bool connector_fault = 15;
      case 15: {
        if (tag == 120) {
         parse_connector_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_accelerator_pedal;
        break;
      }

      // optional double accelerator_pedal = 16;
      case 16: {
        if (tag == 129) {
         parse_accelerator_pedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerator_pedal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_accelerator_pedal_rate;
        break;
      }

      // optional double accelerator_pedal_rate = 17;
      case 17: {
        if (tag == 137) {
         parse_accelerator_pedal_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerator_pedal_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_major_version;
        break;
      }

      // optional int32 major_version = 18;
      case 18: {
        if (tag == 144) {
         parse_major_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_minor_version;
        break;
      }

      // optional int32 minor_version = 19;
      case 19: {
        if (tag == 152) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_build_number;
        break;
      }

      // optional int32 build_number = 20;
      case 20: {
        if (tag == 160) {
         parse_build_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Gas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Gas)
  return false;
#undef DO_
}

void Gas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Gas)
  // optional bool is_gas_pedal_error = 1;
  if (this->is_gas_pedal_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_gas_pedal_error(), output);
  }

  // optional bool is_gas_pedal_pressed_more = 2;
  if (this->is_gas_pedal_pressed_more() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_gas_pedal_pressed_more(), output);
  }

  // optional double gas_pedal_position = 3;
  if (this->gas_pedal_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gas_pedal_position(), output);
  }

  // optional bool is_gas_valid = 4;
  if (this->is_gas_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_gas_valid(), output);
  }

  // optional double throttle_input = 5;
  if (this->throttle_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->throttle_input(), output);
  }

  // optional double throttle_cmd = 6;
  if (this->throttle_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->throttle_cmd(), output);
  }

  // optional double throttle_output = 7;
  if (this->throttle_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->throttle_output(), output);
  }

  // optional int32 watchdog_source = 8;
  if (this->watchdog_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->watchdog_source(), output);
  }

  // optional bool throttle_enabled = 9;
  if (this->throttle_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->throttle_enabled(), output);
  }

  // optional bool driver_override = 10;
  if (this->driver_override() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->driver_override(), output);
  }

  // optional bool driver_activity = 11;
  if (this->driver_activity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->driver_activity(), output);
  }

  // optional bool watchdog_fault = 12;
  if (this->watchdog_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->watchdog_fault(), output);
  }

  // optional bool channel_1_fault = 13;
  if (this->channel_1_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->channel_1_fault(), output);
  }

  // optional bool channel_2_fault = 14;
  if (this->channel_2_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->channel_2_fault(), output);
  }

  // optional bool connector_fault = 15;
  if (this->connector_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->connector_fault(), output);
  }

  // optional double accelerator_pedal = 16;
  if (this->accelerator_pedal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->accelerator_pedal(), output);
  }

  // optional double accelerator_pedal_rate = 17;
  if (this->accelerator_pedal_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->accelerator_pedal_rate(), output);
  }

  // optional int32 major_version = 18;
  if (this->major_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->major_version(), output);
  }

  // optional int32 minor_version = 19;
  if (this->minor_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->minor_version(), output);
  }

  // optional int32 build_number = 20;
  if (this->build_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->build_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Gas)
}

::google::protobuf::uint8* Gas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gas)
  // optional bool is_gas_pedal_error = 1;
  if (this->is_gas_pedal_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_gas_pedal_error(), target);
  }

  // optional bool is_gas_pedal_pressed_more = 2;
  if (this->is_gas_pedal_pressed_more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_gas_pedal_pressed_more(), target);
  }

  // optional double gas_pedal_position = 3;
  if (this->gas_pedal_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gas_pedal_position(), target);
  }

  // optional bool is_gas_valid = 4;
  if (this->is_gas_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_gas_valid(), target);
  }

  // optional double throttle_input = 5;
  if (this->throttle_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->throttle_input(), target);
  }

  // optional double throttle_cmd = 6;
  if (this->throttle_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->throttle_cmd(), target);
  }

  // optional double throttle_output = 7;
  if (this->throttle_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->throttle_output(), target);
  }

  // optional int32 watchdog_source = 8;
  if (this->watchdog_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->watchdog_source(), target);
  }

  // optional bool throttle_enabled = 9;
  if (this->throttle_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->throttle_enabled(), target);
  }

  // optional bool driver_override = 10;
  if (this->driver_override() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->driver_override(), target);
  }

  // optional bool driver_activity = 11;
  if (this->driver_activity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->driver_activity(), target);
  }

  // optional bool watchdog_fault = 12;
  if (this->watchdog_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 13;
  if (this->channel_1_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 14;
  if (this->channel_2_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->channel_2_fault(), target);
  }

  // optional bool connector_fault = 15;
  if (this->connector_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->connector_fault(), target);
  }

  // optional double accelerator_pedal = 16;
  if (this->accelerator_pedal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->accelerator_pedal(), target);
  }

  // optional double accelerator_pedal_rate = 17;
  if (this->accelerator_pedal_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->accelerator_pedal_rate(), target);
  }

  // optional int32 major_version = 18;
  if (this->major_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->major_version(), target);
  }

  // optional int32 minor_version = 19;
  if (this->minor_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->minor_version(), target);
  }

  // optional int32 build_number = 20;
  if (this->build_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->build_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gas)
  return target;
}

int Gas::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gas)
  int total_size = 0;

  // optional bool is_gas_pedal_error = 1;
  if (this->is_gas_pedal_error() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_gas_pedal_pressed_more = 2;
  if (this->is_gas_pedal_pressed_more() != 0) {
    total_size += 1 + 1;
  }

  // optional double gas_pedal_position = 3;
  if (this->gas_pedal_position() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_gas_valid = 4;
  if (this->is_gas_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional double throttle_input = 5;
  if (this->throttle_input() != 0) {
    total_size += 1 + 8;
  }

  // optional double throttle_cmd = 6;
  if (this->throttle_cmd() != 0) {
    total_size += 1 + 8;
  }

  // optional double throttle_output = 7;
  if (this->throttle_output() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 watchdog_source = 8;
  if (this->watchdog_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->watchdog_source());
  }

  // optional bool throttle_enabled = 9;
  if (this->throttle_enabled() != 0) {
    total_size += 1 + 1;
  }

  // optional bool driver_override = 10;
  if (this->driver_override() != 0) {
    total_size += 1 + 1;
  }

  // optional bool driver_activity = 11;
  if (this->driver_activity() != 0) {
    total_size += 1 + 1;
  }

  // optional bool watchdog_fault = 12;
  if (this->watchdog_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool channel_1_fault = 13;
  if (this->channel_1_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool channel_2_fault = 14;
  if (this->channel_2_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool connector_fault = 15;
  if (this->connector_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional double accelerator_pedal = 16;
  if (this->accelerator_pedal() != 0) {
    total_size += 2 + 8;
  }

  // optional double accelerator_pedal_rate = 17;
  if (this->accelerator_pedal_rate() != 0) {
    total_size += 2 + 8;
  }

  // optional int32 major_version = 18;
  if (this->major_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->major_version());
  }

  // optional int32 minor_version = 19;
  if (this->minor_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minor_version());
  }

  // optional int32 build_number = 20;
  if (this->build_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->build_number());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gas)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Gas* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Gas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gas)
    MergeFrom(*source);
  }
}

void Gas::MergeFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gas)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_gas_pedal_error() != 0) {
    set_is_gas_pedal_error(from.is_gas_pedal_error());
  }
  if (from.is_gas_pedal_pressed_more() != 0) {
    set_is_gas_pedal_pressed_more(from.is_gas_pedal_pressed_more());
  }
  if (from.gas_pedal_position() != 0) {
    set_gas_pedal_position(from.gas_pedal_position());
  }
  if (from.is_gas_valid() != 0) {
    set_is_gas_valid(from.is_gas_valid());
  }
  if (from.throttle_input() != 0) {
    set_throttle_input(from.throttle_input());
  }
  if (from.throttle_cmd() != 0) {
    set_throttle_cmd(from.throttle_cmd());
  }
  if (from.throttle_output() != 0) {
    set_throttle_output(from.throttle_output());
  }
  if (from.watchdog_source() != 0) {
    set_watchdog_source(from.watchdog_source());
  }
  if (from.throttle_enabled() != 0) {
    set_throttle_enabled(from.throttle_enabled());
  }
  if (from.driver_override() != 0) {
    set_driver_override(from.driver_override());
  }
  if (from.driver_activity() != 0) {
    set_driver_activity(from.driver_activity());
  }
  if (from.watchdog_fault() != 0) {
    set_watchdog_fault(from.watchdog_fault());
  }
  if (from.channel_1_fault() != 0) {
    set_channel_1_fault(from.channel_1_fault());
  }
  if (from.channel_2_fault() != 0) {
    set_channel_2_fault(from.channel_2_fault());
  }
  if (from.connector_fault() != 0) {
    set_connector_fault(from.connector_fault());
  }
  if (from.accelerator_pedal() != 0) {
    set_accelerator_pedal(from.accelerator_pedal());
  }
  if (from.accelerator_pedal_rate() != 0) {
    set_accelerator_pedal_rate(from.accelerator_pedal_rate());
  }
  if (from.major_version() != 0) {
    set_major_version(from.major_version());
  }
  if (from.minor_version() != 0) {
    set_minor_version(from.minor_version());
  }
  if (from.build_number() != 0) {
    set_build_number(from.build_number());
  }
}

void Gas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gas::CopyFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gas::IsInitialized() const {

  return true;
}

void Gas::Swap(Gas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gas::InternalSwap(Gas* other) {
  std::swap(is_gas_pedal_error_, other->is_gas_pedal_error_);
  std::swap(is_gas_pedal_pressed_more_, other->is_gas_pedal_pressed_more_);
  std::swap(gas_pedal_position_, other->gas_pedal_position_);
  std::swap(is_gas_valid_, other->is_gas_valid_);
  std::swap(throttle_input_, other->throttle_input_);
  std::swap(throttle_cmd_, other->throttle_cmd_);
  std::swap(throttle_output_, other->throttle_output_);
  std::swap(watchdog_source_, other->watchdog_source_);
  std::swap(throttle_enabled_, other->throttle_enabled_);
  std::swap(driver_override_, other->driver_override_);
  std::swap(driver_activity_, other->driver_activity_);
  std::swap(watchdog_fault_, other->watchdog_fault_);
  std::swap(channel_1_fault_, other->channel_1_fault_);
  std::swap(channel_2_fault_, other->channel_2_fault_);
  std::swap(connector_fault_, other->connector_fault_);
  std::swap(accelerator_pedal_, other->accelerator_pedal_);
  std::swap(accelerator_pedal_rate_, other->accelerator_pedal_rate_);
  std::swap(major_version_, other->major_version_);
  std::swap(minor_version_, other->minor_version_);
  std::swap(build_number_, other->build_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gas_descriptor_;
  metadata.reflection = Gas_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gas

// optional bool is_gas_pedal_error = 1;
void Gas::clear_is_gas_pedal_error() {
  is_gas_pedal_error_ = false;
}
 bool Gas::is_gas_pedal_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.is_gas_pedal_error)
  return is_gas_pedal_error_;
}
 void Gas::set_is_gas_pedal_error(bool value) {
  
  is_gas_pedal_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.is_gas_pedal_error)
}

// optional bool is_gas_pedal_pressed_more = 2;
void Gas::clear_is_gas_pedal_pressed_more() {
  is_gas_pedal_pressed_more_ = false;
}
 bool Gas::is_gas_pedal_pressed_more() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.is_gas_pedal_pressed_more)
  return is_gas_pedal_pressed_more_;
}
 void Gas::set_is_gas_pedal_pressed_more(bool value) {
  
  is_gas_pedal_pressed_more_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.is_gas_pedal_pressed_more)
}

// optional double gas_pedal_position = 3;
void Gas::clear_gas_pedal_position() {
  gas_pedal_position_ = 0;
}
 double Gas::gas_pedal_position() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.gas_pedal_position)
  return gas_pedal_position_;
}
 void Gas::set_gas_pedal_position(double value) {
  
  gas_pedal_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.gas_pedal_position)
}

// optional bool is_gas_valid = 4;
void Gas::clear_is_gas_valid() {
  is_gas_valid_ = false;
}
 bool Gas::is_gas_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.is_gas_valid)
  return is_gas_valid_;
}
 void Gas::set_is_gas_valid(bool value) {
  
  is_gas_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.is_gas_valid)
}

// optional double throttle_input = 5;
void Gas::clear_throttle_input() {
  throttle_input_ = 0;
}
 double Gas::throttle_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.throttle_input)
  return throttle_input_;
}
 void Gas::set_throttle_input(double value) {
  
  throttle_input_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.throttle_input)
}

// optional double throttle_cmd = 6;
void Gas::clear_throttle_cmd() {
  throttle_cmd_ = 0;
}
 double Gas::throttle_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.throttle_cmd)
  return throttle_cmd_;
}
 void Gas::set_throttle_cmd(double value) {
  
  throttle_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.throttle_cmd)
}

// optional double throttle_output = 7;
void Gas::clear_throttle_output() {
  throttle_output_ = 0;
}
 double Gas::throttle_output() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.throttle_output)
  return throttle_output_;
}
 void Gas::set_throttle_output(double value) {
  
  throttle_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.throttle_output)
}

// optional int32 watchdog_source = 8;
void Gas::clear_watchdog_source() {
  watchdog_source_ = 0;
}
 ::google::protobuf::int32 Gas::watchdog_source() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.watchdog_source)
  return watchdog_source_;
}
 void Gas::set_watchdog_source(::google::protobuf::int32 value) {
  
  watchdog_source_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.watchdog_source)
}

// optional bool throttle_enabled = 9;
void Gas::clear_throttle_enabled() {
  throttle_enabled_ = false;
}
 bool Gas::throttle_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.throttle_enabled)
  return throttle_enabled_;
}
 void Gas::set_throttle_enabled(bool value) {
  
  throttle_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.throttle_enabled)
}

// optional bool driver_override = 10;
void Gas::clear_driver_override() {
  driver_override_ = false;
}
 bool Gas::driver_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.driver_override)
  return driver_override_;
}
 void Gas::set_driver_override(bool value) {
  
  driver_override_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.driver_override)
}

// optional bool driver_activity = 11;
void Gas::clear_driver_activity() {
  driver_activity_ = false;
}
 bool Gas::driver_activity() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.driver_activity)
  return driver_activity_;
}
 void Gas::set_driver_activity(bool value) {
  
  driver_activity_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.driver_activity)
}

// optional bool watchdog_fault = 12;
void Gas::clear_watchdog_fault() {
  watchdog_fault_ = false;
}
 bool Gas::watchdog_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.watchdog_fault)
  return watchdog_fault_;
}
 void Gas::set_watchdog_fault(bool value) {
  
  watchdog_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.watchdog_fault)
}

// optional bool channel_1_fault = 13;
void Gas::clear_channel_1_fault() {
  channel_1_fault_ = false;
}
 bool Gas::channel_1_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.channel_1_fault)
  return channel_1_fault_;
}
 void Gas::set_channel_1_fault(bool value) {
  
  channel_1_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.channel_1_fault)
}

// optional bool channel_2_fault = 14;
void Gas::clear_channel_2_fault() {
  channel_2_fault_ = false;
}
 bool Gas::channel_2_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.channel_2_fault)
  return channel_2_fault_;
}
 void Gas::set_channel_2_fault(bool value) {
  
  channel_2_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.channel_2_fault)
}

// optional bool connector_fault = 15;
void Gas::clear_connector_fault() {
  connector_fault_ = false;
}
 bool Gas::connector_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.connector_fault)
  return connector_fault_;
}
 void Gas::set_connector_fault(bool value) {
  
  connector_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.connector_fault)
}

// optional double accelerator_pedal = 16;
void Gas::clear_accelerator_pedal() {
  accelerator_pedal_ = 0;
}
 double Gas::accelerator_pedal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.accelerator_pedal)
  return accelerator_pedal_;
}
 void Gas::set_accelerator_pedal(double value) {
  
  accelerator_pedal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.accelerator_pedal)
}

// optional double accelerator_pedal_rate = 17;
void Gas::clear_accelerator_pedal_rate() {
  accelerator_pedal_rate_ = 0;
}
 double Gas::accelerator_pedal_rate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.accelerator_pedal_rate)
  return accelerator_pedal_rate_;
}
 void Gas::set_accelerator_pedal_rate(double value) {
  
  accelerator_pedal_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.accelerator_pedal_rate)
}

// optional int32 major_version = 18;
void Gas::clear_major_version() {
  major_version_ = 0;
}
 ::google::protobuf::int32 Gas::major_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.major_version)
  return major_version_;
}
 void Gas::set_major_version(::google::protobuf::int32 value) {
  
  major_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.major_version)
}

// optional int32 minor_version = 19;
void Gas::clear_minor_version() {
  minor_version_ = 0;
}
 ::google::protobuf::int32 Gas::minor_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.minor_version)
  return minor_version_;
}
 void Gas::set_minor_version(::google::protobuf::int32 value) {
  
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.minor_version)
}

// optional int32 build_number = 20;
void Gas::clear_build_number() {
  build_number_ = 0;
}
 ::google::protobuf::int32 Gas::build_number() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.build_number)
  return build_number_;
}
 void Gas::set_build_number(::google::protobuf::int32 value) {
  
  build_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.build_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp::kIsEspAccErrorFieldNumber;
const int Esp::kIsEspOnFieldNumber;
const int Esp::kIsEspActiveFieldNumber;
const int Esp::kIsAbsErrorFieldNumber;
const int Esp::kIsAbsActiveFieldNumber;
const int Esp::kIsTcsvdcFailFieldNumber;
const int Esp::kIsAbsEnabledFieldNumber;
const int Esp::kIsStabActiveFieldNumber;
const int Esp::kIsStabEnabledFieldNumber;
const int Esp::kIsTracActiveFieldNumber;
const int Esp::kIsTracEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp::Esp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Esp)
}

void Esp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Esp::Esp(const Esp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Esp)
}

void Esp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_esp_acc_error_ = false;
  is_esp_on_ = false;
  is_esp_active_ = false;
  is_abs_error_ = false;
  is_abs_active_ = false;
  is_tcsvdc_fail_ = false;
  is_abs_enabled_ = false;
  is_stab_active_ = false;
  is_stab_enabled_ = false;
  is_trac_active_ = false;
  is_trac_enabled_ = false;
}

Esp::~Esp() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Esp)
  SharedDtor();
}

void Esp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Esp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Esp_descriptor_;
}

const Esp& Esp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Esp* Esp::default_instance_ = NULL;

Esp* Esp::New(::google::protobuf::Arena* arena) const {
  Esp* n = new Esp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Esp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Esp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Esp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_esp_acc_error_, is_stab_active_);
  ZR_(is_stab_enabled_, is_trac_enabled_);

#undef ZR_HELPER_
#undef ZR_

}

bool Esp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Esp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_esp_acc_error = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_acc_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_esp_on;
        break;
      }

      // optional bool is_esp_on = 2;
      case 2: {
        if (tag == 16) {
         parse_is_esp_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_on_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_esp_active;
        break;
      }

      // optional bool is_esp_active = 3;
      case 3: {
        if (tag == 24) {
         parse_is_esp_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_active_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_abs_error;
        break;
      }

      // optional bool is_abs_error = 4;
      case 4: {
        if (tag == 32) {
         parse_is_abs_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_abs_active;
        break;
      }

      // optional bool is_abs_active = 5;
      case 5: {
        if (tag == 40) {
         parse_is_abs_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_active_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_tcsvdc_fail;
        break;
      }

      // optional bool is_tcsvdc_fail = 6;
      case 6: {
        if (tag == 48) {
         parse_is_tcsvdc_fail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tcsvdc_fail_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_abs_enabled;
        break;
      }

      // optional bool is_abs_enabled = 7;
      case 7: {
        if (tag == 56) {
         parse_is_abs_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_stab_active;
        break;
      }

      // optional bool is_stab_active = 8;
      case 8: {
        if (tag == 64) {
         parse_is_stab_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stab_active_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_stab_enabled;
        break;
      }

      // optional bool is_stab_enabled = 9;
      case 9: {
        if (tag == 72) {
         parse_is_stab_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stab_enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_trac_active;
        break;
      }

      // optional bool is_trac_active = 10;
      case 10: {
        if (tag == 80) {
         parse_is_trac_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trac_active_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_trac_enabled;
        break;
      }

      // optional bool is_trac_enabled = 11;
      case 11: {
        if (tag == 88) {
         parse_is_trac_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trac_enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Esp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Esp)
  return false;
#undef DO_
}

void Esp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Esp)
  // optional bool is_esp_acc_error = 1;
  if (this->is_esp_acc_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_esp_acc_error(), output);
  }

  // optional bool is_esp_on = 2;
  if (this->is_esp_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_esp_on(), output);
  }

  // optional bool is_esp_active = 3;
  if (this->is_esp_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_esp_active(), output);
  }

  // optional bool is_abs_error = 4;
  if (this->is_abs_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_abs_error(), output);
  }

  // optional bool is_abs_active = 5;
  if (this->is_abs_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_abs_active(), output);
  }

  // optional bool is_tcsvdc_fail = 6;
  if (this->is_tcsvdc_fail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_tcsvdc_fail(), output);
  }

  // optional bool is_abs_enabled = 7;
  if (this->is_abs_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_abs_enabled(), output);
  }

  // optional bool is_stab_active = 8;
  if (this->is_stab_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_stab_active(), output);
  }

  // optional bool is_stab_enabled = 9;
  if (this->is_stab_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_stab_enabled(), output);
  }

  // optional bool is_trac_active = 10;
  if (this->is_trac_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_trac_active(), output);
  }

  // optional bool is_trac_enabled = 11;
  if (this->is_trac_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_trac_enabled(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Esp)
}

::google::protobuf::uint8* Esp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Esp)
  // optional bool is_esp_acc_error = 1;
  if (this->is_esp_acc_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_esp_acc_error(), target);
  }

  // optional bool is_esp_on = 2;
  if (this->is_esp_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_esp_on(), target);
  }

  // optional bool is_esp_active = 3;
  if (this->is_esp_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_esp_active(), target);
  }

  // optional bool is_abs_error = 4;
  if (this->is_abs_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_abs_error(), target);
  }

  // optional bool is_abs_active = 5;
  if (this->is_abs_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_abs_active(), target);
  }

  // optional bool is_tcsvdc_fail = 6;
  if (this->is_tcsvdc_fail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_tcsvdc_fail(), target);
  }

  // optional bool is_abs_enabled = 7;
  if (this->is_abs_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_abs_enabled(), target);
  }

  // optional bool is_stab_active = 8;
  if (this->is_stab_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_stab_active(), target);
  }

  // optional bool is_stab_enabled = 9;
  if (this->is_stab_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_stab_enabled(), target);
  }

  // optional bool is_trac_active = 10;
  if (this->is_trac_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_trac_active(), target);
  }

  // optional bool is_trac_enabled = 11;
  if (this->is_trac_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_trac_enabled(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Esp)
  return target;
}

int Esp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Esp)
  int total_size = 0;

  // optional bool is_esp_acc_error = 1;
  if (this->is_esp_acc_error() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_esp_on = 2;
  if (this->is_esp_on() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_esp_active = 3;
  if (this->is_esp_active() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_abs_error = 4;
  if (this->is_abs_error() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_abs_active = 5;
  if (this->is_abs_active() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_tcsvdc_fail = 6;
  if (this->is_tcsvdc_fail() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_abs_enabled = 7;
  if (this->is_abs_enabled() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_stab_active = 8;
  if (this->is_stab_active() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_stab_enabled = 9;
  if (this->is_stab_enabled() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_trac_active = 10;
  if (this->is_trac_active() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_trac_enabled = 11;
  if (this->is_trac_enabled() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Esp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Esp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Esp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Esp)
    MergeFrom(*source);
  }
}

void Esp::MergeFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Esp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_esp_acc_error() != 0) {
    set_is_esp_acc_error(from.is_esp_acc_error());
  }
  if (from.is_esp_on() != 0) {
    set_is_esp_on(from.is_esp_on());
  }
  if (from.is_esp_active() != 0) {
    set_is_esp_active(from.is_esp_active());
  }
  if (from.is_abs_error() != 0) {
    set_is_abs_error(from.is_abs_error());
  }
  if (from.is_abs_active() != 0) {
    set_is_abs_active(from.is_abs_active());
  }
  if (from.is_tcsvdc_fail() != 0) {
    set_is_tcsvdc_fail(from.is_tcsvdc_fail());
  }
  if (from.is_abs_enabled() != 0) {
    set_is_abs_enabled(from.is_abs_enabled());
  }
  if (from.is_stab_active() != 0) {
    set_is_stab_active(from.is_stab_active());
  }
  if (from.is_stab_enabled() != 0) {
    set_is_stab_enabled(from.is_stab_enabled());
  }
  if (from.is_trac_active() != 0) {
    set_is_trac_active(from.is_trac_active());
  }
  if (from.is_trac_enabled() != 0) {
    set_is_trac_enabled(from.is_trac_enabled());
  }
}

void Esp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp::CopyFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp::IsInitialized() const {

  return true;
}

void Esp::Swap(Esp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp::InternalSwap(Esp* other) {
  std::swap(is_esp_acc_error_, other->is_esp_acc_error_);
  std::swap(is_esp_on_, other->is_esp_on_);
  std::swap(is_esp_active_, other->is_esp_active_);
  std::swap(is_abs_error_, other->is_abs_error_);
  std::swap(is_abs_active_, other->is_abs_active_);
  std::swap(is_tcsvdc_fail_, other->is_tcsvdc_fail_);
  std::swap(is_abs_enabled_, other->is_abs_enabled_);
  std::swap(is_stab_active_, other->is_stab_active_);
  std::swap(is_stab_enabled_, other->is_stab_enabled_);
  std::swap(is_trac_active_, other->is_trac_active_);
  std::swap(is_trac_enabled_, other->is_trac_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Esp_descriptor_;
  metadata.reflection = Esp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp

// optional bool is_esp_acc_error = 1;
void Esp::clear_is_esp_acc_error() {
  is_esp_acc_error_ = false;
}
 bool Esp::is_esp_acc_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_esp_acc_error)
  return is_esp_acc_error_;
}
 void Esp::set_is_esp_acc_error(bool value) {
  
  is_esp_acc_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_esp_acc_error)
}

// optional bool is_esp_on = 2;
void Esp::clear_is_esp_on() {
  is_esp_on_ = false;
}
 bool Esp::is_esp_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_esp_on)
  return is_esp_on_;
}
 void Esp::set_is_esp_on(bool value) {
  
  is_esp_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_esp_on)
}

// optional bool is_esp_active = 3;
void Esp::clear_is_esp_active() {
  is_esp_active_ = false;
}
 bool Esp::is_esp_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_esp_active)
  return is_esp_active_;
}
 void Esp::set_is_esp_active(bool value) {
  
  is_esp_active_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_esp_active)
}

// optional bool is_abs_error = 4;
void Esp::clear_is_abs_error() {
  is_abs_error_ = false;
}
 bool Esp::is_abs_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_abs_error)
  return is_abs_error_;
}
 void Esp::set_is_abs_error(bool value) {
  
  is_abs_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_abs_error)
}

// optional bool is_abs_active = 5;
void Esp::clear_is_abs_active() {
  is_abs_active_ = false;
}
 bool Esp::is_abs_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_abs_active)
  return is_abs_active_;
}
 void Esp::set_is_abs_active(bool value) {
  
  is_abs_active_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_abs_active)
}

// optional bool is_tcsvdc_fail = 6;
void Esp::clear_is_tcsvdc_fail() {
  is_tcsvdc_fail_ = false;
}
 bool Esp::is_tcsvdc_fail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_tcsvdc_fail)
  return is_tcsvdc_fail_;
}
 void Esp::set_is_tcsvdc_fail(bool value) {
  
  is_tcsvdc_fail_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_tcsvdc_fail)
}

// optional bool is_abs_enabled = 7;
void Esp::clear_is_abs_enabled() {
  is_abs_enabled_ = false;
}
 bool Esp::is_abs_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_abs_enabled)
  return is_abs_enabled_;
}
 void Esp::set_is_abs_enabled(bool value) {
  
  is_abs_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_abs_enabled)
}

// optional bool is_stab_active = 8;
void Esp::clear_is_stab_active() {
  is_stab_active_ = false;
}
 bool Esp::is_stab_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_stab_active)
  return is_stab_active_;
}
 void Esp::set_is_stab_active(bool value) {
  
  is_stab_active_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_stab_active)
}

// optional bool is_stab_enabled = 9;
void Esp::clear_is_stab_enabled() {
  is_stab_enabled_ = false;
}
 bool Esp::is_stab_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_stab_enabled)
  return is_stab_enabled_;
}
 void Esp::set_is_stab_enabled(bool value) {
  
  is_stab_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_stab_enabled)
}

// optional bool is_trac_active = 10;
void Esp::clear_is_trac_active() {
  is_trac_active_ = false;
}
 bool Esp::is_trac_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_trac_active)
  return is_trac_active_;
}
 void Esp::set_is_trac_active(bool value) {
  
  is_trac_active_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_trac_active)
}

// optional bool is_trac_enabled = 11;
void Esp::clear_is_trac_enabled() {
  is_trac_enabled_ = false;
}
 bool Esp::is_trac_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_trac_enabled)
  return is_trac_enabled_;
}
 void Esp::set_is_trac_enabled(bool value) {
  
  is_trac_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_trac_enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Ems_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ems_Type_descriptor_;
}
bool Ems_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ems_Type Ems::STOP;
const Ems_Type Ems::CRANK;
const Ems_Type Ems::RUNNING;
const Ems_Type Ems::INVALID;
const Ems_Type Ems::Type_MIN;
const Ems_Type Ems::Type_MAX;
const int Ems::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ems::kIsEngineAccAvailableFieldNumber;
const int Ems::kIsEngineAccErrorFieldNumber;
const int Ems::kEngineStateFieldNumber;
const int Ems::kMaxEngineTorqPercentFieldNumber;
const int Ems::kMinEngineTorqPercentFieldNumber;
const int Ems::kBaseEngineTorqConstantFieldNumber;
const int Ems::kIsEngineSpeedErrorFieldNumber;
const int Ems::kEngineSpeedFieldNumber;
const int Ems::kEngineTorqueFieldNumber;
const int Ems::kIsOverEngineTorqueFieldNumber;
const int Ems::kEngineRpmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ems::Ems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Ems)
}

void Ems::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Ems::Ems(const Ems& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ems)
}

void Ems::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_engine_acc_available_ = false;
  is_engine_acc_error_ = false;
  engine_state_ = 0;
  max_engine_torq_percent_ = 0;
  min_engine_torq_percent_ = 0;
  base_engine_torq_constant_ = 0;
  is_engine_speed_error_ = false;
  engine_speed_ = 0;
  engine_torque_ = 0;
  is_over_engine_torque_ = false;
  engine_rpm_ = 0;
}

Ems::~Ems() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ems)
  SharedDtor();
}

void Ems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ems_descriptor_;
}

const Ems& Ems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Ems* Ems::default_instance_ = NULL;

Ems* Ems::New(::google::protobuf::Arena* arena) const {
  Ems* n = new Ems;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ems::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ems)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Ems, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Ems*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_engine_torq_percent_, is_engine_speed_error_);
  ZR_(min_engine_torq_percent_, base_engine_torq_constant_);
  engine_speed_ = 0;
  engine_torque_ = 0;
  is_over_engine_torque_ = false;
  engine_rpm_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool Ems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Ems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_engine_acc_available = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_acc_available_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_engine_acc_error;
        break;
      }

      // optional bool is_engine_acc_error = 2;
      case 2: {
        if (tag == 16) {
         parse_is_engine_acc_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_acc_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_engine_state;
        break;
      }

      // optional .apollo.canbus.Ems.Type engine_state = 3;
      case 3: {
        if (tag == 24) {
         parse_engine_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_engine_state(static_cast< ::apollo::canbus::Ems_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_max_engine_torq_percent;
        break;
      }

      // optional double max_engine_torq_percent = 4;
      case 4: {
        if (tag == 33) {
         parse_max_engine_torq_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_engine_torq_percent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_min_engine_torq_percent;
        break;
      }

      // optional double min_engine_torq_percent = 5;
      case 5: {
        if (tag == 41) {
         parse_min_engine_torq_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_engine_torq_percent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_base_engine_torq_constant;
        break;
      }

      // optional int32 base_engine_torq_constant = 6;
      case 6: {
        if (tag == 48) {
         parse_base_engine_torq_constant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_engine_torq_constant_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_engine_speed_error;
        break;
      }

      // optional bool is_engine_speed_error = 7;
      case 7: {
        if (tag == 56) {
         parse_is_engine_speed_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_speed_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_engine_speed;
        break;
      }

      // optional double engine_speed = 8;
      case 8: {
        if (tag == 65) {
         parse_engine_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &engine_speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_engine_torque;
        break;
      }

      // optional int32 engine_torque = 9;
      case 9: {
        if (tag == 72) {
         parse_engine_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &engine_torque_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_over_engine_torque;
        break;
      }

      // optional bool is_over_engine_torque = 10;
      case 10: {
        if (tag == 80) {
         parse_is_over_engine_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_over_engine_torque_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_engine_rpm;
        break;
      }

      // optional double engine_rpm = 11;
      case 11: {
        if (tag == 89) {
         parse_engine_rpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &engine_rpm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Ems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Ems)
  return false;
#undef DO_
}

void Ems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Ems)
  // optional bool is_engine_acc_available = 1;
  if (this->is_engine_acc_available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_engine_acc_available(), output);
  }

  // optional bool is_engine_acc_error = 2;
  if (this->is_engine_acc_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_engine_acc_error(), output);
  }

  // optional .apollo.canbus.Ems.Type engine_state = 3;
  if (this->engine_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->engine_state(), output);
  }

  // optional double max_engine_torq_percent = 4;
  if (this->max_engine_torq_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_engine_torq_percent(), output);
  }

  // optional double min_engine_torq_percent = 5;
  if (this->min_engine_torq_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_engine_torq_percent(), output);
  }

  // optional int32 base_engine_torq_constant = 6;
  if (this->base_engine_torq_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->base_engine_torq_constant(), output);
  }

  // optional bool is_engine_speed_error = 7;
  if (this->is_engine_speed_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_engine_speed_error(), output);
  }

  // optional double engine_speed = 8;
  if (this->engine_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->engine_speed(), output);
  }

  // optional int32 engine_torque = 9;
  if (this->engine_torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->engine_torque(), output);
  }

  // optional bool is_over_engine_torque = 10;
  if (this->is_over_engine_torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_over_engine_torque(), output);
  }

  // optional double engine_rpm = 11;
  if (this->engine_rpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->engine_rpm(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Ems)
}

::google::protobuf::uint8* Ems::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ems)
  // optional bool is_engine_acc_available = 1;
  if (this->is_engine_acc_available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_engine_acc_available(), target);
  }

  // optional bool is_engine_acc_error = 2;
  if (this->is_engine_acc_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_engine_acc_error(), target);
  }

  // optional .apollo.canbus.Ems.Type engine_state = 3;
  if (this->engine_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->engine_state(), target);
  }

  // optional double max_engine_torq_percent = 4;
  if (this->max_engine_torq_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_engine_torq_percent(), target);
  }

  // optional double min_engine_torq_percent = 5;
  if (this->min_engine_torq_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_engine_torq_percent(), target);
  }

  // optional int32 base_engine_torq_constant = 6;
  if (this->base_engine_torq_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->base_engine_torq_constant(), target);
  }

  // optional bool is_engine_speed_error = 7;
  if (this->is_engine_speed_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_engine_speed_error(), target);
  }

  // optional double engine_speed = 8;
  if (this->engine_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->engine_speed(), target);
  }

  // optional int32 engine_torque = 9;
  if (this->engine_torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->engine_torque(), target);
  }

  // optional bool is_over_engine_torque = 10;
  if (this->is_over_engine_torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_over_engine_torque(), target);
  }

  // optional double engine_rpm = 11;
  if (this->engine_rpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->engine_rpm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ems)
  return target;
}

int Ems::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ems)
  int total_size = 0;

  // optional bool is_engine_acc_available = 1;
  if (this->is_engine_acc_available() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_engine_acc_error = 2;
  if (this->is_engine_acc_error() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.Ems.Type engine_state = 3;
  if (this->engine_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine_state());
  }

  // optional double max_engine_torq_percent = 4;
  if (this->max_engine_torq_percent() != 0) {
    total_size += 1 + 8;
  }

  // optional double min_engine_torq_percent = 5;
  if (this->min_engine_torq_percent() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 base_engine_torq_constant = 6;
  if (this->base_engine_torq_constant() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_engine_torq_constant());
  }

  // optional bool is_engine_speed_error = 7;
  if (this->is_engine_speed_error() != 0) {
    total_size += 1 + 1;
  }

  // optional double engine_speed = 8;
  if (this->engine_speed() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 engine_torque = 9;
  if (this->engine_torque() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->engine_torque());
  }

  // optional bool is_over_engine_torque = 10;
  if (this->is_over_engine_torque() != 0) {
    total_size += 1 + 1;
  }

  // optional double engine_rpm = 11;
  if (this->engine_rpm() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Ems)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Ems* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ems>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Ems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Ems)
    MergeFrom(*source);
  }
}

void Ems::MergeFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ems)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_engine_acc_available() != 0) {
    set_is_engine_acc_available(from.is_engine_acc_available());
  }
  if (from.is_engine_acc_error() != 0) {
    set_is_engine_acc_error(from.is_engine_acc_error());
  }
  if (from.engine_state() != 0) {
    set_engine_state(from.engine_state());
  }
  if (from.max_engine_torq_percent() != 0) {
    set_max_engine_torq_percent(from.max_engine_torq_percent());
  }
  if (from.min_engine_torq_percent() != 0) {
    set_min_engine_torq_percent(from.min_engine_torq_percent());
  }
  if (from.base_engine_torq_constant() != 0) {
    set_base_engine_torq_constant(from.base_engine_torq_constant());
  }
  if (from.is_engine_speed_error() != 0) {
    set_is_engine_speed_error(from.is_engine_speed_error());
  }
  if (from.engine_speed() != 0) {
    set_engine_speed(from.engine_speed());
  }
  if (from.engine_torque() != 0) {
    set_engine_torque(from.engine_torque());
  }
  if (from.is_over_engine_torque() != 0) {
    set_is_over_engine_torque(from.is_over_engine_torque());
  }
  if (from.engine_rpm() != 0) {
    set_engine_rpm(from.engine_rpm());
  }
}

void Ems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ems::CopyFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ems::IsInitialized() const {

  return true;
}

void Ems::Swap(Ems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ems::InternalSwap(Ems* other) {
  std::swap(is_engine_acc_available_, other->is_engine_acc_available_);
  std::swap(is_engine_acc_error_, other->is_engine_acc_error_);
  std::swap(engine_state_, other->engine_state_);
  std::swap(max_engine_torq_percent_, other->max_engine_torq_percent_);
  std::swap(min_engine_torq_percent_, other->min_engine_torq_percent_);
  std::swap(base_engine_torq_constant_, other->base_engine_torq_constant_);
  std::swap(is_engine_speed_error_, other->is_engine_speed_error_);
  std::swap(engine_speed_, other->engine_speed_);
  std::swap(engine_torque_, other->engine_torque_);
  std::swap(is_over_engine_torque_, other->is_over_engine_torque_);
  std::swap(engine_rpm_, other->engine_rpm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ems_descriptor_;
  metadata.reflection = Ems_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ems

// optional bool is_engine_acc_available = 1;
void Ems::clear_is_engine_acc_available() {
  is_engine_acc_available_ = false;
}
 bool Ems::is_engine_acc_available() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.is_engine_acc_available)
  return is_engine_acc_available_;
}
 void Ems::set_is_engine_acc_available(bool value) {
  
  is_engine_acc_available_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.is_engine_acc_available)
}

// optional bool is_engine_acc_error = 2;
void Ems::clear_is_engine_acc_error() {
  is_engine_acc_error_ = false;
}
 bool Ems::is_engine_acc_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.is_engine_acc_error)
  return is_engine_acc_error_;
}
 void Ems::set_is_engine_acc_error(bool value) {
  
  is_engine_acc_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.is_engine_acc_error)
}

// optional .apollo.canbus.Ems.Type engine_state = 3;
void Ems::clear_engine_state() {
  engine_state_ = 0;
}
 ::apollo::canbus::Ems_Type Ems::engine_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.engine_state)
  return static_cast< ::apollo::canbus::Ems_Type >(engine_state_);
}
 void Ems::set_engine_state(::apollo::canbus::Ems_Type value) {
  
  engine_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.engine_state)
}

// optional double max_engine_torq_percent = 4;
void Ems::clear_max_engine_torq_percent() {
  max_engine_torq_percent_ = 0;
}
 double Ems::max_engine_torq_percent() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.max_engine_torq_percent)
  return max_engine_torq_percent_;
}
 void Ems::set_max_engine_torq_percent(double value) {
  
  max_engine_torq_percent_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.max_engine_torq_percent)
}

// optional double min_engine_torq_percent = 5;
void Ems::clear_min_engine_torq_percent() {
  min_engine_torq_percent_ = 0;
}
 double Ems::min_engine_torq_percent() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.min_engine_torq_percent)
  return min_engine_torq_percent_;
}
 void Ems::set_min_engine_torq_percent(double value) {
  
  min_engine_torq_percent_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.min_engine_torq_percent)
}

// optional int32 base_engine_torq_constant = 6;
void Ems::clear_base_engine_torq_constant() {
  base_engine_torq_constant_ = 0;
}
 ::google::protobuf::int32 Ems::base_engine_torq_constant() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.base_engine_torq_constant)
  return base_engine_torq_constant_;
}
 void Ems::set_base_engine_torq_constant(::google::protobuf::int32 value) {
  
  base_engine_torq_constant_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.base_engine_torq_constant)
}

// optional bool is_engine_speed_error = 7;
void Ems::clear_is_engine_speed_error() {
  is_engine_speed_error_ = false;
}
 bool Ems::is_engine_speed_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.is_engine_speed_error)
  return is_engine_speed_error_;
}
 void Ems::set_is_engine_speed_error(bool value) {
  
  is_engine_speed_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.is_engine_speed_error)
}

// optional double engine_speed = 8;
void Ems::clear_engine_speed() {
  engine_speed_ = 0;
}
 double Ems::engine_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.engine_speed)
  return engine_speed_;
}
 void Ems::set_engine_speed(double value) {
  
  engine_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.engine_speed)
}

// optional int32 engine_torque = 9;
void Ems::clear_engine_torque() {
  engine_torque_ = 0;
}
 ::google::protobuf::int32 Ems::engine_torque() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.engine_torque)
  return engine_torque_;
}
 void Ems::set_engine_torque(::google::protobuf::int32 value) {
  
  engine_torque_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.engine_torque)
}

// optional bool is_over_engine_torque = 10;
void Ems::clear_is_over_engine_torque() {
  is_over_engine_torque_ = false;
}
 bool Ems::is_over_engine_torque() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.is_over_engine_torque)
  return is_over_engine_torque_;
}
 void Ems::set_is_over_engine_torque(bool value) {
  
  is_over_engine_torque_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.is_over_engine_torque)
}

// optional double engine_rpm = 11;
void Ems::clear_engine_rpm() {
  engine_rpm_ = 0;
}
 double Ems::engine_rpm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.engine_rpm)
  return engine_rpm_;
}
 void Ems::set_engine_rpm(double value) {
  
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.engine_rpm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gear::kIsShiftPositionValidFieldNumber;
const int Gear::kGearStateFieldNumber;
const int Gear::kDriverOverrideFieldNumber;
const int Gear::kGearCmdFieldNumber;
const int Gear::kCanbusFaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gear::Gear()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gear)
}

void Gear::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Gear::Gear(const Gear& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear)
}

void Gear::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_shift_position_valid_ = false;
  gear_state_ = 0;
  driver_override_ = false;
  gear_cmd_ = 0;
  canbus_fault_ = false;
}

Gear::~Gear() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear)
  SharedDtor();
}

void Gear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gear_descriptor_;
}

const Gear& Gear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Gear* Gear::default_instance_ = NULL;

Gear* Gear::New(::google::protobuf::Arena* arena) const {
  Gear* n = new Gear;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gear::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Gear, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Gear*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gear_state_, gear_cmd_);

#undef ZR_HELPER_
#undef ZR_

}

bool Gear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Gear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_shift_position_valid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shift_position_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gear_state;
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
      case 2: {
        if (tag == 16) {
         parse_gear_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear_state(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_driver_override;
        break;
      }

      // optional bool driver_override = 3;
      case 3: {
        if (tag == 24) {
         parse_driver_override:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gear_cmd;
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
      case 4: {
        if (tag == 32) {
         parse_gear_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear_cmd(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_canbus_fault;
        break;
      }

      // optional bool canbus_fault = 5;
      case 5: {
        if (tag == 40) {
         parse_canbus_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbus_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Gear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Gear)
  return false;
#undef DO_
}

void Gear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Gear)
  // optional bool is_shift_position_valid = 1;
  if (this->is_shift_position_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_shift_position_valid(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (this->gear_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gear_state(), output);
  }

  // optional bool driver_override = 3;
  if (this->driver_override() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->driver_override(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (this->gear_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gear_cmd(), output);
  }

  // optional bool canbus_fault = 5;
  if (this->canbus_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->canbus_fault(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Gear)
}

::google::protobuf::uint8* Gear::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear)
  // optional bool is_shift_position_valid = 1;
  if (this->is_shift_position_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_shift_position_valid(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (this->gear_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gear_state(), target);
  }

  // optional bool driver_override = 3;
  if (this->driver_override() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->driver_override(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (this->gear_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gear_cmd(), target);
  }

  // optional bool canbus_fault = 5;
  if (this->canbus_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->canbus_fault(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear)
  return target;
}

int Gear::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear)
  int total_size = 0;

  // optional bool is_shift_position_valid = 1;
  if (this->is_shift_position_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (this->gear_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_state());
  }

  // optional bool driver_override = 3;
  if (this->driver_override() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (this->gear_cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_cmd());
  }

  // optional bool canbus_fault = 5;
  if (this->canbus_fault() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Gear* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Gear>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gear)
    MergeFrom(*source);
  }
}

void Gear::MergeFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_shift_position_valid() != 0) {
    set_is_shift_position_valid(from.is_shift_position_valid());
  }
  if (from.gear_state() != 0) {
    set_gear_state(from.gear_state());
  }
  if (from.driver_override() != 0) {
    set_driver_override(from.driver_override());
  }
  if (from.gear_cmd() != 0) {
    set_gear_cmd(from.gear_cmd());
  }
  if (from.canbus_fault() != 0) {
    set_canbus_fault(from.canbus_fault());
  }
}

void Gear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear::CopyFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear::IsInitialized() const {

  return true;
}

void Gear::Swap(Gear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gear::InternalSwap(Gear* other) {
  std::swap(is_shift_position_valid_, other->is_shift_position_valid_);
  std::swap(gear_state_, other->gear_state_);
  std::swap(driver_override_, other->driver_override_);
  std::swap(gear_cmd_, other->gear_cmd_);
  std::swap(canbus_fault_, other->canbus_fault_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gear_descriptor_;
  metadata.reflection = Gear_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gear

// optional bool is_shift_position_valid = 1;
void Gear::clear_is_shift_position_valid() {
  is_shift_position_valid_ = false;
}
 bool Gear::is_shift_position_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear.is_shift_position_valid)
  return is_shift_position_valid_;
}
 void Gear::set_is_shift_position_valid(bool value) {
  
  is_shift_position_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear.is_shift_position_valid)
}

// optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
void Gear::clear_gear_state() {
  gear_state_ = 0;
}
 ::apollo::canbus::Chassis_GearPosition Gear::gear_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear.gear_state)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_state_);
}
 void Gear::set_gear_state(::apollo::canbus::Chassis_GearPosition value) {
  
  gear_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear.gear_state)
}

// optional bool driver_override = 3;
void Gear::clear_driver_override() {
  driver_override_ = false;
}
 bool Gear::driver_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear.driver_override)
  return driver_override_;
}
 void Gear::set_driver_override(bool value) {
  
  driver_override_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear.driver_override)
}

// optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
void Gear::clear_gear_cmd() {
  gear_cmd_ = 0;
}
 ::apollo::canbus::Chassis_GearPosition Gear::gear_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear.gear_cmd)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_cmd_);
}
 void Gear::set_gear_cmd(::apollo::canbus::Chassis_GearPosition value) {
  
  gear_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear.gear_cmd)
}

// optional bool canbus_fault = 5;
void Gear::clear_canbus_fault() {
  canbus_fault_ = false;
}
 bool Gear::canbus_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear.canbus_fault)
  return canbus_fault_;
}
 void Gear::set_canbus_fault(bool value) {
  
  canbus_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear.canbus_fault)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Safety::kIsDriverCarDoorCloseFieldNumber;
const int Safety::kIsDriverBuckledFieldNumber;
const int Safety::kEmergencyButtonFieldNumber;
const int Safety::kHasErrorFieldNumber;
const int Safety::kIsMotorInvertorFaultFieldNumber;
const int Safety::kIsSystemFaultFieldNumber;
const int Safety::kIsPowerBatteryFaultFieldNumber;
const int Safety::kIsMotorInvertorOverTemperatureFieldNumber;
const int Safety::kIsSmallBatteryChargeDischargeFaultFieldNumber;
const int Safety::kDrivingModeFieldNumber;
const int Safety::kIsPassengerDoorOpenFieldNumber;
const int Safety::kIsRearleftDoorOpenFieldNumber;
const int Safety::kIsRearrightDoorOpenFieldNumber;
const int Safety::kIsHoodOpenFieldNumber;
const int Safety::kIsTrunkOpenFieldNumber;
const int Safety::kIsPassengerDetectedFieldNumber;
const int Safety::kIsPassengerAirbagEnabledFieldNumber;
const int Safety::kIsPassengerBuckledFieldNumber;
const int Safety::kFrontLeftTirePressFieldNumber;
const int Safety::kFrontRightTirePressFieldNumber;
const int Safety::kRearLeftTirePressFieldNumber;
const int Safety::kRearRightTirePressFieldNumber;
const int Safety::kCarDrivingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Safety::Safety()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Safety)
}

void Safety::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Safety::Safety(const Safety& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Safety)
}

void Safety::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_driver_car_door_close_ = false;
  is_driver_buckled_ = false;
  emergency_button_ = 0;
  has_error_ = false;
  is_motor_invertor_fault_ = false;
  is_system_fault_ = false;
  is_power_battery_fault_ = false;
  is_motor_invertor_over_temperature_ = false;
  is_small_battery_charge_discharge_fault_ = false;
  driving_mode_ = 0;
  is_passenger_door_open_ = false;
  is_rearleft_door_open_ = false;
  is_rearright_door_open_ = false;
  is_hood_open_ = false;
  is_trunk_open_ = false;
  is_passenger_detected_ = false;
  is_passenger_airbag_enabled_ = false;
  is_passenger_buckled_ = false;
  front_left_tire_press_ = 0;
  front_right_tire_press_ = 0;
  rear_left_tire_press_ = 0;
  rear_right_tire_press_ = 0;
  car_driving_mode_ = 0;
}

Safety::~Safety() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Safety)
  SharedDtor();
}

void Safety::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Safety::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Safety::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Safety_descriptor_;
}

const Safety& Safety::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

Safety* Safety::default_instance_ = NULL;

Safety* Safety::New(::google::protobuf::Arena* arena) const {
  Safety* n = new Safety;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Safety::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Safety)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Safety, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Safety*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(emergency_button_, is_motor_invertor_over_temperature_);
  ZR_(is_small_battery_charge_discharge_fault_, is_passenger_detected_);
  ZR_(is_passenger_airbag_enabled_, car_driving_mode_);

#undef ZR_HELPER_
#undef ZR_

}

bool Safety::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Safety)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_driver_car_door_close = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_driver_car_door_close_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_driver_buckled;
        break;
      }

      // optional bool is_driver_buckled = 2;
      case 2: {
        if (tag == 16) {
         parse_is_driver_buckled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_driver_buckled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_emergency_button;
        break;
      }

      // optional int32 emergency_button = 3;
      case 3: {
        if (tag == 24) {
         parse_emergency_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emergency_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_has_error;
        break;
      }

      // optional bool has_error = 4;
      case 4: {
        if (tag == 32) {
         parse_has_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_motor_invertor_fault;
        break;
      }

      // optional bool is_motor_invertor_fault = 5;
      case 5: {
        if (tag == 40) {
         parse_is_motor_invertor_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_motor_invertor_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_system_fault;
        break;
      }

      // optional bool is_system_fault = 6;
      case 6: {
        if (tag == 48) {
         parse_is_system_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_power_battery_fault;
        break;
      }

      // optional bool is_power_battery_fault = 7;
      case 7: {
        if (tag == 56) {
         parse_is_power_battery_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_power_battery_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_motor_invertor_over_temperature;
        break;
      }

      // optional bool is_motor_invertor_over_temperature = 8;
      case 8: {
        if (tag == 64) {
         parse_is_motor_invertor_over_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_motor_invertor_over_temperature_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_small_battery_charge_discharge_fault;
        break;
      }

      // optional bool is_small_battery_charge_discharge_fault = 9;
      case 9: {
        if (tag == 72) {
         parse_is_small_battery_charge_discharge_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_small_battery_charge_discharge_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_driving_mode;
        break;
      }

      // optional int32 driving_mode = 10;
      case 10: {
        if (tag == 80) {
         parse_driving_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &driving_mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_passenger_door_open;
        break;
      }

      // optional bool is_passenger_door_open = 11;
      case 11: {
        if (tag == 88) {
         parse_is_passenger_door_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_door_open_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_rearleft_door_open;
        break;
      }

      // optional bool is_rearleft_door_open = 12;
      case 12: {
        if (tag == 96) {
         parse_is_rearleft_door_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rearleft_door_open_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_rearright_door_open;
        break;
      }

      // optional bool is_rearright_door_open = 13;
      case 13: {
        if (tag == 104) {
         parse_is_rearright_door_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rearright_door_open_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_hood_open;
        break;
      }

      // optional bool is_hood_open = 14;
      case 14: {
        if (tag == 112) {
         parse_is_hood_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hood_open_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_trunk_open;
        break;
      }

      // optional bool is_trunk_open = 15;
      case 15: {
        if (tag == 120) {
         parse_is_trunk_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trunk_open_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_is_passenger_detected;
        break;
      }

      // optional bool is_passenger_detected = 16;
      case 16: {
        if (tag == 128) {
         parse_is_passenger_detected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_detected_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_is_passenger_airbag_enabled;
        break;
      }

      // optional bool is_passenger_airbag_enabled = 17;
      case 17: {
        if (tag == 136) {
         parse_is_passenger_airbag_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_airbag_enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_is_passenger_buckled;
        break;
      }

      // optional bool is_passenger_buckled = 18;
      case 18: {
        if (tag == 144) {
         parse_is_passenger_buckled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_buckled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_front_left_tire_press;
        break;
      }

      // optional int32 front_left_tire_press = 19;
      case 19: {
        if (tag == 152) {
         parse_front_left_tire_press:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_left_tire_press_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_front_right_tire_press;
        break;
      }

      // optional int32 front_right_tire_press = 20;
      case 20: {
        if (tag == 160) {
         parse_front_right_tire_press:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_right_tire_press_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_rear_left_tire_press;
        break;
      }

      // optional int32 rear_left_tire_press = 21;
      case 21: {
        if (tag == 168) {
         parse_rear_left_tire_press:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rear_left_tire_press_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_rear_right_tire_press;
        break;
      }

      // optional int32 rear_right_tire_press = 22;
      case 22: {
        if (tag == 176) {
         parse_rear_right_tire_press:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rear_right_tire_press_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_car_driving_mode;
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
      case 23: {
        if (tag == 184) {
         parse_car_driving_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_car_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Safety)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Safety)
  return false;
#undef DO_
}

void Safety::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Safety)
  // optional bool is_driver_car_door_close = 1;
  if (this->is_driver_car_door_close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_driver_car_door_close(), output);
  }

  // optional bool is_driver_buckled = 2;
  if (this->is_driver_buckled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_driver_buckled(), output);
  }

  // optional int32 emergency_button = 3;
  if (this->emergency_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->emergency_button(), output);
  }

  // optional bool has_error = 4;
  if (this->has_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_error(), output);
  }

  // optional bool is_motor_invertor_fault = 5;
  if (this->is_motor_invertor_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_motor_invertor_fault(), output);
  }

  // optional bool is_system_fault = 6;
  if (this->is_system_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_system_fault(), output);
  }

  // optional bool is_power_battery_fault = 7;
  if (this->is_power_battery_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_power_battery_fault(), output);
  }

  // optional bool is_motor_invertor_over_temperature = 8;
  if (this->is_motor_invertor_over_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_motor_invertor_over_temperature(), output);
  }

  // optional bool is_small_battery_charge_discharge_fault = 9;
  if (this->is_small_battery_charge_discharge_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_small_battery_charge_discharge_fault(), output);
  }

  // optional int32 driving_mode = 10;
  if (this->driving_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->driving_mode(), output);
  }

  // optional bool is_passenger_door_open = 11;
  if (this->is_passenger_door_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_passenger_door_open(), output);
  }

  // optional bool is_rearleft_door_open = 12;
  if (this->is_rearleft_door_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_rearleft_door_open(), output);
  }

  // optional bool is_rearright_door_open = 13;
  if (this->is_rearright_door_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_rearright_door_open(), output);
  }

  // optional bool is_hood_open = 14;
  if (this->is_hood_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_hood_open(), output);
  }

  // optional bool is_trunk_open = 15;
  if (this->is_trunk_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_trunk_open(), output);
  }

  // optional bool is_passenger_detected = 16;
  if (this->is_passenger_detected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_passenger_detected(), output);
  }

  // optional bool is_passenger_airbag_enabled = 17;
  if (this->is_passenger_airbag_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_passenger_airbag_enabled(), output);
  }

  // optional bool is_passenger_buckled = 18;
  if (this->is_passenger_buckled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_passenger_buckled(), output);
  }

  // optional int32 front_left_tire_press = 19;
  if (this->front_left_tire_press() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->front_left_tire_press(), output);
  }

  // optional int32 front_right_tire_press = 20;
  if (this->front_right_tire_press() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->front_right_tire_press(), output);
  }

  // optional int32 rear_left_tire_press = 21;
  if (this->rear_left_tire_press() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->rear_left_tire_press(), output);
  }

  // optional int32 rear_right_tire_press = 22;
  if (this->rear_right_tire_press() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->rear_right_tire_press(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (this->car_driving_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->car_driving_mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Safety)
}

::google::protobuf::uint8* Safety::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Safety)
  // optional bool is_driver_car_door_close = 1;
  if (this->is_driver_car_door_close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_driver_car_door_close(), target);
  }

  // optional bool is_driver_buckled = 2;
  if (this->is_driver_buckled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_driver_buckled(), target);
  }

  // optional int32 emergency_button = 3;
  if (this->emergency_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->emergency_button(), target);
  }

  // optional bool has_error = 4;
  if (this->has_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_error(), target);
  }

  // optional bool is_motor_invertor_fault = 5;
  if (this->is_motor_invertor_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_motor_invertor_fault(), target);
  }

  // optional bool is_system_fault = 6;
  if (this->is_system_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_system_fault(), target);
  }

  // optional bool is_power_battery_fault = 7;
  if (this->is_power_battery_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_power_battery_fault(), target);
  }

  // optional bool is_motor_invertor_over_temperature = 8;
  if (this->is_motor_invertor_over_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_motor_invertor_over_temperature(), target);
  }

  // optional bool is_small_battery_charge_discharge_fault = 9;
  if (this->is_small_battery_charge_discharge_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_small_battery_charge_discharge_fault(), target);
  }

  // optional int32 driving_mode = 10;
  if (this->driving_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->driving_mode(), target);
  }

  // optional bool is_passenger_door_open = 11;
  if (this->is_passenger_door_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_passenger_door_open(), target);
  }

  // optional bool is_rearleft_door_open = 12;
  if (this->is_rearleft_door_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_rearleft_door_open(), target);
  }

  // optional bool is_rearright_door_open = 13;
  if (this->is_rearright_door_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_rearright_door_open(), target);
  }

  // optional bool is_hood_open = 14;
  if (this->is_hood_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_hood_open(), target);
  }

  // optional bool is_trunk_open = 15;
  if (this->is_trunk_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_trunk_open(), target);
  }

  // optional bool is_passenger_detected = 16;
  if (this->is_passenger_detected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_passenger_detected(), target);
  }

  // optional bool is_passenger_airbag_enabled = 17;
  if (this->is_passenger_airbag_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_passenger_airbag_enabled(), target);
  }

  // optional bool is_passenger_buckled = 18;
  if (this->is_passenger_buckled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_passenger_buckled(), target);
  }

  // optional int32 front_left_tire_press = 19;
  if (this->front_left_tire_press() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->front_left_tire_press(), target);
  }

  // optional int32 front_right_tire_press = 20;
  if (this->front_right_tire_press() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->front_right_tire_press(), target);
  }

  // optional int32 rear_left_tire_press = 21;
  if (this->rear_left_tire_press() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->rear_left_tire_press(), target);
  }

  // optional int32 rear_right_tire_press = 22;
  if (this->rear_right_tire_press() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->rear_right_tire_press(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (this->car_driving_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->car_driving_mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Safety)
  return target;
}

int Safety::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Safety)
  int total_size = 0;

  // optional bool is_driver_car_door_close = 1;
  if (this->is_driver_car_door_close() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_driver_buckled = 2;
  if (this->is_driver_buckled() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 emergency_button = 3;
  if (this->emergency_button() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emergency_button());
  }

  // optional bool has_error = 4;
  if (this->has_error() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_motor_invertor_fault = 5;
  if (this->is_motor_invertor_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_system_fault = 6;
  if (this->is_system_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_power_battery_fault = 7;
  if (this->is_power_battery_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_motor_invertor_over_temperature = 8;
  if (this->is_motor_invertor_over_temperature() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_small_battery_charge_discharge_fault = 9;
  if (this->is_small_battery_charge_discharge_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 driving_mode = 10;
  if (this->driving_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->driving_mode());
  }

  // optional bool is_passenger_door_open = 11;
  if (this->is_passenger_door_open() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_rearleft_door_open = 12;
  if (this->is_rearleft_door_open() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_rearright_door_open = 13;
  if (this->is_rearright_door_open() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_hood_open = 14;
  if (this->is_hood_open() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_trunk_open = 15;
  if (this->is_trunk_open() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_passenger_detected = 16;
  if (this->is_passenger_detected() != 0) {
    total_size += 2 + 1;
  }

  // optional bool is_passenger_airbag_enabled = 17;
  if (this->is_passenger_airbag_enabled() != 0) {
    total_size += 2 + 1;
  }

  // optional bool is_passenger_buckled = 18;
  if (this->is_passenger_buckled() != 0) {
    total_size += 2 + 1;
  }

  // optional int32 front_left_tire_press = 19;
  if (this->front_left_tire_press() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_left_tire_press());
  }

  // optional int32 front_right_tire_press = 20;
  if (this->front_right_tire_press() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_right_tire_press());
  }

  // optional int32 rear_left_tire_press = 21;
  if (this->rear_left_tire_press() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rear_left_tire_press());
  }

  // optional int32 rear_right_tire_press = 22;
  if (this->rear_right_tire_press() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rear_right_tire_press());
  }

  // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (this->car_driving_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->car_driving_mode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Safety::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Safety)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Safety* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Safety>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Safety)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Safety)
    MergeFrom(*source);
  }
}

void Safety::MergeFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Safety)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_driver_car_door_close() != 0) {
    set_is_driver_car_door_close(from.is_driver_car_door_close());
  }
  if (from.is_driver_buckled() != 0) {
    set_is_driver_buckled(from.is_driver_buckled());
  }
  if (from.emergency_button() != 0) {
    set_emergency_button(from.emergency_button());
  }
  if (from.has_error() != 0) {
    set_has_error(from.has_error());
  }
  if (from.is_motor_invertor_fault() != 0) {
    set_is_motor_invertor_fault(from.is_motor_invertor_fault());
  }
  if (from.is_system_fault() != 0) {
    set_is_system_fault(from.is_system_fault());
  }
  if (from.is_power_battery_fault() != 0) {
    set_is_power_battery_fault(from.is_power_battery_fault());
  }
  if (from.is_motor_invertor_over_temperature() != 0) {
    set_is_motor_invertor_over_temperature(from.is_motor_invertor_over_temperature());
  }
  if (from.is_small_battery_charge_discharge_fault() != 0) {
    set_is_small_battery_charge_discharge_fault(from.is_small_battery_charge_discharge_fault());
  }
  if (from.driving_mode() != 0) {
    set_driving_mode(from.driving_mode());
  }
  if (from.is_passenger_door_open() != 0) {
    set_is_passenger_door_open(from.is_passenger_door_open());
  }
  if (from.is_rearleft_door_open() != 0) {
    set_is_rearleft_door_open(from.is_rearleft_door_open());
  }
  if (from.is_rearright_door_open() != 0) {
    set_is_rearright_door_open(from.is_rearright_door_open());
  }
  if (from.is_hood_open() != 0) {
    set_is_hood_open(from.is_hood_open());
  }
  if (from.is_trunk_open() != 0) {
    set_is_trunk_open(from.is_trunk_open());
  }
  if (from.is_passenger_detected() != 0) {
    set_is_passenger_detected(from.is_passenger_detected());
  }
  if (from.is_passenger_airbag_enabled() != 0) {
    set_is_passenger_airbag_enabled(from.is_passenger_airbag_enabled());
  }
  if (from.is_passenger_buckled() != 0) {
    set_is_passenger_buckled(from.is_passenger_buckled());
  }
  if (from.front_left_tire_press() != 0) {
    set_front_left_tire_press(from.front_left_tire_press());
  }
  if (from.front_right_tire_press() != 0) {
    set_front_right_tire_press(from.front_right_tire_press());
  }
  if (from.rear_left_tire_press() != 0) {
    set_rear_left_tire_press(from.rear_left_tire_press());
  }
  if (from.rear_right_tire_press() != 0) {
    set_rear_right_tire_press(from.rear_right_tire_press());
  }
  if (from.car_driving_mode() != 0) {
    set_car_driving_mode(from.car_driving_mode());
  }
}

void Safety::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Safety::CopyFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Safety::IsInitialized() const {

  return true;
}

void Safety::Swap(Safety* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Safety::InternalSwap(Safety* other) {
  std::swap(is_driver_car_door_close_, other->is_driver_car_door_close_);
  std::swap(is_driver_buckled_, other->is_driver_buckled_);
  std::swap(emergency_button_, other->emergency_button_);
  std::swap(has_error_, other->has_error_);
  std::swap(is_motor_invertor_fault_, other->is_motor_invertor_fault_);
  std::swap(is_system_fault_, other->is_system_fault_);
  std::swap(is_power_battery_fault_, other->is_power_battery_fault_);
  std::swap(is_motor_invertor_over_temperature_, other->is_motor_invertor_over_temperature_);
  std::swap(is_small_battery_charge_discharge_fault_, other->is_small_battery_charge_discharge_fault_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(is_passenger_door_open_, other->is_passenger_door_open_);
  std::swap(is_rearleft_door_open_, other->is_rearleft_door_open_);
  std::swap(is_rearright_door_open_, other->is_rearright_door_open_);
  std::swap(is_hood_open_, other->is_hood_open_);
  std::swap(is_trunk_open_, other->is_trunk_open_);
  std::swap(is_passenger_detected_, other->is_passenger_detected_);
  std::swap(is_passenger_airbag_enabled_, other->is_passenger_airbag_enabled_);
  std::swap(is_passenger_buckled_, other->is_passenger_buckled_);
  std::swap(front_left_tire_press_, other->front_left_tire_press_);
  std::swap(front_right_tire_press_, other->front_right_tire_press_);
  std::swap(rear_left_tire_press_, other->rear_left_tire_press_);
  std::swap(rear_right_tire_press_, other->rear_right_tire_press_);
  std::swap(car_driving_mode_, other->car_driving_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Safety::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Safety_descriptor_;
  metadata.reflection = Safety_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Safety

// optional bool is_driver_car_door_close = 1;
void Safety::clear_is_driver_car_door_close() {
  is_driver_car_door_close_ = false;
}
 bool Safety::is_driver_car_door_close() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_driver_car_door_close)
  return is_driver_car_door_close_;
}
 void Safety::set_is_driver_car_door_close(bool value) {
  
  is_driver_car_door_close_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_driver_car_door_close)
}

// optional bool is_driver_buckled = 2;
void Safety::clear_is_driver_buckled() {
  is_driver_buckled_ = false;
}
 bool Safety::is_driver_buckled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_driver_buckled)
  return is_driver_buckled_;
}
 void Safety::set_is_driver_buckled(bool value) {
  
  is_driver_buckled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_driver_buckled)
}

// optional int32 emergency_button = 3;
void Safety::clear_emergency_button() {
  emergency_button_ = 0;
}
 ::google::protobuf::int32 Safety::emergency_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.emergency_button)
  return emergency_button_;
}
 void Safety::set_emergency_button(::google::protobuf::int32 value) {
  
  emergency_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.emergency_button)
}

// optional bool has_error = 4;
void Safety::clear_has_error() {
  has_error_ = false;
}
 bool Safety::has_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.has_error)
  return has_error_;
}
 void Safety::set_has_error(bool value) {
  
  has_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.has_error)
}

// optional bool is_motor_invertor_fault = 5;
void Safety::clear_is_motor_invertor_fault() {
  is_motor_invertor_fault_ = false;
}
 bool Safety::is_motor_invertor_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_motor_invertor_fault)
  return is_motor_invertor_fault_;
}
 void Safety::set_is_motor_invertor_fault(bool value) {
  
  is_motor_invertor_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_motor_invertor_fault)
}

// optional bool is_system_fault = 6;
void Safety::clear_is_system_fault() {
  is_system_fault_ = false;
}
 bool Safety::is_system_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_system_fault)
  return is_system_fault_;
}
 void Safety::set_is_system_fault(bool value) {
  
  is_system_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_system_fault)
}

// optional bool is_power_battery_fault = 7;
void Safety::clear_is_power_battery_fault() {
  is_power_battery_fault_ = false;
}
 bool Safety::is_power_battery_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_power_battery_fault)
  return is_power_battery_fault_;
}
 void Safety::set_is_power_battery_fault(bool value) {
  
  is_power_battery_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_power_battery_fault)
}

// optional bool is_motor_invertor_over_temperature = 8;
void Safety::clear_is_motor_invertor_over_temperature() {
  is_motor_invertor_over_temperature_ = false;
}
 bool Safety::is_motor_invertor_over_temperature() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_motor_invertor_over_temperature)
  return is_motor_invertor_over_temperature_;
}
 void Safety::set_is_motor_invertor_over_temperature(bool value) {
  
  is_motor_invertor_over_temperature_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_motor_invertor_over_temperature)
}

// optional bool is_small_battery_charge_discharge_fault = 9;
void Safety::clear_is_small_battery_charge_discharge_fault() {
  is_small_battery_charge_discharge_fault_ = false;
}
 bool Safety::is_small_battery_charge_discharge_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_small_battery_charge_discharge_fault)
  return is_small_battery_charge_discharge_fault_;
}
 void Safety::set_is_small_battery_charge_discharge_fault(bool value) {
  
  is_small_battery_charge_discharge_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_small_battery_charge_discharge_fault)
}

// optional int32 driving_mode = 10;
void Safety::clear_driving_mode() {
  driving_mode_ = 0;
}
 ::google::protobuf::int32 Safety::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.driving_mode)
  return driving_mode_;
}
 void Safety::set_driving_mode(::google::protobuf::int32 value) {
  
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.driving_mode)
}

// optional bool is_passenger_door_open = 11;
void Safety::clear_is_passenger_door_open() {
  is_passenger_door_open_ = false;
}
 bool Safety::is_passenger_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_passenger_door_open)
  return is_passenger_door_open_;
}
 void Safety::set_is_passenger_door_open(bool value) {
  
  is_passenger_door_open_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_passenger_door_open)
}

// optional bool is_rearleft_door_open = 12;
void Safety::clear_is_rearleft_door_open() {
  is_rearleft_door_open_ = false;
}
 bool Safety::is_rearleft_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_rearleft_door_open)
  return is_rearleft_door_open_;
}
 void Safety::set_is_rearleft_door_open(bool value) {
  
  is_rearleft_door_open_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_rearleft_door_open)
}

// optional bool is_rearright_door_open = 13;
void Safety::clear_is_rearright_door_open() {
  is_rearright_door_open_ = false;
}
 bool Safety::is_rearright_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_rearright_door_open)
  return is_rearright_door_open_;
}
 void Safety::set_is_rearright_door_open(bool value) {
  
  is_rearright_door_open_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_rearright_door_open)
}

// optional bool is_hood_open = 14;
void Safety::clear_is_hood_open() {
  is_hood_open_ = false;
}
 bool Safety::is_hood_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_hood_open)
  return is_hood_open_;
}
 void Safety::set_is_hood_open(bool value) {
  
  is_hood_open_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_hood_open)
}

// optional bool is_trunk_open = 15;
void Safety::clear_is_trunk_open() {
  is_trunk_open_ = false;
}
 bool Safety::is_trunk_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_trunk_open)
  return is_trunk_open_;
}
 void Safety::set_is_trunk_open(bool value) {
  
  is_trunk_open_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_trunk_open)
}

// optional bool is_passenger_detected = 16;
void Safety::clear_is_passenger_detected() {
  is_passenger_detected_ = false;
}
 bool Safety::is_passenger_detected() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_passenger_detected)
  return is_passenger_detected_;
}
 void Safety::set_is_passenger_detected(bool value) {
  
  is_passenger_detected_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_passenger_detected)
}

// optional bool is_passenger_airbag_enabled = 17;
void Safety::clear_is_passenger_airbag_enabled() {
  is_passenger_airbag_enabled_ = false;
}
 bool Safety::is_passenger_airbag_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_passenger_airbag_enabled)
  return is_passenger_airbag_enabled_;
}
 void Safety::set_is_passenger_airbag_enabled(bool value) {
  
  is_passenger_airbag_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_passenger_airbag_enabled)
}

// optional bool is_passenger_buckled = 18;
void Safety::clear_is_passenger_buckled() {
  is_passenger_buckled_ = false;
}
 bool Safety::is_passenger_buckled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_passenger_buckled)
  return is_passenger_buckled_;
}
 void Safety::set_is_passenger_buckled(bool value) {
  
  is_passenger_buckled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_passenger_buckled)
}

// optional int32 front_left_tire_press = 19;
void Safety::clear_front_left_tire_press() {
  front_left_tire_press_ = 0;
}
 ::google::protobuf::int32 Safety::front_left_tire_press() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.front_left_tire_press)
  return front_left_tire_press_;
}
 void Safety::set_front_left_tire_press(::google::protobuf::int32 value) {
  
  front_left_tire_press_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.front_left_tire_press)
}

// optional int32 front_right_tire_press = 20;
void Safety::clear_front_right_tire_press() {
  front_right_tire_press_ = 0;
}
 ::google::protobuf::int32 Safety::front_right_tire_press() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.front_right_tire_press)
  return front_right_tire_press_;
}
 void Safety::set_front_right_tire_press(::google::protobuf::int32 value) {
  
  front_right_tire_press_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.front_right_tire_press)
}

// optional int32 rear_left_tire_press = 21;
void Safety::clear_rear_left_tire_press() {
  rear_left_tire_press_ = 0;
}
 ::google::protobuf::int32 Safety::rear_left_tire_press() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.rear_left_tire_press)
  return rear_left_tire_press_;
}
 void Safety::set_rear_left_tire_press(::google::protobuf::int32 value) {
  
  rear_left_tire_press_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.rear_left_tire_press)
}

// optional int32 rear_right_tire_press = 22;
void Safety::clear_rear_right_tire_press() {
  rear_right_tire_press_ = 0;
}
 ::google::protobuf::int32 Safety::rear_right_tire_press() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.rear_right_tire_press)
  return rear_right_tire_press_;
}
 void Safety::set_rear_right_tire_press(::google::protobuf::int32 value) {
  
  rear_right_tire_press_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.rear_right_tire_press)
}

// optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
void Safety::clear_car_driving_mode() {
  car_driving_mode_ = 0;
}
 ::apollo::canbus::Chassis_DrivingMode Safety::car_driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.car_driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(car_driving_mode_);
}
 void Safety::set_car_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  
  car_driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.car_driving_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BasicInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicInfo_Type_descriptor_;
}
bool BasicInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BasicInfo_Type BasicInfo::OFF;
const BasicInfo_Type BasicInfo::ACC;
const BasicInfo_Type BasicInfo::ON;
const BasicInfo_Type BasicInfo::START;
const BasicInfo_Type BasicInfo::INVALID;
const BasicInfo_Type BasicInfo::Type_MIN;
const BasicInfo_Type BasicInfo::Type_MAX;
const int BasicInfo::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BasicInfo_GpsQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicInfo_GpsQuality_descriptor_;
}
bool BasicInfo_GpsQuality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BasicInfo_GpsQuality BasicInfo::FIX_NO;
const BasicInfo_GpsQuality BasicInfo::FIX_2D;
const BasicInfo_GpsQuality BasicInfo::FIX_3D;
const BasicInfo_GpsQuality BasicInfo::FIX_INVALID;
const BasicInfo_GpsQuality BasicInfo::GpsQuality_MIN;
const BasicInfo_GpsQuality BasicInfo::GpsQuality_MAX;
const int BasicInfo::GpsQuality_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicInfo::kIsAutoModeFieldNumber;
const int BasicInfo::kPowerStateFieldNumber;
const int BasicInfo::kIsAirBagDeployedFieldNumber;
const int BasicInfo::kOdoMeterFieldNumber;
const int BasicInfo::kDriveRangeFieldNumber;
const int BasicInfo::kIsSystemErrorFieldNumber;
const int BasicInfo::kIsHumanInterruptFieldNumber;
const int BasicInfo::kAccOnButtonFieldNumber;
const int BasicInfo::kAccOffButtonFieldNumber;
const int BasicInfo::kAccResButtonFieldNumber;
const int BasicInfo::kAccCancelButtonFieldNumber;
const int BasicInfo::kAccOnOffButtonFieldNumber;
const int BasicInfo::kAccResCancelButtonFieldNumber;
const int BasicInfo::kAccIncSpdButtonFieldNumber;
const int BasicInfo::kAccDecSpdButtonFieldNumber;
const int BasicInfo::kAccIncGapButtonFieldNumber;
const int BasicInfo::kAccDecGapButtonFieldNumber;
const int BasicInfo::kLkaButtonFieldNumber;
const int BasicInfo::kCanbusFaultFieldNumber;
const int BasicInfo::kLatitudeFieldNumber;
const int BasicInfo::kLongitudeFieldNumber;
const int BasicInfo::kGpsValidFieldNumber;
const int BasicInfo::kYearFieldNumber;
const int BasicInfo::kMonthFieldNumber;
const int BasicInfo::kDayFieldNumber;
const int BasicInfo::kHoursFieldNumber;
const int BasicInfo::kMinutesFieldNumber;
const int BasicInfo::kSecondsFieldNumber;
const int BasicInfo::kCompassDirectionFieldNumber;
const int BasicInfo::kPdopFieldNumber;
const int BasicInfo::kIsGpsFaultFieldNumber;
const int BasicInfo::kIsInferredFieldNumber;
const int BasicInfo::kAltitudeFieldNumber;
const int BasicInfo::kHeadingFieldNumber;
const int BasicInfo::kHdopFieldNumber;
const int BasicInfo::kVdopFieldNumber;
const int BasicInfo::kQualityFieldNumber;
const int BasicInfo::kNumSatellitesFieldNumber;
const int BasicInfo::kGpsSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicInfo::BasicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.BasicInfo)
}

void BasicInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BasicInfo::BasicInfo(const BasicInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.BasicInfo)
}

void BasicInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_auto_mode_ = false;
  power_state_ = 0;
  is_air_bag_deployed_ = false;
  odo_meter_ = 0;
  drive_range_ = 0;
  is_system_error_ = false;
  is_human_interrupt_ = false;
  acc_on_button_ = false;
  acc_off_button_ = false;
  acc_res_button_ = false;
  acc_cancel_button_ = false;
  acc_on_off_button_ = false;
  acc_res_cancel_button_ = false;
  acc_inc_spd_button_ = false;
  acc_dec_spd_button_ = false;
  acc_inc_gap_button_ = false;
  acc_dec_gap_button_ = false;
  lka_button_ = false;
  canbus_fault_ = false;
  latitude_ = 0;
  longitude_ = 0;
  gps_valid_ = false;
  year_ = 0;
  month_ = 0;
  day_ = 0;
  hours_ = 0;
  minutes_ = 0;
  seconds_ = 0;
  compass_direction_ = 0;
  pdop_ = 0;
  is_gps_fault_ = false;
  is_inferred_ = false;
  altitude_ = 0;
  heading_ = 0;
  hdop_ = 0;
  vdop_ = 0;
  quality_ = 0;
  num_satellites_ = 0;
  gps_speed_ = 0;
}

BasicInfo::~BasicInfo() {
  // @@protoc_insertion_point(destructor:apollo.canbus.BasicInfo)
  SharedDtor();
}

void BasicInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicInfo_descriptor_;
}

const BasicInfo& BasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_5fdetail_2eproto();
  return *default_instance_;
}

BasicInfo* BasicInfo::default_instance_ = NULL;

BasicInfo* BasicInfo::New(::google::protobuf::Arena* arena) const {
  BasicInfo* n = new BasicInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.BasicInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BasicInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BasicInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(power_state_, acc_on_button_);
  ZR_(acc_off_button_, acc_inc_gap_button_);
  ZR_(acc_dec_gap_button_, month_);
  gps_valid_ = false;
  ZR_(day_, seconds_);
  ZR_(is_gps_fault_, pdop_);
  ZR_(altitude_, gps_speed_);

#undef ZR_HELPER_
#undef ZR_

}

bool BasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.BasicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_auto_mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_power_state;
        break;
      }

      // optional .apollo.canbus.BasicInfo.Type power_state = 2;
      case 2: {
        if (tag == 16) {
         parse_power_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_power_state(static_cast< ::apollo::canbus::BasicInfo_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_air_bag_deployed;
        break;
      }

      // optional bool is_air_bag_deployed = 3;
      case 3: {
        if (tag == 24) {
         parse_is_air_bag_deployed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_air_bag_deployed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_odo_meter;
        break;
      }

      // optional double odo_meter = 4;
      case 4: {
        if (tag == 33) {
         parse_odo_meter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odo_meter_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_drive_range;
        break;
      }

      // optional double drive_range = 5;
      case 5: {
        if (tag == 41) {
         parse_drive_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drive_range_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_system_error;
        break;
      }

      // optional bool is_system_error = 6;
      case 6: {
        if (tag == 48) {
         parse_is_system_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_human_interrupt;
        break;
      }

      // optional bool is_human_interrupt = 7;
      case 7: {
        if (tag == 56) {
         parse_is_human_interrupt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_human_interrupt_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_acc_on_button;
        break;
      }

      // optional bool acc_on_button = 8;
      case 8: {
        if (tag == 64) {
         parse_acc_on_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_on_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_acc_off_button;
        break;
      }

      // optional bool acc_off_button = 9;
      case 9: {
        if (tag == 72) {
         parse_acc_off_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_off_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_acc_res_button;
        break;
      }

      // optional bool acc_res_button = 10;
      case 10: {
        if (tag == 80) {
         parse_acc_res_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_res_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_acc_cancel_button;
        break;
      }

      // optional bool acc_cancel_button = 11;
      case 11: {
        if (tag == 88) {
         parse_acc_cancel_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_cancel_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_acc_on_off_button;
        break;
      }

      // optional bool acc_on_off_button = 12;
      case 12: {
        if (tag == 96) {
         parse_acc_on_off_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_on_off_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_acc_res_cancel_button;
        break;
      }

      // optional bool acc_res_cancel_button = 13;
      case 13: {
        if (tag == 104) {
         parse_acc_res_cancel_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_res_cancel_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_acc_inc_spd_button;
        break;
      }

      // optional bool acc_inc_spd_button = 14;
      case 14: {
        if (tag == 112) {
         parse_acc_inc_spd_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_inc_spd_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_acc_dec_spd_button;
        break;
      }

      // optional bool acc_dec_spd_button = 15;
      case 15: {
        if (tag == 120) {
         parse_acc_dec_spd_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_dec_spd_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_acc_inc_gap_button;
        break;
      }

      // optional bool acc_inc_gap_button = 16;
      case 16: {
        if (tag == 128) {
         parse_acc_inc_gap_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_inc_gap_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_acc_dec_gap_button;
        break;
      }

      // optional bool acc_dec_gap_button = 17;
      case 17: {
        if (tag == 136) {
         parse_acc_dec_gap_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_dec_gap_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_lka_button;
        break;
      }

      // optional bool lka_button = 18;
      case 18: {
        if (tag == 144) {
         parse_lka_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lka_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_canbus_fault;
        break;
      }

      // optional bool canbus_fault = 19;
      case 19: {
        if (tag == 152) {
         parse_canbus_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbus_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_latitude;
        break;
      }

      // optional double latitude = 20;
      case 20: {
        if (tag == 161) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_longitude;
        break;
      }

      // optional double longitude = 21;
      case 21: {
        if (tag == 169) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_gps_valid;
        break;
      }

      // optional bool gps_valid = 22;
      case 22: {
        if (tag == 176) {
         parse_gps_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gps_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_year;
        break;
      }

      // optional int32 year = 23;
      case 23: {
        if (tag == 184) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_month;
        break;
      }

      // optional int32 month = 24;
      case 24: {
        if (tag == 192) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_day;
        break;
      }

      // optional int32 day = 25;
      case 25: {
        if (tag == 200) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_hours;
        break;
      }

      // optional int32 hours = 26;
      case 26: {
        if (tag == 208) {
         parse_hours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_minutes;
        break;
      }

      // optional int32 minutes = 27;
      case 27: {
        if (tag == 216) {
         parse_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_seconds;
        break;
      }

      // optional int32 seconds = 28;
      case 28: {
        if (tag == 224) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_compass_direction;
        break;
      }

      // optional double compass_direction = 29;
      case 29: {
        if (tag == 233) {
         parse_compass_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compass_direction_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_pdop;
        break;
      }

      // optional double pdop = 30;
      case 30: {
        if (tag == 241) {
         parse_pdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_is_gps_fault;
        break;
      }

      // optional bool is_gps_fault = 31;
      case 31: {
        if (tag == 248) {
         parse_is_gps_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gps_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_is_inferred;
        break;
      }

      // optional bool is_inferred = 32;
      case 32: {
        if (tag == 256) {
         parse_is_inferred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inferred_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_altitude;
        break;
      }

      // optional double altitude = 33;
      case 33: {
        if (tag == 265) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(273)) goto parse_heading;
        break;
      }

      // optional double heading = 34;
      case 34: {
        if (tag == 273) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(281)) goto parse_hdop;
        break;
      }

      // optional double hdop = 35;
      case 35: {
        if (tag == 281) {
         parse_hdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_vdop;
        break;
      }

      // optional double vdop = 36;
      case 36: {
        if (tag == 289) {
         parse_vdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_quality;
        break;
      }

      // optional .apollo.canbus.BasicInfo.GpsQuality quality = 37;
      case 37: {
        if (tag == 296) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_quality(static_cast< ::apollo::canbus::BasicInfo_GpsQuality >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_num_satellites;
        break;
      }

      // optional int32 num_satellites = 38;
      case 38: {
        if (tag == 304) {
         parse_num_satellites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_satellites_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(313)) goto parse_gps_speed;
        break;
      }

      // optional double gps_speed = 39;
      case 39: {
        if (tag == 313) {
         parse_gps_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.BasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.BasicInfo)
  return false;
#undef DO_
}

void BasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.BasicInfo)
  // optional bool is_auto_mode = 1;
  if (this->is_auto_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_auto_mode(), output);
  }

  // optional .apollo.canbus.BasicInfo.Type power_state = 2;
  if (this->power_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->power_state(), output);
  }

  // optional bool is_air_bag_deployed = 3;
  if (this->is_air_bag_deployed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_air_bag_deployed(), output);
  }

  // optional double odo_meter = 4;
  if (this->odo_meter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->odo_meter(), output);
  }

  // optional double drive_range = 5;
  if (this->drive_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->drive_range(), output);
  }

  // optional bool is_system_error = 6;
  if (this->is_system_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_system_error(), output);
  }

  // optional bool is_human_interrupt = 7;
  if (this->is_human_interrupt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_human_interrupt(), output);
  }

  // optional bool acc_on_button = 8;
  if (this->acc_on_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->acc_on_button(), output);
  }

  // optional bool acc_off_button = 9;
  if (this->acc_off_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->acc_off_button(), output);
  }

  // optional bool acc_res_button = 10;
  if (this->acc_res_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->acc_res_button(), output);
  }

  // optional bool acc_cancel_button = 11;
  if (this->acc_cancel_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->acc_cancel_button(), output);
  }

  // optional bool acc_on_off_button = 12;
  if (this->acc_on_off_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->acc_on_off_button(), output);
  }

  // optional bool acc_res_cancel_button = 13;
  if (this->acc_res_cancel_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->acc_res_cancel_button(), output);
  }

  // optional bool acc_inc_spd_button = 14;
  if (this->acc_inc_spd_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->acc_inc_spd_button(), output);
  }

  // optional bool acc_dec_spd_button = 15;
  if (this->acc_dec_spd_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->acc_dec_spd_button(), output);
  }

  // optional bool acc_inc_gap_button = 16;
  if (this->acc_inc_gap_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->acc_inc_gap_button(), output);
  }

  // optional bool acc_dec_gap_button = 17;
  if (this->acc_dec_gap_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->acc_dec_gap_button(), output);
  }

  // optional bool lka_button = 18;
  if (this->lka_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->lka_button(), output);
  }

  // optional bool canbus_fault = 19;
  if (this->canbus_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->canbus_fault(), output);
  }

  // optional double latitude = 20;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->latitude(), output);
  }

  // optional double longitude = 21;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->longitude(), output);
  }

  // optional bool gps_valid = 22;
  if (this->gps_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->gps_valid(), output);
  }

  // optional int32 year = 23;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->year(), output);
  }

  // optional int32 month = 24;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->month(), output);
  }

  // optional int32 day = 25;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->day(), output);
  }

  // optional int32 hours = 26;
  if (this->hours() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hours(), output);
  }

  // optional int32 minutes = 27;
  if (this->minutes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->minutes(), output);
  }

  // optional int32 seconds = 28;
  if (this->seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->seconds(), output);
  }

  // optional double compass_direction = 29;
  if (this->compass_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->compass_direction(), output);
  }

  // optional double pdop = 30;
  if (this->pdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->pdop(), output);
  }

  // optional bool is_gps_fault = 31;
  if (this->is_gps_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_gps_fault(), output);
  }

  // optional bool is_inferred = 32;
  if (this->is_inferred() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->is_inferred(), output);
  }

  // optional double altitude = 33;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->altitude(), output);
  }

  // optional double heading = 34;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->heading(), output);
  }

  // optional double hdop = 35;
  if (this->hdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->hdop(), output);
  }

  // optional double vdop = 36;
  if (this->vdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->vdop(), output);
  }

  // optional .apollo.canbus.BasicInfo.GpsQuality quality = 37;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->quality(), output);
  }

  // optional int32 num_satellites = 38;
  if (this->num_satellites() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->num_satellites(), output);
  }

  // optional double gps_speed = 39;
  if (this->gps_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->gps_speed(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.BasicInfo)
}

::google::protobuf::uint8* BasicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.BasicInfo)
  // optional bool is_auto_mode = 1;
  if (this->is_auto_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_auto_mode(), target);
  }

  // optional .apollo.canbus.BasicInfo.Type power_state = 2;
  if (this->power_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->power_state(), target);
  }

  // optional bool is_air_bag_deployed = 3;
  if (this->is_air_bag_deployed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_air_bag_deployed(), target);
  }

  // optional double odo_meter = 4;
  if (this->odo_meter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->odo_meter(), target);
  }

  // optional double drive_range = 5;
  if (this->drive_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->drive_range(), target);
  }

  // optional bool is_system_error = 6;
  if (this->is_system_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_system_error(), target);
  }

  // optional bool is_human_interrupt = 7;
  if (this->is_human_interrupt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_human_interrupt(), target);
  }

  // optional bool acc_on_button = 8;
  if (this->acc_on_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->acc_on_button(), target);
  }

  // optional bool acc_off_button = 9;
  if (this->acc_off_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->acc_off_button(), target);
  }

  // optional bool acc_res_button = 10;
  if (this->acc_res_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->acc_res_button(), target);
  }

  // optional bool acc_cancel_button = 11;
  if (this->acc_cancel_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->acc_cancel_button(), target);
  }

  // optional bool acc_on_off_button = 12;
  if (this->acc_on_off_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->acc_on_off_button(), target);
  }

  // optional bool acc_res_cancel_button = 13;
  if (this->acc_res_cancel_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->acc_res_cancel_button(), target);
  }

  // optional bool acc_inc_spd_button = 14;
  if (this->acc_inc_spd_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->acc_inc_spd_button(), target);
  }

  // optional bool acc_dec_spd_button = 15;
  if (this->acc_dec_spd_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->acc_dec_spd_button(), target);
  }

  // optional bool acc_inc_gap_button = 16;
  if (this->acc_inc_gap_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->acc_inc_gap_button(), target);
  }

  // optional bool acc_dec_gap_button = 17;
  if (this->acc_dec_gap_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->acc_dec_gap_button(), target);
  }

  // optional bool lka_button = 18;
  if (this->lka_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->lka_button(), target);
  }

  // optional bool canbus_fault = 19;
  if (this->canbus_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->canbus_fault(), target);
  }

  // optional double latitude = 20;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->latitude(), target);
  }

  // optional double longitude = 21;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->longitude(), target);
  }

  // optional bool gps_valid = 22;
  if (this->gps_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->gps_valid(), target);
  }

  // optional int32 year = 23;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->year(), target);
  }

  // optional int32 month = 24;
  if (this->month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->month(), target);
  }

  // optional int32 day = 25;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->day(), target);
  }

  // optional int32 hours = 26;
  if (this->hours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hours(), target);
  }

  // optional int32 minutes = 27;
  if (this->minutes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->minutes(), target);
  }

  // optional int32 seconds = 28;
  if (this->seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->seconds(), target);
  }

  // optional double compass_direction = 29;
  if (this->compass_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->compass_direction(), target);
  }

  // optional double pdop = 30;
  if (this->pdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->pdop(), target);
  }

  // optional bool is_gps_fault = 31;
  if (this->is_gps_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_gps_fault(), target);
  }

  // optional bool is_inferred = 32;
  if (this->is_inferred() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->is_inferred(), target);
  }

  // optional double altitude = 33;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->altitude(), target);
  }

  // optional double heading = 34;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->heading(), target);
  }

  // optional double hdop = 35;
  if (this->hdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->hdop(), target);
  }

  // optional double vdop = 36;
  if (this->vdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->vdop(), target);
  }

  // optional .apollo.canbus.BasicInfo.GpsQuality quality = 37;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->quality(), target);
  }

  // optional int32 num_satellites = 38;
  if (this->num_satellites() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->num_satellites(), target);
  }

  // optional double gps_speed = 39;
  if (this->gps_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->gps_speed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.BasicInfo)
  return target;
}

int BasicInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.BasicInfo)
  int total_size = 0;

  // optional bool is_auto_mode = 1;
  if (this->is_auto_mode() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.BasicInfo.Type power_state = 2;
  if (this->power_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_state());
  }

  // optional bool is_air_bag_deployed = 3;
  if (this->is_air_bag_deployed() != 0) {
    total_size += 1 + 1;
  }

  // optional double odo_meter = 4;
  if (this->odo_meter() != 0) {
    total_size += 1 + 8;
  }

  // optional double drive_range = 5;
  if (this->drive_range() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_system_error = 6;
  if (this->is_system_error() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_human_interrupt = 7;
  if (this->is_human_interrupt() != 0) {
    total_size += 1 + 1;
  }

  // optional bool acc_on_button = 8;
  if (this->acc_on_button() != 0) {
    total_size += 1 + 1;
  }

  // optional bool acc_off_button = 9;
  if (this->acc_off_button() != 0) {
    total_size += 1 + 1;
  }

  // optional bool acc_res_button = 10;
  if (this->acc_res_button() != 0) {
    total_size += 1 + 1;
  }

  // optional bool acc_cancel_button = 11;
  if (this->acc_cancel_button() != 0) {
    total_size += 1 + 1;
  }

  // optional bool acc_on_off_button = 12;
  if (this->acc_on_off_button() != 0) {
    total_size += 1 + 1;
  }

  // optional bool acc_res_cancel_button = 13;
  if (this->acc_res_cancel_button() != 0) {
    total_size += 1 + 1;
  }

  // optional bool acc_inc_spd_button = 14;
  if (this->acc_inc_spd_button() != 0) {
    total_size += 1 + 1;
  }

  // optional bool acc_dec_spd_button = 15;
  if (this->acc_dec_spd_button() != 0) {
    total_size += 1 + 1;
  }

  // optional bool acc_inc_gap_button = 16;
  if (this->acc_inc_gap_button() != 0) {
    total_size += 2 + 1;
  }

  // optional bool acc_dec_gap_button = 17;
  if (this->acc_dec_gap_button() != 0) {
    total_size += 2 + 1;
  }

  // optional bool lka_button = 18;
  if (this->lka_button() != 0) {
    total_size += 2 + 1;
  }

  // optional bool canbus_fault = 19;
  if (this->canbus_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional double latitude = 20;
  if (this->latitude() != 0) {
    total_size += 2 + 8;
  }

  // optional double longitude = 21;
  if (this->longitude() != 0) {
    total_size += 2 + 8;
  }

  // optional bool gps_valid = 22;
  if (this->gps_valid() != 0) {
    total_size += 2 + 1;
  }

  // optional int32 year = 23;
  if (this->year() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year());
  }

  // optional int32 month = 24;
  if (this->month() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->month());
  }

  // optional int32 day = 25;
  if (this->day() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day());
  }

  // optional int32 hours = 26;
  if (this->hours() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hours());
  }

  // optional int32 minutes = 27;
  if (this->minutes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minutes());
  }

  // optional int32 seconds = 28;
  if (this->seconds() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());
  }

  // optional double compass_direction = 29;
  if (this->compass_direction() != 0) {
    total_size += 2 + 8;
  }

  // optional double pdop = 30;
  if (this->pdop() != 0) {
    total_size += 2 + 8;
  }

  // optional bool is_gps_fault = 31;
  if (this->is_gps_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool is_inferred = 32;
  if (this->is_inferred() != 0) {
    total_size += 2 + 1;
  }

  // optional double altitude = 33;
  if (this->altitude() != 0) {
    total_size += 2 + 8;
  }

  // optional double heading = 34;
  if (this->heading() != 0) {
    total_size += 2 + 8;
  }

  // optional double hdop = 35;
  if (this->hdop() != 0) {
    total_size += 2 + 8;
  }

  // optional double vdop = 36;
  if (this->vdop() != 0) {
    total_size += 2 + 8;
  }

  // optional .apollo.canbus.BasicInfo.GpsQuality quality = 37;
  if (this->quality() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
  }

  // optional int32 num_satellites = 38;
  if (this->num_satellites() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_satellites());
  }

  // optional double gps_speed = 39;
  if (this->gps_speed() != 0) {
    total_size += 2 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.BasicInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BasicInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.BasicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.BasicInfo)
    MergeFrom(*source);
  }
}

void BasicInfo::MergeFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.BasicInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_auto_mode() != 0) {
    set_is_auto_mode(from.is_auto_mode());
  }
  if (from.power_state() != 0) {
    set_power_state(from.power_state());
  }
  if (from.is_air_bag_deployed() != 0) {
    set_is_air_bag_deployed(from.is_air_bag_deployed());
  }
  if (from.odo_meter() != 0) {
    set_odo_meter(from.odo_meter());
  }
  if (from.drive_range() != 0) {
    set_drive_range(from.drive_range());
  }
  if (from.is_system_error() != 0) {
    set_is_system_error(from.is_system_error());
  }
  if (from.is_human_interrupt() != 0) {
    set_is_human_interrupt(from.is_human_interrupt());
  }
  if (from.acc_on_button() != 0) {
    set_acc_on_button(from.acc_on_button());
  }
  if (from.acc_off_button() != 0) {
    set_acc_off_button(from.acc_off_button());
  }
  if (from.acc_res_button() != 0) {
    set_acc_res_button(from.acc_res_button());
  }
  if (from.acc_cancel_button() != 0) {
    set_acc_cancel_button(from.acc_cancel_button());
  }
  if (from.acc_on_off_button() != 0) {
    set_acc_on_off_button(from.acc_on_off_button());
  }
  if (from.acc_res_cancel_button() != 0) {
    set_acc_res_cancel_button(from.acc_res_cancel_button());
  }
  if (from.acc_inc_spd_button() != 0) {
    set_acc_inc_spd_button(from.acc_inc_spd_button());
  }
  if (from.acc_dec_spd_button() != 0) {
    set_acc_dec_spd_button(from.acc_dec_spd_button());
  }
  if (from.acc_inc_gap_button() != 0) {
    set_acc_inc_gap_button(from.acc_inc_gap_button());
  }
  if (from.acc_dec_gap_button() != 0) {
    set_acc_dec_gap_button(from.acc_dec_gap_button());
  }
  if (from.lka_button() != 0) {
    set_lka_button(from.lka_button());
  }
  if (from.canbus_fault() != 0) {
    set_canbus_fault(from.canbus_fault());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.gps_valid() != 0) {
    set_gps_valid(from.gps_valid());
  }
  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hours() != 0) {
    set_hours(from.hours());
  }
  if (from.minutes() != 0) {
    set_minutes(from.minutes());
  }
  if (from.seconds() != 0) {
    set_seconds(from.seconds());
  }
  if (from.compass_direction() != 0) {
    set_compass_direction(from.compass_direction());
  }
  if (from.pdop() != 0) {
    set_pdop(from.pdop());
  }
  if (from.is_gps_fault() != 0) {
    set_is_gps_fault(from.is_gps_fault());
  }
  if (from.is_inferred() != 0) {
    set_is_inferred(from.is_inferred());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.hdop() != 0) {
    set_hdop(from.hdop());
  }
  if (from.vdop() != 0) {
    set_vdop(from.vdop());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.num_satellites() != 0) {
    set_num_satellites(from.num_satellites());
  }
  if (from.gps_speed() != 0) {
    set_gps_speed(from.gps_speed());
  }
}

void BasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicInfo::CopyFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicInfo::IsInitialized() const {

  return true;
}

void BasicInfo::Swap(BasicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicInfo::InternalSwap(BasicInfo* other) {
  std::swap(is_auto_mode_, other->is_auto_mode_);
  std::swap(power_state_, other->power_state_);
  std::swap(is_air_bag_deployed_, other->is_air_bag_deployed_);
  std::swap(odo_meter_, other->odo_meter_);
  std::swap(drive_range_, other->drive_range_);
  std::swap(is_system_error_, other->is_system_error_);
  std::swap(is_human_interrupt_, other->is_human_interrupt_);
  std::swap(acc_on_button_, other->acc_on_button_);
  std::swap(acc_off_button_, other->acc_off_button_);
  std::swap(acc_res_button_, other->acc_res_button_);
  std::swap(acc_cancel_button_, other->acc_cancel_button_);
  std::swap(acc_on_off_button_, other->acc_on_off_button_);
  std::swap(acc_res_cancel_button_, other->acc_res_cancel_button_);
  std::swap(acc_inc_spd_button_, other->acc_inc_spd_button_);
  std::swap(acc_dec_spd_button_, other->acc_dec_spd_button_);
  std::swap(acc_inc_gap_button_, other->acc_inc_gap_button_);
  std::swap(acc_dec_gap_button_, other->acc_dec_gap_button_);
  std::swap(lka_button_, other->lka_button_);
  std::swap(canbus_fault_, other->canbus_fault_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(gps_valid_, other->gps_valid_);
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hours_, other->hours_);
  std::swap(minutes_, other->minutes_);
  std::swap(seconds_, other->seconds_);
  std::swap(compass_direction_, other->compass_direction_);
  std::swap(pdop_, other->pdop_);
  std::swap(is_gps_fault_, other->is_gps_fault_);
  std::swap(is_inferred_, other->is_inferred_);
  std::swap(altitude_, other->altitude_);
  std::swap(heading_, other->heading_);
  std::swap(hdop_, other->hdop_);
  std::swap(vdop_, other->vdop_);
  std::swap(quality_, other->quality_);
  std::swap(num_satellites_, other->num_satellites_);
  std::swap(gps_speed_, other->gps_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicInfo_descriptor_;
  metadata.reflection = BasicInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasicInfo

// optional bool is_auto_mode = 1;
void BasicInfo::clear_is_auto_mode() {
  is_auto_mode_ = false;
}
 bool BasicInfo::is_auto_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_auto_mode)
  return is_auto_mode_;
}
 void BasicInfo::set_is_auto_mode(bool value) {
  
  is_auto_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_auto_mode)
}

// optional .apollo.canbus.BasicInfo.Type power_state = 2;
void BasicInfo::clear_power_state() {
  power_state_ = 0;
}
 ::apollo::canbus::BasicInfo_Type BasicInfo::power_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.power_state)
  return static_cast< ::apollo::canbus::BasicInfo_Type >(power_state_);
}
 void BasicInfo::set_power_state(::apollo::canbus::BasicInfo_Type value) {
  
  power_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.power_state)
}

// optional bool is_air_bag_deployed = 3;
void BasicInfo::clear_is_air_bag_deployed() {
  is_air_bag_deployed_ = false;
}
 bool BasicInfo::is_air_bag_deployed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_air_bag_deployed)
  return is_air_bag_deployed_;
}
 void BasicInfo::set_is_air_bag_deployed(bool value) {
  
  is_air_bag_deployed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_air_bag_deployed)
}

// optional double odo_meter = 4;
void BasicInfo::clear_odo_meter() {
  odo_meter_ = 0;
}
 double BasicInfo::odo_meter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.odo_meter)
  return odo_meter_;
}
 void BasicInfo::set_odo_meter(double value) {
  
  odo_meter_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.odo_meter)
}

// optional double drive_range = 5;
void BasicInfo::clear_drive_range() {
  drive_range_ = 0;
}
 double BasicInfo::drive_range() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.drive_range)
  return drive_range_;
}
 void BasicInfo::set_drive_range(double value) {
  
  drive_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.drive_range)
}

// optional bool is_system_error = 6;
void BasicInfo::clear_is_system_error() {
  is_system_error_ = false;
}
 bool BasicInfo::is_system_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_system_error)
  return is_system_error_;
}
 void BasicInfo::set_is_system_error(bool value) {
  
  is_system_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_system_error)
}

// optional bool is_human_interrupt = 7;
void BasicInfo::clear_is_human_interrupt() {
  is_human_interrupt_ = false;
}
 bool BasicInfo::is_human_interrupt() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_human_interrupt)
  return is_human_interrupt_;
}
 void BasicInfo::set_is_human_interrupt(bool value) {
  
  is_human_interrupt_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_human_interrupt)
}

// optional bool acc_on_button = 8;
void BasicInfo::clear_acc_on_button() {
  acc_on_button_ = false;
}
 bool BasicInfo::acc_on_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_on_button)
  return acc_on_button_;
}
 void BasicInfo::set_acc_on_button(bool value) {
  
  acc_on_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_on_button)
}

// optional bool acc_off_button = 9;
void BasicInfo::clear_acc_off_button() {
  acc_off_button_ = false;
}
 bool BasicInfo::acc_off_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_off_button)
  return acc_off_button_;
}
 void BasicInfo::set_acc_off_button(bool value) {
  
  acc_off_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_off_button)
}

// optional bool acc_res_button = 10;
void BasicInfo::clear_acc_res_button() {
  acc_res_button_ = false;
}
 bool BasicInfo::acc_res_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_res_button)
  return acc_res_button_;
}
 void BasicInfo::set_acc_res_button(bool value) {
  
  acc_res_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_res_button)
}

// optional bool acc_cancel_button = 11;
void BasicInfo::clear_acc_cancel_button() {
  acc_cancel_button_ = false;
}
 bool BasicInfo::acc_cancel_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_cancel_button)
  return acc_cancel_button_;
}
 void BasicInfo::set_acc_cancel_button(bool value) {
  
  acc_cancel_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_cancel_button)
}

// optional bool acc_on_off_button = 12;
void BasicInfo::clear_acc_on_off_button() {
  acc_on_off_button_ = false;
}
 bool BasicInfo::acc_on_off_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_on_off_button)
  return acc_on_off_button_;
}
 void BasicInfo::set_acc_on_off_button(bool value) {
  
  acc_on_off_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_on_off_button)
}

// optional bool acc_res_cancel_button = 13;
void BasicInfo::clear_acc_res_cancel_button() {
  acc_res_cancel_button_ = false;
}
 bool BasicInfo::acc_res_cancel_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_res_cancel_button)
  return acc_res_cancel_button_;
}
 void BasicInfo::set_acc_res_cancel_button(bool value) {
  
  acc_res_cancel_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_res_cancel_button)
}

// optional bool acc_inc_spd_button = 14;
void BasicInfo::clear_acc_inc_spd_button() {
  acc_inc_spd_button_ = false;
}
 bool BasicInfo::acc_inc_spd_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_inc_spd_button)
  return acc_inc_spd_button_;
}
 void BasicInfo::set_acc_inc_spd_button(bool value) {
  
  acc_inc_spd_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_inc_spd_button)
}

// optional bool acc_dec_spd_button = 15;
void BasicInfo::clear_acc_dec_spd_button() {
  acc_dec_spd_button_ = false;
}
 bool BasicInfo::acc_dec_spd_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_dec_spd_button)
  return acc_dec_spd_button_;
}
 void BasicInfo::set_acc_dec_spd_button(bool value) {
  
  acc_dec_spd_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_dec_spd_button)
}

// optional bool acc_inc_gap_button = 16;
void BasicInfo::clear_acc_inc_gap_button() {
  acc_inc_gap_button_ = false;
}
 bool BasicInfo::acc_inc_gap_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_inc_gap_button)
  return acc_inc_gap_button_;
}
 void BasicInfo::set_acc_inc_gap_button(bool value) {
  
  acc_inc_gap_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_inc_gap_button)
}

// optional bool acc_dec_gap_button = 17;
void BasicInfo::clear_acc_dec_gap_button() {
  acc_dec_gap_button_ = false;
}
 bool BasicInfo::acc_dec_gap_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_dec_gap_button)
  return acc_dec_gap_button_;
}
 void BasicInfo::set_acc_dec_gap_button(bool value) {
  
  acc_dec_gap_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_dec_gap_button)
}

// optional bool lka_button = 18;
void BasicInfo::clear_lka_button() {
  lka_button_ = false;
}
 bool BasicInfo::lka_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.lka_button)
  return lka_button_;
}
 void BasicInfo::set_lka_button(bool value) {
  
  lka_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.lka_button)
}

// optional bool canbus_fault = 19;
void BasicInfo::clear_canbus_fault() {
  canbus_fault_ = false;
}
 bool BasicInfo::canbus_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.canbus_fault)
  return canbus_fault_;
}
 void BasicInfo::set_canbus_fault(bool value) {
  
  canbus_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.canbus_fault)
}

// optional double latitude = 20;
void BasicInfo::clear_latitude() {
  latitude_ = 0;
}
 double BasicInfo::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.latitude)
  return latitude_;
}
 void BasicInfo::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.latitude)
}

// optional double longitude = 21;
void BasicInfo::clear_longitude() {
  longitude_ = 0;
}
 double BasicInfo::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.longitude)
  return longitude_;
}
 void BasicInfo::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.longitude)
}

// optional bool gps_valid = 22;
void BasicInfo::clear_gps_valid() {
  gps_valid_ = false;
}
 bool BasicInfo::gps_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.gps_valid)
  return gps_valid_;
}
 void BasicInfo::set_gps_valid(bool value) {
  
  gps_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.gps_valid)
}

// optional int32 year = 23;
void BasicInfo::clear_year() {
  year_ = 0;
}
 ::google::protobuf::int32 BasicInfo::year() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.year)
  return year_;
}
 void BasicInfo::set_year(::google::protobuf::int32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.year)
}

// optional int32 month = 24;
void BasicInfo::clear_month() {
  month_ = 0;
}
 ::google::protobuf::int32 BasicInfo::month() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.month)
  return month_;
}
 void BasicInfo::set_month(::google::protobuf::int32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.month)
}

// optional int32 day = 25;
void BasicInfo::clear_day() {
  day_ = 0;
}
 ::google::protobuf::int32 BasicInfo::day() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.day)
  return day_;
}
 void BasicInfo::set_day(::google::protobuf::int32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.day)
}

// optional int32 hours = 26;
void BasicInfo::clear_hours() {
  hours_ = 0;
}
 ::google::protobuf::int32 BasicInfo::hours() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.hours)
  return hours_;
}
 void BasicInfo::set_hours(::google::protobuf::int32 value) {
  
  hours_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.hours)
}

// optional int32 minutes = 27;
void BasicInfo::clear_minutes() {
  minutes_ = 0;
}
 ::google::protobuf::int32 BasicInfo::minutes() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.minutes)
  return minutes_;
}
 void BasicInfo::set_minutes(::google::protobuf::int32 value) {
  
  minutes_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.minutes)
}

// optional int32 seconds = 28;
void BasicInfo::clear_seconds() {
  seconds_ = 0;
}
 ::google::protobuf::int32 BasicInfo::seconds() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.seconds)
  return seconds_;
}
 void BasicInfo::set_seconds(::google::protobuf::int32 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.seconds)
}

// optional double compass_direction = 29;
void BasicInfo::clear_compass_direction() {
  compass_direction_ = 0;
}
 double BasicInfo::compass_direction() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.compass_direction)
  return compass_direction_;
}
 void BasicInfo::set_compass_direction(double value) {
  
  compass_direction_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.compass_direction)
}

// optional double pdop = 30;
void BasicInfo::clear_pdop() {
  pdop_ = 0;
}
 double BasicInfo::pdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.pdop)
  return pdop_;
}
 void BasicInfo::set_pdop(double value) {
  
  pdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.pdop)
}

// optional bool is_gps_fault = 31;
void BasicInfo::clear_is_gps_fault() {
  is_gps_fault_ = false;
}
 bool BasicInfo::is_gps_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_gps_fault)
  return is_gps_fault_;
}
 void BasicInfo::set_is_gps_fault(bool value) {
  
  is_gps_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_gps_fault)
}

// optional bool is_inferred = 32;
void BasicInfo::clear_is_inferred() {
  is_inferred_ = false;
}
 bool BasicInfo::is_inferred() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_inferred)
  return is_inferred_;
}
 void BasicInfo::set_is_inferred(bool value) {
  
  is_inferred_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_inferred)
}

// optional double altitude = 33;
void BasicInfo::clear_altitude() {
  altitude_ = 0;
}
 double BasicInfo::altitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.altitude)
  return altitude_;
}
 void BasicInfo::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.altitude)
}

// optional double heading = 34;
void BasicInfo::clear_heading() {
  heading_ = 0;
}
 double BasicInfo::heading() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.heading)
  return heading_;
}
 void BasicInfo::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.heading)
}

// optional double hdop = 35;
void BasicInfo::clear_hdop() {
  hdop_ = 0;
}
 double BasicInfo::hdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.hdop)
  return hdop_;
}
 void BasicInfo::set_hdop(double value) {
  
  hdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.hdop)
}

// optional double vdop = 36;
void BasicInfo::clear_vdop() {
  vdop_ = 0;
}
 double BasicInfo::vdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.vdop)
  return vdop_;
}
 void BasicInfo::set_vdop(double value) {
  
  vdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.vdop)
}

// optional .apollo.canbus.BasicInfo.GpsQuality quality = 37;
void BasicInfo::clear_quality() {
  quality_ = 0;
}
 ::apollo::canbus::BasicInfo_GpsQuality BasicInfo::quality() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.quality)
  return static_cast< ::apollo::canbus::BasicInfo_GpsQuality >(quality_);
}
 void BasicInfo::set_quality(::apollo::canbus::BasicInfo_GpsQuality value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.quality)
}

// optional int32 num_satellites = 38;
void BasicInfo::clear_num_satellites() {
  num_satellites_ = 0;
}
 ::google::protobuf::int32 BasicInfo::num_satellites() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.num_satellites)
  return num_satellites_;
}
 void BasicInfo::set_num_satellites(::google::protobuf::int32 value) {
  
  num_satellites_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.num_satellites)
}

// optional double gps_speed = 39;
void BasicInfo::clear_gps_speed() {
  gps_speed_ = 0;
}
 double BasicInfo::gps_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.gps_speed)
  return gps_speed_;
}
 void BasicInfo::set_gps_speed(double value) {
  
  gps_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.gps_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
