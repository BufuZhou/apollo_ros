// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/canbus/chassis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/canbus/chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace canbus {

namespace {

const ::google::protobuf::Descriptor* Signal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Signal_TurnSignal_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Chassis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chassis_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/canbus/chassis.proto");
  GOOGLE_CHECK(file != NULL);
  Signal_descriptor_ = file->message_type(0);
  static const int Signal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, turn_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, high_beam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, low_beam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, horn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, emergency_light_),
  };
  Signal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Signal_descriptor_,
      Signal::default_instance_,
      Signal_offsets_,
      -1,
      -1,
      -1,
      sizeof(Signal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _is_default_instance_));
  Signal_TurnSignal_descriptor_ = Signal_descriptor_->enum_type(0);
  Chassis_descriptor_ = file->message_type(1);
  static const int Chassis_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, engine_started_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, engine_rpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, speed_mps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, odometer_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, fuel_range_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, throttle_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, brake_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steering_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steering_torque_nm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, parking_brake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, wiper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, disengage_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, driving_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, gear_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steering_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, chassis_error_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, high_beam_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, low_beam_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, left_turn_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, right_turn_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, horn_),
  };
  Chassis_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Chassis_descriptor_,
      Chassis::default_instance_,
      Chassis_offsets_,
      -1,
      -1,
      -1,
      sizeof(Chassis),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, _is_default_instance_));
  Chassis_DrivingMode_descriptor_ = Chassis_descriptor_->enum_type(0);
  Chassis_ErrorCode_descriptor_ = Chassis_descriptor_->enum_type(1);
  Chassis_GearPosition_descriptor_ = Chassis_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Signal_descriptor_, &Signal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Chassis_descriptor_, &Chassis::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto() {
  delete Signal::default_instance_;
  delete Signal_reflection_;
  delete Chassis::default_instance_;
  delete Chassis_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&apollo_msgs/proto/canbus/chassis.proto"
    "\022\rapollo.canbus\032%apollo_msgs/proto/commo"
    "n/header.proto\"\307\001\n\006Signal\0225\n\013turn_signal"
    "\030\001 \001(\0162 .apollo.canbus.Signal.TurnSignal"
    "\022\021\n\thigh_beam\030\002 \001(\010\022\020\n\010low_beam\030\003 \001(\010\022\014\n"
    "\004horn\030\004 \001(\010\022\027\n\017emergency_light\030\005 \001(\010\":\n\n"
    "TurnSignal\022\r\n\tTURN_NONE\020\000\022\r\n\tTURN_LEFT\020\001"
    "\022\016\n\nTURN_RIGHT\020\002\"\334\010\n\007Chassis\022\026\n\016engine_s"
    "tarted\030\003 \001(\010\022\022\n\nengine_rpm\030\004 \001(\002\022\021\n\tspee"
    "d_mps\030\005 \001(\002\022\022\n\nodometer_m\030\006 \001(\002\022\024\n\014fuel_"
    "range_m\030\007 \001(\005\022\033\n\023throttle_percentage\030\010 \001"
    "(\002\022\030\n\020brake_percentage\030\t \001(\002\022\033\n\023steering"
    "_percentage\030\013 \001(\002\022\032\n\022steering_torque_nm\030"
    "\014 \001(\002\022\025\n\rparking_brake\030\r \001(\010\022\r\n\005wiper\030\023 "
    "\001(\010\022\030\n\020disengage_status\030\024 \001(\010\0228\n\014driving"
    "_mode\030\025 \001(\0162\".apollo.canbus.Chassis.Driv"
    "ingMode\0224\n\nerror_code\030\026 \001(\0162 .apollo.can"
    "bus.Chassis.ErrorCode\022:\n\rgear_location\030\027"
    " \001(\0162#.apollo.canbus.Chassis.GearPositio"
    "n\022\032\n\022steering_timestamp\030\030 \001(\001\022%\n\006header\030"
    "\031 \001(\0132\025.apollo.common.Header\022\032\n\022chassis_"
    "error_mask\030\032 \001(\005\022%\n\006signal\030\033 \001(\0132\025.apoll"
    "o.canbus.Signal\022\030\n\020high_beam_signal\030\016 \001("
    "\010\022\027\n\017low_beam_signal\030\017 \001(\010\022\030\n\020left_turn_"
    "signal\030\020 \001(\010\022\031\n\021right_turn_signal\030\021 \001(\010\022"
    "\014\n\004horn\030\022 \001(\010\"y\n\013DrivingMode\022\023\n\017COMPLETE"
    "_MANUAL\020\000\022\027\n\023COMPLETE_AUTO_DRIVE\020\001\022\023\n\017AU"
    "TO_STEER_ONLY\020\002\022\023\n\017AUTO_SPEED_ONLY\020\003\022\022\n\016"
    "EMERGENCY_MODE\020\004\"\216\001\n\tErrorCode\022\014\n\010NO_ERR"
    "OR\020\000\022\025\n\021CMD_NOT_IN_PERIOD\020\001\022\021\n\rCHASSIS_E"
    "RROR\020\002\022\027\n\023MANUAL_INTERVENTION\020\003\022\035\n\031CHASS"
    "IS_CAN_NOT_IN_PERIOD\020\004\022\021\n\rUNKNOWN_ERROR\020"
    "\005\"\203\001\n\014GearPosition\022\020\n\014GEAR_NEUTRAL\020\000\022\016\n\n"
    "GEAR_DRIVE\020\001\022\020\n\014GEAR_REVERSE\020\002\022\020\n\014GEAR_P"
    "ARKING\020\003\022\014\n\010GEAR_LOW\020\004\022\020\n\014GEAR_INVALID\020\005"
    "\022\r\n\tGEAR_NONE\020\006b\006proto3", 1423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/canbus/chassis.proto", &protobuf_RegisterTypes);
  Signal::default_instance_ = new Signal();
  Chassis::default_instance_ = new Chassis();
  Signal::default_instance_->InitAsDefaultInstance();
  Chassis::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Signal_TurnSignal_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_TurnSignal_descriptor_;
}
bool Signal_TurnSignal_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_TurnSignal Signal::TURN_NONE;
const Signal_TurnSignal Signal::TURN_LEFT;
const Signal_TurnSignal Signal::TURN_RIGHT;
const Signal_TurnSignal Signal::TurnSignal_MIN;
const Signal_TurnSignal Signal::TurnSignal_MAX;
const int Signal::TurnSignal_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kTurnSignalFieldNumber;
const int Signal::kHighBeamFieldNumber;
const int Signal::kLowBeamFieldNumber;
const int Signal::kHornFieldNumber;
const int Signal::kEmergencyLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Signal)
}

void Signal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Signal)
}

void Signal::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  turn_signal_ = 0;
  high_beam_ = false;
  low_beam_ = false;
  horn_ = false;
  emergency_light_ = false;
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_descriptor_;
}

const Signal& Signal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  return *default_instance_;
}

Signal* Signal::default_instance_ = NULL;

Signal* Signal::New(::google::protobuf::Arena* arena) const {
  Signal* n = new Signal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Signal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Signal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Signal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(turn_signal_, emergency_light_);

#undef ZR_HELPER_
#undef ZR_

}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Signal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Signal.TurnSignal turn_signal = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_turn_signal(static_cast< ::apollo::canbus::Signal_TurnSignal >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_high_beam;
        break;
      }

      // optional bool high_beam = 2;
      case 2: {
        if (tag == 16) {
         parse_high_beam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_low_beam;
        break;
      }

      // optional bool low_beam = 3;
      case 3: {
        if (tag == 24) {
         parse_low_beam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_horn;
        break;
      }

      // optional bool horn = 4;
      case 4: {
        if (tag == 32) {
         parse_horn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_emergency_light;
        break;
      }

      // optional bool emergency_light = 5;
      case 5: {
        if (tag == 40) {
         parse_emergency_light:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergency_light_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Signal)
  // optional .apollo.canbus.Signal.TurnSignal turn_signal = 1;
  if (this->turn_signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_signal(), output);
  }

  // optional bool high_beam = 2;
  if (this->high_beam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->high_beam(), output);
  }

  // optional bool low_beam = 3;
  if (this->low_beam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->low_beam(), output);
  }

  // optional bool horn = 4;
  if (this->horn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->horn(), output);
  }

  // optional bool emergency_light = 5;
  if (this->emergency_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->emergency_light(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Signal)
  // optional .apollo.canbus.Signal.TurnSignal turn_signal = 1;
  if (this->turn_signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_signal(), target);
  }

  // optional bool high_beam = 2;
  if (this->high_beam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->high_beam(), target);
  }

  // optional bool low_beam = 3;
  if (this->low_beam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->low_beam(), target);
  }

  // optional bool horn = 4;
  if (this->horn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->horn(), target);
  }

  // optional bool emergency_light = 5;
  if (this->emergency_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->emergency_light(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Signal)
  return target;
}

int Signal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Signal)
  int total_size = 0;

  // optional .apollo.canbus.Signal.TurnSignal turn_signal = 1;
  if (this->turn_signal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_signal());
  }

  // optional bool high_beam = 2;
  if (this->high_beam() != 0) {
    total_size += 1 + 1;
  }

  // optional bool low_beam = 3;
  if (this->low_beam() != 0) {
    total_size += 1 + 1;
  }

  // optional bool horn = 4;
  if (this->horn() != 0) {
    total_size += 1 + 1;
  }

  // optional bool emergency_light = 5;
  if (this->emergency_light() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Signal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Signal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Signal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.turn_signal() != 0) {
    set_turn_signal(from.turn_signal());
  }
  if (from.high_beam() != 0) {
    set_high_beam(from.high_beam());
  }
  if (from.low_beam() != 0) {
    set_low_beam(from.low_beam());
  }
  if (from.horn() != 0) {
    set_horn(from.horn());
  }
  if (from.emergency_light() != 0) {
    set_emergency_light(from.emergency_light());
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {

  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  std::swap(turn_signal_, other->turn_signal_);
  std::swap(high_beam_, other->high_beam_);
  std::swap(low_beam_, other->low_beam_);
  std::swap(horn_, other->horn_);
  std::swap(emergency_light_, other->emergency_light_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signal_descriptor_;
  metadata.reflection = Signal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signal

// optional .apollo.canbus.Signal.TurnSignal turn_signal = 1;
void Signal::clear_turn_signal() {
  turn_signal_ = 0;
}
 ::apollo::canbus::Signal_TurnSignal Signal::turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Signal.turn_signal)
  return static_cast< ::apollo::canbus::Signal_TurnSignal >(turn_signal_);
}
 void Signal::set_turn_signal(::apollo::canbus::Signal_TurnSignal value) {
  
  turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Signal.turn_signal)
}

// optional bool high_beam = 2;
void Signal::clear_high_beam() {
  high_beam_ = false;
}
 bool Signal::high_beam() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Signal.high_beam)
  return high_beam_;
}
 void Signal::set_high_beam(bool value) {
  
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Signal.high_beam)
}

// optional bool low_beam = 3;
void Signal::clear_low_beam() {
  low_beam_ = false;
}
 bool Signal::low_beam() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Signal.low_beam)
  return low_beam_;
}
 void Signal::set_low_beam(bool value) {
  
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Signal.low_beam)
}

// optional bool horn = 4;
void Signal::clear_horn() {
  horn_ = false;
}
 bool Signal::horn() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Signal.horn)
  return horn_;
}
 void Signal::set_horn(bool value) {
  
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Signal.horn)
}

// optional bool emergency_light = 5;
void Signal::clear_emergency_light() {
  emergency_light_ = false;
}
 bool Signal::emergency_light() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Signal.emergency_light)
  return emergency_light_;
}
 void Signal::set_emergency_light(bool value) {
  
  emergency_light_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Signal.emergency_light)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chassis_DrivingMode_descriptor_;
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
const Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
const Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
const Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
const Chassis_DrivingMode Chassis::EMERGENCY_MODE;
const Chassis_DrivingMode Chassis::DrivingMode_MIN;
const Chassis_DrivingMode Chassis::DrivingMode_MAX;
const int Chassis::DrivingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chassis_ErrorCode_descriptor_;
}
bool Chassis_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_ErrorCode Chassis::NO_ERROR;
const Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR;
const Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
const Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
const Chassis_ErrorCode Chassis::ErrorCode_MIN;
const Chassis_ErrorCode Chassis::ErrorCode_MAX;
const int Chassis::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chassis_GearPosition_descriptor_;
}
bool Chassis_GearPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_GearPosition Chassis::GEAR_NEUTRAL;
const Chassis_GearPosition Chassis::GEAR_DRIVE;
const Chassis_GearPosition Chassis::GEAR_REVERSE;
const Chassis_GearPosition Chassis::GEAR_PARKING;
const Chassis_GearPosition Chassis::GEAR_LOW;
const Chassis_GearPosition Chassis::GEAR_INVALID;
const Chassis_GearPosition Chassis::GEAR_NONE;
const Chassis_GearPosition Chassis::GearPosition_MIN;
const Chassis_GearPosition Chassis::GearPosition_MAX;
const int Chassis::GearPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chassis::kEngineStartedFieldNumber;
const int Chassis::kEngineRpmFieldNumber;
const int Chassis::kSpeedMpsFieldNumber;
const int Chassis::kOdometerMFieldNumber;
const int Chassis::kFuelRangeMFieldNumber;
const int Chassis::kThrottlePercentageFieldNumber;
const int Chassis::kBrakePercentageFieldNumber;
const int Chassis::kSteeringPercentageFieldNumber;
const int Chassis::kSteeringTorqueNmFieldNumber;
const int Chassis::kParkingBrakeFieldNumber;
const int Chassis::kWiperFieldNumber;
const int Chassis::kDisengageStatusFieldNumber;
const int Chassis::kDrivingModeFieldNumber;
const int Chassis::kErrorCodeFieldNumber;
const int Chassis::kGearLocationFieldNumber;
const int Chassis::kSteeringTimestampFieldNumber;
const int Chassis::kHeaderFieldNumber;
const int Chassis::kChassisErrorMaskFieldNumber;
const int Chassis::kSignalFieldNumber;
const int Chassis::kHighBeamSignalFieldNumber;
const int Chassis::kLowBeamSignalFieldNumber;
const int Chassis::kLeftTurnSignalFieldNumber;
const int Chassis::kRightTurnSignalFieldNumber;
const int Chassis::kHornFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chassis::Chassis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Chassis)
}

void Chassis::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  signal_ = const_cast< ::apollo::canbus::Signal*>(&::apollo::canbus::Signal::default_instance());
}

Chassis::Chassis(const Chassis& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Chassis)
}

void Chassis::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  engine_started_ = false;
  engine_rpm_ = 0;
  speed_mps_ = 0;
  odometer_m_ = 0;
  fuel_range_m_ = 0;
  throttle_percentage_ = 0;
  brake_percentage_ = 0;
  steering_percentage_ = 0;
  steering_torque_nm_ = 0;
  parking_brake_ = false;
  wiper_ = false;
  disengage_status_ = false;
  driving_mode_ = 0;
  error_code_ = 0;
  gear_location_ = 0;
  steering_timestamp_ = 0;
  header_ = NULL;
  chassis_error_mask_ = 0;
  signal_ = NULL;
  high_beam_signal_ = false;
  low_beam_signal_ = false;
  left_turn_signal_ = false;
  right_turn_signal_ = false;
  horn_ = false;
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete signal_;
  }
}

void Chassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chassis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chassis_descriptor_;
}

const Chassis& Chassis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  return *default_instance_;
}

Chassis* Chassis::default_instance_ = NULL;

Chassis* Chassis::New(::google::protobuf::Arena* arena) const {
  Chassis* n = new Chassis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Chassis)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Chassis, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Chassis*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(engine_rpm_, engine_started_);
  ZR_(parking_brake_, steering_timestamp_);
  ZR_(chassis_error_mask_, horn_);
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Chassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Chassis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool engine_started = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_started_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_engine_rpm;
        break;
      }

      // optional float engine_rpm = 4;
      case 4: {
        if (tag == 37) {
         parse_engine_rpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_rpm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_speed_mps;
        break;
      }

      // optional float speed_mps = 5;
      case 5: {
        if (tag == 45) {
         parse_speed_mps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_odometer_m;
        break;
      }

      // optional float odometer_m = 6;
      case 6: {
        if (tag == 53) {
         parse_odometer_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &odometer_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fuel_range_m;
        break;
      }

      // optional int32 fuel_range_m = 7;
      case 7: {
        if (tag == 56) {
         parse_fuel_range_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_range_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_throttle_percentage;
        break;
      }

      // optional float throttle_percentage = 8;
      case 8: {
        if (tag == 69) {
         parse_throttle_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_percentage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_brake_percentage;
        break;
      }

      // optional float brake_percentage = 9;
      case 9: {
        if (tag == 77) {
         parse_brake_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_percentage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_steering_percentage;
        break;
      }

      // optional float steering_percentage = 11;
      case 11: {
        if (tag == 93) {
         parse_steering_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_percentage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_steering_torque_nm;
        break;
      }

      // optional float steering_torque_nm = 12;
      case 12: {
        if (tag == 101) {
         parse_steering_torque_nm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_torque_nm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_parking_brake;
        break;
      }

      // optional bool parking_brake = 13;
      case 13: {
        if (tag == 104) {
         parse_parking_brake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_high_beam_signal;
        break;
      }

      // optional bool high_beam_signal = 14;
      case 14: {
        if (tag == 112) {
         parse_high_beam_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_signal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_low_beam_signal;
        break;
      }

      // optional bool low_beam_signal = 15;
      case 15: {
        if (tag == 120) {
         parse_low_beam_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_signal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_left_turn_signal;
        break;
      }

      // optional bool left_turn_signal = 16;
      case 16: {
        if (tag == 128) {
         parse_left_turn_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_turn_signal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_right_turn_signal;
        break;
      }

      // optional bool right_turn_signal = 17;
      case 17: {
        if (tag == 136) {
         parse_right_turn_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_turn_signal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_horn;
        break;
      }

      // optional bool horn = 18;
      case 18: {
        if (tag == 144) {
         parse_horn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_wiper;
        break;
      }

      // optional bool wiper = 19;
      case 19: {
        if (tag == 152) {
         parse_wiper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wiper_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_disengage_status;
        break;
      }

      // optional bool disengage_status = 20;
      case 20: {
        if (tag == 160) {
         parse_disengage_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disengage_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_driving_mode;
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21;
      case 21: {
        if (tag == 168) {
         parse_driving_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_error_code;
        break;
      }

      // optional .apollo.canbus.Chassis.ErrorCode error_code = 22;
      case 22: {
        if (tag == 176) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::apollo::canbus::Chassis_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gear_location;
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
      case 23: {
        if (tag == 184) {
         parse_gear_location:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear_location(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_steering_timestamp;
        break;
      }

      // optional double steering_timestamp = 24;
      case 24: {
        if (tag == 193) {
         parse_steering_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_header;
        break;
      }

      // optional .apollo.common.Header header = 25;
      case 25: {
        if (tag == 202) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_chassis_error_mask;
        break;
      }

      // optional int32 chassis_error_mask = 26;
      case 26: {
        if (tag == 208) {
         parse_chassis_error_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chassis_error_mask_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_signal;
        break;
      }

      // optional .apollo.canbus.Signal signal = 27;
      case 27: {
        if (tag == 218) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Chassis)
  return false;
#undef DO_
}

void Chassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Chassis)
  // optional bool engine_started = 3;
  if (this->engine_started() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->engine_started(), output);
  }

  // optional float engine_rpm = 4;
  if (this->engine_rpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->engine_rpm(), output);
  }

  // optional float speed_mps = 5;
  if (this->speed_mps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_mps(), output);
  }

  // optional float odometer_m = 6;
  if (this->odometer_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->odometer_m(), output);
  }

  // optional int32 fuel_range_m = 7;
  if (this->fuel_range_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fuel_range_m(), output);
  }

  // optional float throttle_percentage = 8;
  if (this->throttle_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->throttle_percentage(), output);
  }

  // optional float brake_percentage = 9;
  if (this->brake_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->brake_percentage(), output);
  }

  // optional float steering_percentage = 11;
  if (this->steering_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->steering_percentage(), output);
  }

  // optional float steering_torque_nm = 12;
  if (this->steering_torque_nm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->steering_torque_nm(), output);
  }

  // optional bool parking_brake = 13;
  if (this->parking_brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->parking_brake(), output);
  }

  // optional bool high_beam_signal = 14;
  if (this->high_beam_signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->high_beam_signal(), output);
  }

  // optional bool low_beam_signal = 15;
  if (this->low_beam_signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->low_beam_signal(), output);
  }

  // optional bool left_turn_signal = 16;
  if (this->left_turn_signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->left_turn_signal(), output);
  }

  // optional bool right_turn_signal = 17;
  if (this->right_turn_signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->right_turn_signal(), output);
  }

  // optional bool horn = 18;
  if (this->horn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->horn(), output);
  }

  // optional bool wiper = 19;
  if (this->wiper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->wiper(), output);
  }

  // optional bool disengage_status = 20;
  if (this->disengage_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->disengage_status(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21;
  if (this->driving_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->driving_mode(), output);
  }

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->error_code(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  if (this->gear_location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->gear_location(), output);
  }

  // optional double steering_timestamp = 24;
  if (this->steering_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->steering_timestamp(), output);
  }

  // optional .apollo.common.Header header = 25;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->header_, output);
  }

  // optional int32 chassis_error_mask = 26;
  if (this->chassis_error_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->chassis_error_mask(), output);
  }

  // optional .apollo.canbus.Signal signal = 27;
  if (this->has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->signal_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.canbus.Chassis)
}

::google::protobuf::uint8* Chassis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Chassis)
  // optional bool engine_started = 3;
  if (this->engine_started() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->engine_started(), target);
  }

  // optional float engine_rpm = 4;
  if (this->engine_rpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->engine_rpm(), target);
  }

  // optional float speed_mps = 5;
  if (this->speed_mps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed_mps(), target);
  }

  // optional float odometer_m = 6;
  if (this->odometer_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->odometer_m(), target);
  }

  // optional int32 fuel_range_m = 7;
  if (this->fuel_range_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fuel_range_m(), target);
  }

  // optional float throttle_percentage = 8;
  if (this->throttle_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->throttle_percentage(), target);
  }

  // optional float brake_percentage = 9;
  if (this->brake_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->brake_percentage(), target);
  }

  // optional float steering_percentage = 11;
  if (this->steering_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->steering_percentage(), target);
  }

  // optional float steering_torque_nm = 12;
  if (this->steering_torque_nm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->steering_torque_nm(), target);
  }

  // optional bool parking_brake = 13;
  if (this->parking_brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->parking_brake(), target);
  }

  // optional bool high_beam_signal = 14;
  if (this->high_beam_signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->high_beam_signal(), target);
  }

  // optional bool low_beam_signal = 15;
  if (this->low_beam_signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->low_beam_signal(), target);
  }

  // optional bool left_turn_signal = 16;
  if (this->left_turn_signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->left_turn_signal(), target);
  }

  // optional bool right_turn_signal = 17;
  if (this->right_turn_signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->right_turn_signal(), target);
  }

  // optional bool horn = 18;
  if (this->horn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->horn(), target);
  }

  // optional bool wiper = 19;
  if (this->wiper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->wiper(), target);
  }

  // optional bool disengage_status = 20;
  if (this->disengage_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->disengage_status(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21;
  if (this->driving_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->driving_mode(), target);
  }

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->error_code(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  if (this->gear_location() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->gear_location(), target);
  }

  // optional double steering_timestamp = 24;
  if (this->steering_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->steering_timestamp(), target);
  }

  // optional .apollo.common.Header header = 25;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->header_, false, target);
  }

  // optional int32 chassis_error_mask = 26;
  if (this->chassis_error_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->chassis_error_mask(), target);
  }

  // optional .apollo.canbus.Signal signal = 27;
  if (this->has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->signal_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Chassis)
  return target;
}

int Chassis::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Chassis)
  int total_size = 0;

  // optional bool engine_started = 3;
  if (this->engine_started() != 0) {
    total_size += 1 + 1;
  }

  // optional float engine_rpm = 4;
  if (this->engine_rpm() != 0) {
    total_size += 1 + 4;
  }

  // optional float speed_mps = 5;
  if (this->speed_mps() != 0) {
    total_size += 1 + 4;
  }

  // optional float odometer_m = 6;
  if (this->odometer_m() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 fuel_range_m = 7;
  if (this->fuel_range_m() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fuel_range_m());
  }

  // optional float throttle_percentage = 8;
  if (this->throttle_percentage() != 0) {
    total_size += 1 + 4;
  }

  // optional float brake_percentage = 9;
  if (this->brake_percentage() != 0) {
    total_size += 1 + 4;
  }

  // optional float steering_percentage = 11;
  if (this->steering_percentage() != 0) {
    total_size += 1 + 4;
  }

  // optional float steering_torque_nm = 12;
  if (this->steering_torque_nm() != 0) {
    total_size += 1 + 4;
  }

  // optional bool parking_brake = 13;
  if (this->parking_brake() != 0) {
    total_size += 1 + 1;
  }

  // optional bool wiper = 19;
  if (this->wiper() != 0) {
    total_size += 2 + 1;
  }

  // optional bool disengage_status = 20;
  if (this->disengage_status() != 0) {
    total_size += 2 + 1;
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21;
  if (this->driving_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
  }

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22;
  if (this->error_code() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  if (this->gear_location() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
  }

  // optional double steering_timestamp = 24;
  if (this->steering_timestamp() != 0) {
    total_size += 2 + 8;
  }

  // optional .apollo.common.Header header = 25;
  if (this->has_header()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional int32 chassis_error_mask = 26;
  if (this->chassis_error_mask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chassis_error_mask());
  }

  // optional .apollo.canbus.Signal signal = 27;
  if (this->has_signal()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signal_);
  }

  // optional bool high_beam_signal = 14;
  if (this->high_beam_signal() != 0) {
    total_size += 1 + 1;
  }

  // optional bool low_beam_signal = 15;
  if (this->low_beam_signal() != 0) {
    total_size += 1 + 1;
  }

  // optional bool left_turn_signal = 16;
  if (this->left_turn_signal() != 0) {
    total_size += 2 + 1;
  }

  // optional bool right_turn_signal = 17;
  if (this->right_turn_signal() != 0) {
    total_size += 2 + 1;
  }

  // optional bool horn = 18;
  if (this->horn() != 0) {
    total_size += 2 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chassis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Chassis)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Chassis* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Chassis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Chassis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Chassis)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.engine_started() != 0) {
    set_engine_started(from.engine_started());
  }
  if (from.engine_rpm() != 0) {
    set_engine_rpm(from.engine_rpm());
  }
  if (from.speed_mps() != 0) {
    set_speed_mps(from.speed_mps());
  }
  if (from.odometer_m() != 0) {
    set_odometer_m(from.odometer_m());
  }
  if (from.fuel_range_m() != 0) {
    set_fuel_range_m(from.fuel_range_m());
  }
  if (from.throttle_percentage() != 0) {
    set_throttle_percentage(from.throttle_percentage());
  }
  if (from.brake_percentage() != 0) {
    set_brake_percentage(from.brake_percentage());
  }
  if (from.steering_percentage() != 0) {
    set_steering_percentage(from.steering_percentage());
  }
  if (from.steering_torque_nm() != 0) {
    set_steering_torque_nm(from.steering_torque_nm());
  }
  if (from.parking_brake() != 0) {
    set_parking_brake(from.parking_brake());
  }
  if (from.wiper() != 0) {
    set_wiper(from.wiper());
  }
  if (from.disengage_status() != 0) {
    set_disengage_status(from.disengage_status());
  }
  if (from.driving_mode() != 0) {
    set_driving_mode(from.driving_mode());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.gear_location() != 0) {
    set_gear_location(from.gear_location());
  }
  if (from.steering_timestamp() != 0) {
    set_steering_timestamp(from.steering_timestamp());
  }
  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.chassis_error_mask() != 0) {
    set_chassis_error_mask(from.chassis_error_mask());
  }
  if (from.has_signal()) {
    mutable_signal()->::apollo::canbus::Signal::MergeFrom(from.signal());
  }
  if (from.high_beam_signal() != 0) {
    set_high_beam_signal(from.high_beam_signal());
  }
  if (from.low_beam_signal() != 0) {
    set_low_beam_signal(from.low_beam_signal());
  }
  if (from.left_turn_signal() != 0) {
    set_left_turn_signal(from.left_turn_signal());
  }
  if (from.right_turn_signal() != 0) {
    set_right_turn_signal(from.right_turn_signal());
  }
  if (from.horn() != 0) {
    set_horn(from.horn());
  }
}

void Chassis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {

  return true;
}

void Chassis::Swap(Chassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chassis::InternalSwap(Chassis* other) {
  std::swap(engine_started_, other->engine_started_);
  std::swap(engine_rpm_, other->engine_rpm_);
  std::swap(speed_mps_, other->speed_mps_);
  std::swap(odometer_m_, other->odometer_m_);
  std::swap(fuel_range_m_, other->fuel_range_m_);
  std::swap(throttle_percentage_, other->throttle_percentage_);
  std::swap(brake_percentage_, other->brake_percentage_);
  std::swap(steering_percentage_, other->steering_percentage_);
  std::swap(steering_torque_nm_, other->steering_torque_nm_);
  std::swap(parking_brake_, other->parking_brake_);
  std::swap(wiper_, other->wiper_);
  std::swap(disengage_status_, other->disengage_status_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(error_code_, other->error_code_);
  std::swap(gear_location_, other->gear_location_);
  std::swap(steering_timestamp_, other->steering_timestamp_);
  std::swap(header_, other->header_);
  std::swap(chassis_error_mask_, other->chassis_error_mask_);
  std::swap(signal_, other->signal_);
  std::swap(high_beam_signal_, other->high_beam_signal_);
  std::swap(low_beam_signal_, other->low_beam_signal_);
  std::swap(left_turn_signal_, other->left_turn_signal_);
  std::swap(right_turn_signal_, other->right_turn_signal_);
  std::swap(horn_, other->horn_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chassis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chassis_descriptor_;
  metadata.reflection = Chassis_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chassis

// optional bool engine_started = 3;
void Chassis::clear_engine_started() {
  engine_started_ = false;
}
 bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engine_started)
  return engine_started_;
}
 void Chassis::set_engine_started(bool value) {
  
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.engine_started)
}

// optional float engine_rpm = 4;
void Chassis::clear_engine_rpm() {
  engine_rpm_ = 0;
}
 float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engine_rpm)
  return engine_rpm_;
}
 void Chassis::set_engine_rpm(float value) {
  
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.engine_rpm)
}

// optional float speed_mps = 5;
void Chassis::clear_speed_mps() {
  speed_mps_ = 0;
}
 float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.speed_mps)
  return speed_mps_;
}
 void Chassis::set_speed_mps(float value) {
  
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.speed_mps)
}

// optional float odometer_m = 6;
void Chassis::clear_odometer_m() {
  odometer_m_ = 0;
}
 float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.odometer_m)
  return odometer_m_;
}
 void Chassis::set_odometer_m(float value) {
  
  odometer_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.odometer_m)
}

// optional int32 fuel_range_m = 7;
void Chassis::clear_fuel_range_m() {
  fuel_range_m_ = 0;
}
 ::google::protobuf::int32 Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.fuel_range_m)
  return fuel_range_m_;
}
 void Chassis::set_fuel_range_m(::google::protobuf::int32 value) {
  
  fuel_range_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.fuel_range_m)
}

// optional float throttle_percentage = 8;
void Chassis::clear_throttle_percentage() {
  throttle_percentage_ = 0;
}
 float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.throttle_percentage)
  return throttle_percentage_;
}
 void Chassis::set_throttle_percentage(float value) {
  
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.throttle_percentage)
}

// optional float brake_percentage = 9;
void Chassis::clear_brake_percentage() {
  brake_percentage_ = 0;
}
 float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.brake_percentage)
  return brake_percentage_;
}
 void Chassis::set_brake_percentage(float value) {
  
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.brake_percentage)
}

// optional float steering_percentage = 11;
void Chassis::clear_steering_percentage() {
  steering_percentage_ = 0;
}
 float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_percentage)
  return steering_percentage_;
}
 void Chassis::set_steering_percentage(float value) {
  
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_percentage)
}

// optional float steering_torque_nm = 12;
void Chassis::clear_steering_torque_nm() {
  steering_torque_nm_ = 0;
}
 float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_torque_nm)
  return steering_torque_nm_;
}
 void Chassis::set_steering_torque_nm(float value) {
  
  steering_torque_nm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_torque_nm)
}

// optional bool parking_brake = 13;
void Chassis::clear_parking_brake() {
  parking_brake_ = false;
}
 bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.parking_brake)
  return parking_brake_;
}
 void Chassis::set_parking_brake(bool value) {
  
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.parking_brake)
}

// optional bool wiper = 19;
void Chassis::clear_wiper() {
  wiper_ = false;
}
 bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.wiper)
  return wiper_;
}
 void Chassis::set_wiper(bool value) {
  
  wiper_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.wiper)
}

// optional bool disengage_status = 20;
void Chassis::clear_disengage_status() {
  disengage_status_ = false;
}
 bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.disengage_status)
  return disengage_status_;
}
 void Chassis::set_disengage_status(bool value) {
  
  disengage_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.disengage_status)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21;
void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
}
 ::apollo::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
 void Chassis::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.driving_mode)
}

// optional .apollo.canbus.Chassis.ErrorCode error_code = 22;
void Chassis::clear_error_code() {
  error_code_ = 0;
}
 ::apollo::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.error_code)
  return static_cast< ::apollo::canbus::Chassis_ErrorCode >(error_code_);
}
 void Chassis::set_error_code(::apollo::canbus::Chassis_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.error_code)
}

// optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
void Chassis::clear_gear_location() {
  gear_location_ = 0;
}
 ::apollo::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.gear_location)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_location_);
}
 void Chassis::set_gear_location(::apollo::canbus::Chassis_GearPosition value) {
  
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.gear_location)
}

// optional double steering_timestamp = 24;
void Chassis::clear_steering_timestamp() {
  steering_timestamp_ = 0;
}
 double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_timestamp)
  return steering_timestamp_;
}
 void Chassis::set_steering_timestamp(double value) {
  
  steering_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_timestamp)
}

// optional .apollo.common.Header header = 25;
bool Chassis::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void Chassis::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::apollo::common::Header& Chassis::header() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* Chassis::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.header)
  return header_;
}
::apollo::common::Header* Chassis::release_header() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Chassis::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.header)
}

// optional int32 chassis_error_mask = 26;
void Chassis::clear_chassis_error_mask() {
  chassis_error_mask_ = 0;
}
 ::google::protobuf::int32 Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.chassis_error_mask)
  return chassis_error_mask_;
}
 void Chassis::set_chassis_error_mask(::google::protobuf::int32 value) {
  
  chassis_error_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.chassis_error_mask)
}

// optional .apollo.canbus.Signal signal = 27;
bool Chassis::has_signal() const {
  return !_is_default_instance_ && signal_ != NULL;
}
void Chassis::clear_signal() {
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;
}
const ::apollo::canbus::Signal& Chassis::signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
::apollo::canbus::Signal* Chassis::mutable_signal() {
  
  if (signal_ == NULL) {
    signal_ = new ::apollo::canbus::Signal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.signal)
  return signal_;
}
::apollo::canbus::Signal* Chassis::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.signal)
  
  ::apollo::canbus::Signal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void Chassis::set_allocated_signal(::apollo::canbus::Signal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.signal)
}

// optional bool high_beam_signal = 14;
void Chassis::clear_high_beam_signal() {
  high_beam_signal_ = false;
}
 bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.high_beam_signal)
  return high_beam_signal_;
}
 void Chassis::set_high_beam_signal(bool value) {
  
  high_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.high_beam_signal)
}

// optional bool low_beam_signal = 15;
void Chassis::clear_low_beam_signal() {
  low_beam_signal_ = false;
}
 bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.low_beam_signal)
  return low_beam_signal_;
}
 void Chassis::set_low_beam_signal(bool value) {
  
  low_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.low_beam_signal)
}

// optional bool left_turn_signal = 16;
void Chassis::clear_left_turn_signal() {
  left_turn_signal_ = false;
}
 bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.left_turn_signal)
  return left_turn_signal_;
}
 void Chassis::set_left_turn_signal(bool value) {
  
  left_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.left_turn_signal)
}

// optional bool right_turn_signal = 17;
void Chassis::clear_right_turn_signal() {
  right_turn_signal_ = false;
}
 bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.right_turn_signal)
  return right_turn_signal_;
}
 void Chassis::set_right_turn_signal(bool value) {
  
  right_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.right_turn_signal)
}

// optional bool horn = 18;
void Chassis::clear_horn() {
  horn_ = false;
}
 bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.horn)
  return horn_;
}
 void Chassis::set_horn(bool value) {
  
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.horn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
