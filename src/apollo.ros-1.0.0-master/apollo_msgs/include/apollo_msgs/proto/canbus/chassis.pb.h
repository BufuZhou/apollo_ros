// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/canbus/chassis.proto

#ifndef PROTOBUF_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto__INCLUDED
#define PROTOBUF_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "apollo_msgs/proto/common/header.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace canbus {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();

class Chassis;
class Signal;

enum Signal_TurnSignal {
  Signal_TurnSignal_TURN_NONE = 0,
  Signal_TurnSignal_TURN_LEFT = 1,
  Signal_TurnSignal_TURN_RIGHT = 2,
  Signal_TurnSignal_Signal_TurnSignal_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Signal_TurnSignal_Signal_TurnSignal_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Signal_TurnSignal_IsValid(int value);
const Signal_TurnSignal Signal_TurnSignal_TurnSignal_MIN = Signal_TurnSignal_TURN_NONE;
const Signal_TurnSignal Signal_TurnSignal_TurnSignal_MAX = Signal_TurnSignal_TURN_RIGHT;
const int Signal_TurnSignal_TurnSignal_ARRAYSIZE = Signal_TurnSignal_TurnSignal_MAX + 1;

const ::google::protobuf::EnumDescriptor* Signal_TurnSignal_descriptor();
inline const ::std::string& Signal_TurnSignal_Name(Signal_TurnSignal value) {
  return ::google::protobuf::internal::NameOfEnum(
    Signal_TurnSignal_descriptor(), value);
}
inline bool Signal_TurnSignal_Parse(
    const ::std::string& name, Signal_TurnSignal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Signal_TurnSignal>(
    Signal_TurnSignal_descriptor(), name, value);
}
enum Chassis_DrivingMode {
  Chassis_DrivingMode_COMPLETE_MANUAL = 0,
  Chassis_DrivingMode_COMPLETE_AUTO_DRIVE = 1,
  Chassis_DrivingMode_AUTO_STEER_ONLY = 2,
  Chassis_DrivingMode_AUTO_SPEED_ONLY = 3,
  Chassis_DrivingMode_EMERGENCY_MODE = 4,
  Chassis_DrivingMode_Chassis_DrivingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Chassis_DrivingMode_Chassis_DrivingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Chassis_DrivingMode_IsValid(int value);
const Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MIN = Chassis_DrivingMode_COMPLETE_MANUAL;
const Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MAX = Chassis_DrivingMode_EMERGENCY_MODE;
const int Chassis_DrivingMode_DrivingMode_ARRAYSIZE = Chassis_DrivingMode_DrivingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor();
inline const ::std::string& Chassis_DrivingMode_Name(Chassis_DrivingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_DrivingMode_descriptor(), value);
}
inline bool Chassis_DrivingMode_Parse(
    const ::std::string& name, Chassis_DrivingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_DrivingMode>(
    Chassis_DrivingMode_descriptor(), name, value);
}
enum Chassis_ErrorCode {
  Chassis_ErrorCode_NO_ERROR = 0,
  Chassis_ErrorCode_CMD_NOT_IN_PERIOD = 1,
  Chassis_ErrorCode_CHASSIS_ERROR = 2,
  Chassis_ErrorCode_MANUAL_INTERVENTION = 3,
  Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD = 4,
  Chassis_ErrorCode_UNKNOWN_ERROR = 5,
  Chassis_ErrorCode_Chassis_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Chassis_ErrorCode_Chassis_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Chassis_ErrorCode_IsValid(int value);
const Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MIN = Chassis_ErrorCode_NO_ERROR;
const Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MAX = Chassis_ErrorCode_UNKNOWN_ERROR;
const int Chassis_ErrorCode_ErrorCode_ARRAYSIZE = Chassis_ErrorCode_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor();
inline const ::std::string& Chassis_ErrorCode_Name(Chassis_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_ErrorCode_descriptor(), value);
}
inline bool Chassis_ErrorCode_Parse(
    const ::std::string& name, Chassis_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_ErrorCode>(
    Chassis_ErrorCode_descriptor(), name, value);
}
enum Chassis_GearPosition {
  Chassis_GearPosition_GEAR_NEUTRAL = 0,
  Chassis_GearPosition_GEAR_DRIVE = 1,
  Chassis_GearPosition_GEAR_REVERSE = 2,
  Chassis_GearPosition_GEAR_PARKING = 3,
  Chassis_GearPosition_GEAR_LOW = 4,
  Chassis_GearPosition_GEAR_INVALID = 5,
  Chassis_GearPosition_GEAR_NONE = 6,
  Chassis_GearPosition_Chassis_GearPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Chassis_GearPosition_Chassis_GearPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Chassis_GearPosition_IsValid(int value);
const Chassis_GearPosition Chassis_GearPosition_GearPosition_MIN = Chassis_GearPosition_GEAR_NEUTRAL;
const Chassis_GearPosition Chassis_GearPosition_GearPosition_MAX = Chassis_GearPosition_GEAR_NONE;
const int Chassis_GearPosition_GearPosition_ARRAYSIZE = Chassis_GearPosition_GearPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor();
inline const ::std::string& Chassis_GearPosition_Name(Chassis_GearPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_GearPosition_descriptor(), value);
}
inline bool Chassis_GearPosition_Parse(
    const ::std::string& name, Chassis_GearPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_GearPosition>(
    Chassis_GearPosition_descriptor(), name, value);
}
// ===================================================================

class Signal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Signal) */ {
 public:
  Signal();
  virtual ~Signal();

  Signal(const Signal& from);

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signal& default_instance();

  void Swap(Signal* other);

  // implements Message ----------------------------------------------

  inline Signal* New() const { return New(NULL); }

  Signal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Signal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Signal_TurnSignal TurnSignal;
  static const TurnSignal TURN_NONE =
    Signal_TurnSignal_TURN_NONE;
  static const TurnSignal TURN_LEFT =
    Signal_TurnSignal_TURN_LEFT;
  static const TurnSignal TURN_RIGHT =
    Signal_TurnSignal_TURN_RIGHT;
  static inline bool TurnSignal_IsValid(int value) {
    return Signal_TurnSignal_IsValid(value);
  }
  static const TurnSignal TurnSignal_MIN =
    Signal_TurnSignal_TurnSignal_MIN;
  static const TurnSignal TurnSignal_MAX =
    Signal_TurnSignal_TurnSignal_MAX;
  static const int TurnSignal_ARRAYSIZE =
    Signal_TurnSignal_TurnSignal_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TurnSignal_descriptor() {
    return Signal_TurnSignal_descriptor();
  }
  static inline const ::std::string& TurnSignal_Name(TurnSignal value) {
    return Signal_TurnSignal_Name(value);
  }
  static inline bool TurnSignal_Parse(const ::std::string& name,
      TurnSignal* value) {
    return Signal_TurnSignal_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.canbus.Signal.TurnSignal turn_signal = 1;
  void clear_turn_signal();
  static const int kTurnSignalFieldNumber = 1;
  ::apollo::canbus::Signal_TurnSignal turn_signal() const;
  void set_turn_signal(::apollo::canbus::Signal_TurnSignal value);

  // optional bool high_beam = 2;
  void clear_high_beam();
  static const int kHighBeamFieldNumber = 2;
  bool high_beam() const;
  void set_high_beam(bool value);

  // optional bool low_beam = 3;
  void clear_low_beam();
  static const int kLowBeamFieldNumber = 3;
  bool low_beam() const;
  void set_low_beam(bool value);

  // optional bool horn = 4;
  void clear_horn();
  static const int kHornFieldNumber = 4;
  bool horn() const;
  void set_horn(bool value);

  // optional bool emergency_light = 5;
  void clear_emergency_light();
  static const int kEmergencyLightFieldNumber = 5;
  bool emergency_light() const;
  void set_emergency_light(bool value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Signal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int turn_signal_;
  bool high_beam_;
  bool low_beam_;
  bool horn_;
  bool emergency_light_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();

  void InitAsDefaultInstance();
  static Signal* default_instance_;
};
// -------------------------------------------------------------------

class Chassis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Chassis) */ {
 public:
  Chassis();
  virtual ~Chassis();

  Chassis(const Chassis& from);

  inline Chassis& operator=(const Chassis& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chassis& default_instance();

  void Swap(Chassis* other);

  // implements Message ----------------------------------------------

  inline Chassis* New() const { return New(NULL); }

  Chassis* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chassis& from);
  void MergeFrom(const Chassis& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Chassis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Chassis_DrivingMode DrivingMode;
  static const DrivingMode COMPLETE_MANUAL =
    Chassis_DrivingMode_COMPLETE_MANUAL;
  static const DrivingMode COMPLETE_AUTO_DRIVE =
    Chassis_DrivingMode_COMPLETE_AUTO_DRIVE;
  static const DrivingMode AUTO_STEER_ONLY =
    Chassis_DrivingMode_AUTO_STEER_ONLY;
  static const DrivingMode AUTO_SPEED_ONLY =
    Chassis_DrivingMode_AUTO_SPEED_ONLY;
  static const DrivingMode EMERGENCY_MODE =
    Chassis_DrivingMode_EMERGENCY_MODE;
  static inline bool DrivingMode_IsValid(int value) {
    return Chassis_DrivingMode_IsValid(value);
  }
  static const DrivingMode DrivingMode_MIN =
    Chassis_DrivingMode_DrivingMode_MIN;
  static const DrivingMode DrivingMode_MAX =
    Chassis_DrivingMode_DrivingMode_MAX;
  static const int DrivingMode_ARRAYSIZE =
    Chassis_DrivingMode_DrivingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DrivingMode_descriptor() {
    return Chassis_DrivingMode_descriptor();
  }
  static inline const ::std::string& DrivingMode_Name(DrivingMode value) {
    return Chassis_DrivingMode_Name(value);
  }
  static inline bool DrivingMode_Parse(const ::std::string& name,
      DrivingMode* value) {
    return Chassis_DrivingMode_Parse(name, value);
  }

  typedef Chassis_ErrorCode ErrorCode;
  static const ErrorCode NO_ERROR =
    Chassis_ErrorCode_NO_ERROR;
  static const ErrorCode CMD_NOT_IN_PERIOD =
    Chassis_ErrorCode_CMD_NOT_IN_PERIOD;
  static const ErrorCode CHASSIS_ERROR =
    Chassis_ErrorCode_CHASSIS_ERROR;
  static const ErrorCode MANUAL_INTERVENTION =
    Chassis_ErrorCode_MANUAL_INTERVENTION;
  static const ErrorCode CHASSIS_CAN_NOT_IN_PERIOD =
    Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD;
  static const ErrorCode UNKNOWN_ERROR =
    Chassis_ErrorCode_UNKNOWN_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return Chassis_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    Chassis_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    Chassis_ErrorCode_ErrorCode_MAX;
  static const int ErrorCode_ARRAYSIZE =
    Chassis_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return Chassis_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return Chassis_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return Chassis_ErrorCode_Parse(name, value);
  }

  typedef Chassis_GearPosition GearPosition;
  static const GearPosition GEAR_NEUTRAL =
    Chassis_GearPosition_GEAR_NEUTRAL;
  static const GearPosition GEAR_DRIVE =
    Chassis_GearPosition_GEAR_DRIVE;
  static const GearPosition GEAR_REVERSE =
    Chassis_GearPosition_GEAR_REVERSE;
  static const GearPosition GEAR_PARKING =
    Chassis_GearPosition_GEAR_PARKING;
  static const GearPosition GEAR_LOW =
    Chassis_GearPosition_GEAR_LOW;
  static const GearPosition GEAR_INVALID =
    Chassis_GearPosition_GEAR_INVALID;
  static const GearPosition GEAR_NONE =
    Chassis_GearPosition_GEAR_NONE;
  static inline bool GearPosition_IsValid(int value) {
    return Chassis_GearPosition_IsValid(value);
  }
  static const GearPosition GearPosition_MIN =
    Chassis_GearPosition_GearPosition_MIN;
  static const GearPosition GearPosition_MAX =
    Chassis_GearPosition_GearPosition_MAX;
  static const int GearPosition_ARRAYSIZE =
    Chassis_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GearPosition_descriptor() {
    return Chassis_GearPosition_descriptor();
  }
  static inline const ::std::string& GearPosition_Name(GearPosition value) {
    return Chassis_GearPosition_Name(value);
  }
  static inline bool GearPosition_Parse(const ::std::string& name,
      GearPosition* value) {
    return Chassis_GearPosition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool engine_started = 3;
  void clear_engine_started();
  static const int kEngineStartedFieldNumber = 3;
  bool engine_started() const;
  void set_engine_started(bool value);

  // optional float engine_rpm = 4;
  void clear_engine_rpm();
  static const int kEngineRpmFieldNumber = 4;
  float engine_rpm() const;
  void set_engine_rpm(float value);

  // optional float speed_mps = 5;
  void clear_speed_mps();
  static const int kSpeedMpsFieldNumber = 5;
  float speed_mps() const;
  void set_speed_mps(float value);

  // optional float odometer_m = 6;
  void clear_odometer_m();
  static const int kOdometerMFieldNumber = 6;
  float odometer_m() const;
  void set_odometer_m(float value);

  // optional int32 fuel_range_m = 7;
  void clear_fuel_range_m();
  static const int kFuelRangeMFieldNumber = 7;
  ::google::protobuf::int32 fuel_range_m() const;
  void set_fuel_range_m(::google::protobuf::int32 value);

  // optional float throttle_percentage = 8;
  void clear_throttle_percentage();
  static const int kThrottlePercentageFieldNumber = 8;
  float throttle_percentage() const;
  void set_throttle_percentage(float value);

  // optional float brake_percentage = 9;
  void clear_brake_percentage();
  static const int kBrakePercentageFieldNumber = 9;
  float brake_percentage() const;
  void set_brake_percentage(float value);

  // optional float steering_percentage = 11;
  void clear_steering_percentage();
  static const int kSteeringPercentageFieldNumber = 11;
  float steering_percentage() const;
  void set_steering_percentage(float value);

  // optional float steering_torque_nm = 12;
  void clear_steering_torque_nm();
  static const int kSteeringTorqueNmFieldNumber = 12;
  float steering_torque_nm() const;
  void set_steering_torque_nm(float value);

  // optional bool parking_brake = 13;
  void clear_parking_brake();
  static const int kParkingBrakeFieldNumber = 13;
  bool parking_brake() const;
  void set_parking_brake(bool value);

  // optional bool wiper = 19;
  void clear_wiper();
  static const int kWiperFieldNumber = 19;
  bool wiper() const;
  void set_wiper(bool value);

  // optional bool disengage_status = 20;
  void clear_disengage_status();
  static const int kDisengageStatusFieldNumber = 20;
  bool disengage_status() const;
  void set_disengage_status(bool value);

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 21;
  ::apollo::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 22;
  ::apollo::canbus::Chassis_ErrorCode error_code() const;
  void set_error_code(::apollo::canbus::Chassis_ErrorCode value);

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  void clear_gear_location();
  static const int kGearLocationFieldNumber = 23;
  ::apollo::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::apollo::canbus::Chassis_GearPosition value);

  // optional double steering_timestamp = 24;
  void clear_steering_timestamp();
  static const int kSteeringTimestampFieldNumber = 24;
  double steering_timestamp() const;
  void set_steering_timestamp(double value);

  // optional .apollo.common.Header header = 25;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 25;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional int32 chassis_error_mask = 26;
  void clear_chassis_error_mask();
  static const int kChassisErrorMaskFieldNumber = 26;
  ::google::protobuf::int32 chassis_error_mask() const;
  void set_chassis_error_mask(::google::protobuf::int32 value);

  // optional .apollo.canbus.Signal signal = 27;
  bool has_signal() const;
  void clear_signal();
  static const int kSignalFieldNumber = 27;
  const ::apollo::canbus::Signal& signal() const;
  ::apollo::canbus::Signal* mutable_signal();
  ::apollo::canbus::Signal* release_signal();
  void set_allocated_signal(::apollo::canbus::Signal* signal);

  // optional bool high_beam_signal = 14;
  void clear_high_beam_signal();
  static const int kHighBeamSignalFieldNumber = 14;
  bool high_beam_signal() const;
  void set_high_beam_signal(bool value);

  // optional bool low_beam_signal = 15;
  void clear_low_beam_signal();
  static const int kLowBeamSignalFieldNumber = 15;
  bool low_beam_signal() const;
  void set_low_beam_signal(bool value);

  // optional bool left_turn_signal = 16;
  void clear_left_turn_signal();
  static const int kLeftTurnSignalFieldNumber = 16;
  bool left_turn_signal() const;
  void set_left_turn_signal(bool value);

  // optional bool right_turn_signal = 17;
  void clear_right_turn_signal();
  static const int kRightTurnSignalFieldNumber = 17;
  bool right_turn_signal() const;
  void set_right_turn_signal(bool value);

  // optional bool horn = 18;
  void clear_horn();
  static const int kHornFieldNumber = 18;
  bool horn() const;
  void set_horn(bool value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Chassis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float engine_rpm_;
  float speed_mps_;
  float odometer_m_;
  ::google::protobuf::int32 fuel_range_m_;
  float throttle_percentage_;
  float brake_percentage_;
  float steering_percentage_;
  bool engine_started_;
  bool parking_brake_;
  bool wiper_;
  bool disengage_status_;
  float steering_torque_nm_;
  int driving_mode_;
  int error_code_;
  int gear_location_;
  double steering_timestamp_;
  ::apollo::common::Header* header_;
  ::apollo::canbus::Signal* signal_;
  ::google::protobuf::int32 chassis_error_mask_;
  bool high_beam_signal_;
  bool low_beam_signal_;
  bool left_turn_signal_;
  bool right_turn_signal_;
  bool horn_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();

  void InitAsDefaultInstance();
  static Chassis* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Signal

// optional .apollo.canbus.Signal.TurnSignal turn_signal = 1;
inline void Signal::clear_turn_signal() {
  turn_signal_ = 0;
}
inline ::apollo::canbus::Signal_TurnSignal Signal::turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Signal.turn_signal)
  return static_cast< ::apollo::canbus::Signal_TurnSignal >(turn_signal_);
}
inline void Signal::set_turn_signal(::apollo::canbus::Signal_TurnSignal value) {
  
  turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Signal.turn_signal)
}

// optional bool high_beam = 2;
inline void Signal::clear_high_beam() {
  high_beam_ = false;
}
inline bool Signal::high_beam() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Signal.high_beam)
  return high_beam_;
}
inline void Signal::set_high_beam(bool value) {
  
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Signal.high_beam)
}

// optional bool low_beam = 3;
inline void Signal::clear_low_beam() {
  low_beam_ = false;
}
inline bool Signal::low_beam() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Signal.low_beam)
  return low_beam_;
}
inline void Signal::set_low_beam(bool value) {
  
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Signal.low_beam)
}

// optional bool horn = 4;
inline void Signal::clear_horn() {
  horn_ = false;
}
inline bool Signal::horn() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Signal.horn)
  return horn_;
}
inline void Signal::set_horn(bool value) {
  
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Signal.horn)
}

// optional bool emergency_light = 5;
inline void Signal::clear_emergency_light() {
  emergency_light_ = false;
}
inline bool Signal::emergency_light() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Signal.emergency_light)
  return emergency_light_;
}
inline void Signal::set_emergency_light(bool value) {
  
  emergency_light_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Signal.emergency_light)
}

// -------------------------------------------------------------------

// Chassis

// optional bool engine_started = 3;
inline void Chassis::clear_engine_started() {
  engine_started_ = false;
}
inline bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engine_started)
  return engine_started_;
}
inline void Chassis::set_engine_started(bool value) {
  
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.engine_started)
}

// optional float engine_rpm = 4;
inline void Chassis::clear_engine_rpm() {
  engine_rpm_ = 0;
}
inline float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engine_rpm)
  return engine_rpm_;
}
inline void Chassis::set_engine_rpm(float value) {
  
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.engine_rpm)
}

// optional float speed_mps = 5;
inline void Chassis::clear_speed_mps() {
  speed_mps_ = 0;
}
inline float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.speed_mps)
  return speed_mps_;
}
inline void Chassis::set_speed_mps(float value) {
  
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.speed_mps)
}

// optional float odometer_m = 6;
inline void Chassis::clear_odometer_m() {
  odometer_m_ = 0;
}
inline float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.odometer_m)
  return odometer_m_;
}
inline void Chassis::set_odometer_m(float value) {
  
  odometer_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.odometer_m)
}

// optional int32 fuel_range_m = 7;
inline void Chassis::clear_fuel_range_m() {
  fuel_range_m_ = 0;
}
inline ::google::protobuf::int32 Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.fuel_range_m)
  return fuel_range_m_;
}
inline void Chassis::set_fuel_range_m(::google::protobuf::int32 value) {
  
  fuel_range_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.fuel_range_m)
}

// optional float throttle_percentage = 8;
inline void Chassis::clear_throttle_percentage() {
  throttle_percentage_ = 0;
}
inline float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.throttle_percentage)
  return throttle_percentage_;
}
inline void Chassis::set_throttle_percentage(float value) {
  
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.throttle_percentage)
}

// optional float brake_percentage = 9;
inline void Chassis::clear_brake_percentage() {
  brake_percentage_ = 0;
}
inline float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.brake_percentage)
  return brake_percentage_;
}
inline void Chassis::set_brake_percentage(float value) {
  
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.brake_percentage)
}

// optional float steering_percentage = 11;
inline void Chassis::clear_steering_percentage() {
  steering_percentage_ = 0;
}
inline float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_percentage)
  return steering_percentage_;
}
inline void Chassis::set_steering_percentage(float value) {
  
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_percentage)
}

// optional float steering_torque_nm = 12;
inline void Chassis::clear_steering_torque_nm() {
  steering_torque_nm_ = 0;
}
inline float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_torque_nm)
  return steering_torque_nm_;
}
inline void Chassis::set_steering_torque_nm(float value) {
  
  steering_torque_nm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_torque_nm)
}

// optional bool parking_brake = 13;
inline void Chassis::clear_parking_brake() {
  parking_brake_ = false;
}
inline bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.parking_brake)
  return parking_brake_;
}
inline void Chassis::set_parking_brake(bool value) {
  
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.parking_brake)
}

// optional bool wiper = 19;
inline void Chassis::clear_wiper() {
  wiper_ = false;
}
inline bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.wiper)
  return wiper_;
}
inline void Chassis::set_wiper(bool value) {
  
  wiper_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.wiper)
}

// optional bool disengage_status = 20;
inline void Chassis::clear_disengage_status() {
  disengage_status_ = false;
}
inline bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.disengage_status)
  return disengage_status_;
}
inline void Chassis::set_disengage_status(bool value) {
  
  disengage_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.disengage_status)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21;
inline void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
}
inline ::apollo::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void Chassis::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.driving_mode)
}

// optional .apollo.canbus.Chassis.ErrorCode error_code = 22;
inline void Chassis::clear_error_code() {
  error_code_ = 0;
}
inline ::apollo::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.error_code)
  return static_cast< ::apollo::canbus::Chassis_ErrorCode >(error_code_);
}
inline void Chassis::set_error_code(::apollo::canbus::Chassis_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.error_code)
}

// optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
inline void Chassis::clear_gear_location() {
  gear_location_ = 0;
}
inline ::apollo::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.gear_location)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_location_);
}
inline void Chassis::set_gear_location(::apollo::canbus::Chassis_GearPosition value) {
  
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.gear_location)
}

// optional double steering_timestamp = 24;
inline void Chassis::clear_steering_timestamp() {
  steering_timestamp_ = 0;
}
inline double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_timestamp)
  return steering_timestamp_;
}
inline void Chassis::set_steering_timestamp(double value) {
  
  steering_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_timestamp)
}

// optional .apollo.common.Header header = 25;
inline bool Chassis::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void Chassis::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::apollo::common::Header& Chassis::header() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* Chassis::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.header)
  return header_;
}
inline ::apollo::common::Header* Chassis::release_header() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.header)
}

// optional int32 chassis_error_mask = 26;
inline void Chassis::clear_chassis_error_mask() {
  chassis_error_mask_ = 0;
}
inline ::google::protobuf::int32 Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.chassis_error_mask)
  return chassis_error_mask_;
}
inline void Chassis::set_chassis_error_mask(::google::protobuf::int32 value) {
  
  chassis_error_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.chassis_error_mask)
}

// optional .apollo.canbus.Signal signal = 27;
inline bool Chassis::has_signal() const {
  return !_is_default_instance_ && signal_ != NULL;
}
inline void Chassis::clear_signal() {
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;
}
inline const ::apollo::canbus::Signal& Chassis::signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
inline ::apollo::canbus::Signal* Chassis::mutable_signal() {
  
  if (signal_ == NULL) {
    signal_ = new ::apollo::canbus::Signal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.signal)
  return signal_;
}
inline ::apollo::canbus::Signal* Chassis::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.signal)
  
  ::apollo::canbus::Signal* temp = signal_;
  signal_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_signal(::apollo::canbus::Signal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.signal)
}

// optional bool high_beam_signal = 14;
inline void Chassis::clear_high_beam_signal() {
  high_beam_signal_ = false;
}
inline bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.high_beam_signal)
  return high_beam_signal_;
}
inline void Chassis::set_high_beam_signal(bool value) {
  
  high_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.high_beam_signal)
}

// optional bool low_beam_signal = 15;
inline void Chassis::clear_low_beam_signal() {
  low_beam_signal_ = false;
}
inline bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.low_beam_signal)
  return low_beam_signal_;
}
inline void Chassis::set_low_beam_signal(bool value) {
  
  low_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.low_beam_signal)
}

// optional bool left_turn_signal = 16;
inline void Chassis::clear_left_turn_signal() {
  left_turn_signal_ = false;
}
inline bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.left_turn_signal)
  return left_turn_signal_;
}
inline void Chassis::set_left_turn_signal(bool value) {
  
  left_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.left_turn_signal)
}

// optional bool right_turn_signal = 17;
inline void Chassis::clear_right_turn_signal() {
  right_turn_signal_ = false;
}
inline bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.right_turn_signal)
  return right_turn_signal_;
}
inline void Chassis::set_right_turn_signal(bool value) {
  
  right_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.right_turn_signal)
}

// optional bool horn = 18;
inline void Chassis::clear_horn() {
  horn_ = false;
}
inline bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.horn)
  return horn_;
}
inline void Chassis::set_horn(bool value) {
  
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.horn)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::canbus::Signal_TurnSignal> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Signal_TurnSignal>() {
  return ::apollo::canbus::Signal_TurnSignal_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Chassis_DrivingMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Chassis_DrivingMode>() {
  return ::apollo::canbus::Chassis_DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Chassis_ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Chassis_ErrorCode>() {
  return ::apollo::canbus::Chassis_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Chassis_GearPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Chassis_GearPosition>() {
  return ::apollo::canbus::Chassis_GearPosition_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto__INCLUDED
