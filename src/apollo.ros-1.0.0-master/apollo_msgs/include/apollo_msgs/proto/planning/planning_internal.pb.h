// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/planning/planning_internal.proto

#ifndef PROTOBUF_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto__INCLUDED
#define PROTOBUF_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "apollo_msgs/proto/common/header.pb.h"
#include "apollo_msgs/proto/decision/decision.pb.h"
#include "apollo_msgs/proto/localization/localization.pb.h"
#include "apollo_msgs/proto/localization/pose.pb.h"
#include "apollo_msgs/proto/perception/perception_obstacle.pb.h"
#include "apollo_msgs/proto/prediction/prediction_obstacle.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning_internal {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();

class Debug;
class Debug_DebugMessage;
class PlanningData;
class PlanningObstacle;

enum Debug_ErrorCode {
  Debug_ErrorCode_OK = 0,
  Debug_ErrorCode_ERR_NOT_READY = 1,
  Debug_ErrorCode_ERR_ESTOP = 2,
  Debug_ErrorCode_ERR_PATH_OPTIMIZER = 3,
  Debug_ErrorCode_ERR_SPEED_OPTIMIZER = 4,
  Debug_ErrorCode_ERR_ST_GRAPH = 5,
  Debug_ErrorCode_ERR_SANITY_CHECK = 6,
  Debug_ErrorCode_Debug_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Debug_ErrorCode_Debug_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Debug_ErrorCode_IsValid(int value);
const Debug_ErrorCode Debug_ErrorCode_ErrorCode_MIN = Debug_ErrorCode_OK;
const Debug_ErrorCode Debug_ErrorCode_ErrorCode_MAX = Debug_ErrorCode_ERR_SANITY_CHECK;
const int Debug_ErrorCode_ErrorCode_ARRAYSIZE = Debug_ErrorCode_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Debug_ErrorCode_descriptor();
inline const ::std::string& Debug_ErrorCode_Name(Debug_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Debug_ErrorCode_descriptor(), value);
}
inline bool Debug_ErrorCode_Parse(
    const ::std::string& name, Debug_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Debug_ErrorCode>(
    Debug_ErrorCode_descriptor(), name, value);
}
// ===================================================================

class PlanningObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.PlanningObstacle) */ {
 public:
  PlanningObstacle();
  virtual ~PlanningObstacle();

  PlanningObstacle(const PlanningObstacle& from);

  inline PlanningObstacle& operator=(const PlanningObstacle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningObstacle& default_instance();

  void Swap(PlanningObstacle* other);

  // implements Message ----------------------------------------------

  inline PlanningObstacle* New() const { return New(NULL); }

  PlanningObstacle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlanningObstacle& from);
  void MergeFrom(const PlanningObstacle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlanningObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 perception_id = 1;
  void clear_perception_id();
  static const int kPerceptionIdFieldNumber = 1;
  ::google::protobuf::int32 perception_id() const;
  void set_perception_id(::google::protobuf::int32 value);

  // optional string decision_id = 2;
  void clear_decision_id();
  static const int kDecisionIdFieldNumber = 2;
  const ::std::string& decision_id() const;
  void set_decision_id(const ::std::string& value);
  void set_decision_id(const char* value);
  void set_decision_id(const char* value, size_t size);
  ::std::string* mutable_decision_id();
  ::std::string* release_decision_id();
  void set_allocated_decision_id(::std::string* decision_id);

  // optional .apollo.perception.Point position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::apollo::perception::Point& position() const;
  ::apollo::perception::Point* mutable_position();
  ::apollo::perception::Point* release_position();
  void set_allocated_position(::apollo::perception::Point* position);

  // optional double theta = 4;
  void clear_theta();
  static const int kThetaFieldNumber = 4;
  double theta() const;
  void set_theta(double value);

  // optional .apollo.perception.Point velocity = 5;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 5;
  const ::apollo::perception::Point& velocity() const;
  ::apollo::perception::Point* mutable_velocity();
  ::apollo::perception::Point* release_velocity();
  void set_allocated_velocity(::apollo::perception::Point* velocity);

  // optional double speed = 6;
  void clear_speed();
  static const int kSpeedFieldNumber = 6;
  double speed() const;
  void set_speed(double value);

  // optional double length = 7;
  void clear_length();
  static const int kLengthFieldNumber = 7;
  double length() const;
  void set_length(double value);

  // optional double width = 8;
  void clear_width();
  static const int kWidthFieldNumber = 8;
  double width() const;
  void set_width(double value);

  // optional double height = 9;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  double height() const;
  void set_height(double value);

  // repeated .apollo.perception.Point polygon_point = 10;
  int polygon_point_size() const;
  void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 10;
  const ::apollo::perception::Point& polygon_point(int index) const;
  ::apollo::perception::Point* mutable_polygon_point(int index);
  ::apollo::perception::Point* add_polygon_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >*
      mutable_polygon_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >&
      polygon_point() const;

  // optional double tracking_time = 11;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 11;
  double tracking_time() const;
  void set_tracking_time(double value);

  // optional double perception_timestamp = 12;
  void clear_perception_timestamp();
  static const int kPerceptionTimestampFieldNumber = 12;
  double perception_timestamp() const;
  void set_perception_timestamp(double value);

  // optional .apollo.perception.PerceptionObstacle.Type perception_object_type = 13;
  void clear_perception_object_type();
  static const int kPerceptionObjectTypeFieldNumber = 13;
  ::apollo::perception::PerceptionObstacle_Type perception_object_type() const;
  void set_perception_object_type(::apollo::perception::PerceptionObstacle_Type value);

  // optional double prediction_timestamp = 14;
  void clear_prediction_timestamp();
  static const int kPredictionTimestampFieldNumber = 14;
  double prediction_timestamp() const;
  void set_prediction_timestamp(double value);

  // repeated .apollo.prediction.Trajectory prediction_trajectory = 15;
  int prediction_trajectory_size() const;
  void clear_prediction_trajectory();
  static const int kPredictionTrajectoryFieldNumber = 15;
  const ::apollo::prediction::Trajectory& prediction_trajectory(int index) const;
  ::apollo::prediction::Trajectory* mutable_prediction_trajectory(int index);
  ::apollo::prediction::Trajectory* add_prediction_trajectory();
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >*
      mutable_prediction_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >&
      prediction_trajectory() const;

  // optional .apollo.decision.ObjectDecision.ObjectType decision_object_type = 16;
  void clear_decision_object_type();
  static const int kDecisionObjectTypeFieldNumber = 16;
  ::apollo::decision::ObjectDecision_ObjectType decision_object_type() const;
  void set_decision_object_type(::apollo::decision::ObjectDecision_ObjectType value);

  // optional .apollo.decision.ObjectDecisionType object_decision = 17;
  bool has_object_decision() const;
  void clear_object_decision();
  static const int kObjectDecisionFieldNumber = 17;
  const ::apollo::decision::ObjectDecisionType& object_decision() const;
  ::apollo::decision::ObjectDecisionType* mutable_object_decision();
  ::apollo::decision::ObjectDecisionType* release_object_decision();
  void set_allocated_object_decision(::apollo::decision::ObjectDecisionType* object_decision);

  // repeated .apollo.decision.ObjectDecisionType planning_object_decision = 18;
  int planning_object_decision_size() const;
  void clear_planning_object_decision();
  static const int kPlanningObjectDecisionFieldNumber = 18;
  const ::apollo::decision::ObjectDecisionType& planning_object_decision(int index) const;
  ::apollo::decision::ObjectDecisionType* mutable_planning_object_decision(int index);
  ::apollo::decision::ObjectDecisionType* add_planning_object_decision();
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >*
      mutable_planning_object_decision();
  const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >&
      planning_object_decision() const;

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.PlanningObstacle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr decision_id_;
  ::apollo::perception::Point* position_;
  double theta_;
  ::apollo::perception::Point* velocity_;
  double speed_;
  double length_;
  ::google::protobuf::int32 perception_id_;
  int perception_object_type_;
  double width_;
  double height_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point > polygon_point_;
  double tracking_time_;
  double perception_timestamp_;
  double prediction_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory > prediction_trajectory_;
  ::apollo::decision::ObjectDecisionType* object_decision_;
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType > planning_object_decision_;
  int decision_object_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();

  void InitAsDefaultInstance();
  static PlanningObstacle* default_instance_;
};
// -------------------------------------------------------------------

class Debug_DebugMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.Debug.DebugMessage) */ {
 public:
  Debug_DebugMessage();
  virtual ~Debug_DebugMessage();

  Debug_DebugMessage(const Debug_DebugMessage& from);

  inline Debug_DebugMessage& operator=(const Debug_DebugMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_DebugMessage& default_instance();

  enum DebugStringCase {
    kTrace = 3,
    kInfo = 4,
    kWarn = 5,
    kError = 6,
    kFatal = 7,
    DEBUG_STRING_NOT_SET = 0,
  };

  void Swap(Debug_DebugMessage* other);

  // implements Message ----------------------------------------------

  inline Debug_DebugMessage* New() const { return New(NULL); }

  Debug_DebugMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug_DebugMessage& from);
  void MergeFrom(const Debug_DebugMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Debug_DebugMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::apollo::planning_internal::Debug_ErrorCode error_code() const;
  void set_error_code(::apollo::planning_internal::Debug_ErrorCode value);

  // optional int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string trace = 3;
  private:
  bool has_trace() const;
  public:
  void clear_trace();
  static const int kTraceFieldNumber = 3;
  const ::std::string& trace() const;
  void set_trace(const ::std::string& value);
  void set_trace(const char* value);
  void set_trace(const char* value, size_t size);
  ::std::string* mutable_trace();
  ::std::string* release_trace();
  void set_allocated_trace(::std::string* trace);

  // optional string info = 4;
  private:
  bool has_info() const;
  public:
  void clear_info();
  static const int kInfoFieldNumber = 4;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional string warn = 5;
  private:
  bool has_warn() const;
  public:
  void clear_warn();
  static const int kWarnFieldNumber = 5;
  const ::std::string& warn() const;
  void set_warn(const ::std::string& value);
  void set_warn(const char* value);
  void set_warn(const char* value, size_t size);
  ::std::string* mutable_warn();
  ::std::string* release_warn();
  void set_allocated_warn(::std::string* warn);

  // optional string error = 6;
  private:
  bool has_error() const;
  public:
  void clear_error();
  static const int kErrorFieldNumber = 6;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // optional string fatal = 7;
  private:
  bool has_fatal() const;
  public:
  void clear_fatal();
  static const int kFatalFieldNumber = 7;
  const ::std::string& fatal() const;
  void set_fatal(const ::std::string& value);
  void set_fatal(const char* value);
  void set_fatal(const char* value, size_t size);
  ::std::string* mutable_fatal();
  ::std::string* release_fatal();
  void set_allocated_fatal(::std::string* fatal);

  DebugStringCase debug_string_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning_internal.Debug.DebugMessage)
 private:
  inline void set_has_trace();
  inline void set_has_info();
  inline void set_has_warn();
  inline void set_has_error();
  inline void set_has_fatal();

  inline bool has_debug_string() const;
  void clear_debug_string();
  inline void clear_has_debug_string();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int error_code_;
  ::google::protobuf::int32 id_;
  union DebugStringUnion {
    DebugStringUnion() {}
    ::google::protobuf::internal::ArenaStringPtr trace_;
    ::google::protobuf::internal::ArenaStringPtr info_;
    ::google::protobuf::internal::ArenaStringPtr warn_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::google::protobuf::internal::ArenaStringPtr fatal_;
  } debug_string_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();

  void InitAsDefaultInstance();
  static Debug_DebugMessage* default_instance_;
};
// -------------------------------------------------------------------

class Debug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.Debug) */ {
 public:
  Debug();
  virtual ~Debug();

  Debug(const Debug& from);

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug& default_instance();

  void Swap(Debug* other);

  // implements Message ----------------------------------------------

  inline Debug* New() const { return New(NULL); }

  Debug* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug& from);
  void MergeFrom(const Debug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Debug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Debug_DebugMessage DebugMessage;

  typedef Debug_ErrorCode ErrorCode;
  static const ErrorCode OK =
    Debug_ErrorCode_OK;
  static const ErrorCode ERR_NOT_READY =
    Debug_ErrorCode_ERR_NOT_READY;
  static const ErrorCode ERR_ESTOP =
    Debug_ErrorCode_ERR_ESTOP;
  static const ErrorCode ERR_PATH_OPTIMIZER =
    Debug_ErrorCode_ERR_PATH_OPTIMIZER;
  static const ErrorCode ERR_SPEED_OPTIMIZER =
    Debug_ErrorCode_ERR_SPEED_OPTIMIZER;
  static const ErrorCode ERR_ST_GRAPH =
    Debug_ErrorCode_ERR_ST_GRAPH;
  static const ErrorCode ERR_SANITY_CHECK =
    Debug_ErrorCode_ERR_SANITY_CHECK;
  static inline bool ErrorCode_IsValid(int value) {
    return Debug_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    Debug_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    Debug_ErrorCode_ErrorCode_MAX;
  static const int ErrorCode_ARRAYSIZE =
    Debug_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return Debug_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return Debug_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return Debug_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::apollo::planning_internal::Debug_ErrorCode error_code() const;
  void set_error_code(::apollo::planning_internal::Debug_ErrorCode value);

  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  bool has_planning_data() const;
  void clear_planning_data();
  static const int kPlanningDataFieldNumber = 2;
  const ::apollo::planning_internal::PlanningData& planning_data() const;
  ::apollo::planning_internal::PlanningData* mutable_planning_data();
  ::apollo::planning_internal::PlanningData* release_planning_data();
  void set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data);

  // repeated .apollo.planning_internal.Debug.DebugMessage debug_message = 3;
  int debug_message_size() const;
  void clear_debug_message();
  static const int kDebugMessageFieldNumber = 3;
  const ::apollo::planning_internal::Debug_DebugMessage& debug_message(int index) const;
  ::apollo::planning_internal::Debug_DebugMessage* mutable_debug_message(int index);
  ::apollo::planning_internal::Debug_DebugMessage* add_debug_message();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::Debug_DebugMessage >*
      mutable_debug_message();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::Debug_DebugMessage >&
      debug_message() const;

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.Debug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::planning_internal::PlanningData* planning_data_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::Debug_DebugMessage > debug_message_;
  int error_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();

  void InitAsDefaultInstance();
  static Debug* default_instance_;
};
// -------------------------------------------------------------------

class PlanningData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.PlanningData) */ {
 public:
  PlanningData();
  virtual ~PlanningData();

  PlanningData(const PlanningData& from);

  inline PlanningData& operator=(const PlanningData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningData& default_instance();

  void Swap(PlanningData* other);

  // implements Message ----------------------------------------------

  inline PlanningData* New() const { return New(NULL); }

  PlanningData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlanningData& from);
  void MergeFrom(const PlanningData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlanningData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.localization.Pose init_status = 2;
  bool has_init_status() const;
  void clear_init_status();
  static const int kInitStatusFieldNumber = 2;
  const ::apollo::localization::Pose& init_status() const;
  ::apollo::localization::Pose* mutable_init_status();
  ::apollo::localization::Pose* release_init_status();
  void set_allocated_init_status(::apollo::localization::Pose* init_status);

  // optional .apollo.decision.MainDecision main_decision = 3;
  bool has_main_decision() const;
  void clear_main_decision();
  static const int kMainDecisionFieldNumber = 3;
  const ::apollo::decision::MainDecision& main_decision() const;
  ::apollo::decision::MainDecision* mutable_main_decision();
  ::apollo::decision::MainDecision* release_main_decision();
  void set_allocated_main_decision(::apollo::decision::MainDecision* main_decision);

  // repeated .apollo.planning_internal.PlanningObstacle planning_obstacle = 4;
  int planning_obstacle_size() const;
  void clear_planning_obstacle();
  static const int kPlanningObstacleFieldNumber = 4;
  const ::apollo::planning_internal::PlanningObstacle& planning_obstacle(int index) const;
  ::apollo::planning_internal::PlanningObstacle* mutable_planning_obstacle(int index);
  ::apollo::planning_internal::PlanningObstacle* add_planning_obstacle();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::PlanningObstacle >*
      mutable_planning_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::PlanningObstacle >&
      planning_obstacle() const;

  // optional .apollo.decision.LightSignal light_signal = 5;
  bool has_light_signal() const;
  void clear_light_signal();
  static const int kLightSignalFieldNumber = 5;
  const ::apollo::decision::LightSignal& light_signal() const;
  ::apollo::decision::LightSignal* mutable_light_signal();
  ::apollo::decision::LightSignal* release_light_signal();
  void set_allocated_light_signal(::apollo::decision::LightSignal* light_signal);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.PlanningData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::common::Header* header_;
  ::apollo::localization::Pose* init_status_;
  ::apollo::decision::MainDecision* main_decision_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::PlanningObstacle > planning_obstacle_;
  ::apollo::decision::LightSignal* light_signal_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();

  void InitAsDefaultInstance();
  static PlanningData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningObstacle

// optional int32 perception_id = 1;
inline void PlanningObstacle::clear_perception_id() {
  perception_id_ = 0;
}
inline ::google::protobuf::int32 PlanningObstacle::perception_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.perception_id)
  return perception_id_;
}
inline void PlanningObstacle::set_perception_id(::google::protobuf::int32 value) {
  
  perception_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.perception_id)
}

// optional string decision_id = 2;
inline void PlanningObstacle::clear_decision_id() {
  decision_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlanningObstacle::decision_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.decision_id)
  return decision_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlanningObstacle::set_decision_id(const ::std::string& value) {
  
  decision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.decision_id)
}
inline void PlanningObstacle::set_decision_id(const char* value) {
  
  decision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.PlanningObstacle.decision_id)
}
inline void PlanningObstacle::set_decision_id(const char* value, size_t size) {
  
  decision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.PlanningObstacle.decision_id)
}
inline ::std::string* PlanningObstacle::mutable_decision_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.decision_id)
  return decision_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlanningObstacle::release_decision_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningObstacle.decision_id)
  
  return decision_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlanningObstacle::set_allocated_decision_id(::std::string* decision_id) {
  if (decision_id != NULL) {
    
  } else {
    
  }
  decision_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decision_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningObstacle.decision_id)
}

// optional .apollo.perception.Point position = 3;
inline bool PlanningObstacle::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void PlanningObstacle::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::apollo::perception::Point& PlanningObstacle::position() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::apollo::perception::Point* PlanningObstacle::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.position)
  return position_;
}
inline ::apollo::perception::Point* PlanningObstacle::release_position() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningObstacle.position)
  
  ::apollo::perception::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void PlanningObstacle::set_allocated_position(::apollo::perception::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningObstacle.position)
}

// optional double theta = 4;
inline void PlanningObstacle::clear_theta() {
  theta_ = 0;
}
inline double PlanningObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.theta)
  return theta_;
}
inline void PlanningObstacle::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.theta)
}

// optional .apollo.perception.Point velocity = 5;
inline bool PlanningObstacle::has_velocity() const {
  return !_is_default_instance_ && velocity_ != NULL;
}
inline void PlanningObstacle::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
}
inline const ::apollo::perception::Point& PlanningObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::apollo::perception::Point* PlanningObstacle::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.velocity)
  return velocity_;
}
inline ::apollo::perception::Point* PlanningObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningObstacle.velocity)
  
  ::apollo::perception::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void PlanningObstacle::set_allocated_velocity(::apollo::perception::Point* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningObstacle.velocity)
}

// optional double speed = 6;
inline void PlanningObstacle::clear_speed() {
  speed_ = 0;
}
inline double PlanningObstacle::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.speed)
  return speed_;
}
inline void PlanningObstacle::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.speed)
}

// optional double length = 7;
inline void PlanningObstacle::clear_length() {
  length_ = 0;
}
inline double PlanningObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.length)
  return length_;
}
inline void PlanningObstacle::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.length)
}

// optional double width = 8;
inline void PlanningObstacle::clear_width() {
  width_ = 0;
}
inline double PlanningObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.width)
  return width_;
}
inline void PlanningObstacle::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.width)
}

// optional double height = 9;
inline void PlanningObstacle::clear_height() {
  height_ = 0;
}
inline double PlanningObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.height)
  return height_;
}
inline void PlanningObstacle::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.height)
}

// repeated .apollo.perception.Point polygon_point = 10;
inline int PlanningObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
inline void PlanningObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
inline const ::apollo::perception::Point& PlanningObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.polygon_point)
  return polygon_point_.Get(index);
}
inline ::apollo::perception::Point* PlanningObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::apollo::perception::Point* PlanningObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningObstacle.polygon_point)
  return polygon_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >*
PlanningObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningObstacle.polygon_point)
  return &polygon_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >&
PlanningObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 11;
inline void PlanningObstacle::clear_tracking_time() {
  tracking_time_ = 0;
}
inline double PlanningObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.tracking_time)
  return tracking_time_;
}
inline void PlanningObstacle::set_tracking_time(double value) {
  
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.tracking_time)
}

// optional double perception_timestamp = 12;
inline void PlanningObstacle::clear_perception_timestamp() {
  perception_timestamp_ = 0;
}
inline double PlanningObstacle::perception_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.perception_timestamp)
  return perception_timestamp_;
}
inline void PlanningObstacle::set_perception_timestamp(double value) {
  
  perception_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.perception_timestamp)
}

// optional .apollo.perception.PerceptionObstacle.Type perception_object_type = 13;
inline void PlanningObstacle::clear_perception_object_type() {
  perception_object_type_ = 0;
}
inline ::apollo::perception::PerceptionObstacle_Type PlanningObstacle::perception_object_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.perception_object_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(perception_object_type_);
}
inline void PlanningObstacle::set_perception_object_type(::apollo::perception::PerceptionObstacle_Type value) {
  
  perception_object_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.perception_object_type)
}

// optional double prediction_timestamp = 14;
inline void PlanningObstacle::clear_prediction_timestamp() {
  prediction_timestamp_ = 0;
}
inline double PlanningObstacle::prediction_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.prediction_timestamp)
  return prediction_timestamp_;
}
inline void PlanningObstacle::set_prediction_timestamp(double value) {
  
  prediction_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.prediction_timestamp)
}

// repeated .apollo.prediction.Trajectory prediction_trajectory = 15;
inline int PlanningObstacle::prediction_trajectory_size() const {
  return prediction_trajectory_.size();
}
inline void PlanningObstacle::clear_prediction_trajectory() {
  prediction_trajectory_.Clear();
}
inline const ::apollo::prediction::Trajectory& PlanningObstacle::prediction_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.prediction_trajectory)
  return prediction_trajectory_.Get(index);
}
inline ::apollo::prediction::Trajectory* PlanningObstacle::mutable_prediction_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.prediction_trajectory)
  return prediction_trajectory_.Mutable(index);
}
inline ::apollo::prediction::Trajectory* PlanningObstacle::add_prediction_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningObstacle.prediction_trajectory)
  return prediction_trajectory_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >*
PlanningObstacle::mutable_prediction_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningObstacle.prediction_trajectory)
  return &prediction_trajectory_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >&
PlanningObstacle::prediction_trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningObstacle.prediction_trajectory)
  return prediction_trajectory_;
}

// optional .apollo.decision.ObjectDecision.ObjectType decision_object_type = 16;
inline void PlanningObstacle::clear_decision_object_type() {
  decision_object_type_ = 0;
}
inline ::apollo::decision::ObjectDecision_ObjectType PlanningObstacle::decision_object_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.decision_object_type)
  return static_cast< ::apollo::decision::ObjectDecision_ObjectType >(decision_object_type_);
}
inline void PlanningObstacle::set_decision_object_type(::apollo::decision::ObjectDecision_ObjectType value) {
  
  decision_object_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.decision_object_type)
}

// optional .apollo.decision.ObjectDecisionType object_decision = 17;
inline bool PlanningObstacle::has_object_decision() const {
  return !_is_default_instance_ && object_decision_ != NULL;
}
inline void PlanningObstacle::clear_object_decision() {
  if (GetArenaNoVirtual() == NULL && object_decision_ != NULL) delete object_decision_;
  object_decision_ = NULL;
}
inline const ::apollo::decision::ObjectDecisionType& PlanningObstacle::object_decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.object_decision)
  return object_decision_ != NULL ? *object_decision_ : *default_instance_->object_decision_;
}
inline ::apollo::decision::ObjectDecisionType* PlanningObstacle::mutable_object_decision() {
  
  if (object_decision_ == NULL) {
    object_decision_ = new ::apollo::decision::ObjectDecisionType;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.object_decision)
  return object_decision_;
}
inline ::apollo::decision::ObjectDecisionType* PlanningObstacle::release_object_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningObstacle.object_decision)
  
  ::apollo::decision::ObjectDecisionType* temp = object_decision_;
  object_decision_ = NULL;
  return temp;
}
inline void PlanningObstacle::set_allocated_object_decision(::apollo::decision::ObjectDecisionType* object_decision) {
  delete object_decision_;
  object_decision_ = object_decision;
  if (object_decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningObstacle.object_decision)
}

// repeated .apollo.decision.ObjectDecisionType planning_object_decision = 18;
inline int PlanningObstacle::planning_object_decision_size() const {
  return planning_object_decision_.size();
}
inline void PlanningObstacle::clear_planning_object_decision() {
  planning_object_decision_.Clear();
}
inline const ::apollo::decision::ObjectDecisionType& PlanningObstacle::planning_object_decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.planning_object_decision)
  return planning_object_decision_.Get(index);
}
inline ::apollo::decision::ObjectDecisionType* PlanningObstacle::mutable_planning_object_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.planning_object_decision)
  return planning_object_decision_.Mutable(index);
}
inline ::apollo::decision::ObjectDecisionType* PlanningObstacle::add_planning_object_decision() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningObstacle.planning_object_decision)
  return planning_object_decision_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >*
PlanningObstacle::mutable_planning_object_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningObstacle.planning_object_decision)
  return &planning_object_decision_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >&
PlanningObstacle::planning_object_decision() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningObstacle.planning_object_decision)
  return planning_object_decision_;
}

// -------------------------------------------------------------------

// Debug_DebugMessage

// optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
inline void Debug_DebugMessage::clear_error_code() {
  error_code_ = 0;
}
inline ::apollo::planning_internal::Debug_ErrorCode Debug_DebugMessage::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.error_code)
  return static_cast< ::apollo::planning_internal::Debug_ErrorCode >(error_code_);
}
inline void Debug_DebugMessage::set_error_code(::apollo::planning_internal::Debug_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.error_code)
}

// optional int32 id = 2;
inline void Debug_DebugMessage::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Debug_DebugMessage::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.id)
  return id_;
}
inline void Debug_DebugMessage::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.id)
}

// optional string trace = 3;
inline bool Debug_DebugMessage::has_trace() const {
  return debug_string_case() == kTrace;
}
inline void Debug_DebugMessage::set_has_trace() {
  _oneof_case_[0] = kTrace;
}
inline void Debug_DebugMessage::clear_trace() {
  if (has_trace()) {
    debug_string_.trace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_debug_string();
  }
}
inline const ::std::string& Debug_DebugMessage::trace() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.trace)
  if (has_trace()) {
    return debug_string_.trace_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Debug_DebugMessage::set_trace(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.trace)
  if (!has_trace()) {
    clear_debug_string();
    set_has_trace();
    debug_string_.trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.trace)
}
inline void Debug_DebugMessage::set_trace(const char* value) {
  if (!has_trace()) {
    clear_debug_string();
    set_has_trace();
    debug_string_.trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.Debug.DebugMessage.trace)
}
inline void Debug_DebugMessage::set_trace(const char* value, size_t size) {
  if (!has_trace()) {
    clear_debug_string();
    set_has_trace();
    debug_string_.trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.Debug.DebugMessage.trace)
}
inline ::std::string* Debug_DebugMessage::mutable_trace() {
  if (!has_trace()) {
    clear_debug_string();
    set_has_trace();
    debug_string_.trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.DebugMessage.trace)
  return debug_string_.trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debug_DebugMessage::release_trace() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.DebugMessage.trace)
  if (has_trace()) {
    clear_has_debug_string();
    return debug_string_.trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Debug_DebugMessage::set_allocated_trace(::std::string* trace) {
  if (!has_trace()) {
    debug_string_.trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_debug_string();
  if (trace != NULL) {
    set_has_trace();
    debug_string_.trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        trace);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.DebugMessage.trace)
}

// optional string info = 4;
inline bool Debug_DebugMessage::has_info() const {
  return debug_string_case() == kInfo;
}
inline void Debug_DebugMessage::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void Debug_DebugMessage::clear_info() {
  if (has_info()) {
    debug_string_.info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_debug_string();
  }
}
inline const ::std::string& Debug_DebugMessage::info() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.info)
  if (has_info()) {
    return debug_string_.info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Debug_DebugMessage::set_info(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.info)
  if (!has_info()) {
    clear_debug_string();
    set_has_info();
    debug_string_.info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.info)
}
inline void Debug_DebugMessage::set_info(const char* value) {
  if (!has_info()) {
    clear_debug_string();
    set_has_info();
    debug_string_.info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.Debug.DebugMessage.info)
}
inline void Debug_DebugMessage::set_info(const char* value, size_t size) {
  if (!has_info()) {
    clear_debug_string();
    set_has_info();
    debug_string_.info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.Debug.DebugMessage.info)
}
inline ::std::string* Debug_DebugMessage::mutable_info() {
  if (!has_info()) {
    clear_debug_string();
    set_has_info();
    debug_string_.info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.DebugMessage.info)
  return debug_string_.info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debug_DebugMessage::release_info() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.DebugMessage.info)
  if (has_info()) {
    clear_has_debug_string();
    return debug_string_.info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Debug_DebugMessage::set_allocated_info(::std::string* info) {
  if (!has_info()) {
    debug_string_.info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_debug_string();
  if (info != NULL) {
    set_has_info();
    debug_string_.info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        info);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.DebugMessage.info)
}

// optional string warn = 5;
inline bool Debug_DebugMessage::has_warn() const {
  return debug_string_case() == kWarn;
}
inline void Debug_DebugMessage::set_has_warn() {
  _oneof_case_[0] = kWarn;
}
inline void Debug_DebugMessage::clear_warn() {
  if (has_warn()) {
    debug_string_.warn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_debug_string();
  }
}
inline const ::std::string& Debug_DebugMessage::warn() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.warn)
  if (has_warn()) {
    return debug_string_.warn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Debug_DebugMessage::set_warn(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.warn)
  if (!has_warn()) {
    clear_debug_string();
    set_has_warn();
    debug_string_.warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.warn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.warn)
}
inline void Debug_DebugMessage::set_warn(const char* value) {
  if (!has_warn()) {
    clear_debug_string();
    set_has_warn();
    debug_string_.warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.warn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.Debug.DebugMessage.warn)
}
inline void Debug_DebugMessage::set_warn(const char* value, size_t size) {
  if (!has_warn()) {
    clear_debug_string();
    set_has_warn();
    debug_string_.warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.warn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.Debug.DebugMessage.warn)
}
inline ::std::string* Debug_DebugMessage::mutable_warn() {
  if (!has_warn()) {
    clear_debug_string();
    set_has_warn();
    debug_string_.warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.DebugMessage.warn)
  return debug_string_.warn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debug_DebugMessage::release_warn() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.DebugMessage.warn)
  if (has_warn()) {
    clear_has_debug_string();
    return debug_string_.warn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Debug_DebugMessage::set_allocated_warn(::std::string* warn) {
  if (!has_warn()) {
    debug_string_.warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_debug_string();
  if (warn != NULL) {
    set_has_warn();
    debug_string_.warn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        warn);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.DebugMessage.warn)
}

// optional string error = 6;
inline bool Debug_DebugMessage::has_error() const {
  return debug_string_case() == kError;
}
inline void Debug_DebugMessage::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Debug_DebugMessage::clear_error() {
  if (has_error()) {
    debug_string_.error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_debug_string();
  }
}
inline const ::std::string& Debug_DebugMessage::error() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.error)
  if (has_error()) {
    return debug_string_.error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Debug_DebugMessage::set_error(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.error)
  if (!has_error()) {
    clear_debug_string();
    set_has_error();
    debug_string_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.error)
}
inline void Debug_DebugMessage::set_error(const char* value) {
  if (!has_error()) {
    clear_debug_string();
    set_has_error();
    debug_string_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.Debug.DebugMessage.error)
}
inline void Debug_DebugMessage::set_error(const char* value, size_t size) {
  if (!has_error()) {
    clear_debug_string();
    set_has_error();
    debug_string_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.Debug.DebugMessage.error)
}
inline ::std::string* Debug_DebugMessage::mutable_error() {
  if (!has_error()) {
    clear_debug_string();
    set_has_error();
    debug_string_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.DebugMessage.error)
  return debug_string_.error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debug_DebugMessage::release_error() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.DebugMessage.error)
  if (has_error()) {
    clear_has_debug_string();
    return debug_string_.error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Debug_DebugMessage::set_allocated_error(::std::string* error) {
  if (!has_error()) {
    debug_string_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_debug_string();
  if (error != NULL) {
    set_has_error();
    debug_string_.error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        error);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.DebugMessage.error)
}

// optional string fatal = 7;
inline bool Debug_DebugMessage::has_fatal() const {
  return debug_string_case() == kFatal;
}
inline void Debug_DebugMessage::set_has_fatal() {
  _oneof_case_[0] = kFatal;
}
inline void Debug_DebugMessage::clear_fatal() {
  if (has_fatal()) {
    debug_string_.fatal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_debug_string();
  }
}
inline const ::std::string& Debug_DebugMessage::fatal() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.fatal)
  if (has_fatal()) {
    return debug_string_.fatal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Debug_DebugMessage::set_fatal(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.fatal)
  if (!has_fatal()) {
    clear_debug_string();
    set_has_fatal();
    debug_string_.fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.fatal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.fatal)
}
inline void Debug_DebugMessage::set_fatal(const char* value) {
  if (!has_fatal()) {
    clear_debug_string();
    set_has_fatal();
    debug_string_.fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.fatal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.Debug.DebugMessage.fatal)
}
inline void Debug_DebugMessage::set_fatal(const char* value, size_t size) {
  if (!has_fatal()) {
    clear_debug_string();
    set_has_fatal();
    debug_string_.fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.fatal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.Debug.DebugMessage.fatal)
}
inline ::std::string* Debug_DebugMessage::mutable_fatal() {
  if (!has_fatal()) {
    clear_debug_string();
    set_has_fatal();
    debug_string_.fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.DebugMessage.fatal)
  return debug_string_.fatal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debug_DebugMessage::release_fatal() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.DebugMessage.fatal)
  if (has_fatal()) {
    clear_has_debug_string();
    return debug_string_.fatal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Debug_DebugMessage::set_allocated_fatal(::std::string* fatal) {
  if (!has_fatal()) {
    debug_string_.fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_debug_string();
  if (fatal != NULL) {
    set_has_fatal();
    debug_string_.fatal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        fatal);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.DebugMessage.fatal)
}

inline bool Debug_DebugMessage::has_debug_string() const {
  return debug_string_case() != DEBUG_STRING_NOT_SET;
}
inline void Debug_DebugMessage::clear_has_debug_string() {
  _oneof_case_[0] = DEBUG_STRING_NOT_SET;
}
inline Debug_DebugMessage::DebugStringCase Debug_DebugMessage::debug_string_case() const {
  return Debug_DebugMessage::DebugStringCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Debug

// optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
inline void Debug::clear_error_code() {
  error_code_ = 0;
}
inline ::apollo::planning_internal::Debug_ErrorCode Debug::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.error_code)
  return static_cast< ::apollo::planning_internal::Debug_ErrorCode >(error_code_);
}
inline void Debug::set_error_code(::apollo::planning_internal::Debug_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.error_code)
}

// optional .apollo.planning_internal.PlanningData planning_data = 2;
inline bool Debug::has_planning_data() const {
  return !_is_default_instance_ && planning_data_ != NULL;
}
inline void Debug::clear_planning_data() {
  if (GetArenaNoVirtual() == NULL && planning_data_ != NULL) delete planning_data_;
  planning_data_ = NULL;
}
inline const ::apollo::planning_internal::PlanningData& Debug::planning_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.planning_data)
  return planning_data_ != NULL ? *planning_data_ : *default_instance_->planning_data_;
}
inline ::apollo::planning_internal::PlanningData* Debug::mutable_planning_data() {
  
  if (planning_data_ == NULL) {
    planning_data_ = new ::apollo::planning_internal::PlanningData;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.planning_data)
  return planning_data_;
}
inline ::apollo::planning_internal::PlanningData* Debug::release_planning_data() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.planning_data)
  
  ::apollo::planning_internal::PlanningData* temp = planning_data_;
  planning_data_ = NULL;
  return temp;
}
inline void Debug::set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data) {
  delete planning_data_;
  planning_data_ = planning_data;
  if (planning_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.planning_data)
}

// repeated .apollo.planning_internal.Debug.DebugMessage debug_message = 3;
inline int Debug::debug_message_size() const {
  return debug_message_.size();
}
inline void Debug::clear_debug_message() {
  debug_message_.Clear();
}
inline const ::apollo::planning_internal::Debug_DebugMessage& Debug::debug_message(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.debug_message)
  return debug_message_.Get(index);
}
inline ::apollo::planning_internal::Debug_DebugMessage* Debug::mutable_debug_message(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.debug_message)
  return debug_message_.Mutable(index);
}
inline ::apollo::planning_internal::Debug_DebugMessage* Debug::add_debug_message() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.Debug.debug_message)
  return debug_message_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::Debug_DebugMessage >*
Debug::mutable_debug_message() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.Debug.debug_message)
  return &debug_message_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::Debug_DebugMessage >&
Debug::debug_message() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.Debug.debug_message)
  return debug_message_;
}

// -------------------------------------------------------------------

// PlanningData

// optional .apollo.common.Header header = 1;
inline bool PlanningData::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PlanningData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::apollo::common::Header& PlanningData::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* PlanningData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.header)
  return header_;
}
inline ::apollo::common::Header* PlanningData::release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.header)
}

// optional .apollo.localization.Pose init_status = 2;
inline bool PlanningData::has_init_status() const {
  return !_is_default_instance_ && init_status_ != NULL;
}
inline void PlanningData::clear_init_status() {
  if (GetArenaNoVirtual() == NULL && init_status_ != NULL) delete init_status_;
  init_status_ = NULL;
}
inline const ::apollo::localization::Pose& PlanningData::init_status() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.init_status)
  return init_status_ != NULL ? *init_status_ : *default_instance_->init_status_;
}
inline ::apollo::localization::Pose* PlanningData::mutable_init_status() {
  
  if (init_status_ == NULL) {
    init_status_ = new ::apollo::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.init_status)
  return init_status_;
}
inline ::apollo::localization::Pose* PlanningData::release_init_status() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.init_status)
  
  ::apollo::localization::Pose* temp = init_status_;
  init_status_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_init_status(::apollo::localization::Pose* init_status) {
  delete init_status_;
  init_status_ = init_status;
  if (init_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.init_status)
}

// optional .apollo.decision.MainDecision main_decision = 3;
inline bool PlanningData::has_main_decision() const {
  return !_is_default_instance_ && main_decision_ != NULL;
}
inline void PlanningData::clear_main_decision() {
  if (GetArenaNoVirtual() == NULL && main_decision_ != NULL) delete main_decision_;
  main_decision_ = NULL;
}
inline const ::apollo::decision::MainDecision& PlanningData::main_decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.main_decision)
  return main_decision_ != NULL ? *main_decision_ : *default_instance_->main_decision_;
}
inline ::apollo::decision::MainDecision* PlanningData::mutable_main_decision() {
  
  if (main_decision_ == NULL) {
    main_decision_ = new ::apollo::decision::MainDecision;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.main_decision)
  return main_decision_;
}
inline ::apollo::decision::MainDecision* PlanningData::release_main_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.main_decision)
  
  ::apollo::decision::MainDecision* temp = main_decision_;
  main_decision_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_main_decision(::apollo::decision::MainDecision* main_decision) {
  delete main_decision_;
  main_decision_ = main_decision;
  if (main_decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.main_decision)
}

// repeated .apollo.planning_internal.PlanningObstacle planning_obstacle = 4;
inline int PlanningData::planning_obstacle_size() const {
  return planning_obstacle_.size();
}
inline void PlanningData::clear_planning_obstacle() {
  planning_obstacle_.Clear();
}
inline const ::apollo::planning_internal::PlanningObstacle& PlanningData::planning_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.planning_obstacle)
  return planning_obstacle_.Get(index);
}
inline ::apollo::planning_internal::PlanningObstacle* PlanningData::mutable_planning_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.planning_obstacle)
  return planning_obstacle_.Mutable(index);
}
inline ::apollo::planning_internal::PlanningObstacle* PlanningData::add_planning_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.planning_obstacle)
  return planning_obstacle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::PlanningObstacle >*
PlanningData::mutable_planning_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.planning_obstacle)
  return &planning_obstacle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::PlanningObstacle >&
PlanningData::planning_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.planning_obstacle)
  return planning_obstacle_;
}

// optional .apollo.decision.LightSignal light_signal = 5;
inline bool PlanningData::has_light_signal() const {
  return !_is_default_instance_ && light_signal_ != NULL;
}
inline void PlanningData::clear_light_signal() {
  if (GetArenaNoVirtual() == NULL && light_signal_ != NULL) delete light_signal_;
  light_signal_ = NULL;
}
inline const ::apollo::decision::LightSignal& PlanningData::light_signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.light_signal)
  return light_signal_ != NULL ? *light_signal_ : *default_instance_->light_signal_;
}
inline ::apollo::decision::LightSignal* PlanningData::mutable_light_signal() {
  
  if (light_signal_ == NULL) {
    light_signal_ = new ::apollo::decision::LightSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.light_signal)
  return light_signal_;
}
inline ::apollo::decision::LightSignal* PlanningData::release_light_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.light_signal)
  
  ::apollo::decision::LightSignal* temp = light_signal_;
  light_signal_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_light_signal(::apollo::decision::LightSignal* light_signal) {
  delete light_signal_;
  light_signal_ = light_signal;
  if (light_signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.light_signal)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning_internal
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning_internal::Debug_ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning_internal::Debug_ErrorCode>() {
  return ::apollo::planning_internal::Debug_ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto__INCLUDED
