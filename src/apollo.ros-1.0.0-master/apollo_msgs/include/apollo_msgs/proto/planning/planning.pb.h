// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/planning/planning.proto

#ifndef PROTOBUF_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto__INCLUDED
#define PROTOBUF_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "apollo_msgs/proto/common/header.pb.h"
#include "apollo_msgs/proto/canbus/chassis.pb.h"
#include "apollo_msgs/proto/planning/planning_internal.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();

class ADCPathPoint;
class ADCSignals;
class ADCTrajectory;
class ADCTrajectoryPoint;
class EStop;

enum ADCSignals_SignalType {
  ADCSignals_SignalType_LEFT_TURN = 0,
  ADCSignals_SignalType_RIGHT_TURN = 1,
  ADCSignals_SignalType_LOW_BEAM_LIGHT = 2,
  ADCSignals_SignalType_HIGH_BEAM_LIGHT = 3,
  ADCSignals_SignalType_FOG_LIGHT = 4,
  ADCSignals_SignalType_EMERGENCY_LIGHT = 5,
  ADCSignals_SignalType_ADCSignals_SignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ADCSignals_SignalType_ADCSignals_SignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ADCSignals_SignalType_IsValid(int value);
const ADCSignals_SignalType ADCSignals_SignalType_SignalType_MIN = ADCSignals_SignalType_LEFT_TURN;
const ADCSignals_SignalType ADCSignals_SignalType_SignalType_MAX = ADCSignals_SignalType_EMERGENCY_LIGHT;
const int ADCSignals_SignalType_SignalType_ARRAYSIZE = ADCSignals_SignalType_SignalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ADCSignals_SignalType_descriptor();
inline const ::std::string& ADCSignals_SignalType_Name(ADCSignals_SignalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ADCSignals_SignalType_descriptor(), value);
}
inline bool ADCSignals_SignalType_Parse(
    const ::std::string& name, ADCSignals_SignalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCSignals_SignalType>(
    ADCSignals_SignalType_descriptor(), name, value);
}
// ===================================================================

class ADCTrajectoryPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCTrajectoryPoint) */ {
 public:
  ADCTrajectoryPoint();
  virtual ~ADCTrajectoryPoint();

  ADCTrajectoryPoint(const ADCTrajectoryPoint& from);

  inline ADCTrajectoryPoint& operator=(const ADCTrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCTrajectoryPoint& default_instance();

  void Swap(ADCTrajectoryPoint* other);

  // implements Message ----------------------------------------------

  inline ADCTrajectoryPoint* New() const { return New(NULL); }

  ADCTrajectoryPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCTrajectoryPoint& from);
  void MergeFrom(const ADCTrajectoryPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADCTrajectoryPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional double speed = 6;
  void clear_speed();
  static const int kSpeedFieldNumber = 6;
  double speed() const;
  void set_speed(double value);

  // optional double acceleration_s = 7;
  void clear_acceleration_s();
  static const int kAccelerationSFieldNumber = 7;
  double acceleration_s() const;
  void set_acceleration_s(double value);

  // optional double curvature = 8;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 8;
  double curvature() const;
  void set_curvature(double value);

  // optional double curvature_change_rate = 9;
  void clear_curvature_change_rate();
  static const int kCurvatureChangeRateFieldNumber = 9;
  double curvature_change_rate() const;
  void set_curvature_change_rate(double value);

  // optional double relative_time = 10;
  void clear_relative_time();
  static const int kRelativeTimeFieldNumber = 10;
  double relative_time() const;
  void set_relative_time(double value);

  // optional double theta = 11;
  void clear_theta();
  static const int kThetaFieldNumber = 11;
  double theta() const;
  void set_theta(double value);

  // optional double accumulated_s = 12;
  void clear_accumulated_s();
  static const int kAccumulatedSFieldNumber = 12;
  double accumulated_s() const;
  void set_accumulated_s(double value);

  // optional double s = 4;
  void clear_s();
  static const int kSFieldNumber = 4;
  double s() const;
  void set_s(double value);

  // optional double l = 5;
  void clear_l();
  static const int kLFieldNumber = 5;
  double l() const;
  void set_l(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCTrajectoryPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double x_;
  double y_;
  double z_;
  double speed_;
  double acceleration_s_;
  double curvature_;
  double curvature_change_rate_;
  double relative_time_;
  double theta_;
  double accumulated_s_;
  double s_;
  double l_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static ADCTrajectoryPoint* default_instance_;
};
// -------------------------------------------------------------------

class ADCSignals : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCSignals) */ {
 public:
  ADCSignals();
  virtual ~ADCSignals();

  ADCSignals(const ADCSignals& from);

  inline ADCSignals& operator=(const ADCSignals& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCSignals& default_instance();

  void Swap(ADCSignals* other);

  // implements Message ----------------------------------------------

  inline ADCSignals* New() const { return New(NULL); }

  ADCSignals* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCSignals& from);
  void MergeFrom(const ADCSignals& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADCSignals* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ADCSignals_SignalType SignalType;
  static const SignalType LEFT_TURN =
    ADCSignals_SignalType_LEFT_TURN;
  static const SignalType RIGHT_TURN =
    ADCSignals_SignalType_RIGHT_TURN;
  static const SignalType LOW_BEAM_LIGHT =
    ADCSignals_SignalType_LOW_BEAM_LIGHT;
  static const SignalType HIGH_BEAM_LIGHT =
    ADCSignals_SignalType_HIGH_BEAM_LIGHT;
  static const SignalType FOG_LIGHT =
    ADCSignals_SignalType_FOG_LIGHT;
  static const SignalType EMERGENCY_LIGHT =
    ADCSignals_SignalType_EMERGENCY_LIGHT;
  static inline bool SignalType_IsValid(int value) {
    return ADCSignals_SignalType_IsValid(value);
  }
  static const SignalType SignalType_MIN =
    ADCSignals_SignalType_SignalType_MIN;
  static const SignalType SignalType_MAX =
    ADCSignals_SignalType_SignalType_MAX;
  static const int SignalType_ARRAYSIZE =
    ADCSignals_SignalType_SignalType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SignalType_descriptor() {
    return ADCSignals_SignalType_descriptor();
  }
  static inline const ::std::string& SignalType_Name(SignalType value) {
    return ADCSignals_SignalType_Name(value);
  }
  static inline bool SignalType_Parse(const ::std::string& name,
      SignalType* value) {
    return ADCSignals_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  int signal_size() const;
  void clear_signal();
  static const int kSignalFieldNumber = 1;
  ::apollo::planning::ADCSignals_SignalType signal(int index) const;
  void set_signal(int index, ::apollo::planning::ADCSignals_SignalType value);
  void add_signal(::apollo::planning::ADCSignals_SignalType value);
  const ::google::protobuf::RepeatedField<int>& signal() const;
  ::google::protobuf::RepeatedField<int>* mutable_signal();

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCSignals)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField<int> signal_;
  mutable int _signal_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static ADCSignals* default_instance_;
};
// -------------------------------------------------------------------

class EStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.EStop) */ {
 public:
  EStop();
  virtual ~EStop();

  EStop(const EStop& from);

  inline EStop& operator=(const EStop& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EStop& default_instance();

  void Swap(EStop* other);

  // implements Message ----------------------------------------------

  inline EStop* New() const { return New(NULL); }

  EStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EStop& from);
  void MergeFrom(const EStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_estop = 1;
  void clear_is_estop();
  static const int kIsEstopFieldNumber = 1;
  bool is_estop() const;
  void set_is_estop(bool value);

  // @@protoc_insertion_point(class_scope:apollo.planning.EStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool is_estop_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static EStop* default_instance_;
};
// -------------------------------------------------------------------

class ADCPathPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCPathPoint) */ {
 public:
  ADCPathPoint();
  virtual ~ADCPathPoint();

  ADCPathPoint(const ADCPathPoint& from);

  inline ADCPathPoint& operator=(const ADCPathPoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCPathPoint& default_instance();

  void Swap(ADCPathPoint* other);

  // implements Message ----------------------------------------------

  inline ADCPathPoint* New() const { return New(NULL); }

  ADCPathPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCPathPoint& from);
  void MergeFrom(const ADCPathPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADCPathPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional double curvature = 4;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 4;
  double curvature() const;
  void set_curvature(double value);

  // optional double heading = 5;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCPathPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double x_;
  double y_;
  double z_;
  double curvature_;
  double heading_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static ADCPathPoint* default_instance_;
};
// -------------------------------------------------------------------

class ADCTrajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCTrajectory) */ {
 public:
  ADCTrajectory();
  virtual ~ADCTrajectory();

  ADCTrajectory(const ADCTrajectory& from);

  inline ADCTrajectory& operator=(const ADCTrajectory& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCTrajectory& default_instance();

  void Swap(ADCTrajectory* other);

  // implements Message ----------------------------------------------

  inline ADCTrajectory* New() const { return New(NULL); }

  ADCTrajectory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCTrajectory& from);
  void MergeFrom(const ADCTrajectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADCTrajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional double total_path_length = 2;
  void clear_total_path_length();
  static const int kTotalPathLengthFieldNumber = 2;
  double total_path_length() const;
  void set_total_path_length(double value);

  // optional double total_path_time = 3;
  void clear_total_path_time();
  static const int kTotalPathTimeFieldNumber = 3;
  double total_path_time() const;
  void set_total_path_time(double value);

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4;
  int adc_trajectory_point_size() const;
  void clear_adc_trajectory_point();
  static const int kAdcTrajectoryPointFieldNumber = 4;
  const ::apollo::planning::ADCTrajectoryPoint& adc_trajectory_point(int index) const;
  ::apollo::planning::ADCTrajectoryPoint* mutable_adc_trajectory_point(int index);
  ::apollo::planning::ADCTrajectoryPoint* add_adc_trajectory_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >*
      mutable_adc_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >&
      adc_trajectory_point() const;

  // optional .apollo.planning.EStop estop = 6;
  bool has_estop() const;
  void clear_estop();
  static const int kEstopFieldNumber = 6;
  const ::apollo::planning::EStop& estop() const;
  ::apollo::planning::EStop* mutable_estop();
  ::apollo::planning::EStop* release_estop();
  void set_allocated_estop(::apollo::planning::EStop* estop);

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7;
  int adc_path_point_size() const;
  void clear_adc_path_point();
  static const int kAdcPathPointFieldNumber = 7;
  const ::apollo::planning::ADCPathPoint& adc_path_point(int index) const;
  ::apollo::planning::ADCPathPoint* mutable_adc_path_point(int index);
  ::apollo::planning::ADCPathPoint* add_adc_path_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >*
      mutable_adc_path_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >&
      adc_path_point() const;

  // optional bool is_replan = 9;
  void clear_is_replan();
  static const int kIsReplanFieldNumber = 9;
  bool is_replan() const;
  void set_is_replan(bool value);

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  void clear_gear();
  static const int kGearFieldNumber = 10;
  ::apollo::canbus::Chassis_GearPosition gear() const;
  void set_gear(::apollo::canbus::Chassis_GearPosition value);

  // optional .apollo.planning_internal.Debug debug = 8;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 8;
  const ::apollo::planning_internal::Debug& debug() const;
  ::apollo::planning_internal::Debug* mutable_debug();
  ::apollo::planning_internal::Debug* release_debug();
  void set_allocated_debug(::apollo::planning_internal::Debug* debug);

  // optional .apollo.canbus.Signal signal = 11;
  bool has_signal() const;
  void clear_signal();
  static const int kSignalFieldNumber = 11;
  const ::apollo::canbus::Signal& signal() const;
  ::apollo::canbus::Signal* mutable_signal();
  ::apollo::canbus::Signal* release_signal();
  void set_allocated_signal(::apollo::canbus::Signal* signal);

  // optional .apollo.planning.ADCSignals signals = 5;
  bool has_signals() const;
  void clear_signals();
  static const int kSignalsFieldNumber = 5;
  const ::apollo::planning::ADCSignals& signals() const;
  ::apollo::planning::ADCSignals* mutable_signals();
  ::apollo::planning::ADCSignals* release_signals();
  void set_allocated_signals(::apollo::planning::ADCSignals* signals);

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCTrajectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::common::Header* header_;
  double total_path_length_;
  double total_path_time_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint > adc_trajectory_point_;
  ::apollo::planning::EStop* estop_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint > adc_path_point_;
  bool is_replan_;
  int gear_;
  ::apollo::planning_internal::Debug* debug_;
  ::apollo::canbus::Signal* signal_;
  ::apollo::planning::ADCSignals* signals_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static ADCTrajectory* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectoryPoint

// optional double x = 1;
inline void ADCTrajectoryPoint::clear_x() {
  x_ = 0;
}
inline double ADCTrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.x)
  return x_;
}
inline void ADCTrajectoryPoint::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.x)
}

// optional double y = 2;
inline void ADCTrajectoryPoint::clear_y() {
  y_ = 0;
}
inline double ADCTrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.y)
  return y_;
}
inline void ADCTrajectoryPoint::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.y)
}

// optional double z = 3;
inline void ADCTrajectoryPoint::clear_z() {
  z_ = 0;
}
inline double ADCTrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.z)
  return z_;
}
inline void ADCTrajectoryPoint::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.z)
}

// optional double speed = 6;
inline void ADCTrajectoryPoint::clear_speed() {
  speed_ = 0;
}
inline double ADCTrajectoryPoint::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.speed)
  return speed_;
}
inline void ADCTrajectoryPoint::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.speed)
}

// optional double acceleration_s = 7;
inline void ADCTrajectoryPoint::clear_acceleration_s() {
  acceleration_s_ = 0;
}
inline double ADCTrajectoryPoint::acceleration_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.acceleration_s)
  return acceleration_s_;
}
inline void ADCTrajectoryPoint::set_acceleration_s(double value) {
  
  acceleration_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.acceleration_s)
}

// optional double curvature = 8;
inline void ADCTrajectoryPoint::clear_curvature() {
  curvature_ = 0;
}
inline double ADCTrajectoryPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature)
  return curvature_;
}
inline void ADCTrajectoryPoint::set_curvature(double value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature)
}

// optional double curvature_change_rate = 9;
inline void ADCTrajectoryPoint::clear_curvature_change_rate() {
  curvature_change_rate_ = 0;
}
inline double ADCTrajectoryPoint::curvature_change_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
  return curvature_change_rate_;
}
inline void ADCTrajectoryPoint::set_curvature_change_rate(double value) {
  
  curvature_change_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
}

// optional double relative_time = 10;
inline void ADCTrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
}
inline double ADCTrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.relative_time)
  return relative_time_;
}
inline void ADCTrajectoryPoint::set_relative_time(double value) {
  
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.relative_time)
}

// optional double theta = 11;
inline void ADCTrajectoryPoint::clear_theta() {
  theta_ = 0;
}
inline double ADCTrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.theta)
  return theta_;
}
inline void ADCTrajectoryPoint::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.theta)
}

// optional double accumulated_s = 12;
inline void ADCTrajectoryPoint::clear_accumulated_s() {
  accumulated_s_ = 0;
}
inline double ADCTrajectoryPoint::accumulated_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.accumulated_s)
  return accumulated_s_;
}
inline void ADCTrajectoryPoint::set_accumulated_s(double value) {
  
  accumulated_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.accumulated_s)
}

// optional double s = 4;
inline void ADCTrajectoryPoint::clear_s() {
  s_ = 0;
}
inline double ADCTrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.s)
  return s_;
}
inline void ADCTrajectoryPoint::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.s)
}

// optional double l = 5;
inline void ADCTrajectoryPoint::clear_l() {
  l_ = 0;
}
inline double ADCTrajectoryPoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.l)
  return l_;
}
inline void ADCTrajectoryPoint::set_l(double value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.l)
}

// -------------------------------------------------------------------

// ADCSignals

// repeated .apollo.planning.ADCSignals.SignalType signal = 1;
inline int ADCSignals::signal_size() const {
  return signal_.size();
}
inline void ADCSignals::clear_signal() {
  signal_.Clear();
}
inline ::apollo::planning::ADCSignals_SignalType ADCSignals::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCSignals.signal)
  return static_cast< ::apollo::planning::ADCSignals_SignalType >(signal_.Get(index));
}
inline void ADCSignals::set_signal(int index, ::apollo::planning::ADCSignals_SignalType value) {
  signal_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCSignals.signal)
}
inline void ADCSignals::add_signal(::apollo::planning::ADCSignals_SignalType value) {
  signal_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ADCSignals.signal)
}
inline const ::google::protobuf::RepeatedField<int>&
ADCSignals::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCSignals.signal)
  return signal_;
}
inline ::google::protobuf::RepeatedField<int>*
ADCSignals::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCSignals.signal)
  return &signal_;
}

// -------------------------------------------------------------------

// EStop

// optional bool is_estop = 1;
inline void EStop::clear_is_estop() {
  is_estop_ = false;
}
inline bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.is_estop)
  return is_estop_;
}
inline void EStop::set_is_estop(bool value) {
  
  is_estop_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.is_estop)
}

// -------------------------------------------------------------------

// ADCPathPoint

// optional double x = 1;
inline void ADCPathPoint::clear_x() {
  x_ = 0;
}
inline double ADCPathPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.x)
  return x_;
}
inline void ADCPathPoint::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.x)
}

// optional double y = 2;
inline void ADCPathPoint::clear_y() {
  y_ = 0;
}
inline double ADCPathPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.y)
  return y_;
}
inline void ADCPathPoint::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.y)
}

// optional double z = 3;
inline void ADCPathPoint::clear_z() {
  z_ = 0;
}
inline double ADCPathPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.z)
  return z_;
}
inline void ADCPathPoint::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.z)
}

// optional double curvature = 4;
inline void ADCPathPoint::clear_curvature() {
  curvature_ = 0;
}
inline double ADCPathPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.curvature)
  return curvature_;
}
inline void ADCPathPoint::set_curvature(double value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.curvature)
}

// optional double heading = 5;
inline void ADCPathPoint::clear_heading() {
  heading_ = 0;
}
inline double ADCPathPoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.heading)
  return heading_;
}
inline void ADCPathPoint::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.heading)
}

// -------------------------------------------------------------------

// ADCTrajectory

// optional .apollo.common.Header header = 1;
inline bool ADCTrajectory::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void ADCTrajectory::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::apollo::common::Header& ADCTrajectory::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* ADCTrajectory::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.header)
  return header_;
}
inline ::apollo::common::Header* ADCTrajectory::release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
inline void ADCTrajectory::clear_total_path_length() {
  total_path_length_ = 0;
}
inline double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_length)
  return total_path_length_;
}
inline void ADCTrajectory::set_total_path_length(double value) {
  
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_length)
}

// optional double total_path_time = 3;
inline void ADCTrajectory::clear_total_path_time() {
  total_path_time_ = 0;
}
inline double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_time)
  return total_path_time_;
}
inline void ADCTrajectory::set_total_path_time(double value) {
  
  total_path_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_time)
}

// repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4;
inline int ADCTrajectory::adc_trajectory_point_size() const {
  return adc_trajectory_point_.size();
}
inline void ADCTrajectory::clear_adc_trajectory_point() {
  adc_trajectory_point_.Clear();
}
inline const ::apollo::planning::ADCTrajectoryPoint& ADCTrajectory::adc_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Get(index);
}
inline ::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::mutable_adc_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Mutable(index);
}
inline ::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::add_adc_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >*
ADCTrajectory::mutable_adc_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return &adc_trajectory_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >&
ADCTrajectory::adc_trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_;
}

// optional .apollo.planning.EStop estop = 6;
inline bool ADCTrajectory::has_estop() const {
  return !_is_default_instance_ && estop_ != NULL;
}
inline void ADCTrajectory::clear_estop() {
  if (GetArenaNoVirtual() == NULL && estop_ != NULL) delete estop_;
  estop_ = NULL;
}
inline const ::apollo::planning::EStop& ADCTrajectory::estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.estop)
  return estop_ != NULL ? *estop_ : *default_instance_->estop_;
}
inline ::apollo::planning::EStop* ADCTrajectory::mutable_estop() {
  
  if (estop_ == NULL) {
    estop_ = new ::apollo::planning::EStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.estop)
  return estop_;
}
inline ::apollo::planning::EStop* ADCTrajectory::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.estop)
  
  ::apollo::planning::EStop* temp = estop_;
  estop_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_estop(::apollo::planning::EStop* estop) {
  delete estop_;
  estop_ = estop;
  if (estop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.estop)
}

// repeated .apollo.planning.ADCPathPoint adc_path_point = 7;
inline int ADCTrajectory::adc_path_point_size() const {
  return adc_path_point_.size();
}
inline void ADCTrajectory::clear_adc_path_point() {
  adc_path_point_.Clear();
}
inline const ::apollo::planning::ADCPathPoint& ADCTrajectory::adc_path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Get(index);
}
inline ::apollo::planning::ADCPathPoint* ADCTrajectory::mutable_adc_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Mutable(index);
}
inline ::apollo::planning::ADCPathPoint* ADCTrajectory::add_adc_path_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >*
ADCTrajectory::mutable_adc_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_path_point)
  return &adc_path_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >&
ADCTrajectory::adc_path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_;
}

// optional bool is_replan = 9;
inline void ADCTrajectory::clear_is_replan() {
  is_replan_ = false;
}
inline bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.is_replan)
  return is_replan_;
}
inline void ADCTrajectory::set_is_replan(bool value) {
  
  is_replan_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.is_replan)
}

// optional .apollo.canbus.Chassis.GearPosition gear = 10;
inline void ADCTrajectory::clear_gear() {
  gear_ = 0;
}
inline ::apollo::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.gear)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_);
}
inline void ADCTrajectory::set_gear(::apollo::canbus::Chassis_GearPosition value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.gear)
}

// optional .apollo.planning_internal.Debug debug = 8;
inline bool ADCTrajectory::has_debug() const {
  return !_is_default_instance_ && debug_ != NULL;
}
inline void ADCTrajectory::clear_debug() {
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) delete debug_;
  debug_ = NULL;
}
inline const ::apollo::planning_internal::Debug& ADCTrajectory::debug() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.debug)
  return debug_ != NULL ? *debug_ : *default_instance_->debug_;
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::mutable_debug() {
  
  if (debug_ == NULL) {
    debug_ = new ::apollo::planning_internal::Debug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.debug)
  return debug_;
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.debug)
  
  ::apollo::planning_internal::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_debug(::apollo::planning_internal::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.debug)
}

// optional .apollo.canbus.Signal signal = 11;
inline bool ADCTrajectory::has_signal() const {
  return !_is_default_instance_ && signal_ != NULL;
}
inline void ADCTrajectory::clear_signal() {
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;
}
inline const ::apollo::canbus::Signal& ADCTrajectory::signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
inline ::apollo::canbus::Signal* ADCTrajectory::mutable_signal() {
  
  if (signal_ == NULL) {
    signal_ = new ::apollo::canbus::Signal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.signal)
  return signal_;
}
inline ::apollo::canbus::Signal* ADCTrajectory::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.signal)
  
  ::apollo::canbus::Signal* temp = signal_;
  signal_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_signal(::apollo::canbus::Signal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.signal)
}

// optional .apollo.planning.ADCSignals signals = 5;
inline bool ADCTrajectory::has_signals() const {
  return !_is_default_instance_ && signals_ != NULL;
}
inline void ADCTrajectory::clear_signals() {
  if (GetArenaNoVirtual() == NULL && signals_ != NULL) delete signals_;
  signals_ = NULL;
}
inline const ::apollo::planning::ADCSignals& ADCTrajectory::signals() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.signals)
  return signals_ != NULL ? *signals_ : *default_instance_->signals_;
}
inline ::apollo::planning::ADCSignals* ADCTrajectory::mutable_signals() {
  
  if (signals_ == NULL) {
    signals_ = new ::apollo::planning::ADCSignals;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.signals)
  return signals_;
}
inline ::apollo::planning::ADCSignals* ADCTrajectory::release_signals() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.signals)
  
  ::apollo::planning::ADCSignals* temp = signals_;
  signals_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_signals(::apollo::planning::ADCSignals* signals) {
  delete signals_;
  signals_ = signals;
  if (signals) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.signals)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::ADCSignals_SignalType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ADCSignals_SignalType>() {
  return ::apollo::planning::ADCSignals_SignalType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto__INCLUDED
