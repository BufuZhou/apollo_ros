// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/planning/planning.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/planning/planning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* ADCTrajectoryPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCTrajectoryPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADCSignals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCSignals_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ADCSignals_SignalType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADCPathPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCPathPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADCTrajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCTrajectory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/planning/planning.proto");
  GOOGLE_CHECK(file != NULL);
  ADCTrajectoryPoint_descriptor_ = file->message_type(0);
  static const int ADCTrajectoryPoint_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, acceleration_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, curvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, curvature_change_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, relative_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, accumulated_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, l_),
  };
  ADCTrajectoryPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADCTrajectoryPoint_descriptor_,
      ADCTrajectoryPoint::default_instance_,
      ADCTrajectoryPoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(ADCTrajectoryPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, _is_default_instance_));
  ADCSignals_descriptor_ = file->message_type(1);
  static const int ADCSignals_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, signal_),
  };
  ADCSignals_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADCSignals_descriptor_,
      ADCSignals::default_instance_,
      ADCSignals_offsets_,
      -1,
      -1,
      -1,
      sizeof(ADCSignals),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, _is_default_instance_));
  ADCSignals_SignalType_descriptor_ = ADCSignals_descriptor_->enum_type(0);
  EStop_descriptor_ = file->message_type(2);
  static const int EStop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, is_estop_),
  };
  EStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EStop_descriptor_,
      EStop::default_instance_,
      EStop_offsets_,
      -1,
      -1,
      -1,
      sizeof(EStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, _is_default_instance_));
  ADCPathPoint_descriptor_ = file->message_type(3);
  static const int ADCPathPoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, curvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, heading_),
  };
  ADCPathPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADCPathPoint_descriptor_,
      ADCPathPoint::default_instance_,
      ADCPathPoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(ADCPathPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, _is_default_instance_));
  ADCTrajectory_descriptor_ = file->message_type(4);
  static const int ADCTrajectory_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, total_path_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, total_path_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, adc_trajectory_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, estop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, adc_path_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, is_replan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, signals_),
  };
  ADCTrajectory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADCTrajectory_descriptor_,
      ADCTrajectory::default_instance_,
      ADCTrajectory_offsets_,
      -1,
      -1,
      -1,
      sizeof(ADCTrajectory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADCTrajectoryPoint_descriptor_, &ADCTrajectoryPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADCSignals_descriptor_, &ADCSignals::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EStop_descriptor_, &EStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADCPathPoint_descriptor_, &ADCPathPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADCTrajectory_descriptor_, &ADCTrajectory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto() {
  delete ADCTrajectoryPoint::default_instance_;
  delete ADCTrajectoryPoint_reflection_;
  delete ADCSignals::default_instance_;
  delete ADCSignals_reflection_;
  delete EStop::default_instance_;
  delete EStop_reflection_;
  delete ADCPathPoint::default_instance_;
  delete ADCPathPoint_reflection_;
  delete ADCTrajectory::default_instance_;
  delete ADCTrajectory_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto();
  ::apollo::canbus::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  ::apollo::planning_internal::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)apollo_msgs/proto/planning/planning.pr"
    "oto\022\017apollo.planning\032%apollo_msgs/proto/"
    "common/header.proto\032&apollo_msgs/proto/c"
    "anbus/chassis.proto\0322apollo_msgs/proto/p"
    "lanning/planning_internal.proto\"\341\001\n\022ADCT"
    "rajectoryPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001"
    "z\030\003 \001(\001\022\r\n\005speed\030\006 \001(\001\022\026\n\016acceleration_s"
    "\030\007 \001(\001\022\021\n\tcurvature\030\010 \001(\001\022\035\n\025curvature_c"
    "hange_rate\030\t \001(\001\022\025\n\rrelative_time\030\n \001(\001\022"
    "\r\n\005theta\030\013 \001(\001\022\025\n\raccumulated_s\030\014 \001(\001\022\t\n"
    "\001s\030\004 \001(\001\022\t\n\001l\030\005 \001(\001\"\276\001\n\nADCSignals\0226\n\006si"
    "gnal\030\001 \003(\0162&.apollo.planning.ADCSignals."
    "SignalType\"x\n\nSignalType\022\r\n\tLEFT_TURN\020\000\022"
    "\016\n\nRIGHT_TURN\020\001\022\022\n\016LOW_BEAM_LIGHT\020\002\022\023\n\017H"
    "IGH_BEAM_LIGHT\020\003\022\r\n\tFOG_LIGHT\020\004\022\023\n\017EMERG"
    "ENCY_LIGHT\020\005\"\031\n\005EStop\022\020\n\010is_estop\030\001 \001(\010\""
    "S\n\014ADCPathPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n"
    "\001z\030\003 \001(\001\022\021\n\tcurvature\030\004 \001(\001\022\017\n\007heading\030\005"
    " \001(\001\"\326\003\n\rADCTrajectory\022%\n\006header\030\001 \001(\0132\025"
    ".apollo.common.Header\022\031\n\021total_path_leng"
    "th\030\002 \001(\001\022\027\n\017total_path_time\030\003 \001(\001\022A\n\024adc"
    "_trajectory_point\030\004 \003(\0132#.apollo.plannin"
    "g.ADCTrajectoryPoint\022%\n\005estop\030\006 \001(\0132\026.ap"
    "ollo.planning.EStop\0225\n\016adc_path_point\030\007 "
    "\003(\0132\035.apollo.planning.ADCPathPoint\022\021\n\tis"
    "_replan\030\t \001(\010\0221\n\004gear\030\n \001(\0162#.apollo.can"
    "bus.Chassis.GearPosition\022.\n\005debug\030\010 \001(\0132"
    "\037.apollo.planning_internal.Debug\022%\n\006sign"
    "al\030\013 \001(\0132\025.apollo.canbus.Signal\022,\n\007signa"
    "ls\030\005 \001(\0132\033.apollo.planning.ADCSignalsb\006p"
    "roto3", 1205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/planning/planning.proto", &protobuf_RegisterTypes);
  ADCTrajectoryPoint::default_instance_ = new ADCTrajectoryPoint();
  ADCSignals::default_instance_ = new ADCSignals();
  EStop::default_instance_ = new EStop();
  ADCPathPoint::default_instance_ = new ADCPathPoint();
  ADCTrajectory::default_instance_ = new ADCTrajectory();
  ADCTrajectoryPoint::default_instance_->InitAsDefaultInstance();
  ADCSignals::default_instance_->InitAsDefaultInstance();
  EStop::default_instance_->InitAsDefaultInstance();
  ADCPathPoint::default_instance_->InitAsDefaultInstance();
  ADCTrajectory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectoryPoint::kXFieldNumber;
const int ADCTrajectoryPoint::kYFieldNumber;
const int ADCTrajectoryPoint::kZFieldNumber;
const int ADCTrajectoryPoint::kSpeedFieldNumber;
const int ADCTrajectoryPoint::kAccelerationSFieldNumber;
const int ADCTrajectoryPoint::kCurvatureFieldNumber;
const int ADCTrajectoryPoint::kCurvatureChangeRateFieldNumber;
const int ADCTrajectoryPoint::kRelativeTimeFieldNumber;
const int ADCTrajectoryPoint::kThetaFieldNumber;
const int ADCTrajectoryPoint::kAccumulatedSFieldNumber;
const int ADCTrajectoryPoint::kSFieldNumber;
const int ADCTrajectoryPoint::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectoryPoint::ADCTrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCTrajectoryPoint)
}

void ADCTrajectoryPoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ADCTrajectoryPoint::ADCTrajectoryPoint(const ADCTrajectoryPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectoryPoint)
}

void ADCTrajectoryPoint::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  speed_ = 0;
  acceleration_s_ = 0;
  curvature_ = 0;
  curvature_change_rate_ = 0;
  relative_time_ = 0;
  theta_ = 0;
  accumulated_s_ = 0;
  s_ = 0;
  l_ = 0;
}

ADCTrajectoryPoint::~ADCTrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectoryPoint)
  SharedDtor();
}

void ADCTrajectoryPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADCTrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectoryPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCTrajectoryPoint_descriptor_;
}

const ADCTrajectoryPoint& ADCTrajectoryPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  return *default_instance_;
}

ADCTrajectoryPoint* ADCTrajectoryPoint::default_instance_ = NULL;

ADCTrajectoryPoint* ADCTrajectoryPoint::New(::google::protobuf::Arena* arena) const {
  ADCTrajectoryPoint* n = new ADCTrajectoryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectoryPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADCTrajectoryPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADCTrajectoryPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, relative_time_);
  ZR_(theta_, l_);

#undef ZR_HELPER_
#undef ZR_

}

bool ADCTrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCTrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_s;
        break;
      }

      // optional double s = 4;
      case 4: {
        if (tag == 33) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_l;
        break;
      }

      // optional double l = 5;
      case 5: {
        if (tag == 41) {
         parse_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_speed;
        break;
      }

      // optional double speed = 6;
      case 6: {
        if (tag == 49) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_acceleration_s;
        break;
      }

      // optional double acceleration_s = 7;
      case 7: {
        if (tag == 57) {
         parse_acceleration_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_curvature;
        break;
      }

      // optional double curvature = 8;
      case 8: {
        if (tag == 65) {
         parse_curvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_curvature_change_rate;
        break;
      }

      // optional double curvature_change_rate = 9;
      case 9: {
        if (tag == 73) {
         parse_curvature_change_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_change_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_relative_time;
        break;
      }

      // optional double relative_time = 10;
      case 10: {
        if (tag == 81) {
         parse_relative_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_theta;
        break;
      }

      // optional double theta = 11;
      case 11: {
        if (tag == 89) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_accumulated_s;
        break;
      }

      // optional double accumulated_s = 12;
      case 12: {
        if (tag == 97) {
         parse_accumulated_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accumulated_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCTrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCTrajectoryPoint)
  return false;
#undef DO_
}

void ADCTrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCTrajectoryPoint)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double s = 4;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->s(), output);
  }

  // optional double l = 5;
  if (this->l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->l(), output);
  }

  // optional double speed = 6;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed(), output);
  }

  // optional double acceleration_s = 7;
  if (this->acceleration_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acceleration_s(), output);
  }

  // optional double curvature = 8;
  if (this->curvature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->curvature(), output);
  }

  // optional double curvature_change_rate = 9;
  if (this->curvature_change_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->curvature_change_rate(), output);
  }

  // optional double relative_time = 10;
  if (this->relative_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->relative_time(), output);
  }

  // optional double theta = 11;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->theta(), output);
  }

  // optional double accumulated_s = 12;
  if (this->accumulated_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->accumulated_s(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCTrajectoryPoint)
}

::google::protobuf::uint8* ADCTrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectoryPoint)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double s = 4;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->s(), target);
  }

  // optional double l = 5;
  if (this->l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->l(), target);
  }

  // optional double speed = 6;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed(), target);
  }

  // optional double acceleration_s = 7;
  if (this->acceleration_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acceleration_s(), target);
  }

  // optional double curvature = 8;
  if (this->curvature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->curvature(), target);
  }

  // optional double curvature_change_rate = 9;
  if (this->curvature_change_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->curvature_change_rate(), target);
  }

  // optional double relative_time = 10;
  if (this->relative_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->relative_time(), target);
  }

  // optional double theta = 11;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->theta(), target);
  }

  // optional double accumulated_s = 12;
  if (this->accumulated_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->accumulated_s(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectoryPoint)
  return target;
}

int ADCTrajectoryPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectoryPoint)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // optional double speed = 6;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double acceleration_s = 7;
  if (this->acceleration_s() != 0) {
    total_size += 1 + 8;
  }

  // optional double curvature = 8;
  if (this->curvature() != 0) {
    total_size += 1 + 8;
  }

  // optional double curvature_change_rate = 9;
  if (this->curvature_change_rate() != 0) {
    total_size += 1 + 8;
  }

  // optional double relative_time = 10;
  if (this->relative_time() != 0) {
    total_size += 1 + 8;
  }

  // optional double theta = 11;
  if (this->theta() != 0) {
    total_size += 1 + 8;
  }

  // optional double accumulated_s = 12;
  if (this->accumulated_s() != 0) {
    total_size += 1 + 8;
  }

  // optional double s = 4;
  if (this->s() != 0) {
    total_size += 1 + 8;
  }

  // optional double l = 5;
  if (this->l() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ADCTrajectoryPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCTrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCTrajectoryPoint)
    MergeFrom(*source);
  }
}

void ADCTrajectoryPoint::MergeFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.acceleration_s() != 0) {
    set_acceleration_s(from.acceleration_s());
  }
  if (from.curvature() != 0) {
    set_curvature(from.curvature());
  }
  if (from.curvature_change_rate() != 0) {
    set_curvature_change_rate(from.curvature_change_rate());
  }
  if (from.relative_time() != 0) {
    set_relative_time(from.relative_time());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.accumulated_s() != 0) {
    set_accumulated_s(from.accumulated_s());
  }
  if (from.s() != 0) {
    set_s(from.s());
  }
  if (from.l() != 0) {
    set_l(from.l());
  }
}

void ADCTrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectoryPoint::CopyFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectoryPoint::IsInitialized() const {

  return true;
}

void ADCTrajectoryPoint::Swap(ADCTrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectoryPoint::InternalSwap(ADCTrajectoryPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(speed_, other->speed_);
  std::swap(acceleration_s_, other->acceleration_s_);
  std::swap(curvature_, other->curvature_);
  std::swap(curvature_change_rate_, other->curvature_change_rate_);
  std::swap(relative_time_, other->relative_time_);
  std::swap(theta_, other->theta_);
  std::swap(accumulated_s_, other->accumulated_s_);
  std::swap(s_, other->s_);
  std::swap(l_, other->l_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectoryPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCTrajectoryPoint_descriptor_;
  metadata.reflection = ADCTrajectoryPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectoryPoint

// optional double x = 1;
void ADCTrajectoryPoint::clear_x() {
  x_ = 0;
}
 double ADCTrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.x)
  return x_;
}
 void ADCTrajectoryPoint::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.x)
}

// optional double y = 2;
void ADCTrajectoryPoint::clear_y() {
  y_ = 0;
}
 double ADCTrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.y)
  return y_;
}
 void ADCTrajectoryPoint::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.y)
}

// optional double z = 3;
void ADCTrajectoryPoint::clear_z() {
  z_ = 0;
}
 double ADCTrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.z)
  return z_;
}
 void ADCTrajectoryPoint::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.z)
}

// optional double speed = 6;
void ADCTrajectoryPoint::clear_speed() {
  speed_ = 0;
}
 double ADCTrajectoryPoint::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.speed)
  return speed_;
}
 void ADCTrajectoryPoint::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.speed)
}

// optional double acceleration_s = 7;
void ADCTrajectoryPoint::clear_acceleration_s() {
  acceleration_s_ = 0;
}
 double ADCTrajectoryPoint::acceleration_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.acceleration_s)
  return acceleration_s_;
}
 void ADCTrajectoryPoint::set_acceleration_s(double value) {
  
  acceleration_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.acceleration_s)
}

// optional double curvature = 8;
void ADCTrajectoryPoint::clear_curvature() {
  curvature_ = 0;
}
 double ADCTrajectoryPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature)
  return curvature_;
}
 void ADCTrajectoryPoint::set_curvature(double value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature)
}

// optional double curvature_change_rate = 9;
void ADCTrajectoryPoint::clear_curvature_change_rate() {
  curvature_change_rate_ = 0;
}
 double ADCTrajectoryPoint::curvature_change_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
  return curvature_change_rate_;
}
 void ADCTrajectoryPoint::set_curvature_change_rate(double value) {
  
  curvature_change_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
}

// optional double relative_time = 10;
void ADCTrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
}
 double ADCTrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.relative_time)
  return relative_time_;
}
 void ADCTrajectoryPoint::set_relative_time(double value) {
  
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.relative_time)
}

// optional double theta = 11;
void ADCTrajectoryPoint::clear_theta() {
  theta_ = 0;
}
 double ADCTrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.theta)
  return theta_;
}
 void ADCTrajectoryPoint::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.theta)
}

// optional double accumulated_s = 12;
void ADCTrajectoryPoint::clear_accumulated_s() {
  accumulated_s_ = 0;
}
 double ADCTrajectoryPoint::accumulated_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.accumulated_s)
  return accumulated_s_;
}
 void ADCTrajectoryPoint::set_accumulated_s(double value) {
  
  accumulated_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.accumulated_s)
}

// optional double s = 4;
void ADCTrajectoryPoint::clear_s() {
  s_ = 0;
}
 double ADCTrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.s)
  return s_;
}
 void ADCTrajectoryPoint::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.s)
}

// optional double l = 5;
void ADCTrajectoryPoint::clear_l() {
  l_ = 0;
}
 double ADCTrajectoryPoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.l)
  return l_;
}
 void ADCTrajectoryPoint::set_l(double value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ADCSignals_SignalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCSignals_SignalType_descriptor_;
}
bool ADCSignals_SignalType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCSignals_SignalType ADCSignals::LEFT_TURN;
const ADCSignals_SignalType ADCSignals::RIGHT_TURN;
const ADCSignals_SignalType ADCSignals::LOW_BEAM_LIGHT;
const ADCSignals_SignalType ADCSignals::HIGH_BEAM_LIGHT;
const ADCSignals_SignalType ADCSignals::FOG_LIGHT;
const ADCSignals_SignalType ADCSignals::EMERGENCY_LIGHT;
const ADCSignals_SignalType ADCSignals::SignalType_MIN;
const ADCSignals_SignalType ADCSignals::SignalType_MAX;
const int ADCSignals::SignalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCSignals::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCSignals::ADCSignals()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCSignals)
}

void ADCSignals::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ADCSignals::ADCSignals(const ADCSignals& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCSignals)
}

void ADCSignals::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ADCSignals::~ADCSignals() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCSignals)
  SharedDtor();
}

void ADCSignals::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADCSignals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCSignals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCSignals_descriptor_;
}

const ADCSignals& ADCSignals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  return *default_instance_;
}

ADCSignals* ADCSignals::default_instance_ = NULL;

ADCSignals* ADCSignals::New(::google::protobuf::Arena* arena) const {
  ADCSignals* n = new ADCSignals;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCSignals)
  signal_.Clear();
}

bool ADCSignals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCSignals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
      case 1: {
        if (tag == 10) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_signal(static_cast< ::apollo::planning::ADCSignals_SignalType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_signal(static_cast< ::apollo::planning::ADCSignals_SignalType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCSignals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCSignals)
  return false;
#undef DO_
}

void ADCSignals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCSignals)
  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  if (this->signal_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_signal_cached_byte_size_);
  }
  for (int i = 0; i < this->signal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->signal(i), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCSignals)
}

::google::protobuf::uint8* ADCSignals::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCSignals)
  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  if (this->signal_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _signal_cached_byte_size_, target);
  }
  for (int i = 0; i < this->signal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->signal(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCSignals)
  return target;
}

int ADCSignals::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCSignals)
  int total_size = 0;

  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->signal_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->signal(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _signal_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCSignals::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCSignals)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ADCSignals* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCSignals>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCSignals)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCSignals)
    MergeFrom(*source);
  }
}

void ADCSignals::MergeFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCSignals)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  signal_.MergeFrom(from.signal_);
}

void ADCSignals::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCSignals::CopyFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCSignals::IsInitialized() const {

  return true;
}

void ADCSignals::Swap(ADCSignals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCSignals::InternalSwap(ADCSignals* other) {
  signal_.UnsafeArenaSwap(&other->signal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCSignals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCSignals_descriptor_;
  metadata.reflection = ADCSignals_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCSignals

// repeated .apollo.planning.ADCSignals.SignalType signal = 1;
int ADCSignals::signal_size() const {
  return signal_.size();
}
void ADCSignals::clear_signal() {
  signal_.Clear();
}
 ::apollo::planning::ADCSignals_SignalType ADCSignals::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCSignals.signal)
  return static_cast< ::apollo::planning::ADCSignals_SignalType >(signal_.Get(index));
}
 void ADCSignals::set_signal(int index, ::apollo::planning::ADCSignals_SignalType value) {
  signal_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCSignals.signal)
}
 void ADCSignals::add_signal(::apollo::planning::ADCSignals_SignalType value) {
  signal_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ADCSignals.signal)
}
 const ::google::protobuf::RepeatedField<int>&
ADCSignals::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCSignals.signal)
  return signal_;
}
 ::google::protobuf::RepeatedField<int>*
ADCSignals::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCSignals.signal)
  return &signal_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EStop::kIsEstopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EStop::EStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.EStop)
}

void EStop::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EStop::EStop(const EStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EStop)
}

void EStop::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_estop_ = false;
}

EStop::~EStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.EStop)
  SharedDtor();
}

void EStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EStop_descriptor_;
}

const EStop& EStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  return *default_instance_;
}

EStop* EStop::default_instance_ = NULL;

EStop* EStop::New(::google::protobuf::Arena* arena) const {
  EStop* n = new EStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EStop)
  is_estop_ = false;
}

bool EStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.EStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_estop = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_estop_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.EStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.EStop)
  return false;
#undef DO_
}

void EStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.EStop)
  // optional bool is_estop = 1;
  if (this->is_estop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_estop(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.planning.EStop)
}

::google::protobuf::uint8* EStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EStop)
  // optional bool is_estop = 1;
  if (this->is_estop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_estop(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EStop)
  return target;
}

int EStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EStop)
  int total_size = 0;

  // optional bool is_estop = 1;
  if (this->is_estop() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.EStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.EStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.EStop)
    MergeFrom(*source);
  }
}

void EStop::MergeFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_estop() != 0) {
    set_is_estop(from.is_estop());
  }
}

void EStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EStop::CopyFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EStop::IsInitialized() const {

  return true;
}

void EStop::Swap(EStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EStop::InternalSwap(EStop* other) {
  std::swap(is_estop_, other->is_estop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EStop_descriptor_;
  metadata.reflection = EStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EStop

// optional bool is_estop = 1;
void EStop::clear_is_estop() {
  is_estop_ = false;
}
 bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.is_estop)
  return is_estop_;
}
 void EStop::set_is_estop(bool value) {
  
  is_estop_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.is_estop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCPathPoint::kXFieldNumber;
const int ADCPathPoint::kYFieldNumber;
const int ADCPathPoint::kZFieldNumber;
const int ADCPathPoint::kCurvatureFieldNumber;
const int ADCPathPoint::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCPathPoint::ADCPathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCPathPoint)
}

void ADCPathPoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ADCPathPoint::ADCPathPoint(const ADCPathPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCPathPoint)
}

void ADCPathPoint::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  curvature_ = 0;
  heading_ = 0;
}

ADCPathPoint::~ADCPathPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCPathPoint)
  SharedDtor();
}

void ADCPathPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADCPathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCPathPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCPathPoint_descriptor_;
}

const ADCPathPoint& ADCPathPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  return *default_instance_;
}

ADCPathPoint* ADCPathPoint::default_instance_ = NULL;

ADCPathPoint* ADCPathPoint::New(::google::protobuf::Arena* arena) const {
  ADCPathPoint* n = new ADCPathPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCPathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCPathPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADCPathPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADCPathPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, heading_);

#undef ZR_HELPER_
#undef ZR_

}

bool ADCPathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCPathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_curvature;
        break;
      }

      // optional double curvature = 4;
      case 4: {
        if (tag == 33) {
         parse_curvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_heading;
        break;
      }

      // optional double heading = 5;
      case 5: {
        if (tag == 41) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCPathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCPathPoint)
  return false;
#undef DO_
}

void ADCPathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCPathPoint)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double curvature = 4;
  if (this->curvature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->curvature(), output);
  }

  // optional double heading = 5;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCPathPoint)
}

::google::protobuf::uint8* ADCPathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCPathPoint)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double curvature = 4;
  if (this->curvature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->curvature(), target);
  }

  // optional double heading = 5;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCPathPoint)
  return target;
}

int ADCPathPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCPathPoint)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // optional double curvature = 4;
  if (this->curvature() != 0) {
    total_size += 1 + 8;
  }

  // optional double heading = 5;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCPathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCPathPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ADCPathPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCPathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCPathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCPathPoint)
    MergeFrom(*source);
  }
}

void ADCPathPoint::MergeFrom(const ADCPathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCPathPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.curvature() != 0) {
    set_curvature(from.curvature());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
}

void ADCPathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCPathPoint::CopyFrom(const ADCPathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCPathPoint::IsInitialized() const {

  return true;
}

void ADCPathPoint::Swap(ADCPathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCPathPoint::InternalSwap(ADCPathPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(curvature_, other->curvature_);
  std::swap(heading_, other->heading_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCPathPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCPathPoint_descriptor_;
  metadata.reflection = ADCPathPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCPathPoint

// optional double x = 1;
void ADCPathPoint::clear_x() {
  x_ = 0;
}
 double ADCPathPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.x)
  return x_;
}
 void ADCPathPoint::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.x)
}

// optional double y = 2;
void ADCPathPoint::clear_y() {
  y_ = 0;
}
 double ADCPathPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.y)
  return y_;
}
 void ADCPathPoint::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.y)
}

// optional double z = 3;
void ADCPathPoint::clear_z() {
  z_ = 0;
}
 double ADCPathPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.z)
  return z_;
}
 void ADCPathPoint::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.z)
}

// optional double curvature = 4;
void ADCPathPoint::clear_curvature() {
  curvature_ = 0;
}
 double ADCPathPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.curvature)
  return curvature_;
}
 void ADCPathPoint::set_curvature(double value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.curvature)
}

// optional double heading = 5;
void ADCPathPoint::clear_heading() {
  heading_ = 0;
}
 double ADCPathPoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.heading)
  return heading_;
}
 void ADCPathPoint::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectory::kHeaderFieldNumber;
const int ADCTrajectory::kTotalPathLengthFieldNumber;
const int ADCTrajectory::kTotalPathTimeFieldNumber;
const int ADCTrajectory::kAdcTrajectoryPointFieldNumber;
const int ADCTrajectory::kEstopFieldNumber;
const int ADCTrajectory::kAdcPathPointFieldNumber;
const int ADCTrajectory::kIsReplanFieldNumber;
const int ADCTrajectory::kGearFieldNumber;
const int ADCTrajectory::kDebugFieldNumber;
const int ADCTrajectory::kSignalFieldNumber;
const int ADCTrajectory::kSignalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectory::ADCTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCTrajectory)
}

void ADCTrajectory::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  estop_ = const_cast< ::apollo::planning::EStop*>(&::apollo::planning::EStop::default_instance());
  debug_ = const_cast< ::apollo::planning_internal::Debug*>(&::apollo::planning_internal::Debug::default_instance());
  signal_ = const_cast< ::apollo::canbus::Signal*>(&::apollo::canbus::Signal::default_instance());
  signals_ = const_cast< ::apollo::planning::ADCSignals*>(&::apollo::planning::ADCSignals::default_instance());
}

ADCTrajectory::ADCTrajectory(const ADCTrajectory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectory)
}

void ADCTrajectory::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  total_path_length_ = 0;
  total_path_time_ = 0;
  estop_ = NULL;
  is_replan_ = false;
  gear_ = 0;
  debug_ = NULL;
  signal_ = NULL;
  signals_ = NULL;
}

ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectory)
  SharedDtor();
}

void ADCTrajectory::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete estop_;
    delete debug_;
    delete signal_;
    delete signals_;
  }
}

void ADCTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCTrajectory_descriptor_;
}

const ADCTrajectory& ADCTrajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_2eproto();
  return *default_instance_;
}

ADCTrajectory* ADCTrajectory::default_instance_ = NULL;

ADCTrajectory* ADCTrajectory::New(::google::protobuf::Arena* arena) const {
  ADCTrajectory* n = new ADCTrajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADCTrajectory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADCTrajectory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_path_length_, total_path_time_);
  ZR_(is_replan_, gear_);
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && estop_ != NULL) delete estop_;
  estop_ = NULL;
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) delete debug_;
  debug_ = NULL;
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;
  if (GetArenaNoVirtual() == NULL && signals_ != NULL) delete signals_;
  signals_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  adc_trajectory_point_.Clear();
  adc_path_point_.Clear();
}

bool ADCTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCTrajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total_path_length;
        break;
      }

      // optional double total_path_length = 2;
      case 2: {
        if (tag == 17) {
         parse_total_path_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_total_path_time;
        break;
      }

      // optional double total_path_time = 3;
      case 3: {
        if (tag == 25) {
         parse_total_path_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_adc_trajectory_point;
        break;
      }

      // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4;
      case 4: {
        if (tag == 34) {
         parse_adc_trajectory_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_adc_trajectory_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_adc_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_adc_trajectory_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_signals;
        break;
      }

      // optional .apollo.planning.ADCSignals signals = 5;
      case 5: {
        if (tag == 42) {
         parse_signals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_estop;
        break;
      }

      // optional .apollo.planning.EStop estop = 6;
      case 6: {
        if (tag == 50) {
         parse_estop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_adc_path_point;
        break;
      }

      // repeated .apollo.planning.ADCPathPoint adc_path_point = 7;
      case 7: {
        if (tag == 58) {
         parse_adc_path_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_adc_path_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_adc_path_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_adc_path_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_debug;
        break;
      }

      // optional .apollo.planning_internal.Debug debug = 8;
      case 8: {
        if (tag == 66) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_replan;
        break;
      }

      // optional bool is_replan = 9;
      case 9: {
        if (tag == 72) {
         parse_is_replan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replan_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gear;
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear = 10;
      case 10: {
        if (tag == 80) {
         parse_gear:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_signal;
        break;
      }

      // optional .apollo.canbus.Signal signal = 11;
      case 11: {
        if (tag == 90) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCTrajectory)
  return false;
#undef DO_
}

void ADCTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCTrajectory)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double total_path_length = 2;
  if (this->total_path_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_path_length(), output);
  }

  // optional double total_path_time = 3;
  if (this->total_path_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->total_path_time(), output);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4;
  for (unsigned int i = 0, n = this->adc_trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->adc_trajectory_point(i), output);
  }

  // optional .apollo.planning.ADCSignals signals = 5;
  if (this->has_signals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->signals_, output);
  }

  // optional .apollo.planning.EStop estop = 6;
  if (this->has_estop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->estop_, output);
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7;
  for (unsigned int i = 0, n = this->adc_path_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->adc_path_point(i), output);
  }

  // optional .apollo.planning_internal.Debug debug = 8;
  if (this->has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->debug_, output);
  }

  // optional bool is_replan = 9;
  if (this->is_replan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_replan(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  if (this->gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gear(), output);
  }

  // optional .apollo.canbus.Signal signal = 11;
  if (this->has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->signal_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCTrajectory)
}

::google::protobuf::uint8* ADCTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectory)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional double total_path_length = 2;
  if (this->total_path_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_path_length(), target);
  }

  // optional double total_path_time = 3;
  if (this->total_path_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->total_path_time(), target);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4;
  for (unsigned int i = 0, n = this->adc_trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->adc_trajectory_point(i), false, target);
  }

  // optional .apollo.planning.ADCSignals signals = 5;
  if (this->has_signals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->signals_, false, target);
  }

  // optional .apollo.planning.EStop estop = 6;
  if (this->has_estop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->estop_, false, target);
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7;
  for (unsigned int i = 0, n = this->adc_path_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->adc_path_point(i), false, target);
  }

  // optional .apollo.planning_internal.Debug debug = 8;
  if (this->has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->debug_, false, target);
  }

  // optional bool is_replan = 9;
  if (this->is_replan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_replan(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  if (this->gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gear(), target);
  }

  // optional .apollo.canbus.Signal signal = 11;
  if (this->has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->signal_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectory)
  return target;
}

int ADCTrajectory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectory)
  int total_size = 0;

  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional double total_path_length = 2;
  if (this->total_path_length() != 0) {
    total_size += 1 + 8;
  }

  // optional double total_path_time = 3;
  if (this->total_path_time() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.planning.EStop estop = 6;
  if (this->has_estop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->estop_);
  }

  // optional bool is_replan = 9;
  if (this->is_replan() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  if (this->gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
  }

  // optional .apollo.planning_internal.Debug debug = 8;
  if (this->has_debug()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->debug_);
  }

  // optional .apollo.canbus.Signal signal = 11;
  if (this->has_signal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signal_);
  }

  // optional .apollo.planning.ADCSignals signals = 5;
  if (this->has_signals()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signals_);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4;
  total_size += 1 * this->adc_trajectory_point_size();
  for (int i = 0; i < this->adc_trajectory_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adc_trajectory_point(i));
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7;
  total_size += 1 * this->adc_path_point_size();
  for (int i = 0; i < this->adc_path_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adc_path_point(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCTrajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ADCTrajectory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCTrajectory)
    MergeFrom(*source);
  }
}

void ADCTrajectory::MergeFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  adc_trajectory_point_.MergeFrom(from.adc_trajectory_point_);
  adc_path_point_.MergeFrom(from.adc_path_point_);
  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.total_path_length() != 0) {
    set_total_path_length(from.total_path_length());
  }
  if (from.total_path_time() != 0) {
    set_total_path_time(from.total_path_time());
  }
  if (from.has_estop()) {
    mutable_estop()->::apollo::planning::EStop::MergeFrom(from.estop());
  }
  if (from.is_replan() != 0) {
    set_is_replan(from.is_replan());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
  if (from.has_debug()) {
    mutable_debug()->::apollo::planning_internal::Debug::MergeFrom(from.debug());
  }
  if (from.has_signal()) {
    mutable_signal()->::apollo::canbus::Signal::MergeFrom(from.signal());
  }
  if (from.has_signals()) {
    mutable_signals()->::apollo::planning::ADCSignals::MergeFrom(from.signals());
  }
}

void ADCTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory::IsInitialized() const {

  return true;
}

void ADCTrajectory::Swap(ADCTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectory::InternalSwap(ADCTrajectory* other) {
  std::swap(header_, other->header_);
  std::swap(total_path_length_, other->total_path_length_);
  std::swap(total_path_time_, other->total_path_time_);
  adc_trajectory_point_.UnsafeArenaSwap(&other->adc_trajectory_point_);
  std::swap(estop_, other->estop_);
  adc_path_point_.UnsafeArenaSwap(&other->adc_path_point_);
  std::swap(is_replan_, other->is_replan_);
  std::swap(gear_, other->gear_);
  std::swap(debug_, other->debug_);
  std::swap(signal_, other->signal_);
  std::swap(signals_, other->signals_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCTrajectory_descriptor_;
  metadata.reflection = ADCTrajectory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectory

// optional .apollo.common.Header header = 1;
bool ADCTrajectory::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void ADCTrajectory::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::apollo::common::Header& ADCTrajectory::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* ADCTrajectory::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.header)
  return header_;
}
::apollo::common::Header* ADCTrajectory::release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
void ADCTrajectory::clear_total_path_length() {
  total_path_length_ = 0;
}
 double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_length)
  return total_path_length_;
}
 void ADCTrajectory::set_total_path_length(double value) {
  
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_length)
}

// optional double total_path_time = 3;
void ADCTrajectory::clear_total_path_time() {
  total_path_time_ = 0;
}
 double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_time)
  return total_path_time_;
}
 void ADCTrajectory::set_total_path_time(double value) {
  
  total_path_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_time)
}

// repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4;
int ADCTrajectory::adc_trajectory_point_size() const {
  return adc_trajectory_point_.size();
}
void ADCTrajectory::clear_adc_trajectory_point() {
  adc_trajectory_point_.Clear();
}
const ::apollo::planning::ADCTrajectoryPoint& ADCTrajectory::adc_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Get(index);
}
::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::mutable_adc_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Mutable(index);
}
::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::add_adc_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >*
ADCTrajectory::mutable_adc_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return &adc_trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >&
ADCTrajectory::adc_trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_;
}

// optional .apollo.planning.EStop estop = 6;
bool ADCTrajectory::has_estop() const {
  return !_is_default_instance_ && estop_ != NULL;
}
void ADCTrajectory::clear_estop() {
  if (GetArenaNoVirtual() == NULL && estop_ != NULL) delete estop_;
  estop_ = NULL;
}
const ::apollo::planning::EStop& ADCTrajectory::estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.estop)
  return estop_ != NULL ? *estop_ : *default_instance_->estop_;
}
::apollo::planning::EStop* ADCTrajectory::mutable_estop() {
  
  if (estop_ == NULL) {
    estop_ = new ::apollo::planning::EStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.estop)
  return estop_;
}
::apollo::planning::EStop* ADCTrajectory::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.estop)
  
  ::apollo::planning::EStop* temp = estop_;
  estop_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_estop(::apollo::planning::EStop* estop) {
  delete estop_;
  estop_ = estop;
  if (estop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.estop)
}

// repeated .apollo.planning.ADCPathPoint adc_path_point = 7;
int ADCTrajectory::adc_path_point_size() const {
  return adc_path_point_.size();
}
void ADCTrajectory::clear_adc_path_point() {
  adc_path_point_.Clear();
}
const ::apollo::planning::ADCPathPoint& ADCTrajectory::adc_path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Get(index);
}
::apollo::planning::ADCPathPoint* ADCTrajectory::mutable_adc_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Mutable(index);
}
::apollo::planning::ADCPathPoint* ADCTrajectory::add_adc_path_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >*
ADCTrajectory::mutable_adc_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_path_point)
  return &adc_path_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >&
ADCTrajectory::adc_path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_;
}

// optional bool is_replan = 9;
void ADCTrajectory::clear_is_replan() {
  is_replan_ = false;
}
 bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.is_replan)
  return is_replan_;
}
 void ADCTrajectory::set_is_replan(bool value) {
  
  is_replan_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.is_replan)
}

// optional .apollo.canbus.Chassis.GearPosition gear = 10;
void ADCTrajectory::clear_gear() {
  gear_ = 0;
}
 ::apollo::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.gear)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_);
}
 void ADCTrajectory::set_gear(::apollo::canbus::Chassis_GearPosition value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.gear)
}

// optional .apollo.planning_internal.Debug debug = 8;
bool ADCTrajectory::has_debug() const {
  return !_is_default_instance_ && debug_ != NULL;
}
void ADCTrajectory::clear_debug() {
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) delete debug_;
  debug_ = NULL;
}
const ::apollo::planning_internal::Debug& ADCTrajectory::debug() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.debug)
  return debug_ != NULL ? *debug_ : *default_instance_->debug_;
}
::apollo::planning_internal::Debug* ADCTrajectory::mutable_debug() {
  
  if (debug_ == NULL) {
    debug_ = new ::apollo::planning_internal::Debug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.debug)
  return debug_;
}
::apollo::planning_internal::Debug* ADCTrajectory::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.debug)
  
  ::apollo::planning_internal::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_debug(::apollo::planning_internal::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.debug)
}

// optional .apollo.canbus.Signal signal = 11;
bool ADCTrajectory::has_signal() const {
  return !_is_default_instance_ && signal_ != NULL;
}
void ADCTrajectory::clear_signal() {
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;
}
const ::apollo::canbus::Signal& ADCTrajectory::signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
::apollo::canbus::Signal* ADCTrajectory::mutable_signal() {
  
  if (signal_ == NULL) {
    signal_ = new ::apollo::canbus::Signal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.signal)
  return signal_;
}
::apollo::canbus::Signal* ADCTrajectory::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.signal)
  
  ::apollo::canbus::Signal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_signal(::apollo::canbus::Signal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.signal)
}

// optional .apollo.planning.ADCSignals signals = 5;
bool ADCTrajectory::has_signals() const {
  return !_is_default_instance_ && signals_ != NULL;
}
void ADCTrajectory::clear_signals() {
  if (GetArenaNoVirtual() == NULL && signals_ != NULL) delete signals_;
  signals_ = NULL;
}
const ::apollo::planning::ADCSignals& ADCTrajectory::signals() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.signals)
  return signals_ != NULL ? *signals_ : *default_instance_->signals_;
}
::apollo::planning::ADCSignals* ADCTrajectory::mutable_signals() {
  
  if (signals_ == NULL) {
    signals_ = new ::apollo::planning::ADCSignals;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.signals)
  return signals_;
}
::apollo::planning::ADCSignals* ADCTrajectory::release_signals() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.signals)
  
  ::apollo::planning::ADCSignals* temp = signals_;
  signals_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_signals(::apollo::planning::ADCSignals* signals) {
  delete signals_;
  signals_ = signals;
  if (signals) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.signals)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
