// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/planning/planning_internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/planning/planning_internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning_internal {

namespace {

const ::google::protobuf::Descriptor* PlanningObstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanningObstacle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_DebugMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_DebugMessage_reflection_ = NULL;
struct Debug_DebugMessageOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr trace_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::internal::ArenaStringPtr warn_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::internal::ArenaStringPtr fatal_;
}* Debug_DebugMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* Debug_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlanningData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanningData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/planning/planning_internal.proto");
  GOOGLE_CHECK(file != NULL);
  PlanningObstacle_descriptor_ = file->message_type(0);
  static const int PlanningObstacle_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, perception_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, decision_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, polygon_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, tracking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, perception_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, perception_object_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, prediction_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, prediction_trajectory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, decision_object_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, object_decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, planning_object_decision_),
  };
  PlanningObstacle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlanningObstacle_descriptor_,
      PlanningObstacle::default_instance_,
      PlanningObstacle_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlanningObstacle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningObstacle, _is_default_instance_));
  Debug_descriptor_ = file->message_type(1);
  static const int Debug_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, planning_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, debug_message_),
  };
  Debug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Debug_descriptor_,
      Debug::default_instance_,
      Debug_offsets_,
      -1,
      -1,
      -1,
      sizeof(Debug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _is_default_instance_));
  Debug_DebugMessage_descriptor_ = Debug_descriptor_->nested_type(0);
  static const int Debug_DebugMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_DebugMessage, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_DebugMessage, id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Debug_DebugMessage_default_oneof_instance_, trace_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Debug_DebugMessage_default_oneof_instance_, info_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Debug_DebugMessage_default_oneof_instance_, warn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Debug_DebugMessage_default_oneof_instance_, error_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Debug_DebugMessage_default_oneof_instance_, fatal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_DebugMessage, debug_string_),
  };
  Debug_DebugMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Debug_DebugMessage_descriptor_,
      Debug_DebugMessage::default_instance_,
      Debug_DebugMessage_offsets_,
      -1,
      -1,
      -1,
      Debug_DebugMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_DebugMessage, _oneof_case_[0]),
      sizeof(Debug_DebugMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_DebugMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_DebugMessage, _is_default_instance_));
  Debug_ErrorCode_descriptor_ = Debug_descriptor_->enum_type(0);
  PlanningData_descriptor_ = file->message_type(2);
  static const int PlanningData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, init_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, main_decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, planning_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, light_signal_),
  };
  PlanningData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlanningData_descriptor_,
      PlanningData::default_instance_,
      PlanningData_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlanningData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlanningObstacle_descriptor_, &PlanningObstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Debug_descriptor_, &Debug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Debug_DebugMessage_descriptor_, &Debug_DebugMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlanningData_descriptor_, &PlanningData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto() {
  delete PlanningObstacle::default_instance_;
  delete PlanningObstacle_reflection_;
  delete Debug::default_instance_;
  delete Debug_reflection_;
  delete Debug_DebugMessage::default_instance_;
  delete Debug_DebugMessage_default_oneof_instance_;
  delete Debug_DebugMessage_reflection_;
  delete PlanningData::default_instance_;
  delete PlanningData_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto();
  ::apollo::decision::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  ::apollo::localization::protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2flocalization_2eproto();
  ::apollo::localization::protobuf_AddDesc_apollo_5fmsgs_2fproto_2flocalization_2fpose_2eproto();
  ::apollo::perception::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto();
  ::apollo::prediction::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fprediction_2fprediction_5fobstacle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n2apollo_msgs/proto/planning/planning_in"
    "ternal.proto\022\030apollo.planning_internal\032%"
    "apollo_msgs/proto/common/header.proto\032)a"
    "pollo_msgs/proto/decision/decision.proto"
    "\0321apollo_msgs/proto/localization/localiz"
    "ation.proto\032)apollo_msgs/proto/localizat"
    "ion/pose.proto\0326apollo_msgs/proto/percep"
    "tion/perception_obstacle.proto\0326apollo_m"
    "sgs/proto/prediction/prediction_obstacle"
    ".proto\"\300\005\n\020PlanningObstacle\022\025\n\rperceptio"
    "n_id\030\001 \001(\005\022\023\n\013decision_id\030\002 \001(\t\022*\n\010posit"
    "ion\030\003 \001(\0132\030.apollo.perception.Point\022\r\n\005t"
    "heta\030\004 \001(\001\022*\n\010velocity\030\005 \001(\0132\030.apollo.pe"
    "rception.Point\022\r\n\005speed\030\006 \001(\001\022\016\n\006length\030"
    "\007 \001(\001\022\r\n\005width\030\010 \001(\001\022\016\n\006height\030\t \001(\001\022/\n\r"
    "polygon_point\030\n \003(\0132\030.apollo.perception."
    "Point\022\025\n\rtracking_time\030\013 \001(\001\022\034\n\024percepti"
    "on_timestamp\030\014 \001(\001\022J\n\026perception_object_"
    "type\030\r \001(\0162*.apollo.perception.Perceptio"
    "nObstacle.Type\022\034\n\024prediction_timestamp\030\016"
    " \001(\001\022<\n\025prediction_trajectory\030\017 \003(\0132\035.ap"
    "ollo.prediction.Trajectory\022H\n\024decision_o"
    "bject_type\030\020 \001(\0162*.apollo.decision.Objec"
    "tDecision.ObjectType\022<\n\017object_decision\030"
    "\021 \001(\0132#.apollo.decision.ObjectDecisionTy"
    "pe\022E\n\030planning_object_decision\030\022 \003(\0132#.a"
    "pollo.decision.ObjectDecisionType\"\232\004\n\005De"
    "bug\022=\n\nerror_code\030\001 \001(\0162).apollo.plannin"
    "g_internal.Debug.ErrorCode\022=\n\rplanning_d"
    "ata\030\002 \001(\0132&.apollo.planning_internal.Pla"
    "nningData\022C\n\rdebug_message\030\003 \003(\0132,.apoll"
    "o.planning_internal.Debug.DebugMessage\032\274"
    "\001\n\014DebugMessage\022=\n\nerror_code\030\001 \001(\0162).ap"
    "ollo.planning_internal.Debug.ErrorCode\022\n"
    "\n\002id\030\002 \001(\005\022\017\n\005trace\030\003 \001(\tH\000\022\016\n\004info\030\004 \001("
    "\tH\000\022\016\n\004warn\030\005 \001(\tH\000\022\017\n\005error\030\006 \001(\tH\000\022\017\n\005"
    "fatal\030\007 \001(\tH\000B\016\n\014debug_string\"\216\001\n\tErrorC"
    "ode\022\006\n\002OK\020\000\022\021\n\rERR_NOT_READY\020\001\022\r\n\tERR_ES"
    "TOP\020\002\022\026\n\022ERR_PATH_OPTIMIZER\020\003\022\027\n\023ERR_SPE"
    "ED_OPTIMIZER\020\004\022\020\n\014ERR_ST_GRAPH\020\005\022\024\n\020ERR_"
    "SANITY_CHECK\020\006\"\226\002\n\014PlanningData\022%\n\006heade"
    "r\030\001 \001(\0132\025.apollo.common.Header\022.\n\013init_s"
    "tatus\030\002 \001(\0132\031.apollo.localization.Pose\0224"
    "\n\rmain_decision\030\003 \001(\0132\035.apollo.decision."
    "MainDecision\022E\n\021planning_obstacle\030\004 \003(\0132"
    "*.apollo.planning_internal.PlanningObsta"
    "cle\0222\n\014light_signal\030\005 \001(\0132\034.apollo.decis"
    "ion.LightSignalb\006proto3", 1903);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/planning/planning_internal.proto", &protobuf_RegisterTypes);
  PlanningObstacle::default_instance_ = new PlanningObstacle();
  Debug::default_instance_ = new Debug();
  Debug_DebugMessage::default_instance_ = new Debug_DebugMessage();
  Debug_DebugMessage_default_oneof_instance_ = new Debug_DebugMessageOneofInstance();
  PlanningData::default_instance_ = new PlanningData();
  PlanningObstacle::default_instance_->InitAsDefaultInstance();
  Debug::default_instance_->InitAsDefaultInstance();
  Debug_DebugMessage::default_instance_->InitAsDefaultInstance();
  PlanningData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningObstacle::kPerceptionIdFieldNumber;
const int PlanningObstacle::kDecisionIdFieldNumber;
const int PlanningObstacle::kPositionFieldNumber;
const int PlanningObstacle::kThetaFieldNumber;
const int PlanningObstacle::kVelocityFieldNumber;
const int PlanningObstacle::kSpeedFieldNumber;
const int PlanningObstacle::kLengthFieldNumber;
const int PlanningObstacle::kWidthFieldNumber;
const int PlanningObstacle::kHeightFieldNumber;
const int PlanningObstacle::kPolygonPointFieldNumber;
const int PlanningObstacle::kTrackingTimeFieldNumber;
const int PlanningObstacle::kPerceptionTimestampFieldNumber;
const int PlanningObstacle::kPerceptionObjectTypeFieldNumber;
const int PlanningObstacle::kPredictionTimestampFieldNumber;
const int PlanningObstacle::kPredictionTrajectoryFieldNumber;
const int PlanningObstacle::kDecisionObjectTypeFieldNumber;
const int PlanningObstacle::kObjectDecisionFieldNumber;
const int PlanningObstacle::kPlanningObjectDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningObstacle::PlanningObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.PlanningObstacle)
}

void PlanningObstacle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::apollo::perception::Point*>(&::apollo::perception::Point::default_instance());
  velocity_ = const_cast< ::apollo::perception::Point*>(&::apollo::perception::Point::default_instance());
  object_decision_ = const_cast< ::apollo::decision::ObjectDecisionType*>(&::apollo::decision::ObjectDecisionType::default_instance());
}

PlanningObstacle::PlanningObstacle(const PlanningObstacle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.PlanningObstacle)
}

void PlanningObstacle::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  perception_id_ = 0;
  decision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  theta_ = 0;
  velocity_ = NULL;
  speed_ = 0;
  length_ = 0;
  width_ = 0;
  height_ = 0;
  tracking_time_ = 0;
  perception_timestamp_ = 0;
  perception_object_type_ = 0;
  prediction_timestamp_ = 0;
  decision_object_type_ = 0;
  object_decision_ = NULL;
}

PlanningObstacle::~PlanningObstacle() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.PlanningObstacle)
  SharedDtor();
}

void PlanningObstacle::SharedDtor() {
  decision_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
    delete object_decision_;
  }
}

void PlanningObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningObstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanningObstacle_descriptor_;
}

const PlanningObstacle& PlanningObstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

PlanningObstacle* PlanningObstacle::default_instance_ = NULL;

PlanningObstacle* PlanningObstacle::New(::google::protobuf::Arena* arena) const {
  PlanningObstacle* n = new PlanningObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.PlanningObstacle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlanningObstacle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlanningObstacle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(speed_, perception_id_);
  decision_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  theta_ = 0;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
  width_ = 0;
  ZR_(tracking_time_, prediction_timestamp_);
  height_ = 0;
  perception_object_type_ = 0;
  decision_object_type_ = 0;
  if (GetArenaNoVirtual() == NULL && object_decision_ != NULL) delete object_decision_;
  object_decision_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  polygon_point_.Clear();
  prediction_trajectory_.Clear();
  planning_object_decision_.Clear();
}

bool PlanningObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.PlanningObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 perception_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perception_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_decision_id;
        break;
      }

      // optional string decision_id = 2;
      case 2: {
        if (tag == 18) {
         parse_decision_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decision_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->decision_id().data(), this->decision_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.planning_internal.PlanningObstacle.decision_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .apollo.perception.Point position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_theta;
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (tag == 33) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_velocity;
        break;
      }

      // optional .apollo.perception.Point velocity = 5;
      case 5: {
        if (tag == 42) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_speed;
        break;
      }

      // optional double speed = 6;
      case 6: {
        if (tag == 49) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_length;
        break;
      }

      // optional double length = 7;
      case 7: {
        if (tag == 57) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_width;
        break;
      }

      // optional double width = 8;
      case 8: {
        if (tag == 65) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_height;
        break;
      }

      // optional double height = 9;
      case 9: {
        if (tag == 73) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_polygon_point;
        break;
      }

      // repeated .apollo.perception.Point polygon_point = 10;
      case 10: {
        if (tag == 82) {
         parse_polygon_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_polygon_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_polygon_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(89)) goto parse_tracking_time;
        break;
      }

      // optional double tracking_time = 11;
      case 11: {
        if (tag == 89) {
         parse_tracking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_perception_timestamp;
        break;
      }

      // optional double perception_timestamp = 12;
      case 12: {
        if (tag == 97) {
         parse_perception_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perception_timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_perception_object_type;
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.Type perception_object_type = 13;
      case 13: {
        if (tag == 104) {
         parse_perception_object_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_perception_object_type(static_cast< ::apollo::perception::PerceptionObstacle_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_prediction_timestamp;
        break;
      }

      // optional double prediction_timestamp = 14;
      case 14: {
        if (tag == 113) {
         parse_prediction_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prediction_timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_prediction_trajectory;
        break;
      }

      // repeated .apollo.prediction.Trajectory prediction_trajectory = 15;
      case 15: {
        if (tag == 122) {
         parse_prediction_trajectory:
          DO_(input->IncrementRecursionDepth());
         parse_loop_prediction_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_prediction_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_prediction_trajectory;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(128)) goto parse_decision_object_type;
        break;
      }

      // optional .apollo.decision.ObjectDecision.ObjectType decision_object_type = 16;
      case 16: {
        if (tag == 128) {
         parse_decision_object_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_decision_object_type(static_cast< ::apollo::decision::ObjectDecision_ObjectType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_object_decision;
        break;
      }

      // optional .apollo.decision.ObjectDecisionType object_decision = 17;
      case 17: {
        if (tag == 138) {
         parse_object_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_planning_object_decision;
        break;
      }

      // repeated .apollo.decision.ObjectDecisionType planning_object_decision = 18;
      case 18: {
        if (tag == 146) {
         parse_planning_object_decision:
          DO_(input->IncrementRecursionDepth());
         parse_loop_planning_object_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_planning_object_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_planning_object_decision;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.PlanningObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.PlanningObstacle)
  return false;
#undef DO_
}

void PlanningObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.PlanningObstacle)
  // optional int32 perception_id = 1;
  if (this->perception_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->perception_id(), output);
  }

  // optional string decision_id = 2;
  if (this->decision_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->decision_id().data(), this->decision_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.PlanningObstacle.decision_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->decision_id(), output);
  }

  // optional .apollo.perception.Point position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // optional double theta = 4;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional .apollo.perception.Point velocity = 5;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->velocity_, output);
  }

  // optional double speed = 6;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed(), output);
  }

  // optional double length = 7;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->length(), output);
  }

  // optional double width = 8;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->width(), output);
  }

  // optional double height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->height(), output);
  }

  // repeated .apollo.perception.Point polygon_point = 10;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->polygon_point(i), output);
  }

  // optional double tracking_time = 11;
  if (this->tracking_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->tracking_time(), output);
  }

  // optional double perception_timestamp = 12;
  if (this->perception_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->perception_timestamp(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.Type perception_object_type = 13;
  if (this->perception_object_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->perception_object_type(), output);
  }

  // optional double prediction_timestamp = 14;
  if (this->prediction_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->prediction_timestamp(), output);
  }

  // repeated .apollo.prediction.Trajectory prediction_trajectory = 15;
  for (unsigned int i = 0, n = this->prediction_trajectory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->prediction_trajectory(i), output);
  }

  // optional .apollo.decision.ObjectDecision.ObjectType decision_object_type = 16;
  if (this->decision_object_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->decision_object_type(), output);
  }

  // optional .apollo.decision.ObjectDecisionType object_decision = 17;
  if (this->has_object_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->object_decision_, output);
  }

  // repeated .apollo.decision.ObjectDecisionType planning_object_decision = 18;
  for (unsigned int i = 0, n = this->planning_object_decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->planning_object_decision(i), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.PlanningObstacle)
}

::google::protobuf::uint8* PlanningObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.PlanningObstacle)
  // optional int32 perception_id = 1;
  if (this->perception_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->perception_id(), target);
  }

  // optional string decision_id = 2;
  if (this->decision_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->decision_id().data(), this->decision_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.PlanningObstacle.decision_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->decision_id(), target);
  }

  // optional .apollo.perception.Point position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->position_, false, target);
  }

  // optional double theta = 4;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional .apollo.perception.Point velocity = 5;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->velocity_, false, target);
  }

  // optional double speed = 6;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed(), target);
  }

  // optional double length = 7;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->length(), target);
  }

  // optional double width = 8;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->width(), target);
  }

  // optional double height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->height(), target);
  }

  // repeated .apollo.perception.Point polygon_point = 10;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->polygon_point(i), false, target);
  }

  // optional double tracking_time = 11;
  if (this->tracking_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->tracking_time(), target);
  }

  // optional double perception_timestamp = 12;
  if (this->perception_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->perception_timestamp(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type perception_object_type = 13;
  if (this->perception_object_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->perception_object_type(), target);
  }

  // optional double prediction_timestamp = 14;
  if (this->prediction_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->prediction_timestamp(), target);
  }

  // repeated .apollo.prediction.Trajectory prediction_trajectory = 15;
  for (unsigned int i = 0, n = this->prediction_trajectory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->prediction_trajectory(i), false, target);
  }

  // optional .apollo.decision.ObjectDecision.ObjectType decision_object_type = 16;
  if (this->decision_object_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->decision_object_type(), target);
  }

  // optional .apollo.decision.ObjectDecisionType object_decision = 17;
  if (this->has_object_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->object_decision_, false, target);
  }

  // repeated .apollo.decision.ObjectDecisionType planning_object_decision = 18;
  for (unsigned int i = 0, n = this->planning_object_decision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->planning_object_decision(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.PlanningObstacle)
  return target;
}

int PlanningObstacle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.PlanningObstacle)
  int total_size = 0;

  // optional int32 perception_id = 1;
  if (this->perception_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->perception_id());
  }

  // optional string decision_id = 2;
  if (this->decision_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->decision_id());
  }

  // optional .apollo.perception.Point position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional double theta = 4;
  if (this->theta() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.perception.Point velocity = 5;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  // optional double speed = 6;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double length = 7;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // optional double width = 8;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // optional double height = 9;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // optional double tracking_time = 11;
  if (this->tracking_time() != 0) {
    total_size += 1 + 8;
  }

  // optional double perception_timestamp = 12;
  if (this->perception_timestamp() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.perception.PerceptionObstacle.Type perception_object_type = 13;
  if (this->perception_object_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->perception_object_type());
  }

  // optional double prediction_timestamp = 14;
  if (this->prediction_timestamp() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.decision.ObjectDecision.ObjectType decision_object_type = 16;
  if (this->decision_object_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->decision_object_type());
  }

  // optional .apollo.decision.ObjectDecisionType object_decision = 17;
  if (this->has_object_decision()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_decision_);
  }

  // repeated .apollo.perception.Point polygon_point = 10;
  total_size += 1 * this->polygon_point_size();
  for (int i = 0; i < this->polygon_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygon_point(i));
  }

  // repeated .apollo.prediction.Trajectory prediction_trajectory = 15;
  total_size += 1 * this->prediction_trajectory_size();
  for (int i = 0; i < this->prediction_trajectory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prediction_trajectory(i));
  }

  // repeated .apollo.decision.ObjectDecisionType planning_object_decision = 18;
  total_size += 2 * this->planning_object_decision_size();
  for (int i = 0; i < this->planning_object_decision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planning_object_decision(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.PlanningObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlanningObstacle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.PlanningObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.PlanningObstacle)
    MergeFrom(*source);
  }
}

void PlanningObstacle::MergeFrom(const PlanningObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.PlanningObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  polygon_point_.MergeFrom(from.polygon_point_);
  prediction_trajectory_.MergeFrom(from.prediction_trajectory_);
  planning_object_decision_.MergeFrom(from.planning_object_decision_);
  if (from.perception_id() != 0) {
    set_perception_id(from.perception_id());
  }
  if (from.decision_id().size() > 0) {

    decision_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.decision_id_);
  }
  if (from.has_position()) {
    mutable_position()->::apollo::perception::Point::MergeFrom(from.position());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::apollo::perception::Point::MergeFrom(from.velocity());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.tracking_time() != 0) {
    set_tracking_time(from.tracking_time());
  }
  if (from.perception_timestamp() != 0) {
    set_perception_timestamp(from.perception_timestamp());
  }
  if (from.perception_object_type() != 0) {
    set_perception_object_type(from.perception_object_type());
  }
  if (from.prediction_timestamp() != 0) {
    set_prediction_timestamp(from.prediction_timestamp());
  }
  if (from.decision_object_type() != 0) {
    set_decision_object_type(from.decision_object_type());
  }
  if (from.has_object_decision()) {
    mutable_object_decision()->::apollo::decision::ObjectDecisionType::MergeFrom(from.object_decision());
  }
}

void PlanningObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.PlanningObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningObstacle::CopyFrom(const PlanningObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.PlanningObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningObstacle::IsInitialized() const {

  return true;
}

void PlanningObstacle::Swap(PlanningObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningObstacle::InternalSwap(PlanningObstacle* other) {
  std::swap(perception_id_, other->perception_id_);
  decision_id_.Swap(&other->decision_id_);
  std::swap(position_, other->position_);
  std::swap(theta_, other->theta_);
  std::swap(velocity_, other->velocity_);
  std::swap(speed_, other->speed_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  polygon_point_.UnsafeArenaSwap(&other->polygon_point_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(perception_timestamp_, other->perception_timestamp_);
  std::swap(perception_object_type_, other->perception_object_type_);
  std::swap(prediction_timestamp_, other->prediction_timestamp_);
  prediction_trajectory_.UnsafeArenaSwap(&other->prediction_trajectory_);
  std::swap(decision_object_type_, other->decision_object_type_);
  std::swap(object_decision_, other->object_decision_);
  planning_object_decision_.UnsafeArenaSwap(&other->planning_object_decision_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningObstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanningObstacle_descriptor_;
  metadata.reflection = PlanningObstacle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningObstacle

// optional int32 perception_id = 1;
void PlanningObstacle::clear_perception_id() {
  perception_id_ = 0;
}
 ::google::protobuf::int32 PlanningObstacle::perception_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.perception_id)
  return perception_id_;
}
 void PlanningObstacle::set_perception_id(::google::protobuf::int32 value) {
  
  perception_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.perception_id)
}

// optional string decision_id = 2;
void PlanningObstacle::clear_decision_id() {
  decision_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlanningObstacle::decision_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.decision_id)
  return decision_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlanningObstacle::set_decision_id(const ::std::string& value) {
  
  decision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.decision_id)
}
 void PlanningObstacle::set_decision_id(const char* value) {
  
  decision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.PlanningObstacle.decision_id)
}
 void PlanningObstacle::set_decision_id(const char* value, size_t size) {
  
  decision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.PlanningObstacle.decision_id)
}
 ::std::string* PlanningObstacle::mutable_decision_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.decision_id)
  return decision_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlanningObstacle::release_decision_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningObstacle.decision_id)
  
  return decision_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlanningObstacle::set_allocated_decision_id(::std::string* decision_id) {
  if (decision_id != NULL) {
    
  } else {
    
  }
  decision_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decision_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningObstacle.decision_id)
}

// optional .apollo.perception.Point position = 3;
bool PlanningObstacle::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void PlanningObstacle::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::apollo::perception::Point& PlanningObstacle::position() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::apollo::perception::Point* PlanningObstacle::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.position)
  return position_;
}
::apollo::perception::Point* PlanningObstacle::release_position() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningObstacle.position)
  
  ::apollo::perception::Point* temp = position_;
  position_ = NULL;
  return temp;
}
void PlanningObstacle::set_allocated_position(::apollo::perception::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningObstacle.position)
}

// optional double theta = 4;
void PlanningObstacle::clear_theta() {
  theta_ = 0;
}
 double PlanningObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.theta)
  return theta_;
}
 void PlanningObstacle::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.theta)
}

// optional .apollo.perception.Point velocity = 5;
bool PlanningObstacle::has_velocity() const {
  return !_is_default_instance_ && velocity_ != NULL;
}
void PlanningObstacle::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
}
const ::apollo::perception::Point& PlanningObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
::apollo::perception::Point* PlanningObstacle::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.velocity)
  return velocity_;
}
::apollo::perception::Point* PlanningObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningObstacle.velocity)
  
  ::apollo::perception::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void PlanningObstacle::set_allocated_velocity(::apollo::perception::Point* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningObstacle.velocity)
}

// optional double speed = 6;
void PlanningObstacle::clear_speed() {
  speed_ = 0;
}
 double PlanningObstacle::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.speed)
  return speed_;
}
 void PlanningObstacle::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.speed)
}

// optional double length = 7;
void PlanningObstacle::clear_length() {
  length_ = 0;
}
 double PlanningObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.length)
  return length_;
}
 void PlanningObstacle::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.length)
}

// optional double width = 8;
void PlanningObstacle::clear_width() {
  width_ = 0;
}
 double PlanningObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.width)
  return width_;
}
 void PlanningObstacle::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.width)
}

// optional double height = 9;
void PlanningObstacle::clear_height() {
  height_ = 0;
}
 double PlanningObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.height)
  return height_;
}
 void PlanningObstacle::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.height)
}

// repeated .apollo.perception.Point polygon_point = 10;
int PlanningObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
void PlanningObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::apollo::perception::Point& PlanningObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.polygon_point)
  return polygon_point_.Get(index);
}
::apollo::perception::Point* PlanningObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
::apollo::perception::Point* PlanningObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningObstacle.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >*
PlanningObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningObstacle.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >&
PlanningObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 11;
void PlanningObstacle::clear_tracking_time() {
  tracking_time_ = 0;
}
 double PlanningObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.tracking_time)
  return tracking_time_;
}
 void PlanningObstacle::set_tracking_time(double value) {
  
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.tracking_time)
}

// optional double perception_timestamp = 12;
void PlanningObstacle::clear_perception_timestamp() {
  perception_timestamp_ = 0;
}
 double PlanningObstacle::perception_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.perception_timestamp)
  return perception_timestamp_;
}
 void PlanningObstacle::set_perception_timestamp(double value) {
  
  perception_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.perception_timestamp)
}

// optional .apollo.perception.PerceptionObstacle.Type perception_object_type = 13;
void PlanningObstacle::clear_perception_object_type() {
  perception_object_type_ = 0;
}
 ::apollo::perception::PerceptionObstacle_Type PlanningObstacle::perception_object_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.perception_object_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(perception_object_type_);
}
 void PlanningObstacle::set_perception_object_type(::apollo::perception::PerceptionObstacle_Type value) {
  
  perception_object_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.perception_object_type)
}

// optional double prediction_timestamp = 14;
void PlanningObstacle::clear_prediction_timestamp() {
  prediction_timestamp_ = 0;
}
 double PlanningObstacle::prediction_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.prediction_timestamp)
  return prediction_timestamp_;
}
 void PlanningObstacle::set_prediction_timestamp(double value) {
  
  prediction_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.prediction_timestamp)
}

// repeated .apollo.prediction.Trajectory prediction_trajectory = 15;
int PlanningObstacle::prediction_trajectory_size() const {
  return prediction_trajectory_.size();
}
void PlanningObstacle::clear_prediction_trajectory() {
  prediction_trajectory_.Clear();
}
const ::apollo::prediction::Trajectory& PlanningObstacle::prediction_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.prediction_trajectory)
  return prediction_trajectory_.Get(index);
}
::apollo::prediction::Trajectory* PlanningObstacle::mutable_prediction_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.prediction_trajectory)
  return prediction_trajectory_.Mutable(index);
}
::apollo::prediction::Trajectory* PlanningObstacle::add_prediction_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningObstacle.prediction_trajectory)
  return prediction_trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >*
PlanningObstacle::mutable_prediction_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningObstacle.prediction_trajectory)
  return &prediction_trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >&
PlanningObstacle::prediction_trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningObstacle.prediction_trajectory)
  return prediction_trajectory_;
}

// optional .apollo.decision.ObjectDecision.ObjectType decision_object_type = 16;
void PlanningObstacle::clear_decision_object_type() {
  decision_object_type_ = 0;
}
 ::apollo::decision::ObjectDecision_ObjectType PlanningObstacle::decision_object_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.decision_object_type)
  return static_cast< ::apollo::decision::ObjectDecision_ObjectType >(decision_object_type_);
}
 void PlanningObstacle::set_decision_object_type(::apollo::decision::ObjectDecision_ObjectType value) {
  
  decision_object_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningObstacle.decision_object_type)
}

// optional .apollo.decision.ObjectDecisionType object_decision = 17;
bool PlanningObstacle::has_object_decision() const {
  return !_is_default_instance_ && object_decision_ != NULL;
}
void PlanningObstacle::clear_object_decision() {
  if (GetArenaNoVirtual() == NULL && object_decision_ != NULL) delete object_decision_;
  object_decision_ = NULL;
}
const ::apollo::decision::ObjectDecisionType& PlanningObstacle::object_decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.object_decision)
  return object_decision_ != NULL ? *object_decision_ : *default_instance_->object_decision_;
}
::apollo::decision::ObjectDecisionType* PlanningObstacle::mutable_object_decision() {
  
  if (object_decision_ == NULL) {
    object_decision_ = new ::apollo::decision::ObjectDecisionType;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.object_decision)
  return object_decision_;
}
::apollo::decision::ObjectDecisionType* PlanningObstacle::release_object_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningObstacle.object_decision)
  
  ::apollo::decision::ObjectDecisionType* temp = object_decision_;
  object_decision_ = NULL;
  return temp;
}
void PlanningObstacle::set_allocated_object_decision(::apollo::decision::ObjectDecisionType* object_decision) {
  delete object_decision_;
  object_decision_ = object_decision;
  if (object_decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningObstacle.object_decision)
}

// repeated .apollo.decision.ObjectDecisionType planning_object_decision = 18;
int PlanningObstacle::planning_object_decision_size() const {
  return planning_object_decision_.size();
}
void PlanningObstacle::clear_planning_object_decision() {
  planning_object_decision_.Clear();
}
const ::apollo::decision::ObjectDecisionType& PlanningObstacle::planning_object_decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningObstacle.planning_object_decision)
  return planning_object_decision_.Get(index);
}
::apollo::decision::ObjectDecisionType* PlanningObstacle::mutable_planning_object_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningObstacle.planning_object_decision)
  return planning_object_decision_.Mutable(index);
}
::apollo::decision::ObjectDecisionType* PlanningObstacle::add_planning_object_decision() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningObstacle.planning_object_decision)
  return planning_object_decision_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >*
PlanningObstacle::mutable_planning_object_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningObstacle.planning_object_decision)
  return &planning_object_decision_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >&
PlanningObstacle::planning_object_decision() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningObstacle.planning_object_decision)
  return planning_object_decision_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Debug_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_ErrorCode_descriptor_;
}
bool Debug_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Debug_ErrorCode Debug::OK;
const Debug_ErrorCode Debug::ERR_NOT_READY;
const Debug_ErrorCode Debug::ERR_ESTOP;
const Debug_ErrorCode Debug::ERR_PATH_OPTIMIZER;
const Debug_ErrorCode Debug::ERR_SPEED_OPTIMIZER;
const Debug_ErrorCode Debug::ERR_ST_GRAPH;
const Debug_ErrorCode Debug::ERR_SANITY_CHECK;
const Debug_ErrorCode Debug::ErrorCode_MIN;
const Debug_ErrorCode Debug::ErrorCode_MAX;
const int Debug::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_DebugMessage::kErrorCodeFieldNumber;
const int Debug_DebugMessage::kIdFieldNumber;
const int Debug_DebugMessage::kTraceFieldNumber;
const int Debug_DebugMessage::kInfoFieldNumber;
const int Debug_DebugMessage::kWarnFieldNumber;
const int Debug_DebugMessage::kErrorFieldNumber;
const int Debug_DebugMessage::kFatalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_DebugMessage::Debug_DebugMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.Debug.DebugMessage)
}

void Debug_DebugMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Debug_DebugMessage_default_oneof_instance_->trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Debug_DebugMessage_default_oneof_instance_->info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Debug_DebugMessage_default_oneof_instance_->warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Debug_DebugMessage_default_oneof_instance_->error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Debug_DebugMessage_default_oneof_instance_->fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Debug_DebugMessage::Debug_DebugMessage(const Debug_DebugMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.Debug.DebugMessage)
}

void Debug_DebugMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  id_ = 0;
  clear_has_debug_string();
}

Debug_DebugMessage::~Debug_DebugMessage() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.Debug.DebugMessage)
  SharedDtor();
}

void Debug_DebugMessage::SharedDtor() {
  if (has_debug_string()) {
    clear_debug_string();
  }
  if (this != default_instance_) {
  }
}

void Debug_DebugMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_DebugMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_DebugMessage_descriptor_;
}

const Debug_DebugMessage& Debug_DebugMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

Debug_DebugMessage* Debug_DebugMessage::default_instance_ = NULL;

Debug_DebugMessage* Debug_DebugMessage::New(::google::protobuf::Arena* arena) const {
  Debug_DebugMessage* n = new Debug_DebugMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_DebugMessage::clear_debug_string() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning_internal.Debug.DebugMessage)
  switch(debug_string_case()) {
    case kTrace: {
      debug_string_.trace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kInfo: {
      debug_string_.info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kWarn: {
      debug_string_.warn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kError: {
      debug_string_.error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFatal: {
      debug_string_.fatal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DEBUG_STRING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEBUG_STRING_NOT_SET;
}


void Debug_DebugMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.Debug.DebugMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Debug_DebugMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Debug_DebugMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(error_code_, id_);

#undef ZR_HELPER_
#undef ZR_

  clear_debug_string();
}

bool Debug_DebugMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.Debug.DebugMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::apollo::planning_internal::Debug_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_trace;
        break;
      }

      // optional string trace = 3;
      case 3: {
        if (tag == 26) {
         parse_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trace().data(), this->trace().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.planning_internal.Debug.DebugMessage.trace"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional string info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.planning_internal.Debug.DebugMessage.info"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_warn;
        break;
      }

      // optional string warn = 5;
      case 5: {
        if (tag == 42) {
         parse_warn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->warn().data(), this->warn().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.planning_internal.Debug.DebugMessage.warn"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_error;
        break;
      }

      // optional string error = 6;
      case 6: {
        if (tag == 50) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.planning_internal.Debug.DebugMessage.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fatal;
        break;
      }

      // optional string fatal = 7;
      case 7: {
        if (tag == 58) {
         parse_fatal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fatal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fatal().data(), this->fatal().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.planning_internal.Debug.DebugMessage.fatal"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.Debug.DebugMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.Debug.DebugMessage)
  return false;
#undef DO_
}

void Debug_DebugMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.Debug.DebugMessage)
  // optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string trace = 3;
  if (has_trace()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace().data(), this->trace().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.Debug.DebugMessage.trace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trace(), output);
  }

  // optional string info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.Debug.DebugMessage.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // optional string warn = 5;
  if (has_warn()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->warn().data(), this->warn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.Debug.DebugMessage.warn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->warn(), output);
  }

  // optional string error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.Debug.DebugMessage.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->error(), output);
  }

  // optional string fatal = 7;
  if (has_fatal()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fatal().data(), this->fatal().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.Debug.DebugMessage.fatal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->fatal(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.Debug.DebugMessage)
}

::google::protobuf::uint8* Debug_DebugMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.Debug.DebugMessage)
  // optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string trace = 3;
  if (has_trace()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace().data(), this->trace().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.Debug.DebugMessage.trace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trace(), target);
  }

  // optional string info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.Debug.DebugMessage.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // optional string warn = 5;
  if (has_warn()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->warn().data(), this->warn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.Debug.DebugMessage.warn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->warn(), target);
  }

  // optional string error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.Debug.DebugMessage.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error(), target);
  }

  // optional string fatal = 7;
  if (has_fatal()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fatal().data(), this->fatal().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.planning_internal.Debug.DebugMessage.fatal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->fatal(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.Debug.DebugMessage)
  return target;
}

int Debug_DebugMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.Debug.DebugMessage)
  int total_size = 0;

  // optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  switch (debug_string_case()) {
    // optional string trace = 3;
    case kTrace: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trace());
      break;
    }
    // optional string info = 4;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
      break;
    }
    // optional string warn = 5;
    case kWarn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warn());
      break;
    }
    // optional string error = 6;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
      break;
    }
    // optional string fatal = 7;
    case kFatal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fatal());
      break;
    }
    case DEBUG_STRING_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_DebugMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.Debug.DebugMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Debug_DebugMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_DebugMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.Debug.DebugMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.Debug.DebugMessage)
    MergeFrom(*source);
  }
}

void Debug_DebugMessage::MergeFrom(const Debug_DebugMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.Debug.DebugMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.debug_string_case()) {
    case kTrace: {
      set_trace(from.trace());
      break;
    }
    case kInfo: {
      set_info(from.info());
      break;
    }
    case kWarn: {
      set_warn(from.warn());
      break;
    }
    case kError: {
      set_error(from.error());
      break;
    }
    case kFatal: {
      set_fatal(from.fatal());
      break;
    }
    case DEBUG_STRING_NOT_SET: {
      break;
    }
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Debug_DebugMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.Debug.DebugMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_DebugMessage::CopyFrom(const Debug_DebugMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.Debug.DebugMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_DebugMessage::IsInitialized() const {

  return true;
}

void Debug_DebugMessage::Swap(Debug_DebugMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_DebugMessage::InternalSwap(Debug_DebugMessage* other) {
  std::swap(error_code_, other->error_code_);
  std::swap(id_, other->id_);
  std::swap(debug_string_, other->debug_string_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_DebugMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_DebugMessage_descriptor_;
  metadata.reflection = Debug_DebugMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug::kErrorCodeFieldNumber;
const int Debug::kPlanningDataFieldNumber;
const int Debug::kDebugMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug::Debug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.Debug)
}

void Debug::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  planning_data_ = const_cast< ::apollo::planning_internal::PlanningData*>(&::apollo::planning_internal::PlanningData::default_instance());
}

Debug::Debug(const Debug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.Debug)
}

void Debug::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  error_code_ = 0;
  planning_data_ = NULL;
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  if (this != default_instance_) {
    delete planning_data_;
  }
}

void Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_descriptor_;
}

const Debug& Debug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

Debug* Debug::default_instance_ = NULL;

Debug* Debug::New(::google::protobuf::Arena* arena) const {
  Debug* n = new Debug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.Debug)
  error_code_ = 0;
  if (GetArenaNoVirtual() == NULL && planning_data_ != NULL) delete planning_data_;
  planning_data_ = NULL;
  debug_message_.Clear();
}

bool Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.Debug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::apollo::planning_internal::Debug_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_planning_data;
        break;
      }

      // optional .apollo.planning_internal.PlanningData planning_data = 2;
      case 2: {
        if (tag == 18) {
         parse_planning_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planning_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_debug_message;
        break;
      }

      // repeated .apollo.planning_internal.Debug.DebugMessage debug_message = 3;
      case 3: {
        if (tag == 26) {
         parse_debug_message:
          DO_(input->IncrementRecursionDepth());
         parse_loop_debug_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_debug_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_debug_message;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.Debug)
  return false;
#undef DO_
}

void Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.Debug)
  // optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (this->has_planning_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->planning_data_, output);
  }

  // repeated .apollo.planning_internal.Debug.DebugMessage debug_message = 3;
  for (unsigned int i = 0, n = this->debug_message_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->debug_message(i), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.Debug)
}

::google::protobuf::uint8* Debug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.Debug)
  // optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (this->has_planning_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->planning_data_, false, target);
  }

  // repeated .apollo.planning_internal.Debug.DebugMessage debug_message = 3;
  for (unsigned int i = 0, n = this->debug_message_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->debug_message(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.Debug)
  return target;
}

int Debug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.Debug)
  int total_size = 0;

  // optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (this->has_planning_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->planning_data_);
  }

  // repeated .apollo.planning_internal.Debug.DebugMessage debug_message = 3;
  total_size += 1 * this->debug_message_size();
  for (int i = 0; i < this->debug_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->debug_message(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.Debug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Debug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.Debug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.Debug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  debug_message_.MergeFrom(from.debug_message_);
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.has_planning_data()) {
    mutable_planning_data()->::apollo::planning_internal::PlanningData::MergeFrom(from.planning_data());
  }
}

void Debug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {

  return true;
}

void Debug::Swap(Debug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug::InternalSwap(Debug* other) {
  std::swap(error_code_, other->error_code_);
  std::swap(planning_data_, other->planning_data_);
  debug_message_.UnsafeArenaSwap(&other->debug_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_descriptor_;
  metadata.reflection = Debug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_DebugMessage

// optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
void Debug_DebugMessage::clear_error_code() {
  error_code_ = 0;
}
 ::apollo::planning_internal::Debug_ErrorCode Debug_DebugMessage::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.error_code)
  return static_cast< ::apollo::planning_internal::Debug_ErrorCode >(error_code_);
}
 void Debug_DebugMessage::set_error_code(::apollo::planning_internal::Debug_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.error_code)
}

// optional int32 id = 2;
void Debug_DebugMessage::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Debug_DebugMessage::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.id)
  return id_;
}
 void Debug_DebugMessage::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.id)
}

// optional string trace = 3;
bool Debug_DebugMessage::has_trace() const {
  return debug_string_case() == kTrace;
}
void Debug_DebugMessage::set_has_trace() {
  _oneof_case_[0] = kTrace;
}
void Debug_DebugMessage::clear_trace() {
  if (has_trace()) {
    debug_string_.trace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_debug_string();
  }
}
 const ::std::string& Debug_DebugMessage::trace() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.trace)
  if (has_trace()) {
    return debug_string_.trace_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Debug_DebugMessage::set_trace(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.trace)
  if (!has_trace()) {
    clear_debug_string();
    set_has_trace();
    debug_string_.trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.trace)
}
 void Debug_DebugMessage::set_trace(const char* value) {
  if (!has_trace()) {
    clear_debug_string();
    set_has_trace();
    debug_string_.trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.Debug.DebugMessage.trace)
}
 void Debug_DebugMessage::set_trace(const char* value, size_t size) {
  if (!has_trace()) {
    clear_debug_string();
    set_has_trace();
    debug_string_.trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.Debug.DebugMessage.trace)
}
 ::std::string* Debug_DebugMessage::mutable_trace() {
  if (!has_trace()) {
    clear_debug_string();
    set_has_trace();
    debug_string_.trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.DebugMessage.trace)
  return debug_string_.trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Debug_DebugMessage::release_trace() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.DebugMessage.trace)
  if (has_trace()) {
    clear_has_debug_string();
    return debug_string_.trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Debug_DebugMessage::set_allocated_trace(::std::string* trace) {
  if (!has_trace()) {
    debug_string_.trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_debug_string();
  if (trace != NULL) {
    set_has_trace();
    debug_string_.trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        trace);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.DebugMessage.trace)
}

// optional string info = 4;
bool Debug_DebugMessage::has_info() const {
  return debug_string_case() == kInfo;
}
void Debug_DebugMessage::set_has_info() {
  _oneof_case_[0] = kInfo;
}
void Debug_DebugMessage::clear_info() {
  if (has_info()) {
    debug_string_.info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_debug_string();
  }
}
 const ::std::string& Debug_DebugMessage::info() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.info)
  if (has_info()) {
    return debug_string_.info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Debug_DebugMessage::set_info(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.info)
  if (!has_info()) {
    clear_debug_string();
    set_has_info();
    debug_string_.info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.info)
}
 void Debug_DebugMessage::set_info(const char* value) {
  if (!has_info()) {
    clear_debug_string();
    set_has_info();
    debug_string_.info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.Debug.DebugMessage.info)
}
 void Debug_DebugMessage::set_info(const char* value, size_t size) {
  if (!has_info()) {
    clear_debug_string();
    set_has_info();
    debug_string_.info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.Debug.DebugMessage.info)
}
 ::std::string* Debug_DebugMessage::mutable_info() {
  if (!has_info()) {
    clear_debug_string();
    set_has_info();
    debug_string_.info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.DebugMessage.info)
  return debug_string_.info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Debug_DebugMessage::release_info() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.DebugMessage.info)
  if (has_info()) {
    clear_has_debug_string();
    return debug_string_.info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Debug_DebugMessage::set_allocated_info(::std::string* info) {
  if (!has_info()) {
    debug_string_.info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_debug_string();
  if (info != NULL) {
    set_has_info();
    debug_string_.info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        info);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.DebugMessage.info)
}

// optional string warn = 5;
bool Debug_DebugMessage::has_warn() const {
  return debug_string_case() == kWarn;
}
void Debug_DebugMessage::set_has_warn() {
  _oneof_case_[0] = kWarn;
}
void Debug_DebugMessage::clear_warn() {
  if (has_warn()) {
    debug_string_.warn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_debug_string();
  }
}
 const ::std::string& Debug_DebugMessage::warn() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.warn)
  if (has_warn()) {
    return debug_string_.warn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Debug_DebugMessage::set_warn(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.warn)
  if (!has_warn()) {
    clear_debug_string();
    set_has_warn();
    debug_string_.warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.warn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.warn)
}
 void Debug_DebugMessage::set_warn(const char* value) {
  if (!has_warn()) {
    clear_debug_string();
    set_has_warn();
    debug_string_.warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.warn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.Debug.DebugMessage.warn)
}
 void Debug_DebugMessage::set_warn(const char* value, size_t size) {
  if (!has_warn()) {
    clear_debug_string();
    set_has_warn();
    debug_string_.warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.warn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.Debug.DebugMessage.warn)
}
 ::std::string* Debug_DebugMessage::mutable_warn() {
  if (!has_warn()) {
    clear_debug_string();
    set_has_warn();
    debug_string_.warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.DebugMessage.warn)
  return debug_string_.warn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Debug_DebugMessage::release_warn() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.DebugMessage.warn)
  if (has_warn()) {
    clear_has_debug_string();
    return debug_string_.warn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Debug_DebugMessage::set_allocated_warn(::std::string* warn) {
  if (!has_warn()) {
    debug_string_.warn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_debug_string();
  if (warn != NULL) {
    set_has_warn();
    debug_string_.warn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        warn);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.DebugMessage.warn)
}

// optional string error = 6;
bool Debug_DebugMessage::has_error() const {
  return debug_string_case() == kError;
}
void Debug_DebugMessage::set_has_error() {
  _oneof_case_[0] = kError;
}
void Debug_DebugMessage::clear_error() {
  if (has_error()) {
    debug_string_.error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_debug_string();
  }
}
 const ::std::string& Debug_DebugMessage::error() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.error)
  if (has_error()) {
    return debug_string_.error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Debug_DebugMessage::set_error(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.error)
  if (!has_error()) {
    clear_debug_string();
    set_has_error();
    debug_string_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.error)
}
 void Debug_DebugMessage::set_error(const char* value) {
  if (!has_error()) {
    clear_debug_string();
    set_has_error();
    debug_string_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.Debug.DebugMessage.error)
}
 void Debug_DebugMessage::set_error(const char* value, size_t size) {
  if (!has_error()) {
    clear_debug_string();
    set_has_error();
    debug_string_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.Debug.DebugMessage.error)
}
 ::std::string* Debug_DebugMessage::mutable_error() {
  if (!has_error()) {
    clear_debug_string();
    set_has_error();
    debug_string_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.DebugMessage.error)
  return debug_string_.error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Debug_DebugMessage::release_error() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.DebugMessage.error)
  if (has_error()) {
    clear_has_debug_string();
    return debug_string_.error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Debug_DebugMessage::set_allocated_error(::std::string* error) {
  if (!has_error()) {
    debug_string_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_debug_string();
  if (error != NULL) {
    set_has_error();
    debug_string_.error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        error);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.DebugMessage.error)
}

// optional string fatal = 7;
bool Debug_DebugMessage::has_fatal() const {
  return debug_string_case() == kFatal;
}
void Debug_DebugMessage::set_has_fatal() {
  _oneof_case_[0] = kFatal;
}
void Debug_DebugMessage::clear_fatal() {
  if (has_fatal()) {
    debug_string_.fatal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_debug_string();
  }
}
 const ::std::string& Debug_DebugMessage::fatal() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.DebugMessage.fatal)
  if (has_fatal()) {
    return debug_string_.fatal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Debug_DebugMessage::set_fatal(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.fatal)
  if (!has_fatal()) {
    clear_debug_string();
    set_has_fatal();
    debug_string_.fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.fatal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.DebugMessage.fatal)
}
 void Debug_DebugMessage::set_fatal(const char* value) {
  if (!has_fatal()) {
    clear_debug_string();
    set_has_fatal();
    debug_string_.fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.fatal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.Debug.DebugMessage.fatal)
}
 void Debug_DebugMessage::set_fatal(const char* value, size_t size) {
  if (!has_fatal()) {
    clear_debug_string();
    set_has_fatal();
    debug_string_.fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  debug_string_.fatal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.Debug.DebugMessage.fatal)
}
 ::std::string* Debug_DebugMessage::mutable_fatal() {
  if (!has_fatal()) {
    clear_debug_string();
    set_has_fatal();
    debug_string_.fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.DebugMessage.fatal)
  return debug_string_.fatal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Debug_DebugMessage::release_fatal() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.DebugMessage.fatal)
  if (has_fatal()) {
    clear_has_debug_string();
    return debug_string_.fatal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Debug_DebugMessage::set_allocated_fatal(::std::string* fatal) {
  if (!has_fatal()) {
    debug_string_.fatal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_debug_string();
  if (fatal != NULL) {
    set_has_fatal();
    debug_string_.fatal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        fatal);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.DebugMessage.fatal)
}

bool Debug_DebugMessage::has_debug_string() const {
  return debug_string_case() != DEBUG_STRING_NOT_SET;
}
void Debug_DebugMessage::clear_has_debug_string() {
  _oneof_case_[0] = DEBUG_STRING_NOT_SET;
}
Debug_DebugMessage::DebugStringCase Debug_DebugMessage::debug_string_case() const {
  return Debug_DebugMessage::DebugStringCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Debug

// optional .apollo.planning_internal.Debug.ErrorCode error_code = 1;
void Debug::clear_error_code() {
  error_code_ = 0;
}
 ::apollo::planning_internal::Debug_ErrorCode Debug::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.error_code)
  return static_cast< ::apollo::planning_internal::Debug_ErrorCode >(error_code_);
}
 void Debug::set_error_code(::apollo::planning_internal::Debug_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.Debug.error_code)
}

// optional .apollo.planning_internal.PlanningData planning_data = 2;
bool Debug::has_planning_data() const {
  return !_is_default_instance_ && planning_data_ != NULL;
}
void Debug::clear_planning_data() {
  if (GetArenaNoVirtual() == NULL && planning_data_ != NULL) delete planning_data_;
  planning_data_ = NULL;
}
const ::apollo::planning_internal::PlanningData& Debug::planning_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.planning_data)
  return planning_data_ != NULL ? *planning_data_ : *default_instance_->planning_data_;
}
::apollo::planning_internal::PlanningData* Debug::mutable_planning_data() {
  
  if (planning_data_ == NULL) {
    planning_data_ = new ::apollo::planning_internal::PlanningData;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.planning_data)
  return planning_data_;
}
::apollo::planning_internal::PlanningData* Debug::release_planning_data() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.planning_data)
  
  ::apollo::planning_internal::PlanningData* temp = planning_data_;
  planning_data_ = NULL;
  return temp;
}
void Debug::set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data) {
  delete planning_data_;
  planning_data_ = planning_data;
  if (planning_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.planning_data)
}

// repeated .apollo.planning_internal.Debug.DebugMessage debug_message = 3;
int Debug::debug_message_size() const {
  return debug_message_.size();
}
void Debug::clear_debug_message() {
  debug_message_.Clear();
}
const ::apollo::planning_internal::Debug_DebugMessage& Debug::debug_message(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.debug_message)
  return debug_message_.Get(index);
}
::apollo::planning_internal::Debug_DebugMessage* Debug::mutable_debug_message(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.debug_message)
  return debug_message_.Mutable(index);
}
::apollo::planning_internal::Debug_DebugMessage* Debug::add_debug_message() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.Debug.debug_message)
  return debug_message_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::Debug_DebugMessage >*
Debug::mutable_debug_message() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.Debug.debug_message)
  return &debug_message_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::Debug_DebugMessage >&
Debug::debug_message() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.Debug.debug_message)
  return debug_message_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningData::kHeaderFieldNumber;
const int PlanningData::kInitStatusFieldNumber;
const int PlanningData::kMainDecisionFieldNumber;
const int PlanningData::kPlanningObstacleFieldNumber;
const int PlanningData::kLightSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningData::PlanningData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.PlanningData)
}

void PlanningData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  init_status_ = const_cast< ::apollo::localization::Pose*>(&::apollo::localization::Pose::default_instance());
  main_decision_ = const_cast< ::apollo::decision::MainDecision*>(&::apollo::decision::MainDecision::default_instance());
  light_signal_ = const_cast< ::apollo::decision::LightSignal*>(&::apollo::decision::LightSignal::default_instance());
}

PlanningData::PlanningData(const PlanningData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.PlanningData)
}

void PlanningData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  init_status_ = NULL;
  main_decision_ = NULL;
  light_signal_ = NULL;
}

PlanningData::~PlanningData() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.PlanningData)
  SharedDtor();
}

void PlanningData::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete init_status_;
    delete main_decision_;
    delete light_signal_;
  }
}

void PlanningData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanningData_descriptor_;
}

const PlanningData& PlanningData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fplanning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

PlanningData* PlanningData::default_instance_ = NULL;

PlanningData* PlanningData::New(::google::protobuf::Arena* arena) const {
  PlanningData* n = new PlanningData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.PlanningData)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && init_status_ != NULL) delete init_status_;
  init_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && main_decision_ != NULL) delete main_decision_;
  main_decision_ = NULL;
  if (GetArenaNoVirtual() == NULL && light_signal_ != NULL) delete light_signal_;
  light_signal_ = NULL;
  planning_obstacle_.Clear();
}

bool PlanningData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.PlanningData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_init_status;
        break;
      }

      // optional .apollo.localization.Pose init_status = 2;
      case 2: {
        if (tag == 18) {
         parse_init_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_main_decision;
        break;
      }

      // optional .apollo.decision.MainDecision main_decision = 3;
      case 3: {
        if (tag == 26) {
         parse_main_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_planning_obstacle;
        break;
      }

      // repeated .apollo.planning_internal.PlanningObstacle planning_obstacle = 4;
      case 4: {
        if (tag == 34) {
         parse_planning_obstacle:
          DO_(input->IncrementRecursionDepth());
         parse_loop_planning_obstacle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_planning_obstacle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_planning_obstacle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_light_signal;
        break;
      }

      // optional .apollo.decision.LightSignal light_signal = 5;
      case 5: {
        if (tag == 42) {
         parse_light_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.PlanningData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.PlanningData)
  return false;
#undef DO_
}

void PlanningData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.PlanningData)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.localization.Pose init_status = 2;
  if (this->has_init_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->init_status_, output);
  }

  // optional .apollo.decision.MainDecision main_decision = 3;
  if (this->has_main_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->main_decision_, output);
  }

  // repeated .apollo.planning_internal.PlanningObstacle planning_obstacle = 4;
  for (unsigned int i = 0, n = this->planning_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->planning_obstacle(i), output);
  }

  // optional .apollo.decision.LightSignal light_signal = 5;
  if (this->has_light_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->light_signal_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.PlanningData)
}

::google::protobuf::uint8* PlanningData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.PlanningData)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.localization.Pose init_status = 2;
  if (this->has_init_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->init_status_, false, target);
  }

  // optional .apollo.decision.MainDecision main_decision = 3;
  if (this->has_main_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->main_decision_, false, target);
  }

  // repeated .apollo.planning_internal.PlanningObstacle planning_obstacle = 4;
  for (unsigned int i = 0, n = this->planning_obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->planning_obstacle(i), false, target);
  }

  // optional .apollo.decision.LightSignal light_signal = 5;
  if (this->has_light_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->light_signal_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.PlanningData)
  return target;
}

int PlanningData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.PlanningData)
  int total_size = 0;

  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .apollo.localization.Pose init_status = 2;
  if (this->has_init_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->init_status_);
  }

  // optional .apollo.decision.MainDecision main_decision = 3;
  if (this->has_main_decision()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->main_decision_);
  }

  // optional .apollo.decision.LightSignal light_signal = 5;
  if (this->has_light_signal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->light_signal_);
  }

  // repeated .apollo.planning_internal.PlanningObstacle planning_obstacle = 4;
  total_size += 1 * this->planning_obstacle_size();
  for (int i = 0; i < this->planning_obstacle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planning_obstacle(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.PlanningData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlanningData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.PlanningData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.PlanningData)
    MergeFrom(*source);
  }
}

void PlanningData::MergeFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.PlanningData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  planning_obstacle_.MergeFrom(from.planning_obstacle_);
  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.has_init_status()) {
    mutable_init_status()->::apollo::localization::Pose::MergeFrom(from.init_status());
  }
  if (from.has_main_decision()) {
    mutable_main_decision()->::apollo::decision::MainDecision::MergeFrom(from.main_decision());
  }
  if (from.has_light_signal()) {
    mutable_light_signal()->::apollo::decision::LightSignal::MergeFrom(from.light_signal());
  }
}

void PlanningData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningData::CopyFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningData::IsInitialized() const {

  return true;
}

void PlanningData::Swap(PlanningData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningData::InternalSwap(PlanningData* other) {
  std::swap(header_, other->header_);
  std::swap(init_status_, other->init_status_);
  std::swap(main_decision_, other->main_decision_);
  planning_obstacle_.UnsafeArenaSwap(&other->planning_obstacle_);
  std::swap(light_signal_, other->light_signal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanningData_descriptor_;
  metadata.reflection = PlanningData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningData

// optional .apollo.common.Header header = 1;
bool PlanningData::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void PlanningData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::apollo::common::Header& PlanningData::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* PlanningData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.header)
  return header_;
}
::apollo::common::Header* PlanningData::release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PlanningData::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.header)
}

// optional .apollo.localization.Pose init_status = 2;
bool PlanningData::has_init_status() const {
  return !_is_default_instance_ && init_status_ != NULL;
}
void PlanningData::clear_init_status() {
  if (GetArenaNoVirtual() == NULL && init_status_ != NULL) delete init_status_;
  init_status_ = NULL;
}
const ::apollo::localization::Pose& PlanningData::init_status() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.init_status)
  return init_status_ != NULL ? *init_status_ : *default_instance_->init_status_;
}
::apollo::localization::Pose* PlanningData::mutable_init_status() {
  
  if (init_status_ == NULL) {
    init_status_ = new ::apollo::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.init_status)
  return init_status_;
}
::apollo::localization::Pose* PlanningData::release_init_status() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.init_status)
  
  ::apollo::localization::Pose* temp = init_status_;
  init_status_ = NULL;
  return temp;
}
void PlanningData::set_allocated_init_status(::apollo::localization::Pose* init_status) {
  delete init_status_;
  init_status_ = init_status;
  if (init_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.init_status)
}

// optional .apollo.decision.MainDecision main_decision = 3;
bool PlanningData::has_main_decision() const {
  return !_is_default_instance_ && main_decision_ != NULL;
}
void PlanningData::clear_main_decision() {
  if (GetArenaNoVirtual() == NULL && main_decision_ != NULL) delete main_decision_;
  main_decision_ = NULL;
}
const ::apollo::decision::MainDecision& PlanningData::main_decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.main_decision)
  return main_decision_ != NULL ? *main_decision_ : *default_instance_->main_decision_;
}
::apollo::decision::MainDecision* PlanningData::mutable_main_decision() {
  
  if (main_decision_ == NULL) {
    main_decision_ = new ::apollo::decision::MainDecision;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.main_decision)
  return main_decision_;
}
::apollo::decision::MainDecision* PlanningData::release_main_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.main_decision)
  
  ::apollo::decision::MainDecision* temp = main_decision_;
  main_decision_ = NULL;
  return temp;
}
void PlanningData::set_allocated_main_decision(::apollo::decision::MainDecision* main_decision) {
  delete main_decision_;
  main_decision_ = main_decision;
  if (main_decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.main_decision)
}

// repeated .apollo.planning_internal.PlanningObstacle planning_obstacle = 4;
int PlanningData::planning_obstacle_size() const {
  return planning_obstacle_.size();
}
void PlanningData::clear_planning_obstacle() {
  planning_obstacle_.Clear();
}
const ::apollo::planning_internal::PlanningObstacle& PlanningData::planning_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.planning_obstacle)
  return planning_obstacle_.Get(index);
}
::apollo::planning_internal::PlanningObstacle* PlanningData::mutable_planning_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.planning_obstacle)
  return planning_obstacle_.Mutable(index);
}
::apollo::planning_internal::PlanningObstacle* PlanningData::add_planning_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.planning_obstacle)
  return planning_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::PlanningObstacle >*
PlanningData::mutable_planning_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.planning_obstacle)
  return &planning_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::PlanningObstacle >&
PlanningData::planning_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.planning_obstacle)
  return planning_obstacle_;
}

// optional .apollo.decision.LightSignal light_signal = 5;
bool PlanningData::has_light_signal() const {
  return !_is_default_instance_ && light_signal_ != NULL;
}
void PlanningData::clear_light_signal() {
  if (GetArenaNoVirtual() == NULL && light_signal_ != NULL) delete light_signal_;
  light_signal_ = NULL;
}
const ::apollo::decision::LightSignal& PlanningData::light_signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.light_signal)
  return light_signal_ != NULL ? *light_signal_ : *default_instance_->light_signal_;
}
::apollo::decision::LightSignal* PlanningData::mutable_light_signal() {
  
  if (light_signal_ == NULL) {
    light_signal_ = new ::apollo::decision::LightSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.light_signal)
  return light_signal_;
}
::apollo::decision::LightSignal* PlanningData::release_light_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.light_signal)
  
  ::apollo::decision::LightSignal* temp = light_signal_;
  light_signal_ = NULL;
  return temp;
}
void PlanningData::set_allocated_light_signal(::apollo::decision::LightSignal* light_signal) {
  delete light_signal_;
  light_signal_ = light_signal;
  if (light_signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.light_signal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning_internal
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
