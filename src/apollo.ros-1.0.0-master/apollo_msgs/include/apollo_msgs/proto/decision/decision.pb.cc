// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/decision/decision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/decision/decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace decision {

namespace {

const ::google::protobuf::Descriptor* Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetLane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetLane_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectIgnore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectIgnore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectNudge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectNudge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectNudge_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ObjectYield_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectYield_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectFollow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectFollow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectOvertake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectOvertake_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectSidePass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectSidePass_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectSidePass_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ObjectAvoid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAvoid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectDecisionType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDecisionType_reflection_ = NULL;
struct ObjectDecisionTypeOneofInstance {
  const ::apollo::decision::ObjectIgnore* ignore_;
  const ::apollo::decision::ObjectStop* stop_;
  const ::apollo::decision::ObjectFollow* follow_;
  const ::apollo::decision::ObjectYield* yield_;
  const ::apollo::decision::ObjectOvertake* overtake_;
  const ::apollo::decision::ObjectNudge* nudge_;
  const ::apollo::decision::ObjectSidePass* sidepass_;
  const ::apollo::decision::ObjectAvoid* avoid_;
}* ObjectDecisionType_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ObjectDecision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDecision_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectDecision_ObjectType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ObjectDecisions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDecisions_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmergencyStopHardBrake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmergencyStopHardBrake_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmergencyStopCruiseToStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmergencyStopCruiseToStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainEmergencyStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainEmergencyStop_reflection_ = NULL;
struct MainEmergencyStopOneofInstance {
  const ::apollo::decision::EmergencyStopHardBrake* hard_brake_;
  const ::apollo::decision::EmergencyStopCruiseToStop* cruise_to_stop_;
}* MainEmergencyStop_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MainCruise_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainCruise_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainChangeLane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainChangeLane_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MainChangeLane_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MainMissionComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainMissionComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainNotReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainNotReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainParking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainParking_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MainParking_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MainDecision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainDecision_reflection_ = NULL;
struct MainDecisionOneofInstance {
  const ::apollo::decision::MainCruise* cruise_;
  const ::apollo::decision::MainStop* stop_;
  const ::apollo::decision::MainEmergencyStop* estop_;
  const ::apollo::decision::MainChangeLane* change_lane_;
  const ::apollo::decision::MainMissionComplete* mission_complete_;
  const ::apollo::decision::MainNotReady* not_ready_;
  const ::apollo::decision::MainParking* parking_;
}* MainDecision_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* MasterVehicleDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterVehicleDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* LatencyStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatencyStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stats_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_reflection_ = NULL;
const ::google::protobuf::Descriptor* LightSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightSignal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LightSignal_TurnSignal_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DecisionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecisionResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StopReasonCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/decision/decision.proto");
  GOOGLE_CHECK(file != NULL);
  Range_descriptor_ = file->message_type(0);
  static const int Range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, end_),
  };
  Range_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Range_descriptor_,
      Range::default_instance_,
      Range_offsets_,
      -1,
      -1,
      -1,
      sizeof(Range),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _is_default_instance_));
  TargetLane_descriptor_ = file->message_type(1);
  static const int TargetLane_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, start_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, end_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, speed_limit_),
  };
  TargetLane_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetLane_descriptor_,
      TargetLane::default_instance_,
      TargetLane_offsets_,
      -1,
      -1,
      -1,
      sizeof(TargetLane),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, _is_default_instance_));
  ObjectIgnore_descriptor_ = file->message_type(2);
  static const int ObjectIgnore_offsets_[1] = {
  };
  ObjectIgnore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectIgnore_descriptor_,
      ObjectIgnore::default_instance_,
      ObjectIgnore_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectIgnore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIgnore, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIgnore, _is_default_instance_));
  ObjectStop_descriptor_ = file->message_type(3);
  static const int ObjectStop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, preferred_distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, reason_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, stop_point_),
  };
  ObjectStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectStop_descriptor_,
      ObjectStop::default_instance_,
      ObjectStop_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, _is_default_instance_));
  ObjectNudge_descriptor_ = file->message_type(4);
  static const int ObjectNudge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, distance_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, preferred_distance_l_),
  };
  ObjectNudge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectNudge_descriptor_,
      ObjectNudge::default_instance_,
      ObjectNudge_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectNudge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, _is_default_instance_));
  ObjectNudge_Type_descriptor_ = ObjectNudge_descriptor_->enum_type(0);
  ObjectYield_descriptor_ = file->message_type(5);
  static const int ObjectYield_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, preferred_distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, yield_point_),
  };
  ObjectYield_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectYield_descriptor_,
      ObjectYield::default_instance_,
      ObjectYield_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectYield),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, _is_default_instance_));
  ObjectFollow_descriptor_ = file->message_type(6);
  static const int ObjectFollow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, preferred_distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, follow_point_),
  };
  ObjectFollow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectFollow_descriptor_,
      ObjectFollow::default_instance_,
      ObjectFollow_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectFollow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, _is_default_instance_));
  ObjectOvertake_descriptor_ = file->message_type(7);
  static const int ObjectOvertake_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, preferred_distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, overtake_point_),
  };
  ObjectOvertake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectOvertake_descriptor_,
      ObjectOvertake::default_instance_,
      ObjectOvertake_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectOvertake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, _is_default_instance_));
  ObjectSidePass_descriptor_ = file->message_type(8);
  static const int ObjectSidePass_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, preferred_distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, type_),
  };
  ObjectSidePass_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectSidePass_descriptor_,
      ObjectSidePass::default_instance_,
      ObjectSidePass_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectSidePass),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, _is_default_instance_));
  ObjectSidePass_Type_descriptor_ = ObjectSidePass_descriptor_->enum_type(0);
  ObjectAvoid_descriptor_ = file->message_type(9);
  static const int ObjectAvoid_offsets_[1] = {
  };
  ObjectAvoid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectAvoid_descriptor_,
      ObjectAvoid::default_instance_,
      ObjectAvoid_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectAvoid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAvoid, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAvoid, _is_default_instance_));
  ObjectDecisionType_descriptor_ = file->message_type(10);
  static const int ObjectDecisionType_offsets_[9] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, ignore_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, stop_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, follow_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, yield_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, overtake_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, nudge_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, sidepass_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, avoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, object_tag_),
  };
  ObjectDecisionType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectDecisionType_descriptor_,
      ObjectDecisionType::default_instance_,
      ObjectDecisionType_offsets_,
      -1,
      -1,
      -1,
      ObjectDecisionType_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, _oneof_case_[0]),
      sizeof(ObjectDecisionType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, _is_default_instance_));
  ObjectDecision_descriptor_ = file->message_type(11);
  static const int ObjectDecision_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, prediction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, object_decision_),
  };
  ObjectDecision_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectDecision_descriptor_,
      ObjectDecision::default_instance_,
      ObjectDecision_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectDecision),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, _is_default_instance_));
  ObjectDecision_ObjectType_descriptor_ = ObjectDecision_descriptor_->enum_type(0);
  ObjectDecisions_descriptor_ = file->message_type(12);
  static const int ObjectDecisions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisions, decision_),
  };
  ObjectDecisions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectDecisions_descriptor_,
      ObjectDecisions::default_instance_,
      ObjectDecisions_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectDecisions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisions, _is_default_instance_));
  StopLine_descriptor_ = file->message_type(13);
  static const int StopLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopLine, lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopLine, distance_s_),
  };
  StopLine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopLine_descriptor_,
      StopLine::default_instance_,
      StopLine_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopLine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopLine, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopLine, _is_default_instance_));
  MainStop_descriptor_ = file->message_type(14);
  static const int MainStop_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, enforced_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, preferred_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, preferred_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, reason_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, stop_heading_),
  };
  MainStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainStop_descriptor_,
      MainStop::default_instance_,
      MainStop_offsets_,
      -1,
      -1,
      -1,
      sizeof(MainStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, _is_default_instance_));
  EmergencyStopHardBrake_descriptor_ = file->message_type(15);
  static const int EmergencyStopHardBrake_offsets_[1] = {
  };
  EmergencyStopHardBrake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmergencyStopHardBrake_descriptor_,
      EmergencyStopHardBrake::default_instance_,
      EmergencyStopHardBrake_offsets_,
      -1,
      -1,
      -1,
      sizeof(EmergencyStopHardBrake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopHardBrake, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopHardBrake, _is_default_instance_));
  EmergencyStopCruiseToStop_descriptor_ = file->message_type(16);
  static const int EmergencyStopCruiseToStop_offsets_[1] = {
  };
  EmergencyStopCruiseToStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmergencyStopCruiseToStop_descriptor_,
      EmergencyStopCruiseToStop::default_instance_,
      EmergencyStopCruiseToStop_offsets_,
      -1,
      -1,
      -1,
      sizeof(EmergencyStopCruiseToStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopCruiseToStop, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopCruiseToStop, _is_default_instance_));
  MainEmergencyStop_descriptor_ = file->message_type(17);
  static const int MainEmergencyStop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, reason_code_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainEmergencyStop_default_oneof_instance_, hard_brake_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainEmergencyStop_default_oneof_instance_, cruise_to_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, task_),
  };
  MainEmergencyStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainEmergencyStop_descriptor_,
      MainEmergencyStop::default_instance_,
      MainEmergencyStop_offsets_,
      -1,
      -1,
      -1,
      MainEmergencyStop_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, _oneof_case_[0]),
      sizeof(MainEmergencyStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, _is_default_instance_));
  MainEmergencyStop_ReasonCode_descriptor_ = MainEmergencyStop_descriptor_->enum_type(0);
  MainCruise_descriptor_ = file->message_type(18);
  static const int MainCruise_offsets_[1] = {
  };
  MainCruise_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainCruise_descriptor_,
      MainCruise::default_instance_,
      MainCruise_offsets_,
      -1,
      -1,
      -1,
      sizeof(MainCruise),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCruise, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCruise, _is_default_instance_));
  MainChangeLane_descriptor_ = file->message_type(19);
  static const int MainChangeLane_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, default_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, default_lane_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, target_lane_stop_),
  };
  MainChangeLane_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainChangeLane_descriptor_,
      MainChangeLane::default_instance_,
      MainChangeLane_offsets_,
      -1,
      -1,
      -1,
      sizeof(MainChangeLane),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, _is_default_instance_));
  MainChangeLane_Type_descriptor_ = MainChangeLane_descriptor_->enum_type(0);
  MainMissionComplete_descriptor_ = file->message_type(20);
  static const int MainMissionComplete_offsets_[1] = {
  };
  MainMissionComplete_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainMissionComplete_descriptor_,
      MainMissionComplete::default_instance_,
      MainMissionComplete_offsets_,
      -1,
      -1,
      -1,
      sizeof(MainMissionComplete),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMissionComplete, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMissionComplete, _is_default_instance_));
  MainNotReady_descriptor_ = file->message_type(21);
  static const int MainNotReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainNotReady, reason_),
  };
  MainNotReady_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainNotReady_descriptor_,
      MainNotReady::default_instance_,
      MainNotReady_offsets_,
      -1,
      -1,
      -1,
      sizeof(MainNotReady),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainNotReady, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainNotReady, _is_default_instance_));
  MainParking_descriptor_ = file->message_type(22);
  static const int MainParking_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, parking_polygon_),
  };
  MainParking_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainParking_descriptor_,
      MainParking::default_instance_,
      MainParking_offsets_,
      -1,
      -1,
      -1,
      sizeof(MainParking),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, _is_default_instance_));
  MainParking_Type_descriptor_ = MainParking_descriptor_->enum_type(0);
  MainDecision_descriptor_ = file->message_type(23);
  static const int MainDecision_offsets_[9] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, cruise_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, stop_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, estop_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, change_lane_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, mission_complete_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, not_ready_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, parking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, target_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, task_),
  };
  MainDecision_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainDecision_descriptor_,
      MainDecision::default_instance_,
      MainDecision_offsets_,
      -1,
      -1,
      -1,
      MainDecision_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, _oneof_case_[0]),
      sizeof(MainDecision),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, _is_default_instance_));
  MasterVehicleDebug_descriptor_ = file->message_type(24);
  static const int MasterVehicleDebug_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, current_lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, lane_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, lane_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, route_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, route_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, heading_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, heading_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, route_s_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, route_l_range_),
  };
  MasterVehicleDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterVehicleDebug_descriptor_,
      MasterVehicleDebug::default_instance_,
      MasterVehicleDebug_offsets_,
      -1,
      -1,
      -1,
      sizeof(MasterVehicleDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterVehicleDebug, _is_default_instance_));
  ObjectDebug_descriptor_ = file->message_type(25);
  static const int ObjectDebug_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, path_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, route_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, route_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, on_route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, lane_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, on_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, path_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, st_region_),
  };
  ObjectDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectDebug_descriptor_,
      ObjectDebug::default_instance_,
      ObjectDebug_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDebug, _is_default_instance_));
  LatencyStats_descriptor_ = file->message_type(26);
  static const int LatencyStats_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, total_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, sensor_read_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, adc_prepare_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, obj_prepare_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, world_rule_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, st_graph_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, gateway_receive_delay_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, perception_receive_delay_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, prediction_receive_delay_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, signal_receive_delay_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, perception_interval_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, prediction_interval_ms_),
  };
  LatencyStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LatencyStats_descriptor_,
      LatencyStats::default_instance_,
      LatencyStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(LatencyStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _is_default_instance_));
  Stats_descriptor_ = file->message_type(27);
  static const int Stats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, latency_stats_),
  };
  Stats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stats_descriptor_,
      Stats::default_instance_,
      Stats_offsets_,
      -1,
      -1,
      -1,
      sizeof(Stats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _is_default_instance_));
  ModuleDebug_descriptor_ = file->message_type(28);
  static const int ModuleDebug_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleDebug, gateway_sequence_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleDebug, perception_sequence_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleDebug, prediction_sequence_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleDebug, signal_sequence_num_),
  };
  ModuleDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModuleDebug_descriptor_,
      ModuleDebug::default_instance_,
      ModuleDebug_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModuleDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleDebug, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleDebug, _is_default_instance_));
  Debug_descriptor_ = file->message_type(29);
  static const int Debug_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, master_vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, original_decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, map_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, decision_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, module_debug_),
  };
  Debug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Debug_descriptor_,
      Debug::default_instance_,
      Debug_offsets_,
      -1,
      -1,
      -1,
      sizeof(Debug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _is_default_instance_));
  LightSignal_descriptor_ = file->message_type(30);
  static const int LightSignal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSignal, emergency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSignal, turn_signal_),
  };
  LightSignal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LightSignal_descriptor_,
      LightSignal::default_instance_,
      LightSignal_offsets_,
      -1,
      -1,
      -1,
      sizeof(LightSignal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSignal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSignal, _is_default_instance_));
  LightSignal_TurnSignal_descriptor_ = LightSignal_descriptor_->enum_type(0);
  DecisionResult_descriptor_ = file->message_type(31);
  static const int DecisionResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, object_decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, main_decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, light_signal_),
  };
  DecisionResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DecisionResult_descriptor_,
      DecisionResult::default_instance_,
      DecisionResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(DecisionResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, _is_default_instance_));
  StopReasonCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Range_descriptor_, &Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetLane_descriptor_, &TargetLane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectIgnore_descriptor_, &ObjectIgnore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectStop_descriptor_, &ObjectStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectNudge_descriptor_, &ObjectNudge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectYield_descriptor_, &ObjectYield::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectFollow_descriptor_, &ObjectFollow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectOvertake_descriptor_, &ObjectOvertake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectSidePass_descriptor_, &ObjectSidePass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectAvoid_descriptor_, &ObjectAvoid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectDecisionType_descriptor_, &ObjectDecisionType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectDecision_descriptor_, &ObjectDecision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectDecisions_descriptor_, &ObjectDecisions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopLine_descriptor_, &StopLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainStop_descriptor_, &MainStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmergencyStopHardBrake_descriptor_, &EmergencyStopHardBrake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmergencyStopCruiseToStop_descriptor_, &EmergencyStopCruiseToStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainEmergencyStop_descriptor_, &MainEmergencyStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainCruise_descriptor_, &MainCruise::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainChangeLane_descriptor_, &MainChangeLane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainMissionComplete_descriptor_, &MainMissionComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainNotReady_descriptor_, &MainNotReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainParking_descriptor_, &MainParking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainDecision_descriptor_, &MainDecision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterVehicleDebug_descriptor_, &MasterVehicleDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectDebug_descriptor_, &ObjectDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LatencyStats_descriptor_, &LatencyStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stats_descriptor_, &Stats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModuleDebug_descriptor_, &ModuleDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Debug_descriptor_, &Debug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LightSignal_descriptor_, &LightSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DecisionResult_descriptor_, &DecisionResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto() {
  delete Range::default_instance_;
  delete Range_reflection_;
  delete TargetLane::default_instance_;
  delete TargetLane_reflection_;
  delete ObjectIgnore::default_instance_;
  delete ObjectIgnore_reflection_;
  delete ObjectStop::default_instance_;
  delete ObjectStop_reflection_;
  delete ObjectNudge::default_instance_;
  delete ObjectNudge_reflection_;
  delete ObjectYield::default_instance_;
  delete ObjectYield_reflection_;
  delete ObjectFollow::default_instance_;
  delete ObjectFollow_reflection_;
  delete ObjectOvertake::default_instance_;
  delete ObjectOvertake_reflection_;
  delete ObjectSidePass::default_instance_;
  delete ObjectSidePass_reflection_;
  delete ObjectAvoid::default_instance_;
  delete ObjectAvoid_reflection_;
  delete ObjectDecisionType::default_instance_;
  delete ObjectDecisionType_default_oneof_instance_;
  delete ObjectDecisionType_reflection_;
  delete ObjectDecision::default_instance_;
  delete ObjectDecision_reflection_;
  delete ObjectDecisions::default_instance_;
  delete ObjectDecisions_reflection_;
  delete StopLine::default_instance_;
  delete StopLine_reflection_;
  delete MainStop::default_instance_;
  delete MainStop_reflection_;
  delete EmergencyStopHardBrake::default_instance_;
  delete EmergencyStopHardBrake_reflection_;
  delete EmergencyStopCruiseToStop::default_instance_;
  delete EmergencyStopCruiseToStop_reflection_;
  delete MainEmergencyStop::default_instance_;
  delete MainEmergencyStop_default_oneof_instance_;
  delete MainEmergencyStop_reflection_;
  delete MainCruise::default_instance_;
  delete MainCruise_reflection_;
  delete MainChangeLane::default_instance_;
  delete MainChangeLane_reflection_;
  delete MainMissionComplete::default_instance_;
  delete MainMissionComplete_reflection_;
  delete MainNotReady::default_instance_;
  delete MainNotReady_reflection_;
  delete MainParking::default_instance_;
  delete MainParking_reflection_;
  delete MainDecision::default_instance_;
  delete MainDecision_default_oneof_instance_;
  delete MainDecision_reflection_;
  delete MasterVehicleDebug::default_instance_;
  delete MasterVehicleDebug_reflection_;
  delete ObjectDebug::default_instance_;
  delete ObjectDebug_reflection_;
  delete LatencyStats::default_instance_;
  delete LatencyStats_reflection_;
  delete Stats::default_instance_;
  delete Stats_reflection_;
  delete ModuleDebug::default_instance_;
  delete ModuleDebug_reflection_;
  delete Debug::default_instance_;
  delete Debug_reflection_;
  delete LightSignal::default_instance_;
  delete LightSignal_reflection_;
  delete DecisionResult::default_instance_;
  delete DecisionResult_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fgeometry_2eproto();
  ::apollo::prediction::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fprediction_2fprediction_5fobstacle_2eproto();
  ::apollo::canbus::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcanbus_2fchassis_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)apollo_msgs/proto/decision/decision.pr"
    "oto\022\017apollo.decision\032%apollo_msgs/proto/"
    "common/header.proto\032\'apollo_msgs/proto/c"
    "ommon/geometry.proto\0326apollo_msgs/proto/"
    "prediction/prediction_obstacle.proto\032&ap"
    "ollo_msgs/proto/canbus/chassis.proto\"#\n\005"
    "Range\022\r\n\005start\030\001 \001(\001\022\013\n\003end\030\002 \001(\001\"M\n\nTar"
    "getLane\022\n\n\002id\030\001 \001(\t\022\017\n\007start_s\030\002 \001(\001\022\r\n\005"
    "end_s\030\003 \001(\001\022\023\n\013speed_limit\030\004 \001(\001\"\016\n\014Obje"
    "ctIgnore\"\271\001\n\nObjectStop\022\022\n\ndistance_s\030\001 "
    "\001(\001\0224\n\024preferred_distance_s\030\002 \001(\0132\026.apol"
    "lo.decision.Range\0224\n\013reason_code\030\003 \001(\0162\037"
    ".apollo.decision.StopReasonCode\022+\n\nstop_"
    "point\030\004 \001(\0132\027.apollo.common.PointENU\"\261\001\n"
    "\013ObjectNudge\022\022\n\ndistance_l\030\001 \001(\001\022/\n\004type"
    "\030\002 \001(\0162!.apollo.decision.ObjectNudge.Typ"
    "e\0224\n\024preferred_distance_l\030\003 \001(\0132\026.apollo"
    ".decision.Range\"\'\n\004Type\022\016\n\nLEFT_NUDGE\020\000\022"
    "\017\n\013RIGHT_NUDGE\020\001\"\205\001\n\013ObjectYield\022\022\n\ndist"
    "ance_s\030\001 \001(\001\0224\n\024preferred_distance_s\030\002 \001"
    "(\0132\026.apollo.decision.Range\022,\n\013yield_poin"
    "t\030\003 \001(\0132\027.apollo.common.PointENU\"\207\001\n\014Obj"
    "ectFollow\022\022\n\ndistance_s\030\001 \001(\001\0224\n\024preferr"
    "ed_distance_s\030\002 \001(\0132\026.apollo.decision.Ra"
    "nge\022-\n\014follow_point\030\003 \001(\0132\027.apollo.commo"
    "n.PointENU\"\213\001\n\016ObjectOvertake\022\022\n\ndistanc"
    "e_s\030\001 \001(\001\0224\n\024preferred_distance_s\030\002 \001(\0132"
    "\026.apollo.decision.Range\022/\n\016overtake_poin"
    "t\030\003 \001(\0132\027.apollo.common.PointENU\"\254\001\n\016Obj"
    "ectSidePass\022\022\n\ndistance_s\030\001 \001(\001\0224\n\024prefe"
    "rred_distance_s\030\002 \001(\0132\026.apollo.decision."
    "Range\0222\n\004type\030\003 \001(\0162$.apollo.decision.Ob"
    "jectSidePass.Type\"\034\n\004Type\022\n\n\006FOLLOW\020\000\022\010\n"
    "\004LEAD\020\001\"\r\n\013ObjectAvoid\"\250\003\n\022ObjectDecisio"
    "nType\022/\n\006ignore\030\001 \001(\0132\035.apollo.decision."
    "ObjectIgnoreH\000\022+\n\004stop\030\002 \001(\0132\033.apollo.de"
    "cision.ObjectStopH\000\022/\n\006follow\030\003 \001(\0132\035.ap"
    "ollo.decision.ObjectFollowH\000\022-\n\005yield\030\004 "
    "\001(\0132\034.apollo.decision.ObjectYieldH\000\0223\n\010o"
    "vertake\030\005 \001(\0132\037.apollo.decision.ObjectOv"
    "ertakeH\000\022-\n\005nudge\030\006 \001(\0132\034.apollo.decisio"
    "n.ObjectNudgeH\000\0223\n\010sidepass\030\007 \001(\0132\037.apol"
    "lo.decision.ObjectSidePassH\000\022-\n\005avoid\030\010 "
    "\001(\0132\034.apollo.decision.ObjectAvoidH\000B\014\n\no"
    "bject_tag\"\301\002\n\016ObjectDecision\0229\n\npredicti"
    "on\030\001 \001(\0132%.apollo.prediction.PredictionO"
    "bstacle\022\n\n\002id\030\002 \001(\t\0228\n\004type\030\003 \001(\0162*.apol"
    "lo.decision.ObjectDecision.ObjectType\0225\n"
    "\010decision\030\004 \001(\0132#.apollo.decision.Object"
    "DecisionType\022<\n\017object_decision\030\005 \003(\0132#."
    "apollo.decision.ObjectDecisionType\"9\n\nOb"
    "jectType\022\016\n\nPREDICTION\020\000\022\016\n\nPERCEPTION\020\001"
    "\022\013\n\007VIRTUAL\020\002\"D\n\017ObjectDecisions\0221\n\010deci"
    "sion\030\001 \003(\0132\037.apollo.decision.ObjectDecis"
    "ion\"/\n\010StopLine\022\017\n\007lane_id\030\001 \001(\t\022\022\n\ndist"
    "ance_s\030\002 \001(\001\"\253\002\n\010MainStop\0220\n\renforced_li"
    "ne\030\001 \001(\0132\031.apollo.decision.StopLine\0222\n\017p"
    "referred_start\030\002 \001(\0132\031.apollo.decision.S"
    "topLine\0220\n\rpreferred_end\030\003 \001(\0132\031.apollo."
    "decision.StopLine\022\016\n\006reason\030\004 \001(\t\0224\n\013rea"
    "son_code\030\005 \001(\0162\037.apollo.decision.StopRea"
    "sonCode\022+\n\nstop_point\030\006 \001(\0132\027.apollo.com"
    "mon.PointENU\022\024\n\014stop_heading\030\007 \001(\001\"\030\n\026Em"
    "ergencyStopHardBrake\"\033\n\031EmergencyStopCru"
    "iseToStop\"\237\003\n\021MainEmergencyStop\022\016\n\006reaso"
    "n\030\001 \001(\t\022B\n\013reason_code\030\002 \001(\0162-.apollo.de"
    "cision.MainEmergencyStop.ReasonCode\022=\n\nh"
    "ard_brake\030\003 \001(\0132\'.apollo.decision.Emerge"
    "ncyStopHardBrakeH\000\022D\n\016cruise_to_stop\030\004 \001"
    "(\0132*.apollo.decision.EmergencyStopCruise"
    "ToStopH\000\"\250\001\n\nReasonCode\022\035\n\031ESTOP_REASON_"
    "INTERNAL_ERR\020\000\022\032\n\026ESTOP_REASON_COLLISION"
    "\020\001\022\035\n\031ESTOP_REASON_ST_FIND_PATH\020\002\022!\n\035EST"
    "OP_REASON_ST_MAKE_DECISION\020\003\022\035\n\031ESTOP_RE"
    "ASON_SENSOR_ERROR\020\004B\006\n\004task\"\014\n\nMainCruis"
    "e\"\377\001\n\016MainChangeLane\0222\n\004type\030\001 \001(\0162$.apo"
    "llo.decision.MainChangeLane.Type\0221\n\014defa"
    "ult_lane\030\002 \003(\0132\033.apollo.decision.TargetL"
    "ane\0224\n\021default_lane_stop\030\003 \001(\0132\031.apollo."
    "decision.MainStop\0223\n\020target_lane_stop\030\004 "
    "\001(\0132\031.apollo.decision.MainStop\"\033\n\004Type\022\010"
    "\n\004LEFT\020\000\022\t\n\005RIGHT\020\001\"\025\n\023MainMissionComple"
    "te\"\036\n\014MainNotReady\022\016\n\006reason\030\001 \001(\t\"\340\001\n\013M"
    "ainParking\022/\n\004type\030\001 \001(\0162!.apollo.decisi"
    "on.MainParking.Type\022\017\n\007heading\030\002 \001(\001\022+\n\n"
    "stop_point\030\003 \001(\0132\027.apollo.common.PointEN"
    "U\0220\n\017parking_polygon\030\004 \003(\0132\027.apollo.comm"
    "on.PointENU\"0\n\004Type\022\023\n\017FORWARD_PARKING\020\000"
    "\022\023\n\017REVERSE_PARKING\020\001\"\266\003\n\014MainDecision\022-"
    "\n\006cruise\030\001 \001(\0132\033.apollo.decision.MainCru"
    "iseH\000\022)\n\004stop\030\002 \001(\0132\031.apollo.decision.Ma"
    "inStopH\000\0223\n\005estop\030\003 \001(\0132\".apollo.decisio"
    "n.MainEmergencyStopH\000\0226\n\013change_lane\030\004 \001"
    "(\0132\037.apollo.decision.MainChangeLaneH\000\022@\n"
    "\020mission_complete\030\006 \001(\0132$.apollo.decisio"
    "n.MainMissionCompleteH\000\0222\n\tnot_ready\030\007 \001"
    "(\0132\035.apollo.decision.MainNotReadyH\000\022/\n\007p"
    "arking\030\010 \001(\0132\034.apollo.decision.MainParki"
    "ngH\000\0220\n\013target_lane\030\005 \003(\0132\033.apollo.decis"
    "ion.TargetLaneB\006\n\004task\"\276\002\n\022MasterVehicle"
    "Debug\022)\n\010position\030\001 \001(\0132\027.apollo.common."
    "PointENU\022\027\n\017current_lane_id\030\002 \001(\t\022\016\n\006lan"
    "e_s\030\003 \001(\001\022\016\n\006lane_l\030\004 \001(\001\022\017\n\007route_s\030\005 \001"
    "(\001\022\017\n\007route_l\030\006 \001(\001\022\017\n\007heading\030\007 \001(\001\022\025\n\r"
    "heading_speed\030\010 \001(\001\022\034\n\024heading_accelerat"
    "ion\030\t \001(\001\022-\n\rroute_s_range\030\n \001(\0132\026.apoll"
    "o.decision.Range\022-\n\rroute_l_range\030\013 \001(\0132"
    "\026.apollo.decision.Range\"\377\001\n\013ObjectDebug\022"
    "\n\n\002id\030\001 \001(\t\022\017\n\007path_id\030\002 \001(\t\022\'\n\007route_s\030"
    "\003 \001(\0132\026.apollo.decision.Range\022\'\n\007route_l"
    "\030\004 \001(\0132\026.apollo.decision.Range\022\020\n\010on_rou"
    "te\030\005 \001(\010\022\017\n\007lane_id\030\006 \001(\t\022\016\n\006lane_s\030\007 \001("
    "\001\022\017\n\007on_lane\030\010 \001(\010\022\022\n\npath_speed\030\t \001(\001\022)"
    "\n\tst_region\030\n \003(\0132\026.apollo.common.Point3"
    "D\"\377\002\n\014LatencyStats\022\025\n\rtotal_time_ms\030\001 \001("
    "\001\022\033\n\023sensor_read_time_ms\030\002 \001(\001\022\033\n\023adc_pr"
    "epare_time_ms\030\003 \001(\001\022\033\n\023obj_prepare_time_"
    "ms\030\004 \001(\001\022\032\n\022world_rule_time_ms\030\005 \001(\001\022\030\n\020"
    "st_graph_time_ms\030\006 \001(\001\022 \n\030gateway_receiv"
    "e_delay_ms\030\010 \001(\001\022#\n\033perception_receive_d"
    "elay_ms\030\t \001(\001\022#\n\033prediction_receive_dela"
    "y_ms\030\n \001(\001\022\037\n\027signal_receive_delay_ms\030\013 "
    "\001(\001\022\036\n\026perception_interval_ms\030\014 \001(\001\022\036\n\026p"
    "rediction_interval_ms\030\r \001(\001\"=\n\005Stats\0224\n\r"
    "latency_stats\030\001 \001(\0132\035.apollo.decision.La"
    "tencyStats\"\212\001\n\013ModuleDebug\022\034\n\024gateway_se"
    "quence_num\030\001 \001(\r\022\037\n\027perception_sequence_"
    "num\030\002 \001(\r\022\037\n\027prediction_sequence_num\030\003 \001"
    "(\r\022\033\n\023signal_sequence_num\030\004 \001(\r\"\217\002\n\005Debu"
    "g\022;\n\016master_vehicle\030\001 \001(\0132#.apollo.decis"
    "ion.MasterVehicleDebug\0228\n\021original_decis"
    "ion\030\002 \001(\0132\035.apollo.decision.MainDecision"
    "\022,\n\006object\030\003 \003(\0132\034.apollo.decision.Objec"
    "tDebug\022\023\n\013map_version\030\005 \001(\014\022\030\n\020decision_"
    "version\030\007 \001(\014\0222\n\014module_debug\030\006 \001(\0132\034.ap"
    "ollo.decision.ModuleDebug\"\230\001\n\013LightSigna"
    "l\022\021\n\temergency\030\001 \001(\010\022<\n\013turn_signal\030\002 \001("
    "\0162\'.apollo.decision.LightSignal.TurnSign"
    "al\"8\n\nTurnSignal\022\013\n\007NO_TURN\020\000\022\r\n\tLEFT_TU"
    "RN\020\001\022\016\n\nRIGHT_TURN\020\002\"\321\002\n\016DecisionResult\022"
    "%\n\006header\030\001 \001(\0132\025.apollo.common.Header\0229"
    "\n\017object_decision\030\002 \001(\0132 .apollo.decisio"
    "n.ObjectDecisions\0224\n\rmain_decision\030\003 \001(\013"
    "2\035.apollo.decision.MainDecision\022%\n\005debug"
    "\030\004 \001(\0132\026.apollo.decision.Debug\022%\n\005stats\030"
    "\006 \001(\0132\026.apollo.decision.Stats\022%\n\006signal\030"
    "\007 \001(\0132\025.apollo.canbus.Signal\0222\n\014light_si"
    "gnal\030\005 \001(\0132\034.apollo.decision.LightSignal"
    "*\243\002\n\016StopReasonCode\022\034\n\030STOP_REASON_HEAD_"
    "VEHICLE\020\000\022\033\n\027STOP_REASON_DESTINATION\020\001\022\032"
    "\n\026STOP_REASON_PEDESTRIAN\020\002\022\030\n\024STOP_REASO"
    "N_OBSTACLE\020\003\022\032\n\026STOP_REASON_PREPARKING\020\004"
    "\022\026\n\022STOP_REASON_SIGNAL\020d\022\031\n\025STOP_REASON_"
    "STOP_SIGN\020e\022\032\n\026STOP_REASON_YIELD_SIGN\020f\022"
    "\032\n\026STOP_REASON_CLEAR_ZONE\020g\022\031\n\025STOP_REAS"
    "ON_CROSSWALK\020hb\006proto3", 6222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/decision/decision.proto", &protobuf_RegisterTypes);
  Range::default_instance_ = new Range();
  TargetLane::default_instance_ = new TargetLane();
  ObjectIgnore::default_instance_ = new ObjectIgnore();
  ObjectStop::default_instance_ = new ObjectStop();
  ObjectNudge::default_instance_ = new ObjectNudge();
  ObjectYield::default_instance_ = new ObjectYield();
  ObjectFollow::default_instance_ = new ObjectFollow();
  ObjectOvertake::default_instance_ = new ObjectOvertake();
  ObjectSidePass::default_instance_ = new ObjectSidePass();
  ObjectAvoid::default_instance_ = new ObjectAvoid();
  ObjectDecisionType::default_instance_ = new ObjectDecisionType();
  ObjectDecisionType_default_oneof_instance_ = new ObjectDecisionTypeOneofInstance();
  ObjectDecision::default_instance_ = new ObjectDecision();
  ObjectDecisions::default_instance_ = new ObjectDecisions();
  StopLine::default_instance_ = new StopLine();
  MainStop::default_instance_ = new MainStop();
  EmergencyStopHardBrake::default_instance_ = new EmergencyStopHardBrake();
  EmergencyStopCruiseToStop::default_instance_ = new EmergencyStopCruiseToStop();
  MainEmergencyStop::default_instance_ = new MainEmergencyStop();
  MainEmergencyStop_default_oneof_instance_ = new MainEmergencyStopOneofInstance();
  MainCruise::default_instance_ = new MainCruise();
  MainChangeLane::default_instance_ = new MainChangeLane();
  MainMissionComplete::default_instance_ = new MainMissionComplete();
  MainNotReady::default_instance_ = new MainNotReady();
  MainParking::default_instance_ = new MainParking();
  MainDecision::default_instance_ = new MainDecision();
  MainDecision_default_oneof_instance_ = new MainDecisionOneofInstance();
  MasterVehicleDebug::default_instance_ = new MasterVehicleDebug();
  ObjectDebug::default_instance_ = new ObjectDebug();
  LatencyStats::default_instance_ = new LatencyStats();
  Stats::default_instance_ = new Stats();
  ModuleDebug::default_instance_ = new ModuleDebug();
  Debug::default_instance_ = new Debug();
  LightSignal::default_instance_ = new LightSignal();
  DecisionResult::default_instance_ = new DecisionResult();
  Range::default_instance_->InitAsDefaultInstance();
  TargetLane::default_instance_->InitAsDefaultInstance();
  ObjectIgnore::default_instance_->InitAsDefaultInstance();
  ObjectStop::default_instance_->InitAsDefaultInstance();
  ObjectNudge::default_instance_->InitAsDefaultInstance();
  ObjectYield::default_instance_->InitAsDefaultInstance();
  ObjectFollow::default_instance_->InitAsDefaultInstance();
  ObjectOvertake::default_instance_->InitAsDefaultInstance();
  ObjectSidePass::default_instance_->InitAsDefaultInstance();
  ObjectAvoid::default_instance_->InitAsDefaultInstance();
  ObjectDecisionType::default_instance_->InitAsDefaultInstance();
  ObjectDecision::default_instance_->InitAsDefaultInstance();
  ObjectDecisions::default_instance_->InitAsDefaultInstance();
  StopLine::default_instance_->InitAsDefaultInstance();
  MainStop::default_instance_->InitAsDefaultInstance();
  EmergencyStopHardBrake::default_instance_->InitAsDefaultInstance();
  EmergencyStopCruiseToStop::default_instance_->InitAsDefaultInstance();
  MainEmergencyStop::default_instance_->InitAsDefaultInstance();
  MainCruise::default_instance_->InitAsDefaultInstance();
  MainChangeLane::default_instance_->InitAsDefaultInstance();
  MainMissionComplete::default_instance_->InitAsDefaultInstance();
  MainNotReady::default_instance_->InitAsDefaultInstance();
  MainParking::default_instance_->InitAsDefaultInstance();
  MainDecision::default_instance_->InitAsDefaultInstance();
  MasterVehicleDebug::default_instance_->InitAsDefaultInstance();
  ObjectDebug::default_instance_->InitAsDefaultInstance();
  LatencyStats::default_instance_->InitAsDefaultInstance();
  Stats::default_instance_->InitAsDefaultInstance();
  ModuleDebug::default_instance_->InitAsDefaultInstance();
  Debug::default_instance_->InitAsDefaultInstance();
  LightSignal::default_instance_->InitAsDefaultInstance();
  DecisionResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto_;
const ::google::protobuf::EnumDescriptor* StopReasonCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopReasonCode_descriptor_;
}
bool StopReasonCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Range::kStartFieldNumber;
const int Range::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Range::Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.Range)
}

void Range::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Range::Range(const Range& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.Range)
}

void Range::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_ = 0;
  end_ = 0;
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:apollo.decision.Range)
  SharedDtor();
}

void Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Range_descriptor_;
}

const Range& Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

Range* Range::default_instance_ = NULL;

Range* Range::New(::google::protobuf::Arena* arena) const {
  Range* n = new Range;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.Range)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Range, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Range*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_, end_);

#undef ZR_HELPER_
#undef ZR_

}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_end;
        break;
      }

      // optional double end = 2;
      case 2: {
        if (tag == 17) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.Range)
  // optional double start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start(), output);
  }

  // optional double end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.Range)
}

::google::protobuf::uint8* Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.Range)
  // optional double start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start(), target);
  }

  // optional double end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.Range)
  return target;
}

int Range::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.Range)
  int total_size = 0;

  // optional double start = 1;
  if (this->start() != 0) {
    total_size += 1 + 8;
  }

  // optional double end = 2;
  if (this->end() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.Range)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Range* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.Range)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {

  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Range_descriptor_;
  metadata.reflection = Range_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Range

// optional double start = 1;
void Range::clear_start() {
  start_ = 0;
}
 double Range::start() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Range.start)
  return start_;
}
 void Range::set_start(double value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.Range.start)
}

// optional double end = 2;
void Range::clear_end() {
  end_ = 0;
}
 double Range::end() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Range.end)
  return end_;
}
 void Range::set_end(double value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.Range.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetLane::kIdFieldNumber;
const int TargetLane::kStartSFieldNumber;
const int TargetLane::kEndSFieldNumber;
const int TargetLane::kSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetLane::TargetLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.TargetLane)
}

void TargetLane::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TargetLane::TargetLane(const TargetLane& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.TargetLane)
}

void TargetLane::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_s_ = 0;
  end_s_ = 0;
  speed_limit_ = 0;
}

TargetLane::~TargetLane() {
  // @@protoc_insertion_point(destructor:apollo.decision.TargetLane)
  SharedDtor();
}

void TargetLane::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TargetLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetLane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetLane_descriptor_;
}

const TargetLane& TargetLane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

TargetLane* TargetLane::default_instance_ = NULL;

TargetLane* TargetLane::New(::google::protobuf::Arena* arena) const {
  TargetLane* n = new TargetLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetLane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.TargetLane)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TargetLane, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TargetLane*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_s_, speed_limit_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TargetLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.TargetLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.decision.TargetLane.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_start_s;
        break;
      }

      // optional double start_s = 2;
      case 2: {
        if (tag == 17) {
         parse_start_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_end_s;
        break;
      }

      // optional double end_s = 3;
      case 3: {
        if (tag == 25) {
         parse_end_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed_limit;
        break;
      }

      // optional double speed_limit = 4;
      case 4: {
        if (tag == 33) {
         parse_speed_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.TargetLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.TargetLane)
  return false;
#undef DO_
}

void TargetLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.TargetLane)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.TargetLane.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double start_s = 2;
  if (this->start_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // optional double end_s = 3;
  if (this->end_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  // optional double speed_limit = 4;
  if (this->speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.TargetLane)
}

::google::protobuf::uint8* TargetLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.TargetLane)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.TargetLane.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double start_s = 2;
  if (this->start_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // optional double end_s = 3;
  if (this->end_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  // optional double speed_limit = 4;
  if (this->speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.TargetLane)
  return target;
}

int TargetLane::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.TargetLane)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional double start_s = 2;
  if (this->start_s() != 0) {
    total_size += 1 + 8;
  }

  // optional double end_s = 3;
  if (this->end_s() != 0) {
    total_size += 1 + 8;
  }

  // optional double speed_limit = 4;
  if (this->speed_limit() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.TargetLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TargetLane* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.TargetLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.TargetLane)
    MergeFrom(*source);
  }
}

void TargetLane::MergeFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.TargetLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.start_s() != 0) {
    set_start_s(from.start_s());
  }
  if (from.end_s() != 0) {
    set_end_s(from.end_s());
  }
  if (from.speed_limit() != 0) {
    set_speed_limit(from.speed_limit());
  }
}

void TargetLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetLane::CopyFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetLane::IsInitialized() const {

  return true;
}

void TargetLane::Swap(TargetLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetLane::InternalSwap(TargetLane* other) {
  id_.Swap(&other->id_);
  std::swap(start_s_, other->start_s_);
  std::swap(end_s_, other->end_s_);
  std::swap(speed_limit_, other->speed_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetLane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetLane_descriptor_;
  metadata.reflection = TargetLane_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetLane

// optional string id = 1;
void TargetLane::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TargetLane::id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.TargetLane.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TargetLane::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.TargetLane.id)
}
 void TargetLane::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.TargetLane.id)
}
 void TargetLane::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.TargetLane.id)
}
 ::std::string* TargetLane::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.TargetLane.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TargetLane::release_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.TargetLane.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TargetLane::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.TargetLane.id)
}

// optional double start_s = 2;
void TargetLane::clear_start_s() {
  start_s_ = 0;
}
 double TargetLane::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.TargetLane.start_s)
  return start_s_;
}
 void TargetLane::set_start_s(double value) {
  
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.TargetLane.start_s)
}

// optional double end_s = 3;
void TargetLane::clear_end_s() {
  end_s_ = 0;
}
 double TargetLane::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.TargetLane.end_s)
  return end_s_;
}
 void TargetLane::set_end_s(double value) {
  
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.TargetLane.end_s)
}

// optional double speed_limit = 4;
void TargetLane::clear_speed_limit() {
  speed_limit_ = 0;
}
 double TargetLane::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.decision.TargetLane.speed_limit)
  return speed_limit_;
}
 void TargetLane::set_speed_limit(double value) {
  
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.TargetLane.speed_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectIgnore::ObjectIgnore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectIgnore)
}

void ObjectIgnore::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ObjectIgnore::ObjectIgnore(const ObjectIgnore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectIgnore)
}

void ObjectIgnore::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ObjectIgnore::~ObjectIgnore() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectIgnore)
  SharedDtor();
}

void ObjectIgnore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectIgnore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectIgnore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectIgnore_descriptor_;
}

const ObjectIgnore& ObjectIgnore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectIgnore* ObjectIgnore::default_instance_ = NULL;

ObjectIgnore* ObjectIgnore::New(::google::protobuf::Arena* arena) const {
  ObjectIgnore* n = new ObjectIgnore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectIgnore::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectIgnore)
}

bool ObjectIgnore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectIgnore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectIgnore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectIgnore)
  return false;
#undef DO_
}

void ObjectIgnore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectIgnore)
  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectIgnore)
}

::google::protobuf::uint8* ObjectIgnore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectIgnore)
  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectIgnore)
  return target;
}

int ObjectIgnore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectIgnore)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectIgnore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectIgnore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectIgnore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectIgnore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectIgnore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectIgnore)
    MergeFrom(*source);
  }
}

void ObjectIgnore::MergeFrom(const ObjectIgnore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectIgnore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ObjectIgnore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectIgnore::CopyFrom(const ObjectIgnore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectIgnore::IsInitialized() const {

  return true;
}

void ObjectIgnore::Swap(ObjectIgnore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectIgnore::InternalSwap(ObjectIgnore* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectIgnore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectIgnore_descriptor_;
  metadata.reflection = ObjectIgnore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectIgnore

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectStop::kDistanceSFieldNumber;
const int ObjectStop::kPreferredDistanceSFieldNumber;
const int ObjectStop::kReasonCodeFieldNumber;
const int ObjectStop::kStopPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectStop::ObjectStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectStop)
}

void ObjectStop::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  preferred_distance_s_ = const_cast< ::apollo::decision::Range*>(&::apollo::decision::Range::default_instance());
  stop_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

ObjectStop::ObjectStop(const ObjectStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectStop)
}

void ObjectStop::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  distance_s_ = 0;
  preferred_distance_s_ = NULL;
  reason_code_ = 0;
  stop_point_ = NULL;
}

ObjectStop::~ObjectStop() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectStop)
  SharedDtor();
}

void ObjectStop::SharedDtor() {
  if (this != default_instance_) {
    delete preferred_distance_s_;
    delete stop_point_;
  }
}

void ObjectStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectStop_descriptor_;
}

const ObjectStop& ObjectStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectStop* ObjectStop::default_instance_ = NULL;

ObjectStop* ObjectStop::New(::google::protobuf::Arena* arena) const {
  ObjectStop* n = new ObjectStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectStop)
  distance_s_ = 0;
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
  reason_code_ = 0;
  if (GetArenaNoVirtual() == NULL && stop_point_ != NULL) delete stop_point_;
  stop_point_ = NULL;
}

bool ObjectStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_preferred_distance_s;
        break;
      }

      // optional .apollo.decision.Range preferred_distance_s = 2;
      case 2: {
        if (tag == 18) {
         parse_preferred_distance_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preferred_distance_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reason_code;
        break;
      }

      // optional .apollo.decision.StopReasonCode reason_code = 3;
      case 3: {
        if (tag == 24) {
         parse_reason_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason_code(static_cast< ::apollo::decision::StopReasonCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stop_point;
        break;
      }

      // optional .apollo.common.PointENU stop_point = 4;
      case 4: {
        if (tag == 34) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectStop)
  return false;
#undef DO_
}

void ObjectStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectStop)
  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->preferred_distance_s_, output);
  }

  // optional .apollo.decision.StopReasonCode reason_code = 3;
  if (this->reason_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->reason_code(), output);
  }

  // optional .apollo.common.PointENU stop_point = 4;
  if (this->has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->stop_point_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectStop)
}

::google::protobuf::uint8* ObjectStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectStop)
  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->preferred_distance_s_, false, target);
  }

  // optional .apollo.decision.StopReasonCode reason_code = 3;
  if (this->reason_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->reason_code(), target);
  }

  // optional .apollo.common.PointENU stop_point = 4;
  if (this->has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->stop_point_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectStop)
  return target;
}

int ObjectStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectStop)
  int total_size = 0;

  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preferred_distance_s_);
  }

  // optional .apollo.decision.StopReasonCode reason_code = 3;
  if (this->reason_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
  }

  // optional .apollo.common.PointENU stop_point = 4;
  if (this->has_stop_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_point_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectStop)
    MergeFrom(*source);
  }
}

void ObjectStop::MergeFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.distance_s() != 0) {
    set_distance_s(from.distance_s());
  }
  if (from.has_preferred_distance_s()) {
    mutable_preferred_distance_s()->::apollo::decision::Range::MergeFrom(from.preferred_distance_s());
  }
  if (from.reason_code() != 0) {
    set_reason_code(from.reason_code());
  }
  if (from.has_stop_point()) {
    mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from.stop_point());
  }
}

void ObjectStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectStop::CopyFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectStop::IsInitialized() const {

  return true;
}

void ObjectStop::Swap(ObjectStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectStop::InternalSwap(ObjectStop* other) {
  std::swap(distance_s_, other->distance_s_);
  std::swap(preferred_distance_s_, other->preferred_distance_s_);
  std::swap(reason_code_, other->reason_code_);
  std::swap(stop_point_, other->stop_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectStop_descriptor_;
  metadata.reflection = ObjectStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectStop

// optional double distance_s = 1;
void ObjectStop::clear_distance_s() {
  distance_s_ = 0;
}
 double ObjectStop::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectStop.distance_s)
  return distance_s_;
}
 void ObjectStop::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectStop.distance_s)
}

// optional .apollo.decision.Range preferred_distance_s = 2;
bool ObjectStop::has_preferred_distance_s() const {
  return !_is_default_instance_ && preferred_distance_s_ != NULL;
}
void ObjectStop::clear_preferred_distance_s() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
}
const ::apollo::decision::Range& ObjectStop::preferred_distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectStop.preferred_distance_s)
  return preferred_distance_s_ != NULL ? *preferred_distance_s_ : *default_instance_->preferred_distance_s_;
}
::apollo::decision::Range* ObjectStop::mutable_preferred_distance_s() {
  
  if (preferred_distance_s_ == NULL) {
    preferred_distance_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectStop.preferred_distance_s)
  return preferred_distance_s_;
}
::apollo::decision::Range* ObjectStop::release_preferred_distance_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectStop.preferred_distance_s)
  
  ::apollo::decision::Range* temp = preferred_distance_s_;
  preferred_distance_s_ = NULL;
  return temp;
}
void ObjectStop::set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s) {
  delete preferred_distance_s_;
  preferred_distance_s_ = preferred_distance_s;
  if (preferred_distance_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectStop.preferred_distance_s)
}

// optional .apollo.decision.StopReasonCode reason_code = 3;
void ObjectStop::clear_reason_code() {
  reason_code_ = 0;
}
 ::apollo::decision::StopReasonCode ObjectStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectStop.reason_code)
  return static_cast< ::apollo::decision::StopReasonCode >(reason_code_);
}
 void ObjectStop::set_reason_code(::apollo::decision::StopReasonCode value) {
  
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectStop.reason_code)
}

// optional .apollo.common.PointENU stop_point = 4;
bool ObjectStop::has_stop_point() const {
  return !_is_default_instance_ && stop_point_ != NULL;
}
void ObjectStop::clear_stop_point() {
  if (GetArenaNoVirtual() == NULL && stop_point_ != NULL) delete stop_point_;
  stop_point_ = NULL;
}
const ::apollo::common::PointENU& ObjectStop::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectStop.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::apollo::common::PointENU* ObjectStop::mutable_stop_point() {
  
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectStop.stop_point)
  return stop_point_;
}
::apollo::common::PointENU* ObjectStop::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectStop.stop_point)
  
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void ObjectStop::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectStop.stop_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ObjectNudge_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectNudge_Type_descriptor_;
}
bool ObjectNudge_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectNudge_Type ObjectNudge::LEFT_NUDGE;
const ObjectNudge_Type ObjectNudge::RIGHT_NUDGE;
const ObjectNudge_Type ObjectNudge::Type_MIN;
const ObjectNudge_Type ObjectNudge::Type_MAX;
const int ObjectNudge::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectNudge::kDistanceLFieldNumber;
const int ObjectNudge::kTypeFieldNumber;
const int ObjectNudge::kPreferredDistanceLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectNudge::ObjectNudge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectNudge)
}

void ObjectNudge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  preferred_distance_l_ = const_cast< ::apollo::decision::Range*>(&::apollo::decision::Range::default_instance());
}

ObjectNudge::ObjectNudge(const ObjectNudge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectNudge)
}

void ObjectNudge::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  distance_l_ = 0;
  type_ = 0;
  preferred_distance_l_ = NULL;
}

ObjectNudge::~ObjectNudge() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectNudge)
  SharedDtor();
}

void ObjectNudge::SharedDtor() {
  if (this != default_instance_) {
    delete preferred_distance_l_;
  }
}

void ObjectNudge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectNudge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectNudge_descriptor_;
}

const ObjectNudge& ObjectNudge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectNudge* ObjectNudge::default_instance_ = NULL;

ObjectNudge* ObjectNudge::New(::google::protobuf::Arena* arena) const {
  ObjectNudge* n = new ObjectNudge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectNudge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectNudge)
  distance_l_ = 0;
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && preferred_distance_l_ != NULL) delete preferred_distance_l_;
  preferred_distance_l_ = NULL;
}

bool ObjectNudge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectNudge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_l = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_l_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .apollo.decision.ObjectNudge.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::apollo::decision::ObjectNudge_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_preferred_distance_l;
        break;
      }

      // optional .apollo.decision.Range preferred_distance_l = 3;
      case 3: {
        if (tag == 26) {
         parse_preferred_distance_l:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preferred_distance_l()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectNudge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectNudge)
  return false;
#undef DO_
}

void ObjectNudge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectNudge)
  // optional double distance_l = 1;
  if (this->distance_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_l(), output);
  }

  // optional .apollo.decision.ObjectNudge.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .apollo.decision.Range preferred_distance_l = 3;
  if (this->has_preferred_distance_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->preferred_distance_l_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectNudge)
}

::google::protobuf::uint8* ObjectNudge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectNudge)
  // optional double distance_l = 1;
  if (this->distance_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_l(), target);
  }

  // optional .apollo.decision.ObjectNudge.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .apollo.decision.Range preferred_distance_l = 3;
  if (this->has_preferred_distance_l()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->preferred_distance_l_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectNudge)
  return target;
}

int ObjectNudge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectNudge)
  int total_size = 0;

  // optional double distance_l = 1;
  if (this->distance_l() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.decision.ObjectNudge.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .apollo.decision.Range preferred_distance_l = 3;
  if (this->has_preferred_distance_l()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preferred_distance_l_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectNudge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectNudge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectNudge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectNudge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectNudge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectNudge)
    MergeFrom(*source);
  }
}

void ObjectNudge::MergeFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectNudge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.distance_l() != 0) {
    set_distance_l(from.distance_l());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_preferred_distance_l()) {
    mutable_preferred_distance_l()->::apollo::decision::Range::MergeFrom(from.preferred_distance_l());
  }
}

void ObjectNudge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectNudge::CopyFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectNudge::IsInitialized() const {

  return true;
}

void ObjectNudge::Swap(ObjectNudge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectNudge::InternalSwap(ObjectNudge* other) {
  std::swap(distance_l_, other->distance_l_);
  std::swap(type_, other->type_);
  std::swap(preferred_distance_l_, other->preferred_distance_l_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectNudge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectNudge_descriptor_;
  metadata.reflection = ObjectNudge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectNudge

// optional double distance_l = 1;
void ObjectNudge::clear_distance_l() {
  distance_l_ = 0;
}
 double ObjectNudge::distance_l() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectNudge.distance_l)
  return distance_l_;
}
 void ObjectNudge::set_distance_l(double value) {
  
  distance_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectNudge.distance_l)
}

// optional .apollo.decision.ObjectNudge.Type type = 2;
void ObjectNudge::clear_type() {
  type_ = 0;
}
 ::apollo::decision::ObjectNudge_Type ObjectNudge::type() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectNudge.type)
  return static_cast< ::apollo::decision::ObjectNudge_Type >(type_);
}
 void ObjectNudge::set_type(::apollo::decision::ObjectNudge_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectNudge.type)
}

// optional .apollo.decision.Range preferred_distance_l = 3;
bool ObjectNudge::has_preferred_distance_l() const {
  return !_is_default_instance_ && preferred_distance_l_ != NULL;
}
void ObjectNudge::clear_preferred_distance_l() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_l_ != NULL) delete preferred_distance_l_;
  preferred_distance_l_ = NULL;
}
const ::apollo::decision::Range& ObjectNudge::preferred_distance_l() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectNudge.preferred_distance_l)
  return preferred_distance_l_ != NULL ? *preferred_distance_l_ : *default_instance_->preferred_distance_l_;
}
::apollo::decision::Range* ObjectNudge::mutable_preferred_distance_l() {
  
  if (preferred_distance_l_ == NULL) {
    preferred_distance_l_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectNudge.preferred_distance_l)
  return preferred_distance_l_;
}
::apollo::decision::Range* ObjectNudge::release_preferred_distance_l() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectNudge.preferred_distance_l)
  
  ::apollo::decision::Range* temp = preferred_distance_l_;
  preferred_distance_l_ = NULL;
  return temp;
}
void ObjectNudge::set_allocated_preferred_distance_l(::apollo::decision::Range* preferred_distance_l) {
  delete preferred_distance_l_;
  preferred_distance_l_ = preferred_distance_l;
  if (preferred_distance_l) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectNudge.preferred_distance_l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectYield::kDistanceSFieldNumber;
const int ObjectYield::kPreferredDistanceSFieldNumber;
const int ObjectYield::kYieldPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectYield::ObjectYield()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectYield)
}

void ObjectYield::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  preferred_distance_s_ = const_cast< ::apollo::decision::Range*>(&::apollo::decision::Range::default_instance());
  yield_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

ObjectYield::ObjectYield(const ObjectYield& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectYield)
}

void ObjectYield::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  distance_s_ = 0;
  preferred_distance_s_ = NULL;
  yield_point_ = NULL;
}

ObjectYield::~ObjectYield() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectYield)
  SharedDtor();
}

void ObjectYield::SharedDtor() {
  if (this != default_instance_) {
    delete preferred_distance_s_;
    delete yield_point_;
  }
}

void ObjectYield::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectYield::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectYield_descriptor_;
}

const ObjectYield& ObjectYield::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectYield* ObjectYield::default_instance_ = NULL;

ObjectYield* ObjectYield::New(::google::protobuf::Arena* arena) const {
  ObjectYield* n = new ObjectYield;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectYield::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectYield)
  distance_s_ = 0;
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
  if (GetArenaNoVirtual() == NULL && yield_point_ != NULL) delete yield_point_;
  yield_point_ = NULL;
}

bool ObjectYield::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectYield)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_preferred_distance_s;
        break;
      }

      // optional .apollo.decision.Range preferred_distance_s = 2;
      case 2: {
        if (tag == 18) {
         parse_preferred_distance_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preferred_distance_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_yield_point;
        break;
      }

      // optional .apollo.common.PointENU yield_point = 3;
      case 3: {
        if (tag == 26) {
         parse_yield_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectYield)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectYield)
  return false;
#undef DO_
}

void ObjectYield::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectYield)
  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->preferred_distance_s_, output);
  }

  // optional .apollo.common.PointENU yield_point = 3;
  if (this->has_yield_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->yield_point_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectYield)
}

::google::protobuf::uint8* ObjectYield::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectYield)
  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->preferred_distance_s_, false, target);
  }

  // optional .apollo.common.PointENU yield_point = 3;
  if (this->has_yield_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->yield_point_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectYield)
  return target;
}

int ObjectYield::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectYield)
  int total_size = 0;

  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preferred_distance_s_);
  }

  // optional .apollo.common.PointENU yield_point = 3;
  if (this->has_yield_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->yield_point_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectYield::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectYield)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectYield* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectYield>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectYield)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectYield)
    MergeFrom(*source);
  }
}

void ObjectYield::MergeFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectYield)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.distance_s() != 0) {
    set_distance_s(from.distance_s());
  }
  if (from.has_preferred_distance_s()) {
    mutable_preferred_distance_s()->::apollo::decision::Range::MergeFrom(from.preferred_distance_s());
  }
  if (from.has_yield_point()) {
    mutable_yield_point()->::apollo::common::PointENU::MergeFrom(from.yield_point());
  }
}

void ObjectYield::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectYield::CopyFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectYield::IsInitialized() const {

  return true;
}

void ObjectYield::Swap(ObjectYield* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectYield::InternalSwap(ObjectYield* other) {
  std::swap(distance_s_, other->distance_s_);
  std::swap(preferred_distance_s_, other->preferred_distance_s_);
  std::swap(yield_point_, other->yield_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectYield::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectYield_descriptor_;
  metadata.reflection = ObjectYield_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectYield

// optional double distance_s = 1;
void ObjectYield::clear_distance_s() {
  distance_s_ = 0;
}
 double ObjectYield::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectYield.distance_s)
  return distance_s_;
}
 void ObjectYield::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectYield.distance_s)
}

// optional .apollo.decision.Range preferred_distance_s = 2;
bool ObjectYield::has_preferred_distance_s() const {
  return !_is_default_instance_ && preferred_distance_s_ != NULL;
}
void ObjectYield::clear_preferred_distance_s() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
}
const ::apollo::decision::Range& ObjectYield::preferred_distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectYield.preferred_distance_s)
  return preferred_distance_s_ != NULL ? *preferred_distance_s_ : *default_instance_->preferred_distance_s_;
}
::apollo::decision::Range* ObjectYield::mutable_preferred_distance_s() {
  
  if (preferred_distance_s_ == NULL) {
    preferred_distance_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectYield.preferred_distance_s)
  return preferred_distance_s_;
}
::apollo::decision::Range* ObjectYield::release_preferred_distance_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectYield.preferred_distance_s)
  
  ::apollo::decision::Range* temp = preferred_distance_s_;
  preferred_distance_s_ = NULL;
  return temp;
}
void ObjectYield::set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s) {
  delete preferred_distance_s_;
  preferred_distance_s_ = preferred_distance_s;
  if (preferred_distance_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectYield.preferred_distance_s)
}

// optional .apollo.common.PointENU yield_point = 3;
bool ObjectYield::has_yield_point() const {
  return !_is_default_instance_ && yield_point_ != NULL;
}
void ObjectYield::clear_yield_point() {
  if (GetArenaNoVirtual() == NULL && yield_point_ != NULL) delete yield_point_;
  yield_point_ = NULL;
}
const ::apollo::common::PointENU& ObjectYield::yield_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectYield.yield_point)
  return yield_point_ != NULL ? *yield_point_ : *default_instance_->yield_point_;
}
::apollo::common::PointENU* ObjectYield::mutable_yield_point() {
  
  if (yield_point_ == NULL) {
    yield_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectYield.yield_point)
  return yield_point_;
}
::apollo::common::PointENU* ObjectYield::release_yield_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectYield.yield_point)
  
  ::apollo::common::PointENU* temp = yield_point_;
  yield_point_ = NULL;
  return temp;
}
void ObjectYield::set_allocated_yield_point(::apollo::common::PointENU* yield_point) {
  delete yield_point_;
  yield_point_ = yield_point;
  if (yield_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectYield.yield_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectFollow::kDistanceSFieldNumber;
const int ObjectFollow::kPreferredDistanceSFieldNumber;
const int ObjectFollow::kFollowPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectFollow::ObjectFollow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectFollow)
}

void ObjectFollow::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  preferred_distance_s_ = const_cast< ::apollo::decision::Range*>(&::apollo::decision::Range::default_instance());
  follow_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

ObjectFollow::ObjectFollow(const ObjectFollow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectFollow)
}

void ObjectFollow::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  distance_s_ = 0;
  preferred_distance_s_ = NULL;
  follow_point_ = NULL;
}

ObjectFollow::~ObjectFollow() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectFollow)
  SharedDtor();
}

void ObjectFollow::SharedDtor() {
  if (this != default_instance_) {
    delete preferred_distance_s_;
    delete follow_point_;
  }
}

void ObjectFollow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectFollow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectFollow_descriptor_;
}

const ObjectFollow& ObjectFollow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectFollow* ObjectFollow::default_instance_ = NULL;

ObjectFollow* ObjectFollow::New(::google::protobuf::Arena* arena) const {
  ObjectFollow* n = new ObjectFollow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectFollow::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectFollow)
  distance_s_ = 0;
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
  if (GetArenaNoVirtual() == NULL && follow_point_ != NULL) delete follow_point_;
  follow_point_ = NULL;
}

bool ObjectFollow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectFollow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_preferred_distance_s;
        break;
      }

      // optional .apollo.decision.Range preferred_distance_s = 2;
      case 2: {
        if (tag == 18) {
         parse_preferred_distance_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preferred_distance_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_follow_point;
        break;
      }

      // optional .apollo.common.PointENU follow_point = 3;
      case 3: {
        if (tag == 26) {
         parse_follow_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_follow_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectFollow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectFollow)
  return false;
#undef DO_
}

void ObjectFollow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectFollow)
  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->preferred_distance_s_, output);
  }

  // optional .apollo.common.PointENU follow_point = 3;
  if (this->has_follow_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->follow_point_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectFollow)
}

::google::protobuf::uint8* ObjectFollow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectFollow)
  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->preferred_distance_s_, false, target);
  }

  // optional .apollo.common.PointENU follow_point = 3;
  if (this->has_follow_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->follow_point_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectFollow)
  return target;
}

int ObjectFollow::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectFollow)
  int total_size = 0;

  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preferred_distance_s_);
  }

  // optional .apollo.common.PointENU follow_point = 3;
  if (this->has_follow_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->follow_point_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectFollow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectFollow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectFollow* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectFollow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectFollow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectFollow)
    MergeFrom(*source);
  }
}

void ObjectFollow::MergeFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectFollow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.distance_s() != 0) {
    set_distance_s(from.distance_s());
  }
  if (from.has_preferred_distance_s()) {
    mutable_preferred_distance_s()->::apollo::decision::Range::MergeFrom(from.preferred_distance_s());
  }
  if (from.has_follow_point()) {
    mutable_follow_point()->::apollo::common::PointENU::MergeFrom(from.follow_point());
  }
}

void ObjectFollow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectFollow::CopyFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectFollow::IsInitialized() const {

  return true;
}

void ObjectFollow::Swap(ObjectFollow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectFollow::InternalSwap(ObjectFollow* other) {
  std::swap(distance_s_, other->distance_s_);
  std::swap(preferred_distance_s_, other->preferred_distance_s_);
  std::swap(follow_point_, other->follow_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectFollow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectFollow_descriptor_;
  metadata.reflection = ObjectFollow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectFollow

// optional double distance_s = 1;
void ObjectFollow::clear_distance_s() {
  distance_s_ = 0;
}
 double ObjectFollow::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectFollow.distance_s)
  return distance_s_;
}
 void ObjectFollow::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectFollow.distance_s)
}

// optional .apollo.decision.Range preferred_distance_s = 2;
bool ObjectFollow::has_preferred_distance_s() const {
  return !_is_default_instance_ && preferred_distance_s_ != NULL;
}
void ObjectFollow::clear_preferred_distance_s() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
}
const ::apollo::decision::Range& ObjectFollow::preferred_distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectFollow.preferred_distance_s)
  return preferred_distance_s_ != NULL ? *preferred_distance_s_ : *default_instance_->preferred_distance_s_;
}
::apollo::decision::Range* ObjectFollow::mutable_preferred_distance_s() {
  
  if (preferred_distance_s_ == NULL) {
    preferred_distance_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectFollow.preferred_distance_s)
  return preferred_distance_s_;
}
::apollo::decision::Range* ObjectFollow::release_preferred_distance_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectFollow.preferred_distance_s)
  
  ::apollo::decision::Range* temp = preferred_distance_s_;
  preferred_distance_s_ = NULL;
  return temp;
}
void ObjectFollow::set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s) {
  delete preferred_distance_s_;
  preferred_distance_s_ = preferred_distance_s;
  if (preferred_distance_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectFollow.preferred_distance_s)
}

// optional .apollo.common.PointENU follow_point = 3;
bool ObjectFollow::has_follow_point() const {
  return !_is_default_instance_ && follow_point_ != NULL;
}
void ObjectFollow::clear_follow_point() {
  if (GetArenaNoVirtual() == NULL && follow_point_ != NULL) delete follow_point_;
  follow_point_ = NULL;
}
const ::apollo::common::PointENU& ObjectFollow::follow_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectFollow.follow_point)
  return follow_point_ != NULL ? *follow_point_ : *default_instance_->follow_point_;
}
::apollo::common::PointENU* ObjectFollow::mutable_follow_point() {
  
  if (follow_point_ == NULL) {
    follow_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectFollow.follow_point)
  return follow_point_;
}
::apollo::common::PointENU* ObjectFollow::release_follow_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectFollow.follow_point)
  
  ::apollo::common::PointENU* temp = follow_point_;
  follow_point_ = NULL;
  return temp;
}
void ObjectFollow::set_allocated_follow_point(::apollo::common::PointENU* follow_point) {
  delete follow_point_;
  follow_point_ = follow_point;
  if (follow_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectFollow.follow_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectOvertake::kDistanceSFieldNumber;
const int ObjectOvertake::kPreferredDistanceSFieldNumber;
const int ObjectOvertake::kOvertakePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectOvertake::ObjectOvertake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectOvertake)
}

void ObjectOvertake::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  preferred_distance_s_ = const_cast< ::apollo::decision::Range*>(&::apollo::decision::Range::default_instance());
  overtake_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

ObjectOvertake::ObjectOvertake(const ObjectOvertake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectOvertake)
}

void ObjectOvertake::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  distance_s_ = 0;
  preferred_distance_s_ = NULL;
  overtake_point_ = NULL;
}

ObjectOvertake::~ObjectOvertake() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectOvertake)
  SharedDtor();
}

void ObjectOvertake::SharedDtor() {
  if (this != default_instance_) {
    delete preferred_distance_s_;
    delete overtake_point_;
  }
}

void ObjectOvertake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectOvertake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectOvertake_descriptor_;
}

const ObjectOvertake& ObjectOvertake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectOvertake* ObjectOvertake::default_instance_ = NULL;

ObjectOvertake* ObjectOvertake::New(::google::protobuf::Arena* arena) const {
  ObjectOvertake* n = new ObjectOvertake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectOvertake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectOvertake)
  distance_s_ = 0;
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
  if (GetArenaNoVirtual() == NULL && overtake_point_ != NULL) delete overtake_point_;
  overtake_point_ = NULL;
}

bool ObjectOvertake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectOvertake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_preferred_distance_s;
        break;
      }

      // optional .apollo.decision.Range preferred_distance_s = 2;
      case 2: {
        if (tag == 18) {
         parse_preferred_distance_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preferred_distance_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_overtake_point;
        break;
      }

      // optional .apollo.common.PointENU overtake_point = 3;
      case 3: {
        if (tag == 26) {
         parse_overtake_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_overtake_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectOvertake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectOvertake)
  return false;
#undef DO_
}

void ObjectOvertake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectOvertake)
  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->preferred_distance_s_, output);
  }

  // optional .apollo.common.PointENU overtake_point = 3;
  if (this->has_overtake_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->overtake_point_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectOvertake)
}

::google::protobuf::uint8* ObjectOvertake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectOvertake)
  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->preferred_distance_s_, false, target);
  }

  // optional .apollo.common.PointENU overtake_point = 3;
  if (this->has_overtake_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->overtake_point_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectOvertake)
  return target;
}

int ObjectOvertake::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectOvertake)
  int total_size = 0;

  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preferred_distance_s_);
  }

  // optional .apollo.common.PointENU overtake_point = 3;
  if (this->has_overtake_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->overtake_point_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectOvertake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectOvertake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectOvertake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectOvertake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectOvertake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectOvertake)
    MergeFrom(*source);
  }
}

void ObjectOvertake::MergeFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectOvertake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.distance_s() != 0) {
    set_distance_s(from.distance_s());
  }
  if (from.has_preferred_distance_s()) {
    mutable_preferred_distance_s()->::apollo::decision::Range::MergeFrom(from.preferred_distance_s());
  }
  if (from.has_overtake_point()) {
    mutable_overtake_point()->::apollo::common::PointENU::MergeFrom(from.overtake_point());
  }
}

void ObjectOvertake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectOvertake::CopyFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOvertake::IsInitialized() const {

  return true;
}

void ObjectOvertake::Swap(ObjectOvertake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectOvertake::InternalSwap(ObjectOvertake* other) {
  std::swap(distance_s_, other->distance_s_);
  std::swap(preferred_distance_s_, other->preferred_distance_s_);
  std::swap(overtake_point_, other->overtake_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectOvertake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectOvertake_descriptor_;
  metadata.reflection = ObjectOvertake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectOvertake

// optional double distance_s = 1;
void ObjectOvertake::clear_distance_s() {
  distance_s_ = 0;
}
 double ObjectOvertake::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectOvertake.distance_s)
  return distance_s_;
}
 void ObjectOvertake::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectOvertake.distance_s)
}

// optional .apollo.decision.Range preferred_distance_s = 2;
bool ObjectOvertake::has_preferred_distance_s() const {
  return !_is_default_instance_ && preferred_distance_s_ != NULL;
}
void ObjectOvertake::clear_preferred_distance_s() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
}
const ::apollo::decision::Range& ObjectOvertake::preferred_distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectOvertake.preferred_distance_s)
  return preferred_distance_s_ != NULL ? *preferred_distance_s_ : *default_instance_->preferred_distance_s_;
}
::apollo::decision::Range* ObjectOvertake::mutable_preferred_distance_s() {
  
  if (preferred_distance_s_ == NULL) {
    preferred_distance_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectOvertake.preferred_distance_s)
  return preferred_distance_s_;
}
::apollo::decision::Range* ObjectOvertake::release_preferred_distance_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectOvertake.preferred_distance_s)
  
  ::apollo::decision::Range* temp = preferred_distance_s_;
  preferred_distance_s_ = NULL;
  return temp;
}
void ObjectOvertake::set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s) {
  delete preferred_distance_s_;
  preferred_distance_s_ = preferred_distance_s;
  if (preferred_distance_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectOvertake.preferred_distance_s)
}

// optional .apollo.common.PointENU overtake_point = 3;
bool ObjectOvertake::has_overtake_point() const {
  return !_is_default_instance_ && overtake_point_ != NULL;
}
void ObjectOvertake::clear_overtake_point() {
  if (GetArenaNoVirtual() == NULL && overtake_point_ != NULL) delete overtake_point_;
  overtake_point_ = NULL;
}
const ::apollo::common::PointENU& ObjectOvertake::overtake_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectOvertake.overtake_point)
  return overtake_point_ != NULL ? *overtake_point_ : *default_instance_->overtake_point_;
}
::apollo::common::PointENU* ObjectOvertake::mutable_overtake_point() {
  
  if (overtake_point_ == NULL) {
    overtake_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectOvertake.overtake_point)
  return overtake_point_;
}
::apollo::common::PointENU* ObjectOvertake::release_overtake_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectOvertake.overtake_point)
  
  ::apollo::common::PointENU* temp = overtake_point_;
  overtake_point_ = NULL;
  return temp;
}
void ObjectOvertake::set_allocated_overtake_point(::apollo::common::PointENU* overtake_point) {
  delete overtake_point_;
  overtake_point_ = overtake_point;
  if (overtake_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectOvertake.overtake_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ObjectSidePass_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectSidePass_Type_descriptor_;
}
bool ObjectSidePass_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectSidePass_Type ObjectSidePass::FOLLOW;
const ObjectSidePass_Type ObjectSidePass::LEAD;
const ObjectSidePass_Type ObjectSidePass::Type_MIN;
const ObjectSidePass_Type ObjectSidePass::Type_MAX;
const int ObjectSidePass::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectSidePass::kDistanceSFieldNumber;
const int ObjectSidePass::kPreferredDistanceSFieldNumber;
const int ObjectSidePass::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectSidePass::ObjectSidePass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectSidePass)
}

void ObjectSidePass::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  preferred_distance_s_ = const_cast< ::apollo::decision::Range*>(&::apollo::decision::Range::default_instance());
}

ObjectSidePass::ObjectSidePass(const ObjectSidePass& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectSidePass)
}

void ObjectSidePass::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  distance_s_ = 0;
  preferred_distance_s_ = NULL;
  type_ = 0;
}

ObjectSidePass::~ObjectSidePass() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectSidePass)
  SharedDtor();
}

void ObjectSidePass::SharedDtor() {
  if (this != default_instance_) {
    delete preferred_distance_s_;
  }
}

void ObjectSidePass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectSidePass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectSidePass_descriptor_;
}

const ObjectSidePass& ObjectSidePass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectSidePass* ObjectSidePass::default_instance_ = NULL;

ObjectSidePass* ObjectSidePass::New(::google::protobuf::Arena* arena) const {
  ObjectSidePass* n = new ObjectSidePass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectSidePass::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectSidePass)
  distance_s_ = 0;
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
  type_ = 0;
}

bool ObjectSidePass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectSidePass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_preferred_distance_s;
        break;
      }

      // optional .apollo.decision.Range preferred_distance_s = 2;
      case 2: {
        if (tag == 18) {
         parse_preferred_distance_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preferred_distance_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .apollo.decision.ObjectSidePass.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::apollo::decision::ObjectSidePass_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectSidePass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectSidePass)
  return false;
#undef DO_
}

void ObjectSidePass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectSidePass)
  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->preferred_distance_s_, output);
  }

  // optional .apollo.decision.ObjectSidePass.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectSidePass)
}

::google::protobuf::uint8* ObjectSidePass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectSidePass)
  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->preferred_distance_s_, false, target);
  }

  // optional .apollo.decision.ObjectSidePass.Type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectSidePass)
  return target;
}

int ObjectSidePass::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectSidePass)
  int total_size = 0;

  // optional double distance_s = 1;
  if (this->distance_s() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.decision.Range preferred_distance_s = 2;
  if (this->has_preferred_distance_s()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preferred_distance_s_);
  }

  // optional .apollo.decision.ObjectSidePass.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectSidePass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectSidePass)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectSidePass* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectSidePass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectSidePass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectSidePass)
    MergeFrom(*source);
  }
}

void ObjectSidePass::MergeFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectSidePass)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.distance_s() != 0) {
    set_distance_s(from.distance_s());
  }
  if (from.has_preferred_distance_s()) {
    mutable_preferred_distance_s()->::apollo::decision::Range::MergeFrom(from.preferred_distance_s());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ObjectSidePass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSidePass::CopyFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSidePass::IsInitialized() const {

  return true;
}

void ObjectSidePass::Swap(ObjectSidePass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectSidePass::InternalSwap(ObjectSidePass* other) {
  std::swap(distance_s_, other->distance_s_);
  std::swap(preferred_distance_s_, other->preferred_distance_s_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectSidePass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectSidePass_descriptor_;
  metadata.reflection = ObjectSidePass_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectSidePass

// optional double distance_s = 1;
void ObjectSidePass::clear_distance_s() {
  distance_s_ = 0;
}
 double ObjectSidePass::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectSidePass.distance_s)
  return distance_s_;
}
 void ObjectSidePass::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectSidePass.distance_s)
}

// optional .apollo.decision.Range preferred_distance_s = 2;
bool ObjectSidePass::has_preferred_distance_s() const {
  return !_is_default_instance_ && preferred_distance_s_ != NULL;
}
void ObjectSidePass::clear_preferred_distance_s() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
}
const ::apollo::decision::Range& ObjectSidePass::preferred_distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectSidePass.preferred_distance_s)
  return preferred_distance_s_ != NULL ? *preferred_distance_s_ : *default_instance_->preferred_distance_s_;
}
::apollo::decision::Range* ObjectSidePass::mutable_preferred_distance_s() {
  
  if (preferred_distance_s_ == NULL) {
    preferred_distance_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectSidePass.preferred_distance_s)
  return preferred_distance_s_;
}
::apollo::decision::Range* ObjectSidePass::release_preferred_distance_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectSidePass.preferred_distance_s)
  
  ::apollo::decision::Range* temp = preferred_distance_s_;
  preferred_distance_s_ = NULL;
  return temp;
}
void ObjectSidePass::set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s) {
  delete preferred_distance_s_;
  preferred_distance_s_ = preferred_distance_s;
  if (preferred_distance_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectSidePass.preferred_distance_s)
}

// optional .apollo.decision.ObjectSidePass.Type type = 3;
void ObjectSidePass::clear_type() {
  type_ = 0;
}
 ::apollo::decision::ObjectSidePass_Type ObjectSidePass::type() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectSidePass.type)
  return static_cast< ::apollo::decision::ObjectSidePass_Type >(type_);
}
 void ObjectSidePass::set_type(::apollo::decision::ObjectSidePass_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectSidePass.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectAvoid::ObjectAvoid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectAvoid)
}

void ObjectAvoid::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ObjectAvoid::ObjectAvoid(const ObjectAvoid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectAvoid)
}

void ObjectAvoid::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ObjectAvoid::~ObjectAvoid() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectAvoid)
  SharedDtor();
}

void ObjectAvoid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectAvoid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectAvoid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAvoid_descriptor_;
}

const ObjectAvoid& ObjectAvoid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectAvoid* ObjectAvoid::default_instance_ = NULL;

ObjectAvoid* ObjectAvoid::New(::google::protobuf::Arena* arena) const {
  ObjectAvoid* n = new ObjectAvoid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectAvoid::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectAvoid)
}

bool ObjectAvoid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectAvoid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectAvoid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectAvoid)
  return false;
#undef DO_
}

void ObjectAvoid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectAvoid)
  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectAvoid)
}

::google::protobuf::uint8* ObjectAvoid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectAvoid)
  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectAvoid)
  return target;
}

int ObjectAvoid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectAvoid)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectAvoid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectAvoid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectAvoid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectAvoid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectAvoid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectAvoid)
    MergeFrom(*source);
  }
}

void ObjectAvoid::MergeFrom(const ObjectAvoid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectAvoid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ObjectAvoid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAvoid::CopyFrom(const ObjectAvoid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAvoid::IsInitialized() const {

  return true;
}

void ObjectAvoid::Swap(ObjectAvoid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectAvoid::InternalSwap(ObjectAvoid* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectAvoid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAvoid_descriptor_;
  metadata.reflection = ObjectAvoid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectAvoid

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecisionType::kIgnoreFieldNumber;
const int ObjectDecisionType::kStopFieldNumber;
const int ObjectDecisionType::kFollowFieldNumber;
const int ObjectDecisionType::kYieldFieldNumber;
const int ObjectDecisionType::kOvertakeFieldNumber;
const int ObjectDecisionType::kNudgeFieldNumber;
const int ObjectDecisionType::kSidepassFieldNumber;
const int ObjectDecisionType::kAvoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecisionType::ObjectDecisionType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectDecisionType)
}

void ObjectDecisionType::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ObjectDecisionType_default_oneof_instance_->ignore_ = const_cast< ::apollo::decision::ObjectIgnore*>(&::apollo::decision::ObjectIgnore::default_instance());
  ObjectDecisionType_default_oneof_instance_->stop_ = const_cast< ::apollo::decision::ObjectStop*>(&::apollo::decision::ObjectStop::default_instance());
  ObjectDecisionType_default_oneof_instance_->follow_ = const_cast< ::apollo::decision::ObjectFollow*>(&::apollo::decision::ObjectFollow::default_instance());
  ObjectDecisionType_default_oneof_instance_->yield_ = const_cast< ::apollo::decision::ObjectYield*>(&::apollo::decision::ObjectYield::default_instance());
  ObjectDecisionType_default_oneof_instance_->overtake_ = const_cast< ::apollo::decision::ObjectOvertake*>(&::apollo::decision::ObjectOvertake::default_instance());
  ObjectDecisionType_default_oneof_instance_->nudge_ = const_cast< ::apollo::decision::ObjectNudge*>(&::apollo::decision::ObjectNudge::default_instance());
  ObjectDecisionType_default_oneof_instance_->sidepass_ = const_cast< ::apollo::decision::ObjectSidePass*>(&::apollo::decision::ObjectSidePass::default_instance());
  ObjectDecisionType_default_oneof_instance_->avoid_ = const_cast< ::apollo::decision::ObjectAvoid*>(&::apollo::decision::ObjectAvoid::default_instance());
}

ObjectDecisionType::ObjectDecisionType(const ObjectDecisionType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectDecisionType)
}

void ObjectDecisionType::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_object_tag();
}

ObjectDecisionType::~ObjectDecisionType() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectDecisionType)
  SharedDtor();
}

void ObjectDecisionType::SharedDtor() {
  if (has_object_tag()) {
    clear_object_tag();
  }
  if (this != default_instance_) {
  }
}

void ObjectDecisionType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecisionType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDecisionType_descriptor_;
}

const ObjectDecisionType& ObjectDecisionType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectDecisionType* ObjectDecisionType::default_instance_ = NULL;

ObjectDecisionType* ObjectDecisionType::New(::google::protobuf::Arena* arena) const {
  ObjectDecisionType* n = new ObjectDecisionType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecisionType::clear_object_tag() {
// @@protoc_insertion_point(one_of_clear_start:apollo.decision.ObjectDecisionType)
  switch(object_tag_case()) {
    case kIgnore: {
      delete object_tag_.ignore_;
      break;
    }
    case kStop: {
      delete object_tag_.stop_;
      break;
    }
    case kFollow: {
      delete object_tag_.follow_;
      break;
    }
    case kYield: {
      delete object_tag_.yield_;
      break;
    }
    case kOvertake: {
      delete object_tag_.overtake_;
      break;
    }
    case kNudge: {
      delete object_tag_.nudge_;
      break;
    }
    case kSidepass: {
      delete object_tag_.sidepass_;
      break;
    }
    case kAvoid: {
      delete object_tag_.avoid_;
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OBJECT_TAG_NOT_SET;
}


void ObjectDecisionType::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectDecisionType)
  clear_object_tag();
}

bool ObjectDecisionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectDecisionType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.decision.ObjectIgnore ignore = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ignore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stop;
        break;
      }

      // optional .apollo.decision.ObjectStop stop = 2;
      case 2: {
        if (tag == 18) {
         parse_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_follow;
        break;
      }

      // optional .apollo.decision.ObjectFollow follow = 3;
      case 3: {
        if (tag == 26) {
         parse_follow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_follow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_yield;
        break;
      }

      // optional .apollo.decision.ObjectYield yield = 4;
      case 4: {
        if (tag == 34) {
         parse_yield:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_overtake;
        break;
      }

      // optional .apollo.decision.ObjectOvertake overtake = 5;
      case 5: {
        if (tag == 42) {
         parse_overtake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_overtake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nudge;
        break;
      }

      // optional .apollo.decision.ObjectNudge nudge = 6;
      case 6: {
        if (tag == 50) {
         parse_nudge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nudge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sidepass;
        break;
      }

      // optional .apollo.decision.ObjectSidePass sidepass = 7;
      case 7: {
        if (tag == 58) {
         parse_sidepass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sidepass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avoid;
        break;
      }

      // optional .apollo.decision.ObjectAvoid avoid = 8;
      case 8: {
        if (tag == 66) {
         parse_avoid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avoid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectDecisionType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectDecisionType)
  return false;
#undef DO_
}

void ObjectDecisionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectDecisionType)
  // optional .apollo.decision.ObjectIgnore ignore = 1;
  if (has_ignore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *object_tag_.ignore_, output);
  }

  // optional .apollo.decision.ObjectStop stop = 2;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *object_tag_.stop_, output);
  }

  // optional .apollo.decision.ObjectFollow follow = 3;
  if (has_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *object_tag_.follow_, output);
  }

  // optional .apollo.decision.ObjectYield yield = 4;
  if (has_yield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *object_tag_.yield_, output);
  }

  // optional .apollo.decision.ObjectOvertake overtake = 5;
  if (has_overtake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *object_tag_.overtake_, output);
  }

  // optional .apollo.decision.ObjectNudge nudge = 6;
  if (has_nudge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *object_tag_.nudge_, output);
  }

  // optional .apollo.decision.ObjectSidePass sidepass = 7;
  if (has_sidepass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *object_tag_.sidepass_, output);
  }

  // optional .apollo.decision.ObjectAvoid avoid = 8;
  if (has_avoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *object_tag_.avoid_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectDecisionType)
}

::google::protobuf::uint8* ObjectDecisionType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectDecisionType)
  // optional .apollo.decision.ObjectIgnore ignore = 1;
  if (has_ignore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *object_tag_.ignore_, false, target);
  }

  // optional .apollo.decision.ObjectStop stop = 2;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *object_tag_.stop_, false, target);
  }

  // optional .apollo.decision.ObjectFollow follow = 3;
  if (has_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *object_tag_.follow_, false, target);
  }

  // optional .apollo.decision.ObjectYield yield = 4;
  if (has_yield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *object_tag_.yield_, false, target);
  }

  // optional .apollo.decision.ObjectOvertake overtake = 5;
  if (has_overtake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *object_tag_.overtake_, false, target);
  }

  // optional .apollo.decision.ObjectNudge nudge = 6;
  if (has_nudge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *object_tag_.nudge_, false, target);
  }

  // optional .apollo.decision.ObjectSidePass sidepass = 7;
  if (has_sidepass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *object_tag_.sidepass_, false, target);
  }

  // optional .apollo.decision.ObjectAvoid avoid = 8;
  if (has_avoid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *object_tag_.avoid_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectDecisionType)
  return target;
}

int ObjectDecisionType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectDecisionType)
  int total_size = 0;

  switch (object_tag_case()) {
    // optional .apollo.decision.ObjectIgnore ignore = 1;
    case kIgnore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.ignore_);
      break;
    }
    // optional .apollo.decision.ObjectStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.stop_);
      break;
    }
    // optional .apollo.decision.ObjectFollow follow = 3;
    case kFollow: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.follow_);
      break;
    }
    // optional .apollo.decision.ObjectYield yield = 4;
    case kYield: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.yield_);
      break;
    }
    // optional .apollo.decision.ObjectOvertake overtake = 5;
    case kOvertake: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.overtake_);
      break;
    }
    // optional .apollo.decision.ObjectNudge nudge = 6;
    case kNudge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.nudge_);
      break;
    }
    // optional .apollo.decision.ObjectSidePass sidepass = 7;
    case kSidepass: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.sidepass_);
      break;
    }
    // optional .apollo.decision.ObjectAvoid avoid = 8;
    case kAvoid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.avoid_);
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecisionType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectDecisionType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectDecisionType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecisionType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectDecisionType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectDecisionType)
    MergeFrom(*source);
  }
}

void ObjectDecisionType::MergeFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectDecisionType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.object_tag_case()) {
    case kIgnore: {
      mutable_ignore()->::apollo::decision::ObjectIgnore::MergeFrom(from.ignore());
      break;
    }
    case kStop: {
      mutable_stop()->::apollo::decision::ObjectStop::MergeFrom(from.stop());
      break;
    }
    case kFollow: {
      mutable_follow()->::apollo::decision::ObjectFollow::MergeFrom(from.follow());
      break;
    }
    case kYield: {
      mutable_yield()->::apollo::decision::ObjectYield::MergeFrom(from.yield());
      break;
    }
    case kOvertake: {
      mutable_overtake()->::apollo::decision::ObjectOvertake::MergeFrom(from.overtake());
      break;
    }
    case kNudge: {
      mutable_nudge()->::apollo::decision::ObjectNudge::MergeFrom(from.nudge());
      break;
    }
    case kSidepass: {
      mutable_sidepass()->::apollo::decision::ObjectSidePass::MergeFrom(from.sidepass());
      break;
    }
    case kAvoid: {
      mutable_avoid()->::apollo::decision::ObjectAvoid::MergeFrom(from.avoid());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
}

void ObjectDecisionType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecisionType::CopyFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisionType::IsInitialized() const {

  return true;
}

void ObjectDecisionType::Swap(ObjectDecisionType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecisionType::InternalSwap(ObjectDecisionType* other) {
  std::swap(object_tag_, other->object_tag_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecisionType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDecisionType_descriptor_;
  metadata.reflection = ObjectDecisionType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDecisionType

// optional .apollo.decision.ObjectIgnore ignore = 1;
bool ObjectDecisionType::has_ignore() const {
  return object_tag_case() == kIgnore;
}
void ObjectDecisionType::set_has_ignore() {
  _oneof_case_[0] = kIgnore;
}
void ObjectDecisionType::clear_ignore() {
  if (has_ignore()) {
    delete object_tag_.ignore_;
    clear_has_object_tag();
  }
}
 const ::apollo::decision::ObjectIgnore& ObjectDecisionType::ignore() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.ignore)
  return has_ignore()
      ? *object_tag_.ignore_
      : ::apollo::decision::ObjectIgnore::default_instance();
}
::apollo::decision::ObjectIgnore* ObjectDecisionType::mutable_ignore() {
  if (!has_ignore()) {
    clear_object_tag();
    set_has_ignore();
    object_tag_.ignore_ = new ::apollo::decision::ObjectIgnore;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.ignore)
  return object_tag_.ignore_;
}
::apollo::decision::ObjectIgnore* ObjectDecisionType::release_ignore() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.ignore)
  if (has_ignore()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectIgnore* temp = object_tag_.ignore_;
    object_tag_.ignore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_ignore(::apollo::decision::ObjectIgnore* ignore) {
  clear_object_tag();
  if (ignore) {
    set_has_ignore();
    object_tag_.ignore_ = ignore;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.ignore)
}

// optional .apollo.decision.ObjectStop stop = 2;
bool ObjectDecisionType::has_stop() const {
  return object_tag_case() == kStop;
}
void ObjectDecisionType::set_has_stop() {
  _oneof_case_[0] = kStop;
}
void ObjectDecisionType::clear_stop() {
  if (has_stop()) {
    delete object_tag_.stop_;
    clear_has_object_tag();
  }
}
 const ::apollo::decision::ObjectStop& ObjectDecisionType::stop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.stop)
  return has_stop()
      ? *object_tag_.stop_
      : ::apollo::decision::ObjectStop::default_instance();
}
::apollo::decision::ObjectStop* ObjectDecisionType::mutable_stop() {
  if (!has_stop()) {
    clear_object_tag();
    set_has_stop();
    object_tag_.stop_ = new ::apollo::decision::ObjectStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.stop)
  return object_tag_.stop_;
}
::apollo::decision::ObjectStop* ObjectDecisionType::release_stop() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.stop)
  if (has_stop()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectStop* temp = object_tag_.stop_;
    object_tag_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_stop(::apollo::decision::ObjectStop* stop) {
  clear_object_tag();
  if (stop) {
    set_has_stop();
    object_tag_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.stop)
}

// optional .apollo.decision.ObjectFollow follow = 3;
bool ObjectDecisionType::has_follow() const {
  return object_tag_case() == kFollow;
}
void ObjectDecisionType::set_has_follow() {
  _oneof_case_[0] = kFollow;
}
void ObjectDecisionType::clear_follow() {
  if (has_follow()) {
    delete object_tag_.follow_;
    clear_has_object_tag();
  }
}
 const ::apollo::decision::ObjectFollow& ObjectDecisionType::follow() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.follow)
  return has_follow()
      ? *object_tag_.follow_
      : ::apollo::decision::ObjectFollow::default_instance();
}
::apollo::decision::ObjectFollow* ObjectDecisionType::mutable_follow() {
  if (!has_follow()) {
    clear_object_tag();
    set_has_follow();
    object_tag_.follow_ = new ::apollo::decision::ObjectFollow;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.follow)
  return object_tag_.follow_;
}
::apollo::decision::ObjectFollow* ObjectDecisionType::release_follow() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.follow)
  if (has_follow()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectFollow* temp = object_tag_.follow_;
    object_tag_.follow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_follow(::apollo::decision::ObjectFollow* follow) {
  clear_object_tag();
  if (follow) {
    set_has_follow();
    object_tag_.follow_ = follow;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.follow)
}

// optional .apollo.decision.ObjectYield yield = 4;
bool ObjectDecisionType::has_yield() const {
  return object_tag_case() == kYield;
}
void ObjectDecisionType::set_has_yield() {
  _oneof_case_[0] = kYield;
}
void ObjectDecisionType::clear_yield() {
  if (has_yield()) {
    delete object_tag_.yield_;
    clear_has_object_tag();
  }
}
 const ::apollo::decision::ObjectYield& ObjectDecisionType::yield() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.yield)
  return has_yield()
      ? *object_tag_.yield_
      : ::apollo::decision::ObjectYield::default_instance();
}
::apollo::decision::ObjectYield* ObjectDecisionType::mutable_yield() {
  if (!has_yield()) {
    clear_object_tag();
    set_has_yield();
    object_tag_.yield_ = new ::apollo::decision::ObjectYield;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.yield)
  return object_tag_.yield_;
}
::apollo::decision::ObjectYield* ObjectDecisionType::release_yield() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.yield)
  if (has_yield()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectYield* temp = object_tag_.yield_;
    object_tag_.yield_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_yield(::apollo::decision::ObjectYield* yield) {
  clear_object_tag();
  if (yield) {
    set_has_yield();
    object_tag_.yield_ = yield;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.yield)
}

// optional .apollo.decision.ObjectOvertake overtake = 5;
bool ObjectDecisionType::has_overtake() const {
  return object_tag_case() == kOvertake;
}
void ObjectDecisionType::set_has_overtake() {
  _oneof_case_[0] = kOvertake;
}
void ObjectDecisionType::clear_overtake() {
  if (has_overtake()) {
    delete object_tag_.overtake_;
    clear_has_object_tag();
  }
}
 const ::apollo::decision::ObjectOvertake& ObjectDecisionType::overtake() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.overtake)
  return has_overtake()
      ? *object_tag_.overtake_
      : ::apollo::decision::ObjectOvertake::default_instance();
}
::apollo::decision::ObjectOvertake* ObjectDecisionType::mutable_overtake() {
  if (!has_overtake()) {
    clear_object_tag();
    set_has_overtake();
    object_tag_.overtake_ = new ::apollo::decision::ObjectOvertake;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.overtake)
  return object_tag_.overtake_;
}
::apollo::decision::ObjectOvertake* ObjectDecisionType::release_overtake() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.overtake)
  if (has_overtake()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectOvertake* temp = object_tag_.overtake_;
    object_tag_.overtake_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_overtake(::apollo::decision::ObjectOvertake* overtake) {
  clear_object_tag();
  if (overtake) {
    set_has_overtake();
    object_tag_.overtake_ = overtake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.overtake)
}

// optional .apollo.decision.ObjectNudge nudge = 6;
bool ObjectDecisionType::has_nudge() const {
  return object_tag_case() == kNudge;
}
void ObjectDecisionType::set_has_nudge() {
  _oneof_case_[0] = kNudge;
}
void ObjectDecisionType::clear_nudge() {
  if (has_nudge()) {
    delete object_tag_.nudge_;
    clear_has_object_tag();
  }
}
 const ::apollo::decision::ObjectNudge& ObjectDecisionType::nudge() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.nudge)
  return has_nudge()
      ? *object_tag_.nudge_
      : ::apollo::decision::ObjectNudge::default_instance();
}
::apollo::decision::ObjectNudge* ObjectDecisionType::mutable_nudge() {
  if (!has_nudge()) {
    clear_object_tag();
    set_has_nudge();
    object_tag_.nudge_ = new ::apollo::decision::ObjectNudge;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.nudge)
  return object_tag_.nudge_;
}
::apollo::decision::ObjectNudge* ObjectDecisionType::release_nudge() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.nudge)
  if (has_nudge()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectNudge* temp = object_tag_.nudge_;
    object_tag_.nudge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_nudge(::apollo::decision::ObjectNudge* nudge) {
  clear_object_tag();
  if (nudge) {
    set_has_nudge();
    object_tag_.nudge_ = nudge;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.nudge)
}

// optional .apollo.decision.ObjectSidePass sidepass = 7;
bool ObjectDecisionType::has_sidepass() const {
  return object_tag_case() == kSidepass;
}
void ObjectDecisionType::set_has_sidepass() {
  _oneof_case_[0] = kSidepass;
}
void ObjectDecisionType::clear_sidepass() {
  if (has_sidepass()) {
    delete object_tag_.sidepass_;
    clear_has_object_tag();
  }
}
 const ::apollo::decision::ObjectSidePass& ObjectDecisionType::sidepass() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.sidepass)
  return has_sidepass()
      ? *object_tag_.sidepass_
      : ::apollo::decision::ObjectSidePass::default_instance();
}
::apollo::decision::ObjectSidePass* ObjectDecisionType::mutable_sidepass() {
  if (!has_sidepass()) {
    clear_object_tag();
    set_has_sidepass();
    object_tag_.sidepass_ = new ::apollo::decision::ObjectSidePass;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.sidepass)
  return object_tag_.sidepass_;
}
::apollo::decision::ObjectSidePass* ObjectDecisionType::release_sidepass() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.sidepass)
  if (has_sidepass()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectSidePass* temp = object_tag_.sidepass_;
    object_tag_.sidepass_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_sidepass(::apollo::decision::ObjectSidePass* sidepass) {
  clear_object_tag();
  if (sidepass) {
    set_has_sidepass();
    object_tag_.sidepass_ = sidepass;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.sidepass)
}

// optional .apollo.decision.ObjectAvoid avoid = 8;
bool ObjectDecisionType::has_avoid() const {
  return object_tag_case() == kAvoid;
}
void ObjectDecisionType::set_has_avoid() {
  _oneof_case_[0] = kAvoid;
}
void ObjectDecisionType::clear_avoid() {
  if (has_avoid()) {
    delete object_tag_.avoid_;
    clear_has_object_tag();
  }
}
 const ::apollo::decision::ObjectAvoid& ObjectDecisionType::avoid() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.avoid)
  return has_avoid()
      ? *object_tag_.avoid_
      : ::apollo::decision::ObjectAvoid::default_instance();
}
::apollo::decision::ObjectAvoid* ObjectDecisionType::mutable_avoid() {
  if (!has_avoid()) {
    clear_object_tag();
    set_has_avoid();
    object_tag_.avoid_ = new ::apollo::decision::ObjectAvoid;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.avoid)
  return object_tag_.avoid_;
}
::apollo::decision::ObjectAvoid* ObjectDecisionType::release_avoid() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.avoid)
  if (has_avoid()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectAvoid* temp = object_tag_.avoid_;
    object_tag_.avoid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_avoid(::apollo::decision::ObjectAvoid* avoid) {
  clear_object_tag();
  if (avoid) {
    set_has_avoid();
    object_tag_.avoid_ = avoid;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.avoid)
}

bool ObjectDecisionType::has_object_tag() const {
  return object_tag_case() != OBJECT_TAG_NOT_SET;
}
void ObjectDecisionType::clear_has_object_tag() {
  _oneof_case_[0] = OBJECT_TAG_NOT_SET;
}
ObjectDecisionType::ObjectTagCase ObjectDecisionType::object_tag_case() const {
  return ObjectDecisionType::ObjectTagCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ObjectDecision_ObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDecision_ObjectType_descriptor_;
}
bool ObjectDecision_ObjectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectDecision_ObjectType ObjectDecision::PREDICTION;
const ObjectDecision_ObjectType ObjectDecision::PERCEPTION;
const ObjectDecision_ObjectType ObjectDecision::VIRTUAL;
const ObjectDecision_ObjectType ObjectDecision::ObjectType_MIN;
const ObjectDecision_ObjectType ObjectDecision::ObjectType_MAX;
const int ObjectDecision::ObjectType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecision::kPredictionFieldNumber;
const int ObjectDecision::kIdFieldNumber;
const int ObjectDecision::kTypeFieldNumber;
const int ObjectDecision::kDecisionFieldNumber;
const int ObjectDecision::kObjectDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecision::ObjectDecision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectDecision)
}

void ObjectDecision::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  prediction_ = const_cast< ::apollo::prediction::PredictionObstacle*>(&::apollo::prediction::PredictionObstacle::default_instance());
  decision_ = const_cast< ::apollo::decision::ObjectDecisionType*>(&::apollo::decision::ObjectDecisionType::default_instance());
}

ObjectDecision::ObjectDecision(const ObjectDecision& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectDecision)
}

void ObjectDecision::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  prediction_ = NULL;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  decision_ = NULL;
}

ObjectDecision::~ObjectDecision() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectDecision)
  SharedDtor();
}

void ObjectDecision::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete prediction_;
    delete decision_;
  }
}

void ObjectDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDecision_descriptor_;
}

const ObjectDecision& ObjectDecision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectDecision* ObjectDecision::default_instance_ = NULL;

ObjectDecision* ObjectDecision::New(::google::protobuf::Arena* arena) const {
  ObjectDecision* n = new ObjectDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectDecision)
  if (GetArenaNoVirtual() == NULL && prediction_ != NULL) delete prediction_;
  prediction_ = NULL;
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && decision_ != NULL) delete decision_;
  decision_ = NULL;
  object_decision_.Clear();
}

bool ObjectDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.prediction.PredictionObstacle prediction = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prediction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.decision.ObjectDecision.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .apollo.decision.ObjectDecision.ObjectType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::apollo::decision::ObjectDecision_ObjectType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_decision;
        break;
      }

      // optional .apollo.decision.ObjectDecisionType decision = 4;
      case 4: {
        if (tag == 34) {
         parse_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_object_decision;
        break;
      }

      // repeated .apollo.decision.ObjectDecisionType object_decision = 5;
      case 5: {
        if (tag == 42) {
         parse_object_decision:
          DO_(input->IncrementRecursionDepth());
         parse_loop_object_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_object_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_object_decision;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectDecision)
  return false;
#undef DO_
}

void ObjectDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectDecision)
  // optional .apollo.prediction.PredictionObstacle prediction = 1;
  if (this->has_prediction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->prediction_, output);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.ObjectDecision.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional .apollo.decision.ObjectDecision.ObjectType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .apollo.decision.ObjectDecisionType decision = 4;
  if (this->has_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->decision_, output);
  }

  // repeated .apollo.decision.ObjectDecisionType object_decision = 5;
  for (unsigned int i = 0, n = this->object_decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->object_decision(i), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectDecision)
}

::google::protobuf::uint8* ObjectDecision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectDecision)
  // optional .apollo.prediction.PredictionObstacle prediction = 1;
  if (this->has_prediction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->prediction_, false, target);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.ObjectDecision.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional .apollo.decision.ObjectDecision.ObjectType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .apollo.decision.ObjectDecisionType decision = 4;
  if (this->has_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->decision_, false, target);
  }

  // repeated .apollo.decision.ObjectDecisionType object_decision = 5;
  for (unsigned int i = 0, n = this->object_decision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->object_decision(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectDecision)
  return target;
}

int ObjectDecision::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectDecision)
  int total_size = 0;

  // optional .apollo.prediction.PredictionObstacle prediction = 1;
  if (this->has_prediction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prediction_);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional .apollo.decision.ObjectDecision.ObjectType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .apollo.decision.ObjectDecisionType decision = 4;
  if (this->has_decision()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->decision_);
  }

  // repeated .apollo.decision.ObjectDecisionType object_decision = 5;
  total_size += 1 * this->object_decision_size();
  for (int i = 0; i < this->object_decision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_decision(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectDecision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectDecision* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectDecision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectDecision)
    MergeFrom(*source);
  }
}

void ObjectDecision::MergeFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectDecision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  object_decision_.MergeFrom(from.object_decision_);
  if (from.has_prediction()) {
    mutable_prediction()->::apollo::prediction::PredictionObstacle::MergeFrom(from.prediction());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_decision()) {
    mutable_decision()->::apollo::decision::ObjectDecisionType::MergeFrom(from.decision());
  }
}

void ObjectDecision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecision::CopyFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecision::IsInitialized() const {

  return true;
}

void ObjectDecision::Swap(ObjectDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecision::InternalSwap(ObjectDecision* other) {
  std::swap(prediction_, other->prediction_);
  id_.Swap(&other->id_);
  std::swap(type_, other->type_);
  std::swap(decision_, other->decision_);
  object_decision_.UnsafeArenaSwap(&other->object_decision_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDecision_descriptor_;
  metadata.reflection = ObjectDecision_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDecision

// optional .apollo.prediction.PredictionObstacle prediction = 1;
bool ObjectDecision::has_prediction() const {
  return !_is_default_instance_ && prediction_ != NULL;
}
void ObjectDecision::clear_prediction() {
  if (GetArenaNoVirtual() == NULL && prediction_ != NULL) delete prediction_;
  prediction_ = NULL;
}
const ::apollo::prediction::PredictionObstacle& ObjectDecision::prediction() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecision.prediction)
  return prediction_ != NULL ? *prediction_ : *default_instance_->prediction_;
}
::apollo::prediction::PredictionObstacle* ObjectDecision::mutable_prediction() {
  
  if (prediction_ == NULL) {
    prediction_ = new ::apollo::prediction::PredictionObstacle;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecision.prediction)
  return prediction_;
}
::apollo::prediction::PredictionObstacle* ObjectDecision::release_prediction() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecision.prediction)
  
  ::apollo::prediction::PredictionObstacle* temp = prediction_;
  prediction_ = NULL;
  return temp;
}
void ObjectDecision::set_allocated_prediction(::apollo::prediction::PredictionObstacle* prediction) {
  delete prediction_;
  prediction_ = prediction;
  if (prediction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecision.prediction)
}

// optional string id = 2;
void ObjectDecision::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ObjectDecision::id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecision.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObjectDecision::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDecision.id)
}
 void ObjectDecision::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.ObjectDecision.id)
}
 void ObjectDecision::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.ObjectDecision.id)
}
 ::std::string* ObjectDecision::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecision.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ObjectDecision::release_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecision.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObjectDecision::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecision.id)
}

// optional .apollo.decision.ObjectDecision.ObjectType type = 3;
void ObjectDecision::clear_type() {
  type_ = 0;
}
 ::apollo::decision::ObjectDecision_ObjectType ObjectDecision::type() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecision.type)
  return static_cast< ::apollo::decision::ObjectDecision_ObjectType >(type_);
}
 void ObjectDecision::set_type(::apollo::decision::ObjectDecision_ObjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDecision.type)
}

// optional .apollo.decision.ObjectDecisionType decision = 4;
bool ObjectDecision::has_decision() const {
  return !_is_default_instance_ && decision_ != NULL;
}
void ObjectDecision::clear_decision() {
  if (GetArenaNoVirtual() == NULL && decision_ != NULL) delete decision_;
  decision_ = NULL;
}
const ::apollo::decision::ObjectDecisionType& ObjectDecision::decision() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecision.decision)
  return decision_ != NULL ? *decision_ : *default_instance_->decision_;
}
::apollo::decision::ObjectDecisionType* ObjectDecision::mutable_decision() {
  
  if (decision_ == NULL) {
    decision_ = new ::apollo::decision::ObjectDecisionType;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecision.decision)
  return decision_;
}
::apollo::decision::ObjectDecisionType* ObjectDecision::release_decision() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecision.decision)
  
  ::apollo::decision::ObjectDecisionType* temp = decision_;
  decision_ = NULL;
  return temp;
}
void ObjectDecision::set_allocated_decision(::apollo::decision::ObjectDecisionType* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecision.decision)
}

// repeated .apollo.decision.ObjectDecisionType object_decision = 5;
int ObjectDecision::object_decision_size() const {
  return object_decision_.size();
}
void ObjectDecision::clear_object_decision() {
  object_decision_.Clear();
}
const ::apollo::decision::ObjectDecisionType& ObjectDecision::object_decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecision.object_decision)
  return object_decision_.Get(index);
}
::apollo::decision::ObjectDecisionType* ObjectDecision::mutable_object_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecision.object_decision)
  return object_decision_.Mutable(index);
}
::apollo::decision::ObjectDecisionType* ObjectDecision::add_object_decision() {
  // @@protoc_insertion_point(field_add:apollo.decision.ObjectDecision.object_decision)
  return object_decision_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >*
ObjectDecision::mutable_object_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.ObjectDecision.object_decision)
  return &object_decision_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >&
ObjectDecision::object_decision() const {
  // @@protoc_insertion_point(field_list:apollo.decision.ObjectDecision.object_decision)
  return object_decision_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecisions::kDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecisions::ObjectDecisions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectDecisions)
}

void ObjectDecisions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ObjectDecisions::ObjectDecisions(const ObjectDecisions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectDecisions)
}

void ObjectDecisions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ObjectDecisions::~ObjectDecisions() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectDecisions)
  SharedDtor();
}

void ObjectDecisions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectDecisions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecisions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDecisions_descriptor_;
}

const ObjectDecisions& ObjectDecisions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectDecisions* ObjectDecisions::default_instance_ = NULL;

ObjectDecisions* ObjectDecisions::New(::google::protobuf::Arena* arena) const {
  ObjectDecisions* n = new ObjectDecisions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecisions::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectDecisions)
  decision_.Clear();
}

bool ObjectDecisions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectDecisions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.decision.ObjectDecision decision = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_decision;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectDecisions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectDecisions)
  return false;
#undef DO_
}

void ObjectDecisions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectDecisions)
  // repeated .apollo.decision.ObjectDecision decision = 1;
  for (unsigned int i = 0, n = this->decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->decision(i), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectDecisions)
}

::google::protobuf::uint8* ObjectDecisions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectDecisions)
  // repeated .apollo.decision.ObjectDecision decision = 1;
  for (unsigned int i = 0, n = this->decision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->decision(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectDecisions)
  return target;
}

int ObjectDecisions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectDecisions)
  int total_size = 0;

  // repeated .apollo.decision.ObjectDecision decision = 1;
  total_size += 1 * this->decision_size();
  for (int i = 0; i < this->decision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decision(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecisions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectDecisions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectDecisions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecisions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectDecisions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectDecisions)
    MergeFrom(*source);
  }
}

void ObjectDecisions::MergeFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectDecisions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  decision_.MergeFrom(from.decision_);
}

void ObjectDecisions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecisions::CopyFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisions::IsInitialized() const {

  return true;
}

void ObjectDecisions::Swap(ObjectDecisions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecisions::InternalSwap(ObjectDecisions* other) {
  decision_.UnsafeArenaSwap(&other->decision_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecisions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDecisions_descriptor_;
  metadata.reflection = ObjectDecisions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDecisions

// repeated .apollo.decision.ObjectDecision decision = 1;
int ObjectDecisions::decision_size() const {
  return decision_.size();
}
void ObjectDecisions::clear_decision() {
  decision_.Clear();
}
const ::apollo::decision::ObjectDecision& ObjectDecisions::decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisions.decision)
  return decision_.Get(index);
}
::apollo::decision::ObjectDecision* ObjectDecisions::mutable_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisions.decision)
  return decision_.Mutable(index);
}
::apollo::decision::ObjectDecision* ObjectDecisions::add_decision() {
  // @@protoc_insertion_point(field_add:apollo.decision.ObjectDecisions.decision)
  return decision_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecision >*
ObjectDecisions::mutable_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.ObjectDecisions.decision)
  return &decision_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecision >&
ObjectDecisions::decision() const {
  // @@protoc_insertion_point(field_list:apollo.decision.ObjectDecisions.decision)
  return decision_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopLine::kLaneIdFieldNumber;
const int StopLine::kDistanceSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopLine::StopLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.StopLine)
}

void StopLine::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StopLine::StopLine(const StopLine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.StopLine)
}

void StopLine::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_s_ = 0;
}

StopLine::~StopLine() {
  // @@protoc_insertion_point(destructor:apollo.decision.StopLine)
  SharedDtor();
}

void StopLine::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StopLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopLine_descriptor_;
}

const StopLine& StopLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

StopLine* StopLine::default_instance_ = NULL;

StopLine* StopLine::New(::google::protobuf::Arena* arena) const {
  StopLine* n = new StopLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopLine::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.StopLine)
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_s_ = 0;
}

bool StopLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.StopLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lane_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.decision.StopLine.lane_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_distance_s;
        break;
      }

      // optional double distance_s = 2;
      case 2: {
        if (tag == 17) {
         parse_distance_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.StopLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.StopLine)
  return false;
#undef DO_
}

void StopLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.StopLine)
  // optional string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.StopLine.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // optional double distance_s = 2;
  if (this->distance_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance_s(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.StopLine)
}

::google::protobuf::uint8* StopLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.StopLine)
  // optional string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.StopLine.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // optional double distance_s = 2;
  if (this->distance_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance_s(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.StopLine)
  return target;
}

int StopLine::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.StopLine)
  int total_size = 0;

  // optional string lane_id = 1;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // optional double distance_s = 2;
  if (this->distance_s() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.StopLine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopLine* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.StopLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.StopLine)
    MergeFrom(*source);
  }
}

void StopLine::MergeFrom(const StopLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.StopLine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.distance_s() != 0) {
    set_distance_s(from.distance_s());
  }
}

void StopLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.StopLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopLine::CopyFrom(const StopLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.StopLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLine::IsInitialized() const {

  return true;
}

void StopLine::Swap(StopLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopLine::InternalSwap(StopLine* other) {
  lane_id_.Swap(&other->lane_id_);
  std::swap(distance_s_, other->distance_s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopLine_descriptor_;
  metadata.reflection = StopLine_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopLine

// optional string lane_id = 1;
void StopLine::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StopLine::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.StopLine.lane_id)
  return lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopLine::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.StopLine.lane_id)
}
 void StopLine::set_lane_id(const char* value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.StopLine.lane_id)
}
 void StopLine::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.StopLine.lane_id)
}
 ::std::string* StopLine::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.StopLine.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopLine::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.StopLine.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopLine::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.StopLine.lane_id)
}

// optional double distance_s = 2;
void StopLine::clear_distance_s() {
  distance_s_ = 0;
}
 double StopLine::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.StopLine.distance_s)
  return distance_s_;
}
 void StopLine::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.StopLine.distance_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainStop::kEnforcedLineFieldNumber;
const int MainStop::kPreferredStartFieldNumber;
const int MainStop::kPreferredEndFieldNumber;
const int MainStop::kReasonFieldNumber;
const int MainStop::kReasonCodeFieldNumber;
const int MainStop::kStopPointFieldNumber;
const int MainStop::kStopHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainStop::MainStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.MainStop)
}

void MainStop::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  enforced_line_ = const_cast< ::apollo::decision::StopLine*>(&::apollo::decision::StopLine::default_instance());
  preferred_start_ = const_cast< ::apollo::decision::StopLine*>(&::apollo::decision::StopLine::default_instance());
  preferred_end_ = const_cast< ::apollo::decision::StopLine*>(&::apollo::decision::StopLine::default_instance());
  stop_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

MainStop::MainStop(const MainStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.MainStop)
}

void MainStop::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enforced_line_ = NULL;
  preferred_start_ = NULL;
  preferred_end_ = NULL;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_code_ = 0;
  stop_point_ = NULL;
  stop_heading_ = 0;
}

MainStop::~MainStop() {
  // @@protoc_insertion_point(destructor:apollo.decision.MainStop)
  SharedDtor();
}

void MainStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete enforced_line_;
    delete preferred_start_;
    delete preferred_end_;
    delete stop_point_;
  }
}

void MainStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainStop_descriptor_;
}

const MainStop& MainStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

MainStop* MainStop::default_instance_ = NULL;

MainStop* MainStop::New(::google::protobuf::Arena* arena) const {
  MainStop* n = new MainStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.MainStop)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MainStop, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MainStop*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stop_heading_, reason_code_);
  if (GetArenaNoVirtual() == NULL && enforced_line_ != NULL) delete enforced_line_;
  enforced_line_ = NULL;
  if (GetArenaNoVirtual() == NULL && preferred_start_ != NULL) delete preferred_start_;
  preferred_start_ = NULL;
  if (GetArenaNoVirtual() == NULL && preferred_end_ != NULL) delete preferred_end_;
  preferred_end_ = NULL;
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stop_point_ != NULL) delete stop_point_;
  stop_point_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MainStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.MainStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.decision.StopLine enforced_line = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enforced_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_preferred_start;
        break;
      }

      // optional .apollo.decision.StopLine preferred_start = 2;
      case 2: {
        if (tag == 18) {
         parse_preferred_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preferred_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_preferred_end;
        break;
      }

      // optional .apollo.decision.StopLine preferred_end = 3;
      case 3: {
        if (tag == 26) {
         parse_preferred_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preferred_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (tag == 34) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.decision.MainStop.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reason_code;
        break;
      }

      // optional .apollo.decision.StopReasonCode reason_code = 5;
      case 5: {
        if (tag == 40) {
         parse_reason_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason_code(static_cast< ::apollo::decision::StopReasonCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stop_point;
        break;
      }

      // optional .apollo.common.PointENU stop_point = 6;
      case 6: {
        if (tag == 50) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_stop_heading;
        break;
      }

      // optional double stop_heading = 7;
      case 7: {
        if (tag == 57) {
         parse_stop_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_heading_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.MainStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.MainStop)
  return false;
#undef DO_
}

void MainStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.MainStop)
  // optional .apollo.decision.StopLine enforced_line = 1;
  if (this->has_enforced_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->enforced_line_, output);
  }

  // optional .apollo.decision.StopLine preferred_start = 2;
  if (this->has_preferred_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->preferred_start_, output);
  }

  // optional .apollo.decision.StopLine preferred_end = 3;
  if (this->has_preferred_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->preferred_end_, output);
  }

  // optional string reason = 4;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.MainStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  // optional .apollo.decision.StopReasonCode reason_code = 5;
  if (this->reason_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->reason_code(), output);
  }

  // optional .apollo.common.PointENU stop_point = 6;
  if (this->has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->stop_point_, output);
  }

  // optional double stop_heading = 7;
  if (this->stop_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stop_heading(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.MainStop)
}

::google::protobuf::uint8* MainStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.MainStop)
  // optional .apollo.decision.StopLine enforced_line = 1;
  if (this->has_enforced_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->enforced_line_, false, target);
  }

  // optional .apollo.decision.StopLine preferred_start = 2;
  if (this->has_preferred_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->preferred_start_, false, target);
  }

  // optional .apollo.decision.StopLine preferred_end = 3;
  if (this->has_preferred_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->preferred_end_, false, target);
  }

  // optional string reason = 4;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.MainStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  // optional .apollo.decision.StopReasonCode reason_code = 5;
  if (this->reason_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->reason_code(), target);
  }

  // optional .apollo.common.PointENU stop_point = 6;
  if (this->has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->stop_point_, false, target);
  }

  // optional double stop_heading = 7;
  if (this->stop_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->stop_heading(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.MainStop)
  return target;
}

int MainStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.MainStop)
  int total_size = 0;

  // optional .apollo.decision.StopLine enforced_line = 1;
  if (this->has_enforced_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->enforced_line_);
  }

  // optional .apollo.decision.StopLine preferred_start = 2;
  if (this->has_preferred_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preferred_start_);
  }

  // optional .apollo.decision.StopLine preferred_end = 3;
  if (this->has_preferred_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preferred_end_);
  }

  // optional string reason = 4;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // optional .apollo.decision.StopReasonCode reason_code = 5;
  if (this->reason_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
  }

  // optional .apollo.common.PointENU stop_point = 6;
  if (this->has_stop_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_point_);
  }

  // optional double stop_heading = 7;
  if (this->stop_heading() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.MainStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.MainStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.MainStop)
    MergeFrom(*source);
  }
}

void MainStop::MergeFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.MainStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_enforced_line()) {
    mutable_enforced_line()->::apollo::decision::StopLine::MergeFrom(from.enforced_line());
  }
  if (from.has_preferred_start()) {
    mutable_preferred_start()->::apollo::decision::StopLine::MergeFrom(from.preferred_start());
  }
  if (from.has_preferred_end()) {
    mutable_preferred_end()->::apollo::decision::StopLine::MergeFrom(from.preferred_end());
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.reason_code() != 0) {
    set_reason_code(from.reason_code());
  }
  if (from.has_stop_point()) {
    mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from.stop_point());
  }
  if (from.stop_heading() != 0) {
    set_stop_heading(from.stop_heading());
  }
}

void MainStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainStop::CopyFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainStop::IsInitialized() const {

  return true;
}

void MainStop::Swap(MainStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainStop::InternalSwap(MainStop* other) {
  std::swap(enforced_line_, other->enforced_line_);
  std::swap(preferred_start_, other->preferred_start_);
  std::swap(preferred_end_, other->preferred_end_);
  reason_.Swap(&other->reason_);
  std::swap(reason_code_, other->reason_code_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(stop_heading_, other->stop_heading_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainStop_descriptor_;
  metadata.reflection = MainStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainStop

// optional .apollo.decision.StopLine enforced_line = 1;
bool MainStop::has_enforced_line() const {
  return !_is_default_instance_ && enforced_line_ != NULL;
}
void MainStop::clear_enforced_line() {
  if (GetArenaNoVirtual() == NULL && enforced_line_ != NULL) delete enforced_line_;
  enforced_line_ = NULL;
}
const ::apollo::decision::StopLine& MainStop::enforced_line() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.enforced_line)
  return enforced_line_ != NULL ? *enforced_line_ : *default_instance_->enforced_line_;
}
::apollo::decision::StopLine* MainStop::mutable_enforced_line() {
  
  if (enforced_line_ == NULL) {
    enforced_line_ = new ::apollo::decision::StopLine;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainStop.enforced_line)
  return enforced_line_;
}
::apollo::decision::StopLine* MainStop::release_enforced_line() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainStop.enforced_line)
  
  ::apollo::decision::StopLine* temp = enforced_line_;
  enforced_line_ = NULL;
  return temp;
}
void MainStop::set_allocated_enforced_line(::apollo::decision::StopLine* enforced_line) {
  delete enforced_line_;
  enforced_line_ = enforced_line;
  if (enforced_line) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainStop.enforced_line)
}

// optional .apollo.decision.StopLine preferred_start = 2;
bool MainStop::has_preferred_start() const {
  return !_is_default_instance_ && preferred_start_ != NULL;
}
void MainStop::clear_preferred_start() {
  if (GetArenaNoVirtual() == NULL && preferred_start_ != NULL) delete preferred_start_;
  preferred_start_ = NULL;
}
const ::apollo::decision::StopLine& MainStop::preferred_start() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.preferred_start)
  return preferred_start_ != NULL ? *preferred_start_ : *default_instance_->preferred_start_;
}
::apollo::decision::StopLine* MainStop::mutable_preferred_start() {
  
  if (preferred_start_ == NULL) {
    preferred_start_ = new ::apollo::decision::StopLine;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainStop.preferred_start)
  return preferred_start_;
}
::apollo::decision::StopLine* MainStop::release_preferred_start() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainStop.preferred_start)
  
  ::apollo::decision::StopLine* temp = preferred_start_;
  preferred_start_ = NULL;
  return temp;
}
void MainStop::set_allocated_preferred_start(::apollo::decision::StopLine* preferred_start) {
  delete preferred_start_;
  preferred_start_ = preferred_start;
  if (preferred_start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainStop.preferred_start)
}

// optional .apollo.decision.StopLine preferred_end = 3;
bool MainStop::has_preferred_end() const {
  return !_is_default_instance_ && preferred_end_ != NULL;
}
void MainStop::clear_preferred_end() {
  if (GetArenaNoVirtual() == NULL && preferred_end_ != NULL) delete preferred_end_;
  preferred_end_ = NULL;
}
const ::apollo::decision::StopLine& MainStop::preferred_end() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.preferred_end)
  return preferred_end_ != NULL ? *preferred_end_ : *default_instance_->preferred_end_;
}
::apollo::decision::StopLine* MainStop::mutable_preferred_end() {
  
  if (preferred_end_ == NULL) {
    preferred_end_ = new ::apollo::decision::StopLine;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainStop.preferred_end)
  return preferred_end_;
}
::apollo::decision::StopLine* MainStop::release_preferred_end() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainStop.preferred_end)
  
  ::apollo::decision::StopLine* temp = preferred_end_;
  preferred_end_ = NULL;
  return temp;
}
void MainStop::set_allocated_preferred_end(::apollo::decision::StopLine* preferred_end) {
  delete preferred_end_;
  preferred_end_ = preferred_end;
  if (preferred_end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainStop.preferred_end)
}

// optional string reason = 4;
void MainStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MainStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainStop::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.MainStop.reason)
}
 void MainStop::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.MainStop.reason)
}
 void MainStop::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.MainStop.reason)
}
 ::std::string* MainStop::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MainStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainStop.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainStop.reason)
}

// optional .apollo.decision.StopReasonCode reason_code = 5;
void MainStop::clear_reason_code() {
  reason_code_ = 0;
}
 ::apollo::decision::StopReasonCode MainStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.reason_code)
  return static_cast< ::apollo::decision::StopReasonCode >(reason_code_);
}
 void MainStop::set_reason_code(::apollo::decision::StopReasonCode value) {
  
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainStop.reason_code)
}

// optional .apollo.common.PointENU stop_point = 6;
bool MainStop::has_stop_point() const {
  return !_is_default_instance_ && stop_point_ != NULL;
}
void MainStop::clear_stop_point() {
  if (GetArenaNoVirtual() == NULL && stop_point_ != NULL) delete stop_point_;
  stop_point_ = NULL;
}
const ::apollo::common::PointENU& MainStop::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::apollo::common::PointENU* MainStop::mutable_stop_point() {
  
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainStop.stop_point)
  return stop_point_;
}
::apollo::common::PointENU* MainStop::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainStop.stop_point)
  
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void MainStop::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainStop.stop_point)
}

// optional double stop_heading = 7;
void MainStop::clear_stop_heading() {
  stop_heading_ = 0;
}
 double MainStop::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.stop_heading)
  return stop_heading_;
}
 void MainStop::set_stop_heading(double value) {
  
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainStop.stop_heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyStopHardBrake::EmergencyStopHardBrake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.EmergencyStopHardBrake)
}

void EmergencyStopHardBrake::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EmergencyStopHardBrake::EmergencyStopHardBrake(const EmergencyStopHardBrake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.EmergencyStopHardBrake)
}

void EmergencyStopHardBrake::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EmergencyStopHardBrake::~EmergencyStopHardBrake() {
  // @@protoc_insertion_point(destructor:apollo.decision.EmergencyStopHardBrake)
  SharedDtor();
}

void EmergencyStopHardBrake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmergencyStopHardBrake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyStopHardBrake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmergencyStopHardBrake_descriptor_;
}

const EmergencyStopHardBrake& EmergencyStopHardBrake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

EmergencyStopHardBrake* EmergencyStopHardBrake::default_instance_ = NULL;

EmergencyStopHardBrake* EmergencyStopHardBrake::New(::google::protobuf::Arena* arena) const {
  EmergencyStopHardBrake* n = new EmergencyStopHardBrake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmergencyStopHardBrake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.EmergencyStopHardBrake)
}

bool EmergencyStopHardBrake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.EmergencyStopHardBrake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.EmergencyStopHardBrake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.EmergencyStopHardBrake)
  return false;
#undef DO_
}

void EmergencyStopHardBrake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.EmergencyStopHardBrake)
  // @@protoc_insertion_point(serialize_end:apollo.decision.EmergencyStopHardBrake)
}

::google::protobuf::uint8* EmergencyStopHardBrake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.EmergencyStopHardBrake)
  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.EmergencyStopHardBrake)
  return target;
}

int EmergencyStopHardBrake::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.EmergencyStopHardBrake)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyStopHardBrake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.EmergencyStopHardBrake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EmergencyStopHardBrake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyStopHardBrake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.EmergencyStopHardBrake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.EmergencyStopHardBrake)
    MergeFrom(*source);
  }
}

void EmergencyStopHardBrake::MergeFrom(const EmergencyStopHardBrake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.EmergencyStopHardBrake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void EmergencyStopHardBrake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.EmergencyStopHardBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStopHardBrake::CopyFrom(const EmergencyStopHardBrake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.EmergencyStopHardBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStopHardBrake::IsInitialized() const {

  return true;
}

void EmergencyStopHardBrake::Swap(EmergencyStopHardBrake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyStopHardBrake::InternalSwap(EmergencyStopHardBrake* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmergencyStopHardBrake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmergencyStopHardBrake_descriptor_;
  metadata.reflection = EmergencyStopHardBrake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmergencyStopHardBrake

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyStopCruiseToStop::EmergencyStopCruiseToStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.EmergencyStopCruiseToStop)
}

void EmergencyStopCruiseToStop::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EmergencyStopCruiseToStop::EmergencyStopCruiseToStop(const EmergencyStopCruiseToStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.EmergencyStopCruiseToStop)
}

void EmergencyStopCruiseToStop::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EmergencyStopCruiseToStop::~EmergencyStopCruiseToStop() {
  // @@protoc_insertion_point(destructor:apollo.decision.EmergencyStopCruiseToStop)
  SharedDtor();
}

void EmergencyStopCruiseToStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmergencyStopCruiseToStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyStopCruiseToStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmergencyStopCruiseToStop_descriptor_;
}

const EmergencyStopCruiseToStop& EmergencyStopCruiseToStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

EmergencyStopCruiseToStop* EmergencyStopCruiseToStop::default_instance_ = NULL;

EmergencyStopCruiseToStop* EmergencyStopCruiseToStop::New(::google::protobuf::Arena* arena) const {
  EmergencyStopCruiseToStop* n = new EmergencyStopCruiseToStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmergencyStopCruiseToStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.EmergencyStopCruiseToStop)
}

bool EmergencyStopCruiseToStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.EmergencyStopCruiseToStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.EmergencyStopCruiseToStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.EmergencyStopCruiseToStop)
  return false;
#undef DO_
}

void EmergencyStopCruiseToStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.EmergencyStopCruiseToStop)
  // @@protoc_insertion_point(serialize_end:apollo.decision.EmergencyStopCruiseToStop)
}

::google::protobuf::uint8* EmergencyStopCruiseToStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.EmergencyStopCruiseToStop)
  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.EmergencyStopCruiseToStop)
  return target;
}

int EmergencyStopCruiseToStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.EmergencyStopCruiseToStop)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyStopCruiseToStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.EmergencyStopCruiseToStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EmergencyStopCruiseToStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyStopCruiseToStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.EmergencyStopCruiseToStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.EmergencyStopCruiseToStop)
    MergeFrom(*source);
  }
}

void EmergencyStopCruiseToStop::MergeFrom(const EmergencyStopCruiseToStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.EmergencyStopCruiseToStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void EmergencyStopCruiseToStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.EmergencyStopCruiseToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStopCruiseToStop::CopyFrom(const EmergencyStopCruiseToStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.EmergencyStopCruiseToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStopCruiseToStop::IsInitialized() const {

  return true;
}

void EmergencyStopCruiseToStop::Swap(EmergencyStopCruiseToStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyStopCruiseToStop::InternalSwap(EmergencyStopCruiseToStop* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmergencyStopCruiseToStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmergencyStopCruiseToStop_descriptor_;
  metadata.reflection = EmergencyStopCruiseToStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmergencyStopCruiseToStop

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainEmergencyStop_ReasonCode_descriptor_;
}
bool MainEmergencyStop_ReasonCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_INTERNAL_ERR;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_COLLISION;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_FIND_PATH;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_MAKE_DECISION;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_SENSOR_ERROR;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MIN;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MAX;
const int MainEmergencyStop::ReasonCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainEmergencyStop::kReasonFieldNumber;
const int MainEmergencyStop::kReasonCodeFieldNumber;
const int MainEmergencyStop::kHardBrakeFieldNumber;
const int MainEmergencyStop::kCruiseToStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainEmergencyStop::MainEmergencyStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.MainEmergencyStop)
}

void MainEmergencyStop::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  MainEmergencyStop_default_oneof_instance_->hard_brake_ = const_cast< ::apollo::decision::EmergencyStopHardBrake*>(&::apollo::decision::EmergencyStopHardBrake::default_instance());
  MainEmergencyStop_default_oneof_instance_->cruise_to_stop_ = const_cast< ::apollo::decision::EmergencyStopCruiseToStop*>(&::apollo::decision::EmergencyStopCruiseToStop::default_instance());
}

MainEmergencyStop::MainEmergencyStop(const MainEmergencyStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.MainEmergencyStop)
}

void MainEmergencyStop::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_code_ = 0;
  clear_has_task();
}

MainEmergencyStop::~MainEmergencyStop() {
  // @@protoc_insertion_point(destructor:apollo.decision.MainEmergencyStop)
  SharedDtor();
}

void MainEmergencyStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_task()) {
    clear_task();
  }
  if (this != default_instance_) {
  }
}

void MainEmergencyStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainEmergencyStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainEmergencyStop_descriptor_;
}

const MainEmergencyStop& MainEmergencyStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

MainEmergencyStop* MainEmergencyStop::default_instance_ = NULL;

MainEmergencyStop* MainEmergencyStop::New(::google::protobuf::Arena* arena) const {
  MainEmergencyStop* n = new MainEmergencyStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainEmergencyStop::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:apollo.decision.MainEmergencyStop)
  switch(task_case()) {
    case kHardBrake: {
      delete task_.hard_brake_;
      break;
    }
    case kCruiseToStop: {
      delete task_.cruise_to_stop_;
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void MainEmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.MainEmergencyStop)
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_code_ = 0;
  clear_task();
}

bool MainEmergencyStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.MainEmergencyStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.decision.MainEmergencyStop.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason_code;
        break;
      }

      // optional .apollo.decision.MainEmergencyStop.ReasonCode reason_code = 2;
      case 2: {
        if (tag == 16) {
         parse_reason_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason_code(static_cast< ::apollo::decision::MainEmergencyStop_ReasonCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hard_brake;
        break;
      }

      // optional .apollo.decision.EmergencyStopHardBrake hard_brake = 3;
      case 3: {
        if (tag == 26) {
         parse_hard_brake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hard_brake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cruise_to_stop;
        break;
      }

      // optional .apollo.decision.EmergencyStopCruiseToStop cruise_to_stop = 4;
      case 4: {
        if (tag == 34) {
         parse_cruise_to_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cruise_to_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.MainEmergencyStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.MainEmergencyStop)
  return false;
#undef DO_
}

void MainEmergencyStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.MainEmergencyStop)
  // optional string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.MainEmergencyStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // optional .apollo.decision.MainEmergencyStop.ReasonCode reason_code = 2;
  if (this->reason_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason_code(), output);
  }

  // optional .apollo.decision.EmergencyStopHardBrake hard_brake = 3;
  if (has_hard_brake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *task_.hard_brake_, output);
  }

  // optional .apollo.decision.EmergencyStopCruiseToStop cruise_to_stop = 4;
  if (has_cruise_to_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *task_.cruise_to_stop_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.MainEmergencyStop)
}

::google::protobuf::uint8* MainEmergencyStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.MainEmergencyStop)
  // optional string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.MainEmergencyStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // optional .apollo.decision.MainEmergencyStop.ReasonCode reason_code = 2;
  if (this->reason_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason_code(), target);
  }

  // optional .apollo.decision.EmergencyStopHardBrake hard_brake = 3;
  if (has_hard_brake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *task_.hard_brake_, false, target);
  }

  // optional .apollo.decision.EmergencyStopCruiseToStop cruise_to_stop = 4;
  if (has_cruise_to_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *task_.cruise_to_stop_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.MainEmergencyStop)
  return target;
}

int MainEmergencyStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.MainEmergencyStop)
  int total_size = 0;

  // optional string reason = 1;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // optional .apollo.decision.MainEmergencyStop.ReasonCode reason_code = 2;
  if (this->reason_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
  }

  switch (task_case()) {
    // optional .apollo.decision.EmergencyStopHardBrake hard_brake = 3;
    case kHardBrake: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.hard_brake_);
      break;
    }
    // optional .apollo.decision.EmergencyStopCruiseToStop cruise_to_stop = 4;
    case kCruiseToStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.cruise_to_stop_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainEmergencyStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.MainEmergencyStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainEmergencyStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainEmergencyStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.MainEmergencyStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.MainEmergencyStop)
    MergeFrom(*source);
  }
}

void MainEmergencyStop::MergeFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.MainEmergencyStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.task_case()) {
    case kHardBrake: {
      mutable_hard_brake()->::apollo::decision::EmergencyStopHardBrake::MergeFrom(from.hard_brake());
      break;
    }
    case kCruiseToStop: {
      mutable_cruise_to_stop()->::apollo::decision::EmergencyStopCruiseToStop::MergeFrom(from.cruise_to_stop());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.reason_code() != 0) {
    set_reason_code(from.reason_code());
  }
}

void MainEmergencyStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainEmergencyStop::CopyFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainEmergencyStop::IsInitialized() const {

  return true;
}

void MainEmergencyStop::Swap(MainEmergencyStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainEmergencyStop::InternalSwap(MainEmergencyStop* other) {
  reason_.Swap(&other->reason_);
  std::swap(reason_code_, other->reason_code_);
  std::swap(task_, other->task_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainEmergencyStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainEmergencyStop_descriptor_;
  metadata.reflection = MainEmergencyStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainEmergencyStop

// optional string reason = 1;
void MainEmergencyStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MainEmergencyStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainEmergencyStop.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainEmergencyStop::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.MainEmergencyStop.reason)
}
 void MainEmergencyStop::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.MainEmergencyStop.reason)
}
 void MainEmergencyStop::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.MainEmergencyStop.reason)
}
 ::std::string* MainEmergencyStop::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainEmergencyStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MainEmergencyStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainEmergencyStop.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainEmergencyStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainEmergencyStop.reason)
}

// optional .apollo.decision.MainEmergencyStop.ReasonCode reason_code = 2;
void MainEmergencyStop::clear_reason_code() {
  reason_code_ = 0;
}
 ::apollo::decision::MainEmergencyStop_ReasonCode MainEmergencyStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainEmergencyStop.reason_code)
  return static_cast< ::apollo::decision::MainEmergencyStop_ReasonCode >(reason_code_);
}
 void MainEmergencyStop::set_reason_code(::apollo::decision::MainEmergencyStop_ReasonCode value) {
  
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainEmergencyStop.reason_code)
}

// optional .apollo.decision.EmergencyStopHardBrake hard_brake = 3;
bool MainEmergencyStop::has_hard_brake() const {
  return task_case() == kHardBrake;
}
void MainEmergencyStop::set_has_hard_brake() {
  _oneof_case_[0] = kHardBrake;
}
void MainEmergencyStop::clear_hard_brake() {
  if (has_hard_brake()) {
    delete task_.hard_brake_;
    clear_has_task();
  }
}
 const ::apollo::decision::EmergencyStopHardBrake& MainEmergencyStop::hard_brake() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainEmergencyStop.hard_brake)
  return has_hard_brake()
      ? *task_.hard_brake_
      : ::apollo::decision::EmergencyStopHardBrake::default_instance();
}
::apollo::decision::EmergencyStopHardBrake* MainEmergencyStop::mutable_hard_brake() {
  if (!has_hard_brake()) {
    clear_task();
    set_has_hard_brake();
    task_.hard_brake_ = new ::apollo::decision::EmergencyStopHardBrake;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainEmergencyStop.hard_brake)
  return task_.hard_brake_;
}
::apollo::decision::EmergencyStopHardBrake* MainEmergencyStop::release_hard_brake() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainEmergencyStop.hard_brake)
  if (has_hard_brake()) {
    clear_has_task();
    ::apollo::decision::EmergencyStopHardBrake* temp = task_.hard_brake_;
    task_.hard_brake_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainEmergencyStop::set_allocated_hard_brake(::apollo::decision::EmergencyStopHardBrake* hard_brake) {
  clear_task();
  if (hard_brake) {
    set_has_hard_brake();
    task_.hard_brake_ = hard_brake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainEmergencyStop.hard_brake)
}

// optional .apollo.decision.EmergencyStopCruiseToStop cruise_to_stop = 4;
bool MainEmergencyStop::has_cruise_to_stop() const {
  return task_case() == kCruiseToStop;
}
void MainEmergencyStop::set_has_cruise_to_stop() {
  _oneof_case_[0] = kCruiseToStop;
}
void MainEmergencyStop::clear_cruise_to_stop() {
  if (has_cruise_to_stop()) {
    delete task_.cruise_to_stop_;
    clear_has_task();
  }
}
 const ::apollo::decision::EmergencyStopCruiseToStop& MainEmergencyStop::cruise_to_stop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainEmergencyStop.cruise_to_stop)
  return has_cruise_to_stop()
      ? *task_.cruise_to_stop_
      : ::apollo::decision::EmergencyStopCruiseToStop::default_instance();
}
::apollo::decision::EmergencyStopCruiseToStop* MainEmergencyStop::mutable_cruise_to_stop() {
  if (!has_cruise_to_stop()) {
    clear_task();
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = new ::apollo::decision::EmergencyStopCruiseToStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainEmergencyStop.cruise_to_stop)
  return task_.cruise_to_stop_;
}
::apollo::decision::EmergencyStopCruiseToStop* MainEmergencyStop::release_cruise_to_stop() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainEmergencyStop.cruise_to_stop)
  if (has_cruise_to_stop()) {
    clear_has_task();
    ::apollo::decision::EmergencyStopCruiseToStop* temp = task_.cruise_to_stop_;
    task_.cruise_to_stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainEmergencyStop::set_allocated_cruise_to_stop(::apollo::decision::EmergencyStopCruiseToStop* cruise_to_stop) {
  clear_task();
  if (cruise_to_stop) {
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = cruise_to_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainEmergencyStop.cruise_to_stop)
}

bool MainEmergencyStop::has_task() const {
  return task_case() != TASK_NOT_SET;
}
void MainEmergencyStop::clear_has_task() {
  _oneof_case_[0] = TASK_NOT_SET;
}
MainEmergencyStop::TaskCase MainEmergencyStop::task_case() const {
  return MainEmergencyStop::TaskCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainCruise::MainCruise()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.MainCruise)
}

void MainCruise::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MainCruise::MainCruise(const MainCruise& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.MainCruise)
}

void MainCruise::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MainCruise::~MainCruise() {
  // @@protoc_insertion_point(destructor:apollo.decision.MainCruise)
  SharedDtor();
}

void MainCruise::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainCruise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainCruise::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainCruise_descriptor_;
}

const MainCruise& MainCruise::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

MainCruise* MainCruise::default_instance_ = NULL;

MainCruise* MainCruise::New(::google::protobuf::Arena* arena) const {
  MainCruise* n = new MainCruise;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainCruise::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.MainCruise)
}

bool MainCruise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.MainCruise)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.MainCruise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.MainCruise)
  return false;
#undef DO_
}

void MainCruise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.MainCruise)
  // @@protoc_insertion_point(serialize_end:apollo.decision.MainCruise)
}

::google::protobuf::uint8* MainCruise::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.MainCruise)
  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.MainCruise)
  return target;
}

int MainCruise::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.MainCruise)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainCruise::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.MainCruise)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainCruise* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainCruise>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.MainCruise)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.MainCruise)
    MergeFrom(*source);
  }
}

void MainCruise::MergeFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.MainCruise)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void MainCruise::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainCruise::CopyFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainCruise::IsInitialized() const {

  return true;
}

void MainCruise::Swap(MainCruise* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainCruise::InternalSwap(MainCruise* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainCruise::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainCruise_descriptor_;
  metadata.reflection = MainCruise_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainCruise

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MainChangeLane_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainChangeLane_Type_descriptor_;
}
bool MainChangeLane_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainChangeLane_Type MainChangeLane::LEFT;
const MainChangeLane_Type MainChangeLane::RIGHT;
const MainChangeLane_Type MainChangeLane::Type_MIN;
const MainChangeLane_Type MainChangeLane::Type_MAX;
const int MainChangeLane::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainChangeLane::kTypeFieldNumber;
const int MainChangeLane::kDefaultLaneFieldNumber;
const int MainChangeLane::kDefaultLaneStopFieldNumber;
const int MainChangeLane::kTargetLaneStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainChangeLane::MainChangeLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.MainChangeLane)
}

void MainChangeLane::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  default_lane_stop_ = const_cast< ::apollo::decision::MainStop*>(&::apollo::decision::MainStop::default_instance());
  target_lane_stop_ = const_cast< ::apollo::decision::MainStop*>(&::apollo::decision::MainStop::default_instance());
}

MainChangeLane::MainChangeLane(const MainChangeLane& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.MainChangeLane)
}

void MainChangeLane::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  default_lane_stop_ = NULL;
  target_lane_stop_ = NULL;
}

MainChangeLane::~MainChangeLane() {
  // @@protoc_insertion_point(destructor:apollo.decision.MainChangeLane)
  SharedDtor();
}

void MainChangeLane::SharedDtor() {
  if (this != default_instance_) {
    delete default_lane_stop_;
    delete target_lane_stop_;
  }
}

void MainChangeLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainChangeLane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainChangeLane_descriptor_;
}

const MainChangeLane& MainChangeLane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

MainChangeLane* MainChangeLane::default_instance_ = NULL;

MainChangeLane* MainChangeLane::New(::google::protobuf::Arena* arena) const {
  MainChangeLane* n = new MainChangeLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainChangeLane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.MainChangeLane)
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && default_lane_stop_ != NULL) delete default_lane_stop_;
  default_lane_stop_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_lane_stop_ != NULL) delete target_lane_stop_;
  target_lane_stop_ = NULL;
  default_lane_.Clear();
}

bool MainChangeLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.MainChangeLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.decision.MainChangeLane.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::apollo::decision::MainChangeLane_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_default_lane;
        break;
      }

      // repeated .apollo.decision.TargetLane default_lane = 2;
      case 2: {
        if (tag == 18) {
         parse_default_lane:
          DO_(input->IncrementRecursionDepth());
         parse_loop_default_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_default_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_default_lane;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_default_lane_stop;
        break;
      }

      // optional .apollo.decision.MainStop default_lane_stop = 3;
      case 3: {
        if (tag == 26) {
         parse_default_lane_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_lane_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_target_lane_stop;
        break;
      }

      // optional .apollo.decision.MainStop target_lane_stop = 4;
      case 4: {
        if (tag == 34) {
         parse_target_lane_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_lane_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.MainChangeLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.MainChangeLane)
  return false;
#undef DO_
}

void MainChangeLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.MainChangeLane)
  // optional .apollo.decision.MainChangeLane.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .apollo.decision.TargetLane default_lane = 2;
  for (unsigned int i = 0, n = this->default_lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->default_lane(i), output);
  }

  // optional .apollo.decision.MainStop default_lane_stop = 3;
  if (this->has_default_lane_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->default_lane_stop_, output);
  }

  // optional .apollo.decision.MainStop target_lane_stop = 4;
  if (this->has_target_lane_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->target_lane_stop_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.MainChangeLane)
}

::google::protobuf::uint8* MainChangeLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.MainChangeLane)
  // optional .apollo.decision.MainChangeLane.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .apollo.decision.TargetLane default_lane = 2;
  for (unsigned int i = 0, n = this->default_lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->default_lane(i), false, target);
  }

  // optional .apollo.decision.MainStop default_lane_stop = 3;
  if (this->has_default_lane_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->default_lane_stop_, false, target);
  }

  // optional .apollo.decision.MainStop target_lane_stop = 4;
  if (this->has_target_lane_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->target_lane_stop_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.MainChangeLane)
  return target;
}

int MainChangeLane::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.MainChangeLane)
  int total_size = 0;

  // optional .apollo.decision.MainChangeLane.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .apollo.decision.MainStop default_lane_stop = 3;
  if (this->has_default_lane_stop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_lane_stop_);
  }

  // optional .apollo.decision.MainStop target_lane_stop = 4;
  if (this->has_target_lane_stop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_lane_stop_);
  }

  // repeated .apollo.decision.TargetLane default_lane = 2;
  total_size += 1 * this->default_lane_size();
  for (int i = 0; i < this->default_lane_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->default_lane(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainChangeLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.MainChangeLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainChangeLane* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainChangeLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.MainChangeLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.MainChangeLane)
    MergeFrom(*source);
  }
}

void MainChangeLane::MergeFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.MainChangeLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  default_lane_.MergeFrom(from.default_lane_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_default_lane_stop()) {
    mutable_default_lane_stop()->::apollo::decision::MainStop::MergeFrom(from.default_lane_stop());
  }
  if (from.has_target_lane_stop()) {
    mutable_target_lane_stop()->::apollo::decision::MainStop::MergeFrom(from.target_lane_stop());
  }
}

void MainChangeLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainChangeLane::CopyFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainChangeLane::IsInitialized() const {

  return true;
}

void MainChangeLane::Swap(MainChangeLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainChangeLane::InternalSwap(MainChangeLane* other) {
  std::swap(type_, other->type_);
  default_lane_.UnsafeArenaSwap(&other->default_lane_);
  std::swap(default_lane_stop_, other->default_lane_stop_);
  std::swap(target_lane_stop_, other->target_lane_stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainChangeLane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainChangeLane_descriptor_;
  metadata.reflection = MainChangeLane_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainChangeLane

// optional .apollo.decision.MainChangeLane.Type type = 1;
void MainChangeLane::clear_type() {
  type_ = 0;
}
 ::apollo::decision::MainChangeLane_Type MainChangeLane::type() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainChangeLane.type)
  return static_cast< ::apollo::decision::MainChangeLane_Type >(type_);
}
 void MainChangeLane::set_type(::apollo::decision::MainChangeLane_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainChangeLane.type)
}

// repeated .apollo.decision.TargetLane default_lane = 2;
int MainChangeLane::default_lane_size() const {
  return default_lane_.size();
}
void MainChangeLane::clear_default_lane() {
  default_lane_.Clear();
}
const ::apollo::decision::TargetLane& MainChangeLane::default_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainChangeLane.default_lane)
  return default_lane_.Get(index);
}
::apollo::decision::TargetLane* MainChangeLane::mutable_default_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainChangeLane.default_lane)
  return default_lane_.Mutable(index);
}
::apollo::decision::TargetLane* MainChangeLane::add_default_lane() {
  // @@protoc_insertion_point(field_add:apollo.decision.MainChangeLane.default_lane)
  return default_lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >*
MainChangeLane::mutable_default_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.MainChangeLane.default_lane)
  return &default_lane_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >&
MainChangeLane::default_lane() const {
  // @@protoc_insertion_point(field_list:apollo.decision.MainChangeLane.default_lane)
  return default_lane_;
}

// optional .apollo.decision.MainStop default_lane_stop = 3;
bool MainChangeLane::has_default_lane_stop() const {
  return !_is_default_instance_ && default_lane_stop_ != NULL;
}
void MainChangeLane::clear_default_lane_stop() {
  if (GetArenaNoVirtual() == NULL && default_lane_stop_ != NULL) delete default_lane_stop_;
  default_lane_stop_ = NULL;
}
const ::apollo::decision::MainStop& MainChangeLane::default_lane_stop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainChangeLane.default_lane_stop)
  return default_lane_stop_ != NULL ? *default_lane_stop_ : *default_instance_->default_lane_stop_;
}
::apollo::decision::MainStop* MainChangeLane::mutable_default_lane_stop() {
  
  if (default_lane_stop_ == NULL) {
    default_lane_stop_ = new ::apollo::decision::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainChangeLane.default_lane_stop)
  return default_lane_stop_;
}
::apollo::decision::MainStop* MainChangeLane::release_default_lane_stop() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainChangeLane.default_lane_stop)
  
  ::apollo::decision::MainStop* temp = default_lane_stop_;
  default_lane_stop_ = NULL;
  return temp;
}
void MainChangeLane::set_allocated_default_lane_stop(::apollo::decision::MainStop* default_lane_stop) {
  delete default_lane_stop_;
  default_lane_stop_ = default_lane_stop;
  if (default_lane_stop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainChangeLane.default_lane_stop)
}

// optional .apollo.decision.MainStop target_lane_stop = 4;
bool MainChangeLane::has_target_lane_stop() const {
  return !_is_default_instance_ && target_lane_stop_ != NULL;
}
void MainChangeLane::clear_target_lane_stop() {
  if (GetArenaNoVirtual() == NULL && target_lane_stop_ != NULL) delete target_lane_stop_;
  target_lane_stop_ = NULL;
}
const ::apollo::decision::MainStop& MainChangeLane::target_lane_stop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainChangeLane.target_lane_stop)
  return target_lane_stop_ != NULL ? *target_lane_stop_ : *default_instance_->target_lane_stop_;
}
::apollo::decision::MainStop* MainChangeLane::mutable_target_lane_stop() {
  
  if (target_lane_stop_ == NULL) {
    target_lane_stop_ = new ::apollo::decision::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainChangeLane.target_lane_stop)
  return target_lane_stop_;
}
::apollo::decision::MainStop* MainChangeLane::release_target_lane_stop() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainChangeLane.target_lane_stop)
  
  ::apollo::decision::MainStop* temp = target_lane_stop_;
  target_lane_stop_ = NULL;
  return temp;
}
void MainChangeLane::set_allocated_target_lane_stop(::apollo::decision::MainStop* target_lane_stop) {
  delete target_lane_stop_;
  target_lane_stop_ = target_lane_stop;
  if (target_lane_stop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainChangeLane.target_lane_stop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainMissionComplete::MainMissionComplete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.MainMissionComplete)
}

void MainMissionComplete::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MainMissionComplete::MainMissionComplete(const MainMissionComplete& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.MainMissionComplete)
}

void MainMissionComplete::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MainMissionComplete::~MainMissionComplete() {
  // @@protoc_insertion_point(destructor:apollo.decision.MainMissionComplete)
  SharedDtor();
}

void MainMissionComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainMissionComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainMissionComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainMissionComplete_descriptor_;
}

const MainMissionComplete& MainMissionComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

MainMissionComplete* MainMissionComplete::default_instance_ = NULL;

MainMissionComplete* MainMissionComplete::New(::google::protobuf::Arena* arena) const {
  MainMissionComplete* n = new MainMissionComplete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainMissionComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.MainMissionComplete)
}

bool MainMissionComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.MainMissionComplete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.MainMissionComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.MainMissionComplete)
  return false;
#undef DO_
}

void MainMissionComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.MainMissionComplete)
  // @@protoc_insertion_point(serialize_end:apollo.decision.MainMissionComplete)
}

::google::protobuf::uint8* MainMissionComplete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.MainMissionComplete)
  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.MainMissionComplete)
  return target;
}

int MainMissionComplete::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.MainMissionComplete)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainMissionComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.MainMissionComplete)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainMissionComplete* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainMissionComplete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.MainMissionComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.MainMissionComplete)
    MergeFrom(*source);
  }
}

void MainMissionComplete::MergeFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.MainMissionComplete)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void MainMissionComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainMissionComplete::CopyFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMissionComplete::IsInitialized() const {

  return true;
}

void MainMissionComplete::Swap(MainMissionComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainMissionComplete::InternalSwap(MainMissionComplete* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainMissionComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainMissionComplete_descriptor_;
  metadata.reflection = MainMissionComplete_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainMissionComplete

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainNotReady::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainNotReady::MainNotReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.MainNotReady)
}

void MainNotReady::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MainNotReady::MainNotReady(const MainNotReady& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.MainNotReady)
}

void MainNotReady::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MainNotReady::~MainNotReady() {
  // @@protoc_insertion_point(destructor:apollo.decision.MainNotReady)
  SharedDtor();
}

void MainNotReady::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MainNotReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainNotReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainNotReady_descriptor_;
}

const MainNotReady& MainNotReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

MainNotReady* MainNotReady::default_instance_ = NULL;

MainNotReady* MainNotReady::New(::google::protobuf::Arena* arena) const {
  MainNotReady* n = new MainNotReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainNotReady::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.MainNotReady)
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MainNotReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.MainNotReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.decision.MainNotReady.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.MainNotReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.MainNotReady)
  return false;
#undef DO_
}

void MainNotReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.MainNotReady)
  // optional string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.MainNotReady.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.MainNotReady)
}

::google::protobuf::uint8* MainNotReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.MainNotReady)
  // optional string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.MainNotReady.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.MainNotReady)
  return target;
}

int MainNotReady::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.MainNotReady)
  int total_size = 0;

  // optional string reason = 1;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainNotReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.MainNotReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainNotReady* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainNotReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.MainNotReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.MainNotReady)
    MergeFrom(*source);
  }
}

void MainNotReady::MergeFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.MainNotReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void MainNotReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainNotReady::CopyFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainNotReady::IsInitialized() const {

  return true;
}

void MainNotReady::Swap(MainNotReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainNotReady::InternalSwap(MainNotReady* other) {
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainNotReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainNotReady_descriptor_;
  metadata.reflection = MainNotReady_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainNotReady

// optional string reason = 1;
void MainNotReady::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MainNotReady::reason() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainNotReady.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainNotReady::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.MainNotReady.reason)
}
 void MainNotReady::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.MainNotReady.reason)
}
 void MainNotReady::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.MainNotReady.reason)
}
 ::std::string* MainNotReady::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainNotReady.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MainNotReady::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainNotReady.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainNotReady::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainNotReady.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MainParking_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainParking_Type_descriptor_;
}
bool MainParking_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainParking_Type MainParking::FORWARD_PARKING;
const MainParking_Type MainParking::REVERSE_PARKING;
const MainParking_Type MainParking::Type_MIN;
const MainParking_Type MainParking::Type_MAX;
const int MainParking::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainParking::kTypeFieldNumber;
const int MainParking::kHeadingFieldNumber;
const int MainParking::kStopPointFieldNumber;
const int MainParking::kParkingPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainParking::MainParking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.MainParking)
}

void MainParking::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  stop_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

MainParking::MainParking(const MainParking& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.MainParking)
}

void MainParking::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  heading_ = 0;
  stop_point_ = NULL;
}

MainParking::~MainParking() {
  // @@protoc_insertion_point(destructor:apollo.decision.MainParking)
  SharedDtor();
}

void MainParking::SharedDtor() {
  if (this != default_instance_) {
    delete stop_point_;
  }
}

void MainParking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainParking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainParking_descriptor_;
}

const MainParking& MainParking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

MainParking* MainParking::default_instance_ = NULL;

MainParking* MainParking::New(::google::protobuf::Arena* arena) const {
  MainParking* n = new MainParking;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainParking::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.MainParking)
  type_ = 0;
  heading_ = 0;
  if (GetArenaNoVirtual() == NULL && stop_point_ != NULL) delete stop_point_;
  stop_point_ = NULL;
  parking_polygon_.Clear();
}

bool MainParking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.MainParking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.decision.MainParking.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::apollo::decision::MainParking_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_heading;
        break;
      }

      // optional double heading = 2;
      case 2: {
        if (tag == 17) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stop_point;
        break;
      }

      // optional .apollo.common.PointENU stop_point = 3;
      case 3: {
        if (tag == 26) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_parking_polygon;
        break;
      }

      // repeated .apollo.common.PointENU parking_polygon = 4;
      case 4: {
        if (tag == 34) {
         parse_parking_polygon:
          DO_(input->IncrementRecursionDepth());
         parse_loop_parking_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_parking_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_parking_polygon;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.MainParking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.MainParking)
  return false;
#undef DO_
}

void MainParking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.MainParking)
  // optional .apollo.decision.MainParking.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double heading = 2;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->heading(), output);
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (this->has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stop_point_, output);
  }

  // repeated .apollo.common.PointENU parking_polygon = 4;
  for (unsigned int i = 0, n = this->parking_polygon_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->parking_polygon(i), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.MainParking)
}

::google::protobuf::uint8* MainParking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.MainParking)
  // optional .apollo.decision.MainParking.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double heading = 2;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->heading(), target);
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (this->has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stop_point_, false, target);
  }

  // repeated .apollo.common.PointENU parking_polygon = 4;
  for (unsigned int i = 0, n = this->parking_polygon_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->parking_polygon(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.MainParking)
  return target;
}

int MainParking::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.MainParking)
  int total_size = 0;

  // optional .apollo.decision.MainParking.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional double heading = 2;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (this->has_stop_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_point_);
  }

  // repeated .apollo.common.PointENU parking_polygon = 4;
  total_size += 1 * this->parking_polygon_size();
  for (int i = 0; i < this->parking_polygon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parking_polygon(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainParking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.MainParking)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainParking* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainParking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.MainParking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.MainParking)
    MergeFrom(*source);
  }
}

void MainParking::MergeFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.MainParking)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  parking_polygon_.MergeFrom(from.parking_polygon_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.has_stop_point()) {
    mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from.stop_point());
  }
}

void MainParking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainParking::CopyFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainParking::IsInitialized() const {

  return true;
}

void MainParking::Swap(MainParking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainParking::InternalSwap(MainParking* other) {
  std::swap(type_, other->type_);
  std::swap(heading_, other->heading_);
  std::swap(stop_point_, other->stop_point_);
  parking_polygon_.UnsafeArenaSwap(&other->parking_polygon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainParking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainParking_descriptor_;
  metadata.reflection = MainParking_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainParking

// optional .apollo.decision.MainParking.Type type = 1;
void MainParking::clear_type() {
  type_ = 0;
}
 ::apollo::decision::MainParking_Type MainParking::type() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainParking.type)
  return static_cast< ::apollo::decision::MainParking_Type >(type_);
}
 void MainParking::set_type(::apollo::decision::MainParking_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainParking.type)
}

// optional double heading = 2;
void MainParking::clear_heading() {
  heading_ = 0;
}
 double MainParking::heading() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainParking.heading)
  return heading_;
}
 void MainParking::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainParking.heading)
}

// optional .apollo.common.PointENU stop_point = 3;
bool MainParking::has_stop_point() const {
  return !_is_default_instance_ && stop_point_ != NULL;
}
void MainParking::clear_stop_point() {
  if (GetArenaNoVirtual() == NULL && stop_point_ != NULL) delete stop_point_;
  stop_point_ = NULL;
}
const ::apollo::common::PointENU& MainParking::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainParking.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::apollo::common::PointENU* MainParking::mutable_stop_point() {
  
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainParking.stop_point)
  return stop_point_;
}
::apollo::common::PointENU* MainParking::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainParking.stop_point)
  
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void MainParking::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainParking.stop_point)
}

// repeated .apollo.common.PointENU parking_polygon = 4;
int MainParking::parking_polygon_size() const {
  return parking_polygon_.size();
}
void MainParking::clear_parking_polygon() {
  parking_polygon_.Clear();
}
const ::apollo::common::PointENU& MainParking::parking_polygon(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainParking.parking_polygon)
  return parking_polygon_.Get(index);
}
::apollo::common::PointENU* MainParking::mutable_parking_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainParking.parking_polygon)
  return parking_polygon_.Mutable(index);
}
::apollo::common::PointENU* MainParking::add_parking_polygon() {
  // @@protoc_insertion_point(field_add:apollo.decision.MainParking.parking_polygon)
  return parking_polygon_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >*
MainParking::mutable_parking_polygon() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.MainParking.parking_polygon)
  return &parking_polygon_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >&
MainParking::parking_polygon() const {
  // @@protoc_insertion_point(field_list:apollo.decision.MainParking.parking_polygon)
  return parking_polygon_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainDecision::kCruiseFieldNumber;
const int MainDecision::kStopFieldNumber;
const int MainDecision::kEstopFieldNumber;
const int MainDecision::kChangeLaneFieldNumber;
const int MainDecision::kMissionCompleteFieldNumber;
const int MainDecision::kNotReadyFieldNumber;
const int MainDecision::kParkingFieldNumber;
const int MainDecision::kTargetLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainDecision::MainDecision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.MainDecision)
}

void MainDecision::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  MainDecision_default_oneof_instance_->cruise_ = const_cast< ::apollo::decision::MainCruise*>(&::apollo::decision::MainCruise::default_instance());
  MainDecision_default_oneof_instance_->stop_ = const_cast< ::apollo::decision::MainStop*>(&::apollo::decision::MainStop::default_instance());
  MainDecision_default_oneof_instance_->estop_ = const_cast< ::apollo::decision::MainEmergencyStop*>(&::apollo::decision::MainEmergencyStop::default_instance());
  MainDecision_default_oneof_instance_->change_lane_ = const_cast< ::apollo::decision::MainChangeLane*>(&::apollo::decision::MainChangeLane::default_instance());
  MainDecision_default_oneof_instance_->mission_complete_ = const_cast< ::apollo::decision::MainMissionComplete*>(&::apollo::decision::MainMissionComplete::default_instance());
  MainDecision_default_oneof_instance_->not_ready_ = const_cast< ::apollo::decision::MainNotReady*>(&::apollo::decision::MainNotReady::default_instance());
  MainDecision_default_oneof_instance_->parking_ = const_cast< ::apollo::decision::MainParking*>(&::apollo::decision::MainParking::default_instance());
}

MainDecision::MainDecision(const MainDecision& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.MainDecision)
}

void MainDecision::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_task();
}

MainDecision::~MainDecision() {
  // @@protoc_insertion_point(destructor:apollo.decision.MainDecision)
  SharedDtor();
}

void MainDecision::SharedDtor() {
  if (has_task()) {
    clear_task();
  }
  if (this != default_instance_) {
  }
}

void MainDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainDecision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainDecision_descriptor_;
}

const MainDecision& MainDecision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

MainDecision* MainDecision::default_instance_ = NULL;

MainDecision* MainDecision::New(::google::protobuf::Arena* arena) const {
  MainDecision* n = new MainDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainDecision::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:apollo.decision.MainDecision)
  switch(task_case()) {
    case kCruise: {
      delete task_.cruise_;
      break;
    }
    case kStop: {
      delete task_.stop_;
      break;
    }
    case kEstop: {
      delete task_.estop_;
      break;
    }
    case kChangeLane: {
      delete task_.change_lane_;
      break;
    }
    case kMissionComplete: {
      delete task_.mission_complete_;
      break;
    }
    case kNotReady: {
      delete task_.not_ready_;
      break;
    }
    case kParking: {
      delete task_.parking_;
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void MainDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.MainDecision)
  target_lane_.Clear();
  clear_task();
}

bool MainDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.MainDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.decision.MainCruise cruise = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cruise()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stop;
        break;
      }

      // optional .apollo.decision.MainStop stop = 2;
      case 2: {
        if (tag == 18) {
         parse_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_estop;
        break;
      }

      // optional .apollo.decision.MainEmergencyStop estop = 3;
      case 3: {
        if (tag == 26) {
         parse_estop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_change_lane;
        break;
      }

      // optional .apollo.decision.MainChangeLane change_lane = 4;
      case 4: {
        if (tag == 34) {
         parse_change_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_target_lane;
        break;
      }

      // repeated .apollo.decision.TargetLane target_lane = 5;
      case 5: {
        if (tag == 42) {
         parse_target_lane:
          DO_(input->IncrementRecursionDepth());
         parse_loop_target_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_target_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_target_lane;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_mission_complete;
        break;
      }

      // optional .apollo.decision.MainMissionComplete mission_complete = 6;
      case 6: {
        if (tag == 50) {
         parse_mission_complete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_complete()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_not_ready;
        break;
      }

      // optional .apollo.decision.MainNotReady not_ready = 7;
      case 7: {
        if (tag == 58) {
         parse_not_ready:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_ready()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_parking;
        break;
      }

      // optional .apollo.decision.MainParking parking = 8;
      case 8: {
        if (tag == 66) {
         parse_parking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parking()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.MainDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.MainDecision)
  return false;
#undef DO_
}

void MainDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.MainDecision)
  // optional .apollo.decision.MainCruise cruise = 1;
  if (has_cruise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *task_.cruise_, output);
  }

  // optional .apollo.decision.MainStop stop = 2;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *task_.stop_, output);
  }

  // optional .apollo.decision.MainEmergencyStop estop = 3;
  if (has_estop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *task_.estop_, output);
  }

  // optional .apollo.decision.MainChangeLane change_lane = 4;
  if (has_change_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *task_.change_lane_, output);
  }

  // repeated .apollo.decision.TargetLane target_lane = 5;
  for (unsigned int i = 0, n = this->target_lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->target_lane(i), output);
  }

  // optional .apollo.decision.MainMissionComplete mission_complete = 6;
  if (has_mission_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *task_.mission_complete_, output);
  }

  // optional .apollo.decision.MainNotReady not_ready = 7;
  if (has_not_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *task_.not_ready_, output);
  }

  // optional .apollo.decision.MainParking parking = 8;
  if (has_parking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *task_.parking_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.MainDecision)
}

::google::protobuf::uint8* MainDecision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.MainDecision)
  // optional .apollo.decision.MainCruise cruise = 1;
  if (has_cruise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *task_.cruise_, false, target);
  }

  // optional .apollo.decision.MainStop stop = 2;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *task_.stop_, false, target);
  }

  // optional .apollo.decision.MainEmergencyStop estop = 3;
  if (has_estop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *task_.estop_, false, target);
  }

  // optional .apollo.decision.MainChangeLane change_lane = 4;
  if (has_change_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *task_.change_lane_, false, target);
  }

  // repeated .apollo.decision.TargetLane target_lane = 5;
  for (unsigned int i = 0, n = this->target_lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->target_lane(i), false, target);
  }

  // optional .apollo.decision.MainMissionComplete mission_complete = 6;
  if (has_mission_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *task_.mission_complete_, false, target);
  }

  // optional .apollo.decision.MainNotReady not_ready = 7;
  if (has_not_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *task_.not_ready_, false, target);
  }

  // optional .apollo.decision.MainParking parking = 8;
  if (has_parking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *task_.parking_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.MainDecision)
  return target;
}

int MainDecision::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.MainDecision)
  int total_size = 0;

  // repeated .apollo.decision.TargetLane target_lane = 5;
  total_size += 1 * this->target_lane_size();
  for (int i = 0; i < this->target_lane_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_lane(i));
  }

  switch (task_case()) {
    // optional .apollo.decision.MainCruise cruise = 1;
    case kCruise: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.cruise_);
      break;
    }
    // optional .apollo.decision.MainStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.stop_);
      break;
    }
    // optional .apollo.decision.MainEmergencyStop estop = 3;
    case kEstop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.estop_);
      break;
    }
    // optional .apollo.decision.MainChangeLane change_lane = 4;
    case kChangeLane: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.change_lane_);
      break;
    }
    // optional .apollo.decision.MainMissionComplete mission_complete = 6;
    case kMissionComplete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.mission_complete_);
      break;
    }
    // optional .apollo.decision.MainNotReady not_ready = 7;
    case kNotReady: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.not_ready_);
      break;
    }
    // optional .apollo.decision.MainParking parking = 8;
    case kParking: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.parking_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainDecision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.MainDecision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainDecision* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainDecision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.MainDecision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.MainDecision)
    MergeFrom(*source);
  }
}

void MainDecision::MergeFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.MainDecision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  target_lane_.MergeFrom(from.target_lane_);
  switch (from.task_case()) {
    case kCruise: {
      mutable_cruise()->::apollo::decision::MainCruise::MergeFrom(from.cruise());
      break;
    }
    case kStop: {
      mutable_stop()->::apollo::decision::MainStop::MergeFrom(from.stop());
      break;
    }
    case kEstop: {
      mutable_estop()->::apollo::decision::MainEmergencyStop::MergeFrom(from.estop());
      break;
    }
    case kChangeLane: {
      mutable_change_lane()->::apollo::decision::MainChangeLane::MergeFrom(from.change_lane());
      break;
    }
    case kMissionComplete: {
      mutable_mission_complete()->::apollo::decision::MainMissionComplete::MergeFrom(from.mission_complete());
      break;
    }
    case kNotReady: {
      mutable_not_ready()->::apollo::decision::MainNotReady::MergeFrom(from.not_ready());
      break;
    }
    case kParking: {
      mutable_parking()->::apollo::decision::MainParking::MergeFrom(from.parking());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
}

void MainDecision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainDecision::CopyFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainDecision::IsInitialized() const {

  return true;
}

void MainDecision::Swap(MainDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainDecision::InternalSwap(MainDecision* other) {
  target_lane_.UnsafeArenaSwap(&other->target_lane_);
  std::swap(task_, other->task_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainDecision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainDecision_descriptor_;
  metadata.reflection = MainDecision_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainDecision

// optional .apollo.decision.MainCruise cruise = 1;
bool MainDecision::has_cruise() const {
  return task_case() == kCruise;
}
void MainDecision::set_has_cruise() {
  _oneof_case_[0] = kCruise;
}
void MainDecision::clear_cruise() {
  if (has_cruise()) {
    delete task_.cruise_;
    clear_has_task();
  }
}
 const ::apollo::decision::MainCruise& MainDecision::cruise() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.cruise)
  return has_cruise()
      ? *task_.cruise_
      : ::apollo::decision::MainCruise::default_instance();
}
::apollo::decision::MainCruise* MainDecision::mutable_cruise() {
  if (!has_cruise()) {
    clear_task();
    set_has_cruise();
    task_.cruise_ = new ::apollo::decision::MainCruise;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.cruise)
  return task_.cruise_;
}
::apollo::decision::MainCruise* MainDecision::release_cruise() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.cruise)
  if (has_cruise()) {
    clear_has_task();
    ::apollo::decision::MainCruise* temp = task_.cruise_;
    task_.cruise_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_cruise(::apollo::decision::MainCruise* cruise) {
  clear_task();
  if (cruise) {
    set_has_cruise();
    task_.cruise_ = cruise;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.cruise)
}

// optional .apollo.decision.MainStop stop = 2;
bool MainDecision::has_stop() const {
  return task_case() == kStop;
}
void MainDecision::set_has_stop() {
  _oneof_case_[0] = kStop;
}
void MainDecision::clear_stop() {
  if (has_stop()) {
    delete task_.stop_;
    clear_has_task();
  }
}
 const ::apollo::decision::MainStop& MainDecision::stop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.stop)
  return has_stop()
      ? *task_.stop_
      : ::apollo::decision::MainStop::default_instance();
}
::apollo::decision::MainStop* MainDecision::mutable_stop() {
  if (!has_stop()) {
    clear_task();
    set_has_stop();
    task_.stop_ = new ::apollo::decision::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.stop)
  return task_.stop_;
}
::apollo::decision::MainStop* MainDecision::release_stop() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.stop)
  if (has_stop()) {
    clear_has_task();
    ::apollo::decision::MainStop* temp = task_.stop_;
    task_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_stop(::apollo::decision::MainStop* stop) {
  clear_task();
  if (stop) {
    set_has_stop();
    task_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.stop)
}

// optional .apollo.decision.MainEmergencyStop estop = 3;
bool MainDecision::has_estop() const {
  return task_case() == kEstop;
}
void MainDecision::set_has_estop() {
  _oneof_case_[0] = kEstop;
}
void MainDecision::clear_estop() {
  if (has_estop()) {
    delete task_.estop_;
    clear_has_task();
  }
}
 const ::apollo::decision::MainEmergencyStop& MainDecision::estop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.estop)
  return has_estop()
      ? *task_.estop_
      : ::apollo::decision::MainEmergencyStop::default_instance();
}
::apollo::decision::MainEmergencyStop* MainDecision::mutable_estop() {
  if (!has_estop()) {
    clear_task();
    set_has_estop();
    task_.estop_ = new ::apollo::decision::MainEmergencyStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.estop)
  return task_.estop_;
}
::apollo::decision::MainEmergencyStop* MainDecision::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.estop)
  if (has_estop()) {
    clear_has_task();
    ::apollo::decision::MainEmergencyStop* temp = task_.estop_;
    task_.estop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_estop(::apollo::decision::MainEmergencyStop* estop) {
  clear_task();
  if (estop) {
    set_has_estop();
    task_.estop_ = estop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.estop)
}

// optional .apollo.decision.MainChangeLane change_lane = 4;
bool MainDecision::has_change_lane() const {
  return task_case() == kChangeLane;
}
void MainDecision::set_has_change_lane() {
  _oneof_case_[0] = kChangeLane;
}
void MainDecision::clear_change_lane() {
  if (has_change_lane()) {
    delete task_.change_lane_;
    clear_has_task();
  }
}
 const ::apollo::decision::MainChangeLane& MainDecision::change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.change_lane)
  return has_change_lane()
      ? *task_.change_lane_
      : ::apollo::decision::MainChangeLane::default_instance();
}
::apollo::decision::MainChangeLane* MainDecision::mutable_change_lane() {
  if (!has_change_lane()) {
    clear_task();
    set_has_change_lane();
    task_.change_lane_ = new ::apollo::decision::MainChangeLane;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.change_lane)
  return task_.change_lane_;
}
::apollo::decision::MainChangeLane* MainDecision::release_change_lane() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.change_lane)
  if (has_change_lane()) {
    clear_has_task();
    ::apollo::decision::MainChangeLane* temp = task_.change_lane_;
    task_.change_lane_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_change_lane(::apollo::decision::MainChangeLane* change_lane) {
  clear_task();
  if (change_lane) {
    set_has_change_lane();
    task_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.change_lane)
}

// optional .apollo.decision.MainMissionComplete mission_complete = 6;
bool MainDecision::has_mission_complete() const {
  return task_case() == kMissionComplete;
}
void MainDecision::set_has_mission_complete() {
  _oneof_case_[0] = kMissionComplete;
}
void MainDecision::clear_mission_complete() {
  if (has_mission_complete()) {
    delete task_.mission_complete_;
    clear_has_task();
  }
}
 const ::apollo::decision::MainMissionComplete& MainDecision::mission_complete() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.mission_complete)
  return has_mission_complete()
      ? *task_.mission_complete_
      : ::apollo::decision::MainMissionComplete::default_instance();
}
::apollo::decision::MainMissionComplete* MainDecision::mutable_mission_complete() {
  if (!has_mission_complete()) {
    clear_task();
    set_has_mission_complete();
    task_.mission_complete_ = new ::apollo::decision::MainMissionComplete;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.mission_complete)
  return task_.mission_complete_;
}
::apollo::decision::MainMissionComplete* MainDecision::release_mission_complete() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.mission_complete)
  if (has_mission_complete()) {
    clear_has_task();
    ::apollo::decision::MainMissionComplete* temp = task_.mission_complete_;
    task_.mission_complete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_mission_complete(::apollo::decision::MainMissionComplete* mission_complete) {
  clear_task();
  if (mission_complete) {
    set_has_mission_complete();
    task_.mission_complete_ = mission_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.mission_complete)
}

// optional .apollo.decision.MainNotReady not_ready = 7;
bool MainDecision::has_not_ready() const {
  return task_case() == kNotReady;
}
void MainDecision::set_has_not_ready() {
  _oneof_case_[0] = kNotReady;
}
void MainDecision::clear_not_ready() {
  if (has_not_ready()) {
    delete task_.not_ready_;
    clear_has_task();
  }
}
 const ::apollo::decision::MainNotReady& MainDecision::not_ready() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.not_ready)
  return has_not_ready()
      ? *task_.not_ready_
      : ::apollo::decision::MainNotReady::default_instance();
}
::apollo::decision::MainNotReady* MainDecision::mutable_not_ready() {
  if (!has_not_ready()) {
    clear_task();
    set_has_not_ready();
    task_.not_ready_ = new ::apollo::decision::MainNotReady;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.not_ready)
  return task_.not_ready_;
}
::apollo::decision::MainNotReady* MainDecision::release_not_ready() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.not_ready)
  if (has_not_ready()) {
    clear_has_task();
    ::apollo::decision::MainNotReady* temp = task_.not_ready_;
    task_.not_ready_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_not_ready(::apollo::decision::MainNotReady* not_ready) {
  clear_task();
  if (not_ready) {
    set_has_not_ready();
    task_.not_ready_ = not_ready;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.not_ready)
}

// optional .apollo.decision.MainParking parking = 8;
bool MainDecision::has_parking() const {
  return task_case() == kParking;
}
void MainDecision::set_has_parking() {
  _oneof_case_[0] = kParking;
}
void MainDecision::clear_parking() {
  if (has_parking()) {
    delete task_.parking_;
    clear_has_task();
  }
}
 const ::apollo::decision::MainParking& MainDecision::parking() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.parking)
  return has_parking()
      ? *task_.parking_
      : ::apollo::decision::MainParking::default_instance();
}
::apollo::decision::MainParking* MainDecision::mutable_parking() {
  if (!has_parking()) {
    clear_task();
    set_has_parking();
    task_.parking_ = new ::apollo::decision::MainParking;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.parking)
  return task_.parking_;
}
::apollo::decision::MainParking* MainDecision::release_parking() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.parking)
  if (has_parking()) {
    clear_has_task();
    ::apollo::decision::MainParking* temp = task_.parking_;
    task_.parking_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_parking(::apollo::decision::MainParking* parking) {
  clear_task();
  if (parking) {
    set_has_parking();
    task_.parking_ = parking;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.parking)
}

// repeated .apollo.decision.TargetLane target_lane = 5;
int MainDecision::target_lane_size() const {
  return target_lane_.size();
}
void MainDecision::clear_target_lane() {
  target_lane_.Clear();
}
const ::apollo::decision::TargetLane& MainDecision::target_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.target_lane)
  return target_lane_.Get(index);
}
::apollo::decision::TargetLane* MainDecision::mutable_target_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.target_lane)
  return target_lane_.Mutable(index);
}
::apollo::decision::TargetLane* MainDecision::add_target_lane() {
  // @@protoc_insertion_point(field_add:apollo.decision.MainDecision.target_lane)
  return target_lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >*
MainDecision::mutable_target_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.MainDecision.target_lane)
  return &target_lane_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >&
MainDecision::target_lane() const {
  // @@protoc_insertion_point(field_list:apollo.decision.MainDecision.target_lane)
  return target_lane_;
}

bool MainDecision::has_task() const {
  return task_case() != TASK_NOT_SET;
}
void MainDecision::clear_has_task() {
  _oneof_case_[0] = TASK_NOT_SET;
}
MainDecision::TaskCase MainDecision::task_case() const {
  return MainDecision::TaskCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterVehicleDebug::kPositionFieldNumber;
const int MasterVehicleDebug::kCurrentLaneIdFieldNumber;
const int MasterVehicleDebug::kLaneSFieldNumber;
const int MasterVehicleDebug::kLaneLFieldNumber;
const int MasterVehicleDebug::kRouteSFieldNumber;
const int MasterVehicleDebug::kRouteLFieldNumber;
const int MasterVehicleDebug::kHeadingFieldNumber;
const int MasterVehicleDebug::kHeadingSpeedFieldNumber;
const int MasterVehicleDebug::kHeadingAccelerationFieldNumber;
const int MasterVehicleDebug::kRouteSRangeFieldNumber;
const int MasterVehicleDebug::kRouteLRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterVehicleDebug::MasterVehicleDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.MasterVehicleDebug)
}

void MasterVehicleDebug::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
  route_s_range_ = const_cast< ::apollo::decision::Range*>(&::apollo::decision::Range::default_instance());
  route_l_range_ = const_cast< ::apollo::decision::Range*>(&::apollo::decision::Range::default_instance());
}

MasterVehicleDebug::MasterVehicleDebug(const MasterVehicleDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.MasterVehicleDebug)
}

void MasterVehicleDebug::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  position_ = NULL;
  current_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_s_ = 0;
  lane_l_ = 0;
  route_s_ = 0;
  route_l_ = 0;
  heading_ = 0;
  heading_speed_ = 0;
  heading_acceleration_ = 0;
  route_s_range_ = NULL;
  route_l_range_ = NULL;
}

MasterVehicleDebug::~MasterVehicleDebug() {
  // @@protoc_insertion_point(destructor:apollo.decision.MasterVehicleDebug)
  SharedDtor();
}

void MasterVehicleDebug::SharedDtor() {
  current_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete position_;
    delete route_s_range_;
    delete route_l_range_;
  }
}

void MasterVehicleDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterVehicleDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterVehicleDebug_descriptor_;
}

const MasterVehicleDebug& MasterVehicleDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

MasterVehicleDebug* MasterVehicleDebug::default_instance_ = NULL;

MasterVehicleDebug* MasterVehicleDebug::New(::google::protobuf::Arena* arena) const {
  MasterVehicleDebug* n = new MasterVehicleDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterVehicleDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.MasterVehicleDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MasterVehicleDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MasterVehicleDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lane_s_, heading_speed_);
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  current_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heading_acceleration_ = 0;
  if (GetArenaNoVirtual() == NULL && route_s_range_ != NULL) delete route_s_range_;
  route_s_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && route_l_range_ != NULL) delete route_l_range_;
  route_l_range_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MasterVehicleDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.MasterVehicleDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.PointENU position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_current_lane_id;
        break;
      }

      // optional string current_lane_id = 2;
      case 2: {
        if (tag == 18) {
         parse_current_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->current_lane_id().data(), this->current_lane_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.decision.MasterVehicleDebug.current_lane_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lane_s;
        break;
      }

      // optional double lane_s = 3;
      case 3: {
        if (tag == 25) {
         parse_lane_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lane_l;
        break;
      }

      // optional double lane_l = 4;
      case 4: {
        if (tag == 33) {
         parse_lane_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_l_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_route_s;
        break;
      }

      // optional double route_s = 5;
      case 5: {
        if (tag == 41) {
         parse_route_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &route_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_route_l;
        break;
      }

      // optional double route_l = 6;
      case 6: {
        if (tag == 49) {
         parse_route_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &route_l_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_heading;
        break;
      }

      // optional double heading = 7;
      case 7: {
        if (tag == 57) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_heading_speed;
        break;
      }

      // optional double heading_speed = 8;
      case 8: {
        if (tag == 65) {
         parse_heading_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_heading_acceleration;
        break;
      }

      // optional double heading_acceleration = 9;
      case 9: {
        if (tag == 73) {
         parse_heading_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_acceleration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_route_s_range;
        break;
      }

      // optional .apollo.decision.Range route_s_range = 10;
      case 10: {
        if (tag == 82) {
         parse_route_s_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_s_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_route_l_range;
        break;
      }

      // optional .apollo.decision.Range route_l_range = 11;
      case 11: {
        if (tag == 90) {
         parse_route_l_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_l_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.MasterVehicleDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.MasterVehicleDebug)
  return false;
#undef DO_
}

void MasterVehicleDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.MasterVehicleDebug)
  // optional .apollo.common.PointENU position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional string current_lane_id = 2;
  if (this->current_lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_lane_id().data(), this->current_lane_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.MasterVehicleDebug.current_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->current_lane_id(), output);
  }

  // optional double lane_s = 3;
  if (this->lane_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lane_s(), output);
  }

  // optional double lane_l = 4;
  if (this->lane_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lane_l(), output);
  }

  // optional double route_s = 5;
  if (this->route_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->route_s(), output);
  }

  // optional double route_l = 6;
  if (this->route_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->route_l(), output);
  }

  // optional double heading = 7;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->heading(), output);
  }

  // optional double heading_speed = 8;
  if (this->heading_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->heading_speed(), output);
  }

  // optional double heading_acceleration = 9;
  if (this->heading_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->heading_acceleration(), output);
  }

  // optional .apollo.decision.Range route_s_range = 10;
  if (this->has_route_s_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->route_s_range_, output);
  }

  // optional .apollo.decision.Range route_l_range = 11;
  if (this->has_route_l_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->route_l_range_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.MasterVehicleDebug)
}

::google::protobuf::uint8* MasterVehicleDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.MasterVehicleDebug)
  // optional .apollo.common.PointENU position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, false, target);
  }

  // optional string current_lane_id = 2;
  if (this->current_lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_lane_id().data(), this->current_lane_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.MasterVehicleDebug.current_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->current_lane_id(), target);
  }

  // optional double lane_s = 3;
  if (this->lane_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lane_s(), target);
  }

  // optional double lane_l = 4;
  if (this->lane_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lane_l(), target);
  }

  // optional double route_s = 5;
  if (this->route_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->route_s(), target);
  }

  // optional double route_l = 6;
  if (this->route_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->route_l(), target);
  }

  // optional double heading = 7;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->heading(), target);
  }

  // optional double heading_speed = 8;
  if (this->heading_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->heading_speed(), target);
  }

  // optional double heading_acceleration = 9;
  if (this->heading_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->heading_acceleration(), target);
  }

  // optional .apollo.decision.Range route_s_range = 10;
  if (this->has_route_s_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->route_s_range_, false, target);
  }

  // optional .apollo.decision.Range route_l_range = 11;
  if (this->has_route_l_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->route_l_range_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.MasterVehicleDebug)
  return target;
}

int MasterVehicleDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.MasterVehicleDebug)
  int total_size = 0;

  // optional .apollo.common.PointENU position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional string current_lane_id = 2;
  if (this->current_lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_lane_id());
  }

  // optional double lane_s = 3;
  if (this->lane_s() != 0) {
    total_size += 1 + 8;
  }

  // optional double lane_l = 4;
  if (this->lane_l() != 0) {
    total_size += 1 + 8;
  }

  // optional double route_s = 5;
  if (this->route_s() != 0) {
    total_size += 1 + 8;
  }

  // optional double route_l = 6;
  if (this->route_l() != 0) {
    total_size += 1 + 8;
  }

  // optional double heading = 7;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // optional double heading_speed = 8;
  if (this->heading_speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double heading_acceleration = 9;
  if (this->heading_acceleration() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.decision.Range route_s_range = 10;
  if (this->has_route_s_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_s_range_);
  }

  // optional .apollo.decision.Range route_l_range = 11;
  if (this->has_route_l_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_l_range_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterVehicleDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.MasterVehicleDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterVehicleDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterVehicleDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.MasterVehicleDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.MasterVehicleDebug)
    MergeFrom(*source);
  }
}

void MasterVehicleDebug::MergeFrom(const MasterVehicleDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.MasterVehicleDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_position()) {
    mutable_position()->::apollo::common::PointENU::MergeFrom(from.position());
  }
  if (from.current_lane_id().size() > 0) {

    current_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_lane_id_);
  }
  if (from.lane_s() != 0) {
    set_lane_s(from.lane_s());
  }
  if (from.lane_l() != 0) {
    set_lane_l(from.lane_l());
  }
  if (from.route_s() != 0) {
    set_route_s(from.route_s());
  }
  if (from.route_l() != 0) {
    set_route_l(from.route_l());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.heading_speed() != 0) {
    set_heading_speed(from.heading_speed());
  }
  if (from.heading_acceleration() != 0) {
    set_heading_acceleration(from.heading_acceleration());
  }
  if (from.has_route_s_range()) {
    mutable_route_s_range()->::apollo::decision::Range::MergeFrom(from.route_s_range());
  }
  if (from.has_route_l_range()) {
    mutable_route_l_range()->::apollo::decision::Range::MergeFrom(from.route_l_range());
  }
}

void MasterVehicleDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.MasterVehicleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterVehicleDebug::CopyFrom(const MasterVehicleDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.MasterVehicleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterVehicleDebug::IsInitialized() const {

  return true;
}

void MasterVehicleDebug::Swap(MasterVehicleDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterVehicleDebug::InternalSwap(MasterVehicleDebug* other) {
  std::swap(position_, other->position_);
  current_lane_id_.Swap(&other->current_lane_id_);
  std::swap(lane_s_, other->lane_s_);
  std::swap(lane_l_, other->lane_l_);
  std::swap(route_s_, other->route_s_);
  std::swap(route_l_, other->route_l_);
  std::swap(heading_, other->heading_);
  std::swap(heading_speed_, other->heading_speed_);
  std::swap(heading_acceleration_, other->heading_acceleration_);
  std::swap(route_s_range_, other->route_s_range_);
  std::swap(route_l_range_, other->route_l_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterVehicleDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterVehicleDebug_descriptor_;
  metadata.reflection = MasterVehicleDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MasterVehicleDebug

// optional .apollo.common.PointENU position = 1;
bool MasterVehicleDebug::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void MasterVehicleDebug::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::apollo::common::PointENU& MasterVehicleDebug::position() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::apollo::common::PointENU* MasterVehicleDebug::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MasterVehicleDebug.position)
  return position_;
}
::apollo::common::PointENU* MasterVehicleDebug::release_position() {
  // @@protoc_insertion_point(field_release:apollo.decision.MasterVehicleDebug.position)
  
  ::apollo::common::PointENU* temp = position_;
  position_ = NULL;
  return temp;
}
void MasterVehicleDebug::set_allocated_position(::apollo::common::PointENU* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MasterVehicleDebug.position)
}

// optional string current_lane_id = 2;
void MasterVehicleDebug::clear_current_lane_id() {
  current_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MasterVehicleDebug::current_lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.current_lane_id)
  return current_lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterVehicleDebug::set_current_lane_id(const ::std::string& value) {
  
  current_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.current_lane_id)
}
 void MasterVehicleDebug::set_current_lane_id(const char* value) {
  
  current_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.MasterVehicleDebug.current_lane_id)
}
 void MasterVehicleDebug::set_current_lane_id(const char* value, size_t size) {
  
  current_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.MasterVehicleDebug.current_lane_id)
}
 ::std::string* MasterVehicleDebug::mutable_current_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.MasterVehicleDebug.current_lane_id)
  return current_lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterVehicleDebug::release_current_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.MasterVehicleDebug.current_lane_id)
  
  return current_lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterVehicleDebug::set_allocated_current_lane_id(::std::string* current_lane_id) {
  if (current_lane_id != NULL) {
    
  } else {
    
  }
  current_lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MasterVehicleDebug.current_lane_id)
}

// optional double lane_s = 3;
void MasterVehicleDebug::clear_lane_s() {
  lane_s_ = 0;
}
 double MasterVehicleDebug::lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.lane_s)
  return lane_s_;
}
 void MasterVehicleDebug::set_lane_s(double value) {
  
  lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.lane_s)
}

// optional double lane_l = 4;
void MasterVehicleDebug::clear_lane_l() {
  lane_l_ = 0;
}
 double MasterVehicleDebug::lane_l() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.lane_l)
  return lane_l_;
}
 void MasterVehicleDebug::set_lane_l(double value) {
  
  lane_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.lane_l)
}

// optional double route_s = 5;
void MasterVehicleDebug::clear_route_s() {
  route_s_ = 0;
}
 double MasterVehicleDebug::route_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.route_s)
  return route_s_;
}
 void MasterVehicleDebug::set_route_s(double value) {
  
  route_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.route_s)
}

// optional double route_l = 6;
void MasterVehicleDebug::clear_route_l() {
  route_l_ = 0;
}
 double MasterVehicleDebug::route_l() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.route_l)
  return route_l_;
}
 void MasterVehicleDebug::set_route_l(double value) {
  
  route_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.route_l)
}

// optional double heading = 7;
void MasterVehicleDebug::clear_heading() {
  heading_ = 0;
}
 double MasterVehicleDebug::heading() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.heading)
  return heading_;
}
 void MasterVehicleDebug::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.heading)
}

// optional double heading_speed = 8;
void MasterVehicleDebug::clear_heading_speed() {
  heading_speed_ = 0;
}
 double MasterVehicleDebug::heading_speed() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.heading_speed)
  return heading_speed_;
}
 void MasterVehicleDebug::set_heading_speed(double value) {
  
  heading_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.heading_speed)
}

// optional double heading_acceleration = 9;
void MasterVehicleDebug::clear_heading_acceleration() {
  heading_acceleration_ = 0;
}
 double MasterVehicleDebug::heading_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.heading_acceleration)
  return heading_acceleration_;
}
 void MasterVehicleDebug::set_heading_acceleration(double value) {
  
  heading_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.heading_acceleration)
}

// optional .apollo.decision.Range route_s_range = 10;
bool MasterVehicleDebug::has_route_s_range() const {
  return !_is_default_instance_ && route_s_range_ != NULL;
}
void MasterVehicleDebug::clear_route_s_range() {
  if (GetArenaNoVirtual() == NULL && route_s_range_ != NULL) delete route_s_range_;
  route_s_range_ = NULL;
}
const ::apollo::decision::Range& MasterVehicleDebug::route_s_range() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.route_s_range)
  return route_s_range_ != NULL ? *route_s_range_ : *default_instance_->route_s_range_;
}
::apollo::decision::Range* MasterVehicleDebug::mutable_route_s_range() {
  
  if (route_s_range_ == NULL) {
    route_s_range_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MasterVehicleDebug.route_s_range)
  return route_s_range_;
}
::apollo::decision::Range* MasterVehicleDebug::release_route_s_range() {
  // @@protoc_insertion_point(field_release:apollo.decision.MasterVehicleDebug.route_s_range)
  
  ::apollo::decision::Range* temp = route_s_range_;
  route_s_range_ = NULL;
  return temp;
}
void MasterVehicleDebug::set_allocated_route_s_range(::apollo::decision::Range* route_s_range) {
  delete route_s_range_;
  route_s_range_ = route_s_range;
  if (route_s_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MasterVehicleDebug.route_s_range)
}

// optional .apollo.decision.Range route_l_range = 11;
bool MasterVehicleDebug::has_route_l_range() const {
  return !_is_default_instance_ && route_l_range_ != NULL;
}
void MasterVehicleDebug::clear_route_l_range() {
  if (GetArenaNoVirtual() == NULL && route_l_range_ != NULL) delete route_l_range_;
  route_l_range_ = NULL;
}
const ::apollo::decision::Range& MasterVehicleDebug::route_l_range() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.route_l_range)
  return route_l_range_ != NULL ? *route_l_range_ : *default_instance_->route_l_range_;
}
::apollo::decision::Range* MasterVehicleDebug::mutable_route_l_range() {
  
  if (route_l_range_ == NULL) {
    route_l_range_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MasterVehicleDebug.route_l_range)
  return route_l_range_;
}
::apollo::decision::Range* MasterVehicleDebug::release_route_l_range() {
  // @@protoc_insertion_point(field_release:apollo.decision.MasterVehicleDebug.route_l_range)
  
  ::apollo::decision::Range* temp = route_l_range_;
  route_l_range_ = NULL;
  return temp;
}
void MasterVehicleDebug::set_allocated_route_l_range(::apollo::decision::Range* route_l_range) {
  delete route_l_range_;
  route_l_range_ = route_l_range;
  if (route_l_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MasterVehicleDebug.route_l_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDebug::kIdFieldNumber;
const int ObjectDebug::kPathIdFieldNumber;
const int ObjectDebug::kRouteSFieldNumber;
const int ObjectDebug::kRouteLFieldNumber;
const int ObjectDebug::kOnRouteFieldNumber;
const int ObjectDebug::kLaneIdFieldNumber;
const int ObjectDebug::kLaneSFieldNumber;
const int ObjectDebug::kOnLaneFieldNumber;
const int ObjectDebug::kPathSpeedFieldNumber;
const int ObjectDebug::kStRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDebug::ObjectDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ObjectDebug)
}

void ObjectDebug::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  route_s_ = const_cast< ::apollo::decision::Range*>(&::apollo::decision::Range::default_instance());
  route_l_ = const_cast< ::apollo::decision::Range*>(&::apollo::decision::Range::default_instance());
}

ObjectDebug::ObjectDebug(const ObjectDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ObjectDebug)
}

void ObjectDebug::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_s_ = NULL;
  route_l_ = NULL;
  on_route_ = false;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_s_ = 0;
  on_lane_ = false;
  path_speed_ = 0;
}

ObjectDebug::~ObjectDebug() {
  // @@protoc_insertion_point(destructor:apollo.decision.ObjectDebug)
  SharedDtor();
}

void ObjectDebug::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete route_s_;
    delete route_l_;
  }
}

void ObjectDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDebug_descriptor_;
}

const ObjectDebug& ObjectDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ObjectDebug* ObjectDebug::default_instance_ = NULL;

ObjectDebug* ObjectDebug::New(::google::protobuf::Arena* arena) const {
  ObjectDebug* n = new ObjectDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ObjectDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ObjectDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ObjectDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(on_route_, on_lane_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && route_s_ != NULL) delete route_s_;
  route_s_ = NULL;
  if (GetArenaNoVirtual() == NULL && route_l_ != NULL) delete route_l_;
  route_l_ = NULL;
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_s_ = 0;
  path_speed_ = 0;

#undef ZR_HELPER_
#undef ZR_

  st_region_.Clear();
}

bool ObjectDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ObjectDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.decision.ObjectDebug.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path_id;
        break;
      }

      // optional string path_id = 2;
      case 2: {
        if (tag == 18) {
         parse_path_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path_id().data(), this->path_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.decision.ObjectDebug.path_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_route_s;
        break;
      }

      // optional .apollo.decision.Range route_s = 3;
      case 3: {
        if (tag == 26) {
         parse_route_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_route_l;
        break;
      }

      // optional .apollo.decision.Range route_l = 4;
      case 4: {
        if (tag == 34) {
         parse_route_l:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_l()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_on_route;
        break;
      }

      // optional bool on_route = 5;
      case 5: {
        if (tag == 40) {
         parse_on_route:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_route_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lane_id;
        break;
      }

      // optional string lane_id = 6;
      case 6: {
        if (tag == 50) {
         parse_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.decision.ObjectDebug.lane_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_lane_s;
        break;
      }

      // optional double lane_s = 7;
      case 7: {
        if (tag == 57) {
         parse_lane_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_on_lane;
        break;
      }

      // optional bool on_lane = 8;
      case 8: {
        if (tag == 64) {
         parse_on_lane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_lane_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_path_speed;
        break;
      }

      // optional double path_speed = 9;
      case 9: {
        if (tag == 73) {
         parse_path_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_st_region;
        break;
      }

      // repeated .apollo.common.Point3D st_region = 10;
      case 10: {
        if (tag == 82) {
         parse_st_region:
          DO_(input->IncrementRecursionDepth());
         parse_loop_st_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_st_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_st_region;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ObjectDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ObjectDebug)
  return false;
#undef DO_
}

void ObjectDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ObjectDebug)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.ObjectDebug.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string path_id = 2;
  if (this->path_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_id().data(), this->path_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.ObjectDebug.path_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path_id(), output);
  }

  // optional .apollo.decision.Range route_s = 3;
  if (this->has_route_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->route_s_, output);
  }

  // optional .apollo.decision.Range route_l = 4;
  if (this->has_route_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->route_l_, output);
  }

  // optional bool on_route = 5;
  if (this->on_route() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->on_route(), output);
  }

  // optional string lane_id = 6;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.ObjectDebug.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lane_id(), output);
  }

  // optional double lane_s = 7;
  if (this->lane_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lane_s(), output);
  }

  // optional bool on_lane = 8;
  if (this->on_lane() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->on_lane(), output);
  }

  // optional double path_speed = 9;
  if (this->path_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->path_speed(), output);
  }

  // repeated .apollo.common.Point3D st_region = 10;
  for (unsigned int i = 0, n = this->st_region_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->st_region(i), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ObjectDebug)
}

::google::protobuf::uint8* ObjectDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ObjectDebug)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.ObjectDebug.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string path_id = 2;
  if (this->path_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_id().data(), this->path_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.ObjectDebug.path_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path_id(), target);
  }

  // optional .apollo.decision.Range route_s = 3;
  if (this->has_route_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->route_s_, false, target);
  }

  // optional .apollo.decision.Range route_l = 4;
  if (this->has_route_l()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->route_l_, false, target);
  }

  // optional bool on_route = 5;
  if (this->on_route() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->on_route(), target);
  }

  // optional string lane_id = 6;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.decision.ObjectDebug.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lane_id(), target);
  }

  // optional double lane_s = 7;
  if (this->lane_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lane_s(), target);
  }

  // optional bool on_lane = 8;
  if (this->on_lane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->on_lane(), target);
  }

  // optional double path_speed = 9;
  if (this->path_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->path_speed(), target);
  }

  // repeated .apollo.common.Point3D st_region = 10;
  for (unsigned int i = 0, n = this->st_region_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->st_region(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ObjectDebug)
  return target;
}

int ObjectDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ObjectDebug)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string path_id = 2;
  if (this->path_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path_id());
  }

  // optional .apollo.decision.Range route_s = 3;
  if (this->has_route_s()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_s_);
  }

  // optional .apollo.decision.Range route_l = 4;
  if (this->has_route_l()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_l_);
  }

  // optional bool on_route = 5;
  if (this->on_route() != 0) {
    total_size += 1 + 1;
  }

  // optional string lane_id = 6;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // optional double lane_s = 7;
  if (this->lane_s() != 0) {
    total_size += 1 + 8;
  }

  // optional bool on_lane = 8;
  if (this->on_lane() != 0) {
    total_size += 1 + 1;
  }

  // optional double path_speed = 9;
  if (this->path_speed() != 0) {
    total_size += 1 + 8;
  }

  // repeated .apollo.common.Point3D st_region = 10;
  total_size += 1 * this->st_region_size();
  for (int i = 0; i < this->st_region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->st_region(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ObjectDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ObjectDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ObjectDebug)
    MergeFrom(*source);
  }
}

void ObjectDebug::MergeFrom(const ObjectDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ObjectDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  st_region_.MergeFrom(from.st_region_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.path_id().size() > 0) {

    path_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_id_);
  }
  if (from.has_route_s()) {
    mutable_route_s()->::apollo::decision::Range::MergeFrom(from.route_s());
  }
  if (from.has_route_l()) {
    mutable_route_l()->::apollo::decision::Range::MergeFrom(from.route_l());
  }
  if (from.on_route() != 0) {
    set_on_route(from.on_route());
  }
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.lane_s() != 0) {
    set_lane_s(from.lane_s());
  }
  if (from.on_lane() != 0) {
    set_on_lane(from.on_lane());
  }
  if (from.path_speed() != 0) {
    set_path_speed(from.path_speed());
  }
}

void ObjectDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ObjectDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDebug::CopyFrom(const ObjectDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ObjectDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDebug::IsInitialized() const {

  return true;
}

void ObjectDebug::Swap(ObjectDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDebug::InternalSwap(ObjectDebug* other) {
  id_.Swap(&other->id_);
  path_id_.Swap(&other->path_id_);
  std::swap(route_s_, other->route_s_);
  std::swap(route_l_, other->route_l_);
  std::swap(on_route_, other->on_route_);
  lane_id_.Swap(&other->lane_id_);
  std::swap(lane_s_, other->lane_s_);
  std::swap(on_lane_, other->on_lane_);
  std::swap(path_speed_, other->path_speed_);
  st_region_.UnsafeArenaSwap(&other->st_region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDebug_descriptor_;
  metadata.reflection = ObjectDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDebug

// optional string id = 1;
void ObjectDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ObjectDebug::id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObjectDebug::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.id)
}
 void ObjectDebug::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.ObjectDebug.id)
}
 void ObjectDebug::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.ObjectDebug.id)
}
 ::std::string* ObjectDebug::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ObjectDebug::release_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDebug.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObjectDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDebug.id)
}

// optional string path_id = 2;
void ObjectDebug::clear_path_id() {
  path_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ObjectDebug::path_id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.path_id)
  return path_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObjectDebug::set_path_id(const ::std::string& value) {
  
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.path_id)
}
 void ObjectDebug::set_path_id(const char* value) {
  
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.ObjectDebug.path_id)
}
 void ObjectDebug::set_path_id(const char* value, size_t size) {
  
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.ObjectDebug.path_id)
}
 ::std::string* ObjectDebug::mutable_path_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.path_id)
  return path_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ObjectDebug::release_path_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDebug.path_id)
  
  return path_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObjectDebug::set_allocated_path_id(::std::string* path_id) {
  if (path_id != NULL) {
    
  } else {
    
  }
  path_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDebug.path_id)
}

// optional .apollo.decision.Range route_s = 3;
bool ObjectDebug::has_route_s() const {
  return !_is_default_instance_ && route_s_ != NULL;
}
void ObjectDebug::clear_route_s() {
  if (GetArenaNoVirtual() == NULL && route_s_ != NULL) delete route_s_;
  route_s_ = NULL;
}
const ::apollo::decision::Range& ObjectDebug::route_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.route_s)
  return route_s_ != NULL ? *route_s_ : *default_instance_->route_s_;
}
::apollo::decision::Range* ObjectDebug::mutable_route_s() {
  
  if (route_s_ == NULL) {
    route_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.route_s)
  return route_s_;
}
::apollo::decision::Range* ObjectDebug::release_route_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDebug.route_s)
  
  ::apollo::decision::Range* temp = route_s_;
  route_s_ = NULL;
  return temp;
}
void ObjectDebug::set_allocated_route_s(::apollo::decision::Range* route_s) {
  delete route_s_;
  route_s_ = route_s;
  if (route_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDebug.route_s)
}

// optional .apollo.decision.Range route_l = 4;
bool ObjectDebug::has_route_l() const {
  return !_is_default_instance_ && route_l_ != NULL;
}
void ObjectDebug::clear_route_l() {
  if (GetArenaNoVirtual() == NULL && route_l_ != NULL) delete route_l_;
  route_l_ = NULL;
}
const ::apollo::decision::Range& ObjectDebug::route_l() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.route_l)
  return route_l_ != NULL ? *route_l_ : *default_instance_->route_l_;
}
::apollo::decision::Range* ObjectDebug::mutable_route_l() {
  
  if (route_l_ == NULL) {
    route_l_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.route_l)
  return route_l_;
}
::apollo::decision::Range* ObjectDebug::release_route_l() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDebug.route_l)
  
  ::apollo::decision::Range* temp = route_l_;
  route_l_ = NULL;
  return temp;
}
void ObjectDebug::set_allocated_route_l(::apollo::decision::Range* route_l) {
  delete route_l_;
  route_l_ = route_l;
  if (route_l) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDebug.route_l)
}

// optional bool on_route = 5;
void ObjectDebug::clear_on_route() {
  on_route_ = false;
}
 bool ObjectDebug::on_route() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.on_route)
  return on_route_;
}
 void ObjectDebug::set_on_route(bool value) {
  
  on_route_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.on_route)
}

// optional string lane_id = 6;
void ObjectDebug::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ObjectDebug::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.lane_id)
  return lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObjectDebug::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.lane_id)
}
 void ObjectDebug::set_lane_id(const char* value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.ObjectDebug.lane_id)
}
 void ObjectDebug::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.ObjectDebug.lane_id)
}
 ::std::string* ObjectDebug::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ObjectDebug::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDebug.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObjectDebug::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDebug.lane_id)
}

// optional double lane_s = 7;
void ObjectDebug::clear_lane_s() {
  lane_s_ = 0;
}
 double ObjectDebug::lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.lane_s)
  return lane_s_;
}
 void ObjectDebug::set_lane_s(double value) {
  
  lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.lane_s)
}

// optional bool on_lane = 8;
void ObjectDebug::clear_on_lane() {
  on_lane_ = false;
}
 bool ObjectDebug::on_lane() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.on_lane)
  return on_lane_;
}
 void ObjectDebug::set_on_lane(bool value) {
  
  on_lane_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.on_lane)
}

// optional double path_speed = 9;
void ObjectDebug::clear_path_speed() {
  path_speed_ = 0;
}
 double ObjectDebug::path_speed() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.path_speed)
  return path_speed_;
}
 void ObjectDebug::set_path_speed(double value) {
  
  path_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.path_speed)
}

// repeated .apollo.common.Point3D st_region = 10;
int ObjectDebug::st_region_size() const {
  return st_region_.size();
}
void ObjectDebug::clear_st_region() {
  st_region_.Clear();
}
const ::apollo::common::Point3D& ObjectDebug::st_region(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.st_region)
  return st_region_.Get(index);
}
::apollo::common::Point3D* ObjectDebug::mutable_st_region(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.st_region)
  return st_region_.Mutable(index);
}
::apollo::common::Point3D* ObjectDebug::add_st_region() {
  // @@protoc_insertion_point(field_add:apollo.decision.ObjectDebug.st_region)
  return st_region_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
ObjectDebug::mutable_st_region() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.ObjectDebug.st_region)
  return &st_region_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
ObjectDebug::st_region() const {
  // @@protoc_insertion_point(field_list:apollo.decision.ObjectDebug.st_region)
  return st_region_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStats::kTotalTimeMsFieldNumber;
const int LatencyStats::kSensorReadTimeMsFieldNumber;
const int LatencyStats::kAdcPrepareTimeMsFieldNumber;
const int LatencyStats::kObjPrepareTimeMsFieldNumber;
const int LatencyStats::kWorldRuleTimeMsFieldNumber;
const int LatencyStats::kStGraphTimeMsFieldNumber;
const int LatencyStats::kGatewayReceiveDelayMsFieldNumber;
const int LatencyStats::kPerceptionReceiveDelayMsFieldNumber;
const int LatencyStats::kPredictionReceiveDelayMsFieldNumber;
const int LatencyStats::kSignalReceiveDelayMsFieldNumber;
const int LatencyStats::kPerceptionIntervalMsFieldNumber;
const int LatencyStats::kPredictionIntervalMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStats::LatencyStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.LatencyStats)
}

void LatencyStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LatencyStats::LatencyStats(const LatencyStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.LatencyStats)
}

void LatencyStats::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  total_time_ms_ = 0;
  sensor_read_time_ms_ = 0;
  adc_prepare_time_ms_ = 0;
  obj_prepare_time_ms_ = 0;
  world_rule_time_ms_ = 0;
  st_graph_time_ms_ = 0;
  gateway_receive_delay_ms_ = 0;
  perception_receive_delay_ms_ = 0;
  prediction_receive_delay_ms_ = 0;
  signal_receive_delay_ms_ = 0;
  perception_interval_ms_ = 0;
  prediction_interval_ms_ = 0;
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:apollo.decision.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LatencyStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatencyStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatencyStats_descriptor_;
}

const LatencyStats& LatencyStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

LatencyStats* LatencyStats::default_instance_ = NULL;

LatencyStats* LatencyStats::New(::google::protobuf::Arena* arena) const {
  LatencyStats* n = new LatencyStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.LatencyStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LatencyStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LatencyStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_time_ms_, perception_receive_delay_ms_);
  ZR_(prediction_receive_delay_ms_, prediction_interval_ms_);

#undef ZR_HELPER_
#undef ZR_

}

bool LatencyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.LatencyStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time_ms = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sensor_read_time_ms;
        break;
      }

      // optional double sensor_read_time_ms = 2;
      case 2: {
        if (tag == 17) {
         parse_sensor_read_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sensor_read_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_adc_prepare_time_ms;
        break;
      }

      // optional double adc_prepare_time_ms = 3;
      case 3: {
        if (tag == 25) {
         parse_adc_prepare_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_prepare_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_obj_prepare_time_ms;
        break;
      }

      // optional double obj_prepare_time_ms = 4;
      case 4: {
        if (tag == 33) {
         parse_obj_prepare_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obj_prepare_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_world_rule_time_ms;
        break;
      }

      // optional double world_rule_time_ms = 5;
      case 5: {
        if (tag == 41) {
         parse_world_rule_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &world_rule_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_st_graph_time_ms;
        break;
      }

      // optional double st_graph_time_ms = 6;
      case 6: {
        if (tag == 49) {
         parse_st_graph_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &st_graph_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_gateway_receive_delay_ms;
        break;
      }

      // optional double gateway_receive_delay_ms = 8;
      case 8: {
        if (tag == 65) {
         parse_gateway_receive_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gateway_receive_delay_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_perception_receive_delay_ms;
        break;
      }

      // optional double perception_receive_delay_ms = 9;
      case 9: {
        if (tag == 73) {
         parse_perception_receive_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perception_receive_delay_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_prediction_receive_delay_ms;
        break;
      }

      // optional double prediction_receive_delay_ms = 10;
      case 10: {
        if (tag == 81) {
         parse_prediction_receive_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prediction_receive_delay_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_signal_receive_delay_ms;
        break;
      }

      // optional double signal_receive_delay_ms = 11;
      case 11: {
        if (tag == 89) {
         parse_signal_receive_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &signal_receive_delay_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_perception_interval_ms;
        break;
      }

      // optional double perception_interval_ms = 12;
      case 12: {
        if (tag == 97) {
         parse_perception_interval_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perception_interval_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_prediction_interval_ms;
        break;
      }

      // optional double prediction_interval_ms = 13;
      case 13: {
        if (tag == 105) {
         parse_prediction_interval_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prediction_interval_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.LatencyStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.LatencyStats)
  return false;
#undef DO_
}

void LatencyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.LatencyStats)
  // optional double total_time_ms = 1;
  if (this->total_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // optional double sensor_read_time_ms = 2;
  if (this->sensor_read_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sensor_read_time_ms(), output);
  }

  // optional double adc_prepare_time_ms = 3;
  if (this->adc_prepare_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->adc_prepare_time_ms(), output);
  }

  // optional double obj_prepare_time_ms = 4;
  if (this->obj_prepare_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->obj_prepare_time_ms(), output);
  }

  // optional double world_rule_time_ms = 5;
  if (this->world_rule_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->world_rule_time_ms(), output);
  }

  // optional double st_graph_time_ms = 6;
  if (this->st_graph_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->st_graph_time_ms(), output);
  }

  // optional double gateway_receive_delay_ms = 8;
  if (this->gateway_receive_delay_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->gateway_receive_delay_ms(), output);
  }

  // optional double perception_receive_delay_ms = 9;
  if (this->perception_receive_delay_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->perception_receive_delay_ms(), output);
  }

  // optional double prediction_receive_delay_ms = 10;
  if (this->prediction_receive_delay_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->prediction_receive_delay_ms(), output);
  }

  // optional double signal_receive_delay_ms = 11;
  if (this->signal_receive_delay_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->signal_receive_delay_ms(), output);
  }

  // optional double perception_interval_ms = 12;
  if (this->perception_interval_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->perception_interval_ms(), output);
  }

  // optional double prediction_interval_ms = 13;
  if (this->prediction_interval_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->prediction_interval_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.LatencyStats)
}

::google::protobuf::uint8* LatencyStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.LatencyStats)
  // optional double total_time_ms = 1;
  if (this->total_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // optional double sensor_read_time_ms = 2;
  if (this->sensor_read_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sensor_read_time_ms(), target);
  }

  // optional double adc_prepare_time_ms = 3;
  if (this->adc_prepare_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->adc_prepare_time_ms(), target);
  }

  // optional double obj_prepare_time_ms = 4;
  if (this->obj_prepare_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->obj_prepare_time_ms(), target);
  }

  // optional double world_rule_time_ms = 5;
  if (this->world_rule_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->world_rule_time_ms(), target);
  }

  // optional double st_graph_time_ms = 6;
  if (this->st_graph_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->st_graph_time_ms(), target);
  }

  // optional double gateway_receive_delay_ms = 8;
  if (this->gateway_receive_delay_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->gateway_receive_delay_ms(), target);
  }

  // optional double perception_receive_delay_ms = 9;
  if (this->perception_receive_delay_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->perception_receive_delay_ms(), target);
  }

  // optional double prediction_receive_delay_ms = 10;
  if (this->prediction_receive_delay_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->prediction_receive_delay_ms(), target);
  }

  // optional double signal_receive_delay_ms = 11;
  if (this->signal_receive_delay_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->signal_receive_delay_ms(), target);
  }

  // optional double perception_interval_ms = 12;
  if (this->perception_interval_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->perception_interval_ms(), target);
  }

  // optional double prediction_interval_ms = 13;
  if (this->prediction_interval_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->prediction_interval_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.LatencyStats)
  return target;
}

int LatencyStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.LatencyStats)
  int total_size = 0;

  // optional double total_time_ms = 1;
  if (this->total_time_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double sensor_read_time_ms = 2;
  if (this->sensor_read_time_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double adc_prepare_time_ms = 3;
  if (this->adc_prepare_time_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double obj_prepare_time_ms = 4;
  if (this->obj_prepare_time_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double world_rule_time_ms = 5;
  if (this->world_rule_time_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double st_graph_time_ms = 6;
  if (this->st_graph_time_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double gateway_receive_delay_ms = 8;
  if (this->gateway_receive_delay_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double perception_receive_delay_ms = 9;
  if (this->perception_receive_delay_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double prediction_receive_delay_ms = 10;
  if (this->prediction_receive_delay_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double signal_receive_delay_ms = 11;
  if (this->signal_receive_delay_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double perception_interval_ms = 12;
  if (this->perception_interval_ms() != 0) {
    total_size += 1 + 8;
  }

  // optional double prediction_interval_ms = 13;
  if (this->prediction_interval_ms() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatencyStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.LatencyStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LatencyStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.LatencyStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.LatencyStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.total_time_ms() != 0) {
    set_total_time_ms(from.total_time_ms());
  }
  if (from.sensor_read_time_ms() != 0) {
    set_sensor_read_time_ms(from.sensor_read_time_ms());
  }
  if (from.adc_prepare_time_ms() != 0) {
    set_adc_prepare_time_ms(from.adc_prepare_time_ms());
  }
  if (from.obj_prepare_time_ms() != 0) {
    set_obj_prepare_time_ms(from.obj_prepare_time_ms());
  }
  if (from.world_rule_time_ms() != 0) {
    set_world_rule_time_ms(from.world_rule_time_ms());
  }
  if (from.st_graph_time_ms() != 0) {
    set_st_graph_time_ms(from.st_graph_time_ms());
  }
  if (from.gateway_receive_delay_ms() != 0) {
    set_gateway_receive_delay_ms(from.gateway_receive_delay_ms());
  }
  if (from.perception_receive_delay_ms() != 0) {
    set_perception_receive_delay_ms(from.perception_receive_delay_ms());
  }
  if (from.prediction_receive_delay_ms() != 0) {
    set_prediction_receive_delay_ms(from.prediction_receive_delay_ms());
  }
  if (from.signal_receive_delay_ms() != 0) {
    set_signal_receive_delay_ms(from.signal_receive_delay_ms());
  }
  if (from.perception_interval_ms() != 0) {
    set_perception_interval_ms(from.perception_interval_ms());
  }
  if (from.prediction_interval_ms() != 0) {
    set_prediction_interval_ms(from.prediction_interval_ms());
  }
}

void LatencyStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {

  return true;
}

void LatencyStats::Swap(LatencyStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStats::InternalSwap(LatencyStats* other) {
  std::swap(total_time_ms_, other->total_time_ms_);
  std::swap(sensor_read_time_ms_, other->sensor_read_time_ms_);
  std::swap(adc_prepare_time_ms_, other->adc_prepare_time_ms_);
  std::swap(obj_prepare_time_ms_, other->obj_prepare_time_ms_);
  std::swap(world_rule_time_ms_, other->world_rule_time_ms_);
  std::swap(st_graph_time_ms_, other->st_graph_time_ms_);
  std::swap(gateway_receive_delay_ms_, other->gateway_receive_delay_ms_);
  std::swap(perception_receive_delay_ms_, other->perception_receive_delay_ms_);
  std::swap(prediction_receive_delay_ms_, other->prediction_receive_delay_ms_);
  std::swap(signal_receive_delay_ms_, other->signal_receive_delay_ms_);
  std::swap(perception_interval_ms_, other->perception_interval_ms_);
  std::swap(prediction_interval_ms_, other->prediction_interval_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatencyStats_descriptor_;
  metadata.reflection = LatencyStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatencyStats

// optional double total_time_ms = 1;
void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
}
 double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.total_time_ms)
  return total_time_ms_;
}
 void LatencyStats::set_total_time_ms(double value) {
  
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.total_time_ms)
}

// optional double sensor_read_time_ms = 2;
void LatencyStats::clear_sensor_read_time_ms() {
  sensor_read_time_ms_ = 0;
}
 double LatencyStats::sensor_read_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.sensor_read_time_ms)
  return sensor_read_time_ms_;
}
 void LatencyStats::set_sensor_read_time_ms(double value) {
  
  sensor_read_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.sensor_read_time_ms)
}

// optional double adc_prepare_time_ms = 3;
void LatencyStats::clear_adc_prepare_time_ms() {
  adc_prepare_time_ms_ = 0;
}
 double LatencyStats::adc_prepare_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.adc_prepare_time_ms)
  return adc_prepare_time_ms_;
}
 void LatencyStats::set_adc_prepare_time_ms(double value) {
  
  adc_prepare_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.adc_prepare_time_ms)
}

// optional double obj_prepare_time_ms = 4;
void LatencyStats::clear_obj_prepare_time_ms() {
  obj_prepare_time_ms_ = 0;
}
 double LatencyStats::obj_prepare_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.obj_prepare_time_ms)
  return obj_prepare_time_ms_;
}
 void LatencyStats::set_obj_prepare_time_ms(double value) {
  
  obj_prepare_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.obj_prepare_time_ms)
}

// optional double world_rule_time_ms = 5;
void LatencyStats::clear_world_rule_time_ms() {
  world_rule_time_ms_ = 0;
}
 double LatencyStats::world_rule_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.world_rule_time_ms)
  return world_rule_time_ms_;
}
 void LatencyStats::set_world_rule_time_ms(double value) {
  
  world_rule_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.world_rule_time_ms)
}

// optional double st_graph_time_ms = 6;
void LatencyStats::clear_st_graph_time_ms() {
  st_graph_time_ms_ = 0;
}
 double LatencyStats::st_graph_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.st_graph_time_ms)
  return st_graph_time_ms_;
}
 void LatencyStats::set_st_graph_time_ms(double value) {
  
  st_graph_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.st_graph_time_ms)
}

// optional double gateway_receive_delay_ms = 8;
void LatencyStats::clear_gateway_receive_delay_ms() {
  gateway_receive_delay_ms_ = 0;
}
 double LatencyStats::gateway_receive_delay_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.gateway_receive_delay_ms)
  return gateway_receive_delay_ms_;
}
 void LatencyStats::set_gateway_receive_delay_ms(double value) {
  
  gateway_receive_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.gateway_receive_delay_ms)
}

// optional double perception_receive_delay_ms = 9;
void LatencyStats::clear_perception_receive_delay_ms() {
  perception_receive_delay_ms_ = 0;
}
 double LatencyStats::perception_receive_delay_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.perception_receive_delay_ms)
  return perception_receive_delay_ms_;
}
 void LatencyStats::set_perception_receive_delay_ms(double value) {
  
  perception_receive_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.perception_receive_delay_ms)
}

// optional double prediction_receive_delay_ms = 10;
void LatencyStats::clear_prediction_receive_delay_ms() {
  prediction_receive_delay_ms_ = 0;
}
 double LatencyStats::prediction_receive_delay_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.prediction_receive_delay_ms)
  return prediction_receive_delay_ms_;
}
 void LatencyStats::set_prediction_receive_delay_ms(double value) {
  
  prediction_receive_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.prediction_receive_delay_ms)
}

// optional double signal_receive_delay_ms = 11;
void LatencyStats::clear_signal_receive_delay_ms() {
  signal_receive_delay_ms_ = 0;
}
 double LatencyStats::signal_receive_delay_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.signal_receive_delay_ms)
  return signal_receive_delay_ms_;
}
 void LatencyStats::set_signal_receive_delay_ms(double value) {
  
  signal_receive_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.signal_receive_delay_ms)
}

// optional double perception_interval_ms = 12;
void LatencyStats::clear_perception_interval_ms() {
  perception_interval_ms_ = 0;
}
 double LatencyStats::perception_interval_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.perception_interval_ms)
  return perception_interval_ms_;
}
 void LatencyStats::set_perception_interval_ms(double value) {
  
  perception_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.perception_interval_ms)
}

// optional double prediction_interval_ms = 13;
void LatencyStats::clear_prediction_interval_ms() {
  prediction_interval_ms_ = 0;
}
 double LatencyStats::prediction_interval_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.prediction_interval_ms)
  return prediction_interval_ms_;
}
 void LatencyStats::set_prediction_interval_ms(double value) {
  
  prediction_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.prediction_interval_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats::kLatencyStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats::Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.Stats)
}

void Stats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  latency_stats_ = const_cast< ::apollo::decision::LatencyStats*>(&::apollo::decision::LatencyStats::default_instance());
}

Stats::Stats(const Stats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.Stats)
}

void Stats::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  latency_stats_ = NULL;
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:apollo.decision.Stats)
  SharedDtor();
}

void Stats::SharedDtor() {
  if (this != default_instance_) {
    delete latency_stats_;
  }
}

void Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_descriptor_;
}

const Stats& Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

Stats* Stats::default_instance_ = NULL;

Stats* Stats::New(::google::protobuf::Arena* arena) const {
  Stats* n = new Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.Stats)
  if (GetArenaNoVirtual() == NULL && latency_stats_ != NULL) delete latency_stats_;
  latency_stats_ = NULL;
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.decision.LatencyStats latency_stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latency_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.Stats)
  return false;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.Stats)
  // optional .apollo.decision.LatencyStats latency_stats = 1;
  if (this->has_latency_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->latency_stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.Stats)
}

::google::protobuf::uint8* Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.Stats)
  // optional .apollo.decision.LatencyStats latency_stats = 1;
  if (this->has_latency_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->latency_stats_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.Stats)
  return target;
}

int Stats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.Stats)
  int total_size = 0;

  // optional .apollo.decision.LatencyStats latency_stats = 1;
  if (this->has_latency_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->latency_stats_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.Stats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Stats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.Stats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_latency_stats()) {
    mutable_latency_stats()->::apollo::decision::LatencyStats::MergeFrom(from.latency_stats());
  }
}

void Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {

  return true;
}

void Stats::Swap(Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats::InternalSwap(Stats* other) {
  std::swap(latency_stats_, other->latency_stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stats_descriptor_;
  metadata.reflection = Stats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stats

// optional .apollo.decision.LatencyStats latency_stats = 1;
bool Stats::has_latency_stats() const {
  return !_is_default_instance_ && latency_stats_ != NULL;
}
void Stats::clear_latency_stats() {
  if (GetArenaNoVirtual() == NULL && latency_stats_ != NULL) delete latency_stats_;
  latency_stats_ = NULL;
}
const ::apollo::decision::LatencyStats& Stats::latency_stats() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Stats.latency_stats)
  return latency_stats_ != NULL ? *latency_stats_ : *default_instance_->latency_stats_;
}
::apollo::decision::LatencyStats* Stats::mutable_latency_stats() {
  
  if (latency_stats_ == NULL) {
    latency_stats_ = new ::apollo::decision::LatencyStats;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.Stats.latency_stats)
  return latency_stats_;
}
::apollo::decision::LatencyStats* Stats::release_latency_stats() {
  // @@protoc_insertion_point(field_release:apollo.decision.Stats.latency_stats)
  
  ::apollo::decision::LatencyStats* temp = latency_stats_;
  latency_stats_ = NULL;
  return temp;
}
void Stats::set_allocated_latency_stats(::apollo::decision::LatencyStats* latency_stats) {
  delete latency_stats_;
  latency_stats_ = latency_stats;
  if (latency_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Stats.latency_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModuleDebug::kGatewaySequenceNumFieldNumber;
const int ModuleDebug::kPerceptionSequenceNumFieldNumber;
const int ModuleDebug::kPredictionSequenceNumFieldNumber;
const int ModuleDebug::kSignalSequenceNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModuleDebug::ModuleDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.ModuleDebug)
}

void ModuleDebug::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ModuleDebug::ModuleDebug(const ModuleDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.ModuleDebug)
}

void ModuleDebug::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  gateway_sequence_num_ = 0u;
  perception_sequence_num_ = 0u;
  prediction_sequence_num_ = 0u;
  signal_sequence_num_ = 0u;
}

ModuleDebug::~ModuleDebug() {
  // @@protoc_insertion_point(destructor:apollo.decision.ModuleDebug)
  SharedDtor();
}

void ModuleDebug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModuleDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleDebug_descriptor_;
}

const ModuleDebug& ModuleDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

ModuleDebug* ModuleDebug::default_instance_ = NULL;

ModuleDebug* ModuleDebug::New(::google::protobuf::Arena* arena) const {
  ModuleDebug* n = new ModuleDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModuleDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.ModuleDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ModuleDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModuleDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gateway_sequence_num_, signal_sequence_num_);

#undef ZR_HELPER_
#undef ZR_

}

bool ModuleDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.ModuleDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gateway_sequence_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateway_sequence_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_perception_sequence_num;
        break;
      }

      // optional uint32 perception_sequence_num = 2;
      case 2: {
        if (tag == 16) {
         parse_perception_sequence_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perception_sequence_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prediction_sequence_num;
        break;
      }

      // optional uint32 prediction_sequence_num = 3;
      case 3: {
        if (tag == 24) {
         parse_prediction_sequence_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prediction_sequence_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_signal_sequence_num;
        break;
      }

      // optional uint32 signal_sequence_num = 4;
      case 4: {
        if (tag == 32) {
         parse_signal_sequence_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signal_sequence_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.ModuleDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.ModuleDebug)
  return false;
#undef DO_
}

void ModuleDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.ModuleDebug)
  // optional uint32 gateway_sequence_num = 1;
  if (this->gateway_sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateway_sequence_num(), output);
  }

  // optional uint32 perception_sequence_num = 2;
  if (this->perception_sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->perception_sequence_num(), output);
  }

  // optional uint32 prediction_sequence_num = 3;
  if (this->prediction_sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prediction_sequence_num(), output);
  }

  // optional uint32 signal_sequence_num = 4;
  if (this->signal_sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->signal_sequence_num(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.ModuleDebug)
}

::google::protobuf::uint8* ModuleDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.ModuleDebug)
  // optional uint32 gateway_sequence_num = 1;
  if (this->gateway_sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateway_sequence_num(), target);
  }

  // optional uint32 perception_sequence_num = 2;
  if (this->perception_sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->perception_sequence_num(), target);
  }

  // optional uint32 prediction_sequence_num = 3;
  if (this->prediction_sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prediction_sequence_num(), target);
  }

  // optional uint32 signal_sequence_num = 4;
  if (this->signal_sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->signal_sequence_num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.ModuleDebug)
  return target;
}

int ModuleDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.ModuleDebug)
  int total_size = 0;

  // optional uint32 gateway_sequence_num = 1;
  if (this->gateway_sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gateway_sequence_num());
  }

  // optional uint32 perception_sequence_num = 2;
  if (this->perception_sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->perception_sequence_num());
  }

  // optional uint32 prediction_sequence_num = 3;
  if (this->prediction_sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prediction_sequence_num());
  }

  // optional uint32 signal_sequence_num = 4;
  if (this->signal_sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->signal_sequence_num());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.ModuleDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModuleDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModuleDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.ModuleDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.ModuleDebug)
    MergeFrom(*source);
  }
}

void ModuleDebug::MergeFrom(const ModuleDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.ModuleDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.gateway_sequence_num() != 0) {
    set_gateway_sequence_num(from.gateway_sequence_num());
  }
  if (from.perception_sequence_num() != 0) {
    set_perception_sequence_num(from.perception_sequence_num());
  }
  if (from.prediction_sequence_num() != 0) {
    set_prediction_sequence_num(from.prediction_sequence_num());
  }
  if (from.signal_sequence_num() != 0) {
    set_signal_sequence_num(from.signal_sequence_num());
  }
}

void ModuleDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.ModuleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleDebug::CopyFrom(const ModuleDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.ModuleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleDebug::IsInitialized() const {

  return true;
}

void ModuleDebug::Swap(ModuleDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModuleDebug::InternalSwap(ModuleDebug* other) {
  std::swap(gateway_sequence_num_, other->gateway_sequence_num_);
  std::swap(perception_sequence_num_, other->perception_sequence_num_);
  std::swap(prediction_sequence_num_, other->prediction_sequence_num_);
  std::swap(signal_sequence_num_, other->signal_sequence_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModuleDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleDebug_descriptor_;
  metadata.reflection = ModuleDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModuleDebug

// optional uint32 gateway_sequence_num = 1;
void ModuleDebug::clear_gateway_sequence_num() {
  gateway_sequence_num_ = 0u;
}
 ::google::protobuf::uint32 ModuleDebug::gateway_sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ModuleDebug.gateway_sequence_num)
  return gateway_sequence_num_;
}
 void ModuleDebug::set_gateway_sequence_num(::google::protobuf::uint32 value) {
  
  gateway_sequence_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ModuleDebug.gateway_sequence_num)
}

// optional uint32 perception_sequence_num = 2;
void ModuleDebug::clear_perception_sequence_num() {
  perception_sequence_num_ = 0u;
}
 ::google::protobuf::uint32 ModuleDebug::perception_sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ModuleDebug.perception_sequence_num)
  return perception_sequence_num_;
}
 void ModuleDebug::set_perception_sequence_num(::google::protobuf::uint32 value) {
  
  perception_sequence_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ModuleDebug.perception_sequence_num)
}

// optional uint32 prediction_sequence_num = 3;
void ModuleDebug::clear_prediction_sequence_num() {
  prediction_sequence_num_ = 0u;
}
 ::google::protobuf::uint32 ModuleDebug::prediction_sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ModuleDebug.prediction_sequence_num)
  return prediction_sequence_num_;
}
 void ModuleDebug::set_prediction_sequence_num(::google::protobuf::uint32 value) {
  
  prediction_sequence_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ModuleDebug.prediction_sequence_num)
}

// optional uint32 signal_sequence_num = 4;
void ModuleDebug::clear_signal_sequence_num() {
  signal_sequence_num_ = 0u;
}
 ::google::protobuf::uint32 ModuleDebug::signal_sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ModuleDebug.signal_sequence_num)
  return signal_sequence_num_;
}
 void ModuleDebug::set_signal_sequence_num(::google::protobuf::uint32 value) {
  
  signal_sequence_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ModuleDebug.signal_sequence_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug::kMasterVehicleFieldNumber;
const int Debug::kOriginalDecisionFieldNumber;
const int Debug::kObjectFieldNumber;
const int Debug::kMapVersionFieldNumber;
const int Debug::kDecisionVersionFieldNumber;
const int Debug::kModuleDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug::Debug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.Debug)
}

void Debug::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  master_vehicle_ = const_cast< ::apollo::decision::MasterVehicleDebug*>(&::apollo::decision::MasterVehicleDebug::default_instance());
  original_decision_ = const_cast< ::apollo::decision::MainDecision*>(&::apollo::decision::MainDecision::default_instance());
  module_debug_ = const_cast< ::apollo::decision::ModuleDebug*>(&::apollo::decision::ModuleDebug::default_instance());
}

Debug::Debug(const Debug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.Debug)
}

void Debug::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  master_vehicle_ = NULL;
  original_decision_ = NULL;
  map_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  decision_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  module_debug_ = NULL;
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.decision.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  map_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  decision_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete master_vehicle_;
    delete original_decision_;
    delete module_debug_;
  }
}

void Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_descriptor_;
}

const Debug& Debug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

Debug* Debug::default_instance_ = NULL;

Debug* Debug::New(::google::protobuf::Arena* arena) const {
  Debug* n = new Debug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.Debug)
  if (GetArenaNoVirtual() == NULL && master_vehicle_ != NULL) delete master_vehicle_;
  master_vehicle_ = NULL;
  if (GetArenaNoVirtual() == NULL && original_decision_ != NULL) delete original_decision_;
  original_decision_ = NULL;
  map_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  decision_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && module_debug_ != NULL) delete module_debug_;
  module_debug_ = NULL;
  object_.Clear();
}

bool Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.Debug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.decision.MasterVehicleDebug master_vehicle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_original_decision;
        break;
      }

      // optional .apollo.decision.MainDecision original_decision = 2;
      case 2: {
        if (tag == 18) {
         parse_original_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_object;
        break;
      }

      // repeated .apollo.decision.ObjectDebug object = 3;
      case 3: {
        if (tag == 26) {
         parse_object:
          DO_(input->IncrementRecursionDepth());
         parse_loop_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_object;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_map_version;
        break;
      }

      // optional bytes map_version = 5;
      case 5: {
        if (tag == 42) {
         parse_map_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_module_debug;
        break;
      }

      // optional .apollo.decision.ModuleDebug module_debug = 6;
      case 6: {
        if (tag == 50) {
         parse_module_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_decision_version;
        break;
      }

      // optional bytes decision_version = 7;
      case 7: {
        if (tag == 58) {
         parse_decision_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_decision_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.Debug)
  return false;
#undef DO_
}

void Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.Debug)
  // optional .apollo.decision.MasterVehicleDebug master_vehicle = 1;
  if (this->has_master_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->master_vehicle_, output);
  }

  // optional .apollo.decision.MainDecision original_decision = 2;
  if (this->has_original_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->original_decision_, output);
  }

  // repeated .apollo.decision.ObjectDebug object = 3;
  for (unsigned int i = 0, n = this->object_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object(i), output);
  }

  // optional bytes map_version = 5;
  if (this->map_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->map_version(), output);
  }

  // optional .apollo.decision.ModuleDebug module_debug = 6;
  if (this->has_module_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->module_debug_, output);
  }

  // optional bytes decision_version = 7;
  if (this->decision_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->decision_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.Debug)
}

::google::protobuf::uint8* Debug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.Debug)
  // optional .apollo.decision.MasterVehicleDebug master_vehicle = 1;
  if (this->has_master_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->master_vehicle_, false, target);
  }

  // optional .apollo.decision.MainDecision original_decision = 2;
  if (this->has_original_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->original_decision_, false, target);
  }

  // repeated .apollo.decision.ObjectDebug object = 3;
  for (unsigned int i = 0, n = this->object_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->object(i), false, target);
  }

  // optional bytes map_version = 5;
  if (this->map_version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->map_version(), target);
  }

  // optional .apollo.decision.ModuleDebug module_debug = 6;
  if (this->has_module_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->module_debug_, false, target);
  }

  // optional bytes decision_version = 7;
  if (this->decision_version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->decision_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.Debug)
  return target;
}

int Debug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.Debug)
  int total_size = 0;

  // optional .apollo.decision.MasterVehicleDebug master_vehicle = 1;
  if (this->has_master_vehicle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->master_vehicle_);
  }

  // optional .apollo.decision.MainDecision original_decision = 2;
  if (this->has_original_decision()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->original_decision_);
  }

  // optional bytes map_version = 5;
  if (this->map_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_version());
  }

  // optional bytes decision_version = 7;
  if (this->decision_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->decision_version());
  }

  // optional .apollo.decision.ModuleDebug module_debug = 6;
  if (this->has_module_debug()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->module_debug_);
  }

  // repeated .apollo.decision.ObjectDebug object = 3;
  total_size += 1 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.Debug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Debug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.Debug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.Debug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  object_.MergeFrom(from.object_);
  if (from.has_master_vehicle()) {
    mutable_master_vehicle()->::apollo::decision::MasterVehicleDebug::MergeFrom(from.master_vehicle());
  }
  if (from.has_original_decision()) {
    mutable_original_decision()->::apollo::decision::MainDecision::MergeFrom(from.original_decision());
  }
  if (from.map_version().size() > 0) {

    map_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_version_);
  }
  if (from.decision_version().size() > 0) {

    decision_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.decision_version_);
  }
  if (from.has_module_debug()) {
    mutable_module_debug()->::apollo::decision::ModuleDebug::MergeFrom(from.module_debug());
  }
}

void Debug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {

  return true;
}

void Debug::Swap(Debug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug::InternalSwap(Debug* other) {
  std::swap(master_vehicle_, other->master_vehicle_);
  std::swap(original_decision_, other->original_decision_);
  object_.UnsafeArenaSwap(&other->object_);
  map_version_.Swap(&other->map_version_);
  decision_version_.Swap(&other->decision_version_);
  std::swap(module_debug_, other->module_debug_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_descriptor_;
  metadata.reflection = Debug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug

// optional .apollo.decision.MasterVehicleDebug master_vehicle = 1;
bool Debug::has_master_vehicle() const {
  return !_is_default_instance_ && master_vehicle_ != NULL;
}
void Debug::clear_master_vehicle() {
  if (GetArenaNoVirtual() == NULL && master_vehicle_ != NULL) delete master_vehicle_;
  master_vehicle_ = NULL;
}
const ::apollo::decision::MasterVehicleDebug& Debug::master_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.master_vehicle)
  return master_vehicle_ != NULL ? *master_vehicle_ : *default_instance_->master_vehicle_;
}
::apollo::decision::MasterVehicleDebug* Debug::mutable_master_vehicle() {
  
  if (master_vehicle_ == NULL) {
    master_vehicle_ = new ::apollo::decision::MasterVehicleDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.master_vehicle)
  return master_vehicle_;
}
::apollo::decision::MasterVehicleDebug* Debug::release_master_vehicle() {
  // @@protoc_insertion_point(field_release:apollo.decision.Debug.master_vehicle)
  
  ::apollo::decision::MasterVehicleDebug* temp = master_vehicle_;
  master_vehicle_ = NULL;
  return temp;
}
void Debug::set_allocated_master_vehicle(::apollo::decision::MasterVehicleDebug* master_vehicle) {
  delete master_vehicle_;
  master_vehicle_ = master_vehicle;
  if (master_vehicle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Debug.master_vehicle)
}

// optional .apollo.decision.MainDecision original_decision = 2;
bool Debug::has_original_decision() const {
  return !_is_default_instance_ && original_decision_ != NULL;
}
void Debug::clear_original_decision() {
  if (GetArenaNoVirtual() == NULL && original_decision_ != NULL) delete original_decision_;
  original_decision_ = NULL;
}
const ::apollo::decision::MainDecision& Debug::original_decision() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.original_decision)
  return original_decision_ != NULL ? *original_decision_ : *default_instance_->original_decision_;
}
::apollo::decision::MainDecision* Debug::mutable_original_decision() {
  
  if (original_decision_ == NULL) {
    original_decision_ = new ::apollo::decision::MainDecision;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.original_decision)
  return original_decision_;
}
::apollo::decision::MainDecision* Debug::release_original_decision() {
  // @@protoc_insertion_point(field_release:apollo.decision.Debug.original_decision)
  
  ::apollo::decision::MainDecision* temp = original_decision_;
  original_decision_ = NULL;
  return temp;
}
void Debug::set_allocated_original_decision(::apollo::decision::MainDecision* original_decision) {
  delete original_decision_;
  original_decision_ = original_decision;
  if (original_decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Debug.original_decision)
}

// repeated .apollo.decision.ObjectDebug object = 3;
int Debug::object_size() const {
  return object_.size();
}
void Debug::clear_object() {
  object_.Clear();
}
const ::apollo::decision::ObjectDebug& Debug::object(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.object)
  return object_.Get(index);
}
::apollo::decision::ObjectDebug* Debug::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.object)
  return object_.Mutable(index);
}
::apollo::decision::ObjectDebug* Debug::add_object() {
  // @@protoc_insertion_point(field_add:apollo.decision.Debug.object)
  return object_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDebug >*
Debug::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.Debug.object)
  return &object_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDebug >&
Debug::object() const {
  // @@protoc_insertion_point(field_list:apollo.decision.Debug.object)
  return object_;
}

// optional bytes map_version = 5;
void Debug::clear_map_version() {
  map_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Debug::map_version() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.map_version)
  return map_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Debug::set_map_version(const ::std::string& value) {
  
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.Debug.map_version)
}
 void Debug::set_map_version(const char* value) {
  
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.Debug.map_version)
}
 void Debug::set_map_version(const void* value, size_t size) {
  
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.Debug.map_version)
}
 ::std::string* Debug::mutable_map_version() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.map_version)
  return map_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Debug::release_map_version() {
  // @@protoc_insertion_point(field_release:apollo.decision.Debug.map_version)
  
  return map_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Debug::set_allocated_map_version(::std::string* map_version) {
  if (map_version != NULL) {
    
  } else {
    
  }
  map_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_version);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Debug.map_version)
}

// optional bytes decision_version = 7;
void Debug::clear_decision_version() {
  decision_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Debug::decision_version() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.decision_version)
  return decision_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Debug::set_decision_version(const ::std::string& value) {
  
  decision_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.Debug.decision_version)
}
 void Debug::set_decision_version(const char* value) {
  
  decision_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.Debug.decision_version)
}
 void Debug::set_decision_version(const void* value, size_t size) {
  
  decision_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.Debug.decision_version)
}
 ::std::string* Debug::mutable_decision_version() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.decision_version)
  return decision_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Debug::release_decision_version() {
  // @@protoc_insertion_point(field_release:apollo.decision.Debug.decision_version)
  
  return decision_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Debug::set_allocated_decision_version(::std::string* decision_version) {
  if (decision_version != NULL) {
    
  } else {
    
  }
  decision_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decision_version);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Debug.decision_version)
}

// optional .apollo.decision.ModuleDebug module_debug = 6;
bool Debug::has_module_debug() const {
  return !_is_default_instance_ && module_debug_ != NULL;
}
void Debug::clear_module_debug() {
  if (GetArenaNoVirtual() == NULL && module_debug_ != NULL) delete module_debug_;
  module_debug_ = NULL;
}
const ::apollo::decision::ModuleDebug& Debug::module_debug() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.module_debug)
  return module_debug_ != NULL ? *module_debug_ : *default_instance_->module_debug_;
}
::apollo::decision::ModuleDebug* Debug::mutable_module_debug() {
  
  if (module_debug_ == NULL) {
    module_debug_ = new ::apollo::decision::ModuleDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.module_debug)
  return module_debug_;
}
::apollo::decision::ModuleDebug* Debug::release_module_debug() {
  // @@protoc_insertion_point(field_release:apollo.decision.Debug.module_debug)
  
  ::apollo::decision::ModuleDebug* temp = module_debug_;
  module_debug_ = NULL;
  return temp;
}
void Debug::set_allocated_module_debug(::apollo::decision::ModuleDebug* module_debug) {
  delete module_debug_;
  module_debug_ = module_debug;
  if (module_debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Debug.module_debug)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LightSignal_TurnSignal_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightSignal_TurnSignal_descriptor_;
}
bool LightSignal_TurnSignal_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LightSignal_TurnSignal LightSignal::NO_TURN;
const LightSignal_TurnSignal LightSignal::LEFT_TURN;
const LightSignal_TurnSignal LightSignal::RIGHT_TURN;
const LightSignal_TurnSignal LightSignal::TurnSignal_MIN;
const LightSignal_TurnSignal LightSignal::TurnSignal_MAX;
const int LightSignal::TurnSignal_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightSignal::kEmergencyFieldNumber;
const int LightSignal::kTurnSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightSignal::LightSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.LightSignal)
}

void LightSignal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LightSignal::LightSignal(const LightSignal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.LightSignal)
}

void LightSignal::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  emergency_ = false;
  turn_signal_ = 0;
}

LightSignal::~LightSignal() {
  // @@protoc_insertion_point(destructor:apollo.decision.LightSignal)
  SharedDtor();
}

void LightSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LightSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightSignal_descriptor_;
}

const LightSignal& LightSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

LightSignal* LightSignal::default_instance_ = NULL;

LightSignal* LightSignal::New(::google::protobuf::Arena* arena) const {
  LightSignal* n = new LightSignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LightSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.LightSignal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LightSignal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LightSignal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(emergency_, turn_signal_);

#undef ZR_HELPER_
#undef ZR_

}

bool LightSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.LightSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool emergency = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_turn_signal;
        break;
      }

      // optional .apollo.decision.LightSignal.TurnSignal turn_signal = 2;
      case 2: {
        if (tag == 16) {
         parse_turn_signal:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_turn_signal(static_cast< ::apollo::decision::LightSignal_TurnSignal >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.LightSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.LightSignal)
  return false;
#undef DO_
}

void LightSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.LightSignal)
  // optional bool emergency = 1;
  if (this->emergency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->emergency(), output);
  }

  // optional .apollo.decision.LightSignal.TurnSignal turn_signal = 2;
  if (this->turn_signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->turn_signal(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.LightSignal)
}

::google::protobuf::uint8* LightSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.LightSignal)
  // optional bool emergency = 1;
  if (this->emergency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->emergency(), target);
  }

  // optional .apollo.decision.LightSignal.TurnSignal turn_signal = 2;
  if (this->turn_signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->turn_signal(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.LightSignal)
  return target;
}

int LightSignal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.LightSignal)
  int total_size = 0;

  // optional bool emergency = 1;
  if (this->emergency() != 0) {
    total_size += 1 + 1;
  }

  // optional .apollo.decision.LightSignal.TurnSignal turn_signal = 2;
  if (this->turn_signal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_signal());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.LightSignal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LightSignal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LightSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.LightSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.LightSignal)
    MergeFrom(*source);
  }
}

void LightSignal::MergeFrom(const LightSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.LightSignal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.emergency() != 0) {
    set_emergency(from.emergency());
  }
  if (from.turn_signal() != 0) {
    set_turn_signal(from.turn_signal());
  }
}

void LightSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.LightSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightSignal::CopyFrom(const LightSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.LightSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightSignal::IsInitialized() const {

  return true;
}

void LightSignal::Swap(LightSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightSignal::InternalSwap(LightSignal* other) {
  std::swap(emergency_, other->emergency_);
  std::swap(turn_signal_, other->turn_signal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LightSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightSignal_descriptor_;
  metadata.reflection = LightSignal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LightSignal

// optional bool emergency = 1;
void LightSignal::clear_emergency() {
  emergency_ = false;
}
 bool LightSignal::emergency() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LightSignal.emergency)
  return emergency_;
}
 void LightSignal::set_emergency(bool value) {
  
  emergency_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LightSignal.emergency)
}

// optional .apollo.decision.LightSignal.TurnSignal turn_signal = 2;
void LightSignal::clear_turn_signal() {
  turn_signal_ = 0;
}
 ::apollo::decision::LightSignal_TurnSignal LightSignal::turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LightSignal.turn_signal)
  return static_cast< ::apollo::decision::LightSignal_TurnSignal >(turn_signal_);
}
 void LightSignal::set_turn_signal(::apollo::decision::LightSignal_TurnSignal value) {
  
  turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LightSignal.turn_signal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionResult::kHeaderFieldNumber;
const int DecisionResult::kObjectDecisionFieldNumber;
const int DecisionResult::kMainDecisionFieldNumber;
const int DecisionResult::kDebugFieldNumber;
const int DecisionResult::kStatsFieldNumber;
const int DecisionResult::kSignalFieldNumber;
const int DecisionResult::kLightSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionResult::DecisionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.decision.DecisionResult)
}

void DecisionResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  object_decision_ = const_cast< ::apollo::decision::ObjectDecisions*>(&::apollo::decision::ObjectDecisions::default_instance());
  main_decision_ = const_cast< ::apollo::decision::MainDecision*>(&::apollo::decision::MainDecision::default_instance());
  debug_ = const_cast< ::apollo::decision::Debug*>(&::apollo::decision::Debug::default_instance());
  stats_ = const_cast< ::apollo::decision::Stats*>(&::apollo::decision::Stats::default_instance());
  signal_ = const_cast< ::apollo::canbus::Signal*>(&::apollo::canbus::Signal::default_instance());
  light_signal_ = const_cast< ::apollo::decision::LightSignal*>(&::apollo::decision::LightSignal::default_instance());
}

DecisionResult::DecisionResult(const DecisionResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.decision.DecisionResult)
}

void DecisionResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  object_decision_ = NULL;
  main_decision_ = NULL;
  debug_ = NULL;
  stats_ = NULL;
  signal_ = NULL;
  light_signal_ = NULL;
}

DecisionResult::~DecisionResult() {
  // @@protoc_insertion_point(destructor:apollo.decision.DecisionResult)
  SharedDtor();
}

void DecisionResult::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete object_decision_;
    delete main_decision_;
    delete debug_;
    delete stats_;
    delete signal_;
    delete light_signal_;
  }
}

void DecisionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecisionResult_descriptor_;
}

const DecisionResult& DecisionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  return *default_instance_;
}

DecisionResult* DecisionResult::default_instance_ = NULL;

DecisionResult* DecisionResult::New(::google::protobuf::Arena* arena) const {
  DecisionResult* n = new DecisionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecisionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.decision.DecisionResult)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && object_decision_ != NULL) delete object_decision_;
  object_decision_ = NULL;
  if (GetArenaNoVirtual() == NULL && main_decision_ != NULL) delete main_decision_;
  main_decision_ = NULL;
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) delete debug_;
  debug_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;
  if (GetArenaNoVirtual() == NULL && light_signal_ != NULL) delete light_signal_;
  light_signal_ = NULL;
}

bool DecisionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.decision.DecisionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object_decision;
        break;
      }

      // optional .apollo.decision.ObjectDecisions object_decision = 2;
      case 2: {
        if (tag == 18) {
         parse_object_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_main_decision;
        break;
      }

      // optional .apollo.decision.MainDecision main_decision = 3;
      case 3: {
        if (tag == 26) {
         parse_main_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_debug;
        break;
      }

      // optional .apollo.decision.Debug debug = 4;
      case 4: {
        if (tag == 34) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_light_signal;
        break;
      }

      // optional .apollo.decision.LightSignal light_signal = 5;
      case 5: {
        if (tag == 42) {
         parse_light_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stats;
        break;
      }

      // optional .apollo.decision.Stats stats = 6;
      case 6: {
        if (tag == 50) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_signal;
        break;
      }

      // optional .apollo.canbus.Signal signal = 7;
      case 7: {
        if (tag == 58) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.decision.DecisionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.decision.DecisionResult)
  return false;
#undef DO_
}

void DecisionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.decision.DecisionResult)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.decision.ObjectDecisions object_decision = 2;
  if (this->has_object_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_decision_, output);
  }

  // optional .apollo.decision.MainDecision main_decision = 3;
  if (this->has_main_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->main_decision_, output);
  }

  // optional .apollo.decision.Debug debug = 4;
  if (this->has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->debug_, output);
  }

  // optional .apollo.decision.LightSignal light_signal = 5;
  if (this->has_light_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->light_signal_, output);
  }

  // optional .apollo.decision.Stats stats = 6;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->stats_, output);
  }

  // optional .apollo.canbus.Signal signal = 7;
  if (this->has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->signal_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.decision.DecisionResult)
}

::google::protobuf::uint8* DecisionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.decision.DecisionResult)
  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.decision.ObjectDecisions object_decision = 2;
  if (this->has_object_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->object_decision_, false, target);
  }

  // optional .apollo.decision.MainDecision main_decision = 3;
  if (this->has_main_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->main_decision_, false, target);
  }

  // optional .apollo.decision.Debug debug = 4;
  if (this->has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->debug_, false, target);
  }

  // optional .apollo.decision.LightSignal light_signal = 5;
  if (this->has_light_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->light_signal_, false, target);
  }

  // optional .apollo.decision.Stats stats = 6;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->stats_, false, target);
  }

  // optional .apollo.canbus.Signal signal = 7;
  if (this->has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->signal_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.decision.DecisionResult)
  return target;
}

int DecisionResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.decision.DecisionResult)
  int total_size = 0;

  // optional .apollo.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .apollo.decision.ObjectDecisions object_decision = 2;
  if (this->has_object_decision()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_decision_);
  }

  // optional .apollo.decision.MainDecision main_decision = 3;
  if (this->has_main_decision()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->main_decision_);
  }

  // optional .apollo.decision.Debug debug = 4;
  if (this->has_debug()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->debug_);
  }

  // optional .apollo.decision.Stats stats = 6;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // optional .apollo.canbus.Signal signal = 7;
  if (this->has_signal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signal_);
  }

  // optional .apollo.decision.LightSignal light_signal = 5;
  if (this->has_light_signal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->light_signal_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.decision.DecisionResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DecisionResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.decision.DecisionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.decision.DecisionResult)
    MergeFrom(*source);
  }
}

void DecisionResult::MergeFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.decision.DecisionResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.has_object_decision()) {
    mutable_object_decision()->::apollo::decision::ObjectDecisions::MergeFrom(from.object_decision());
  }
  if (from.has_main_decision()) {
    mutable_main_decision()->::apollo::decision::MainDecision::MergeFrom(from.main_decision());
  }
  if (from.has_debug()) {
    mutable_debug()->::apollo::decision::Debug::MergeFrom(from.debug());
  }
  if (from.has_stats()) {
    mutable_stats()->::apollo::decision::Stats::MergeFrom(from.stats());
  }
  if (from.has_signal()) {
    mutable_signal()->::apollo::canbus::Signal::MergeFrom(from.signal());
  }
  if (from.has_light_signal()) {
    mutable_light_signal()->::apollo::decision::LightSignal::MergeFrom(from.light_signal());
  }
}

void DecisionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.decision.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionResult::CopyFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.decision.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionResult::IsInitialized() const {

  return true;
}

void DecisionResult::Swap(DecisionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionResult::InternalSwap(DecisionResult* other) {
  std::swap(header_, other->header_);
  std::swap(object_decision_, other->object_decision_);
  std::swap(main_decision_, other->main_decision_);
  std::swap(debug_, other->debug_);
  std::swap(stats_, other->stats_);
  std::swap(signal_, other->signal_);
  std::swap(light_signal_, other->light_signal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecisionResult_descriptor_;
  metadata.reflection = DecisionResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionResult

// optional .apollo.common.Header header = 1;
bool DecisionResult::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void DecisionResult::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::apollo::common::Header& DecisionResult::header() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* DecisionResult::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.header)
  return header_;
}
::apollo::common::Header* DecisionResult::release_header() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.header)
}

// optional .apollo.decision.ObjectDecisions object_decision = 2;
bool DecisionResult::has_object_decision() const {
  return !_is_default_instance_ && object_decision_ != NULL;
}
void DecisionResult::clear_object_decision() {
  if (GetArenaNoVirtual() == NULL && object_decision_ != NULL) delete object_decision_;
  object_decision_ = NULL;
}
const ::apollo::decision::ObjectDecisions& DecisionResult::object_decision() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.object_decision)
  return object_decision_ != NULL ? *object_decision_ : *default_instance_->object_decision_;
}
::apollo::decision::ObjectDecisions* DecisionResult::mutable_object_decision() {
  
  if (object_decision_ == NULL) {
    object_decision_ = new ::apollo::decision::ObjectDecisions;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.object_decision)
  return object_decision_;
}
::apollo::decision::ObjectDecisions* DecisionResult::release_object_decision() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.object_decision)
  
  ::apollo::decision::ObjectDecisions* temp = object_decision_;
  object_decision_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_object_decision(::apollo::decision::ObjectDecisions* object_decision) {
  delete object_decision_;
  object_decision_ = object_decision;
  if (object_decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.object_decision)
}

// optional .apollo.decision.MainDecision main_decision = 3;
bool DecisionResult::has_main_decision() const {
  return !_is_default_instance_ && main_decision_ != NULL;
}
void DecisionResult::clear_main_decision() {
  if (GetArenaNoVirtual() == NULL && main_decision_ != NULL) delete main_decision_;
  main_decision_ = NULL;
}
const ::apollo::decision::MainDecision& DecisionResult::main_decision() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.main_decision)
  return main_decision_ != NULL ? *main_decision_ : *default_instance_->main_decision_;
}
::apollo::decision::MainDecision* DecisionResult::mutable_main_decision() {
  
  if (main_decision_ == NULL) {
    main_decision_ = new ::apollo::decision::MainDecision;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.main_decision)
  return main_decision_;
}
::apollo::decision::MainDecision* DecisionResult::release_main_decision() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.main_decision)
  
  ::apollo::decision::MainDecision* temp = main_decision_;
  main_decision_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_main_decision(::apollo::decision::MainDecision* main_decision) {
  delete main_decision_;
  main_decision_ = main_decision;
  if (main_decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.main_decision)
}

// optional .apollo.decision.Debug debug = 4;
bool DecisionResult::has_debug() const {
  return !_is_default_instance_ && debug_ != NULL;
}
void DecisionResult::clear_debug() {
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) delete debug_;
  debug_ = NULL;
}
const ::apollo::decision::Debug& DecisionResult::debug() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.debug)
  return debug_ != NULL ? *debug_ : *default_instance_->debug_;
}
::apollo::decision::Debug* DecisionResult::mutable_debug() {
  
  if (debug_ == NULL) {
    debug_ = new ::apollo::decision::Debug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.debug)
  return debug_;
}
::apollo::decision::Debug* DecisionResult::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.debug)
  
  ::apollo::decision::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_debug(::apollo::decision::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.debug)
}

// optional .apollo.decision.Stats stats = 6;
bool DecisionResult::has_stats() const {
  return !_is_default_instance_ && stats_ != NULL;
}
void DecisionResult::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::apollo::decision::Stats& DecisionResult::stats() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
::apollo::decision::Stats* DecisionResult::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::apollo::decision::Stats;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.stats)
  return stats_;
}
::apollo::decision::Stats* DecisionResult::release_stats() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.stats)
  
  ::apollo::decision::Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_stats(::apollo::decision::Stats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.stats)
}

// optional .apollo.canbus.Signal signal = 7;
bool DecisionResult::has_signal() const {
  return !_is_default_instance_ && signal_ != NULL;
}
void DecisionResult::clear_signal() {
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;
}
const ::apollo::canbus::Signal& DecisionResult::signal() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
::apollo::canbus::Signal* DecisionResult::mutable_signal() {
  
  if (signal_ == NULL) {
    signal_ = new ::apollo::canbus::Signal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.signal)
  return signal_;
}
::apollo::canbus::Signal* DecisionResult::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.signal)
  
  ::apollo::canbus::Signal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_signal(::apollo::canbus::Signal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.signal)
}

// optional .apollo.decision.LightSignal light_signal = 5;
bool DecisionResult::has_light_signal() const {
  return !_is_default_instance_ && light_signal_ != NULL;
}
void DecisionResult::clear_light_signal() {
  if (GetArenaNoVirtual() == NULL && light_signal_ != NULL) delete light_signal_;
  light_signal_ = NULL;
}
const ::apollo::decision::LightSignal& DecisionResult::light_signal() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.light_signal)
  return light_signal_ != NULL ? *light_signal_ : *default_instance_->light_signal_;
}
::apollo::decision::LightSignal* DecisionResult::mutable_light_signal() {
  
  if (light_signal_ == NULL) {
    light_signal_ = new ::apollo::decision::LightSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.light_signal)
  return light_signal_;
}
::apollo::decision::LightSignal* DecisionResult::release_light_signal() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.light_signal)
  
  ::apollo::decision::LightSignal* temp = light_signal_;
  light_signal_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_light_signal(::apollo::decision::LightSignal* light_signal) {
  delete light_signal_;
  light_signal_ = light_signal;
  if (light_signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.light_signal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace decision
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
