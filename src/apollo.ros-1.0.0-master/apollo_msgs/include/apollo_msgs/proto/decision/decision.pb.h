// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/decision/decision.proto

#ifndef PROTOBUF_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto__INCLUDED
#define PROTOBUF_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "apollo_msgs/proto/common/header.pb.h"
#include "apollo_msgs/proto/common/geometry.pb.h"
#include "apollo_msgs/proto/prediction/prediction_obstacle.pb.h"
#include "apollo_msgs/proto/canbus/chassis.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace decision {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

class Debug;
class DecisionResult;
class EmergencyStopCruiseToStop;
class EmergencyStopHardBrake;
class LatencyStats;
class LightSignal;
class MainChangeLane;
class MainCruise;
class MainDecision;
class MainEmergencyStop;
class MainMissionComplete;
class MainNotReady;
class MainParking;
class MainStop;
class MasterVehicleDebug;
class ModuleDebug;
class ObjectAvoid;
class ObjectDebug;
class ObjectDecision;
class ObjectDecisionType;
class ObjectDecisions;
class ObjectFollow;
class ObjectIgnore;
class ObjectNudge;
class ObjectOvertake;
class ObjectSidePass;
class ObjectStop;
class ObjectYield;
class Range;
class Stats;
class StopLine;
class TargetLane;

enum ObjectNudge_Type {
  ObjectNudge_Type_LEFT_NUDGE = 0,
  ObjectNudge_Type_RIGHT_NUDGE = 1,
  ObjectNudge_Type_ObjectNudge_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjectNudge_Type_ObjectNudge_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjectNudge_Type_IsValid(int value);
const ObjectNudge_Type ObjectNudge_Type_Type_MIN = ObjectNudge_Type_LEFT_NUDGE;
const ObjectNudge_Type ObjectNudge_Type_Type_MAX = ObjectNudge_Type_RIGHT_NUDGE;
const int ObjectNudge_Type_Type_ARRAYSIZE = ObjectNudge_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectNudge_Type_descriptor();
inline const ::std::string& ObjectNudge_Type_Name(ObjectNudge_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectNudge_Type_descriptor(), value);
}
inline bool ObjectNudge_Type_Parse(
    const ::std::string& name, ObjectNudge_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectNudge_Type>(
    ObjectNudge_Type_descriptor(), name, value);
}
enum ObjectSidePass_Type {
  ObjectSidePass_Type_FOLLOW = 0,
  ObjectSidePass_Type_LEAD = 1,
  ObjectSidePass_Type_ObjectSidePass_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjectSidePass_Type_ObjectSidePass_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjectSidePass_Type_IsValid(int value);
const ObjectSidePass_Type ObjectSidePass_Type_Type_MIN = ObjectSidePass_Type_FOLLOW;
const ObjectSidePass_Type ObjectSidePass_Type_Type_MAX = ObjectSidePass_Type_LEAD;
const int ObjectSidePass_Type_Type_ARRAYSIZE = ObjectSidePass_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectSidePass_Type_descriptor();
inline const ::std::string& ObjectSidePass_Type_Name(ObjectSidePass_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectSidePass_Type_descriptor(), value);
}
inline bool ObjectSidePass_Type_Parse(
    const ::std::string& name, ObjectSidePass_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectSidePass_Type>(
    ObjectSidePass_Type_descriptor(), name, value);
}
enum ObjectDecision_ObjectType {
  ObjectDecision_ObjectType_PREDICTION = 0,
  ObjectDecision_ObjectType_PERCEPTION = 1,
  ObjectDecision_ObjectType_VIRTUAL = 2,
  ObjectDecision_ObjectType_ObjectDecision_ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjectDecision_ObjectType_ObjectDecision_ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjectDecision_ObjectType_IsValid(int value);
const ObjectDecision_ObjectType ObjectDecision_ObjectType_ObjectType_MIN = ObjectDecision_ObjectType_PREDICTION;
const ObjectDecision_ObjectType ObjectDecision_ObjectType_ObjectType_MAX = ObjectDecision_ObjectType_VIRTUAL;
const int ObjectDecision_ObjectType_ObjectType_ARRAYSIZE = ObjectDecision_ObjectType_ObjectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectDecision_ObjectType_descriptor();
inline const ::std::string& ObjectDecision_ObjectType_Name(ObjectDecision_ObjectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectDecision_ObjectType_descriptor(), value);
}
inline bool ObjectDecision_ObjectType_Parse(
    const ::std::string& name, ObjectDecision_ObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectDecision_ObjectType>(
    ObjectDecision_ObjectType_descriptor(), name, value);
}
enum MainEmergencyStop_ReasonCode {
  MainEmergencyStop_ReasonCode_ESTOP_REASON_INTERNAL_ERR = 0,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_COLLISION = 1,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_FIND_PATH = 2,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_MAKE_DECISION = 3,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_SENSOR_ERROR = 4,
  MainEmergencyStop_ReasonCode_MainEmergencyStop_ReasonCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MainEmergencyStop_ReasonCode_MainEmergencyStop_ReasonCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MainEmergencyStop_ReasonCode_IsValid(int value);
const MainEmergencyStop_ReasonCode MainEmergencyStop_ReasonCode_ReasonCode_MIN = MainEmergencyStop_ReasonCode_ESTOP_REASON_INTERNAL_ERR;
const MainEmergencyStop_ReasonCode MainEmergencyStop_ReasonCode_ReasonCode_MAX = MainEmergencyStop_ReasonCode_ESTOP_REASON_SENSOR_ERROR;
const int MainEmergencyStop_ReasonCode_ReasonCode_ARRAYSIZE = MainEmergencyStop_ReasonCode_ReasonCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor();
inline const ::std::string& MainEmergencyStop_ReasonCode_Name(MainEmergencyStop_ReasonCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MainEmergencyStop_ReasonCode_descriptor(), value);
}
inline bool MainEmergencyStop_ReasonCode_Parse(
    const ::std::string& name, MainEmergencyStop_ReasonCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MainEmergencyStop_ReasonCode>(
    MainEmergencyStop_ReasonCode_descriptor(), name, value);
}
enum MainChangeLane_Type {
  MainChangeLane_Type_LEFT = 0,
  MainChangeLane_Type_RIGHT = 1,
  MainChangeLane_Type_MainChangeLane_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MainChangeLane_Type_MainChangeLane_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MainChangeLane_Type_IsValid(int value);
const MainChangeLane_Type MainChangeLane_Type_Type_MIN = MainChangeLane_Type_LEFT;
const MainChangeLane_Type MainChangeLane_Type_Type_MAX = MainChangeLane_Type_RIGHT;
const int MainChangeLane_Type_Type_ARRAYSIZE = MainChangeLane_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MainChangeLane_Type_descriptor();
inline const ::std::string& MainChangeLane_Type_Name(MainChangeLane_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MainChangeLane_Type_descriptor(), value);
}
inline bool MainChangeLane_Type_Parse(
    const ::std::string& name, MainChangeLane_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MainChangeLane_Type>(
    MainChangeLane_Type_descriptor(), name, value);
}
enum MainParking_Type {
  MainParking_Type_FORWARD_PARKING = 0,
  MainParking_Type_REVERSE_PARKING = 1,
  MainParking_Type_MainParking_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MainParking_Type_MainParking_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MainParking_Type_IsValid(int value);
const MainParking_Type MainParking_Type_Type_MIN = MainParking_Type_FORWARD_PARKING;
const MainParking_Type MainParking_Type_Type_MAX = MainParking_Type_REVERSE_PARKING;
const int MainParking_Type_Type_ARRAYSIZE = MainParking_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MainParking_Type_descriptor();
inline const ::std::string& MainParking_Type_Name(MainParking_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MainParking_Type_descriptor(), value);
}
inline bool MainParking_Type_Parse(
    const ::std::string& name, MainParking_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MainParking_Type>(
    MainParking_Type_descriptor(), name, value);
}
enum LightSignal_TurnSignal {
  LightSignal_TurnSignal_NO_TURN = 0,
  LightSignal_TurnSignal_LEFT_TURN = 1,
  LightSignal_TurnSignal_RIGHT_TURN = 2,
  LightSignal_TurnSignal_LightSignal_TurnSignal_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LightSignal_TurnSignal_LightSignal_TurnSignal_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LightSignal_TurnSignal_IsValid(int value);
const LightSignal_TurnSignal LightSignal_TurnSignal_TurnSignal_MIN = LightSignal_TurnSignal_NO_TURN;
const LightSignal_TurnSignal LightSignal_TurnSignal_TurnSignal_MAX = LightSignal_TurnSignal_RIGHT_TURN;
const int LightSignal_TurnSignal_TurnSignal_ARRAYSIZE = LightSignal_TurnSignal_TurnSignal_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightSignal_TurnSignal_descriptor();
inline const ::std::string& LightSignal_TurnSignal_Name(LightSignal_TurnSignal value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightSignal_TurnSignal_descriptor(), value);
}
inline bool LightSignal_TurnSignal_Parse(
    const ::std::string& name, LightSignal_TurnSignal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightSignal_TurnSignal>(
    LightSignal_TurnSignal_descriptor(), name, value);
}
enum StopReasonCode {
  STOP_REASON_HEAD_VEHICLE = 0,
  STOP_REASON_DESTINATION = 1,
  STOP_REASON_PEDESTRIAN = 2,
  STOP_REASON_OBSTACLE = 3,
  STOP_REASON_PREPARKING = 4,
  STOP_REASON_SIGNAL = 100,
  STOP_REASON_STOP_SIGN = 101,
  STOP_REASON_YIELD_SIGN = 102,
  STOP_REASON_CLEAR_ZONE = 103,
  STOP_REASON_CROSSWALK = 104,
  StopReasonCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StopReasonCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StopReasonCode_IsValid(int value);
const StopReasonCode StopReasonCode_MIN = STOP_REASON_HEAD_VEHICLE;
const StopReasonCode StopReasonCode_MAX = STOP_REASON_CROSSWALK;
const int StopReasonCode_ARRAYSIZE = StopReasonCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StopReasonCode_descriptor();
inline const ::std::string& StopReasonCode_Name(StopReasonCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StopReasonCode_descriptor(), value);
}
inline bool StopReasonCode_Parse(
    const ::std::string& name, StopReasonCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopReasonCode>(
    StopReasonCode_descriptor(), name, value);
}
// ===================================================================

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  void Swap(Range* other);

  // implements Message ----------------------------------------------

  inline Range* New() const { return New(NULL); }

  Range* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  double start() const;
  void set_start(double value);

  // optional double end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  double end() const;
  void set_end(double value);

  // @@protoc_insertion_point(class_scope:apollo.decision.Range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double start_;
  double end_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static Range* default_instance_;
};
// -------------------------------------------------------------------

class TargetLane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.TargetLane) */ {
 public:
  TargetLane();
  virtual ~TargetLane();

  TargetLane(const TargetLane& from);

  inline TargetLane& operator=(const TargetLane& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetLane& default_instance();

  void Swap(TargetLane* other);

  // implements Message ----------------------------------------------

  inline TargetLane* New() const { return New(NULL); }

  TargetLane* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetLane& from);
  void MergeFrom(const TargetLane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TargetLane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional double start_s = 2;
  void clear_start_s();
  static const int kStartSFieldNumber = 2;
  double start_s() const;
  void set_start_s(double value);

  // optional double end_s = 3;
  void clear_end_s();
  static const int kEndSFieldNumber = 3;
  double end_s() const;
  void set_end_s(double value);

  // optional double speed_limit = 4;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 4;
  double speed_limit() const;
  void set_speed_limit(double value);

  // @@protoc_insertion_point(class_scope:apollo.decision.TargetLane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double start_s_;
  double end_s_;
  double speed_limit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static TargetLane* default_instance_;
};
// -------------------------------------------------------------------

class ObjectIgnore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectIgnore) */ {
 public:
  ObjectIgnore();
  virtual ~ObjectIgnore();

  ObjectIgnore(const ObjectIgnore& from);

  inline ObjectIgnore& operator=(const ObjectIgnore& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectIgnore& default_instance();

  void Swap(ObjectIgnore* other);

  // implements Message ----------------------------------------------

  inline ObjectIgnore* New() const { return New(NULL); }

  ObjectIgnore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectIgnore& from);
  void MergeFrom(const ObjectIgnore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectIgnore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectIgnore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectIgnore* default_instance_;
};
// -------------------------------------------------------------------

class ObjectStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectStop) */ {
 public:
  ObjectStop();
  virtual ~ObjectStop();

  ObjectStop(const ObjectStop& from);

  inline ObjectStop& operator=(const ObjectStop& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectStop& default_instance();

  void Swap(ObjectStop* other);

  // implements Message ----------------------------------------------

  inline ObjectStop* New() const { return New(NULL); }

  ObjectStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectStop& from);
  void MergeFrom(const ObjectStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double distance_s = 1;
  void clear_distance_s();
  static const int kDistanceSFieldNumber = 1;
  double distance_s() const;
  void set_distance_s(double value);

  // optional .apollo.decision.Range preferred_distance_s = 2;
  bool has_preferred_distance_s() const;
  void clear_preferred_distance_s();
  static const int kPreferredDistanceSFieldNumber = 2;
  const ::apollo::decision::Range& preferred_distance_s() const;
  ::apollo::decision::Range* mutable_preferred_distance_s();
  ::apollo::decision::Range* release_preferred_distance_s();
  void set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s);

  // optional .apollo.decision.StopReasonCode reason_code = 3;
  void clear_reason_code();
  static const int kReasonCodeFieldNumber = 3;
  ::apollo::decision::StopReasonCode reason_code() const;
  void set_reason_code(::apollo::decision::StopReasonCode value);

  // optional .apollo.common.PointENU stop_point = 4;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 4;
  const ::apollo::common::PointENU& stop_point() const;
  ::apollo::common::PointENU* mutable_stop_point();
  ::apollo::common::PointENU* release_stop_point();
  void set_allocated_stop_point(::apollo::common::PointENU* stop_point);

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double distance_s_;
  ::apollo::decision::Range* preferred_distance_s_;
  ::apollo::common::PointENU* stop_point_;
  int reason_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectStop* default_instance_;
};
// -------------------------------------------------------------------

class ObjectNudge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectNudge) */ {
 public:
  ObjectNudge();
  virtual ~ObjectNudge();

  ObjectNudge(const ObjectNudge& from);

  inline ObjectNudge& operator=(const ObjectNudge& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectNudge& default_instance();

  void Swap(ObjectNudge* other);

  // implements Message ----------------------------------------------

  inline ObjectNudge* New() const { return New(NULL); }

  ObjectNudge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectNudge& from);
  void MergeFrom(const ObjectNudge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectNudge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ObjectNudge_Type Type;
  static const Type LEFT_NUDGE =
    ObjectNudge_Type_LEFT_NUDGE;
  static const Type RIGHT_NUDGE =
    ObjectNudge_Type_RIGHT_NUDGE;
  static inline bool Type_IsValid(int value) {
    return ObjectNudge_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ObjectNudge_Type_Type_MIN;
  static const Type Type_MAX =
    ObjectNudge_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ObjectNudge_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ObjectNudge_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ObjectNudge_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ObjectNudge_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double distance_l = 1;
  void clear_distance_l();
  static const int kDistanceLFieldNumber = 1;
  double distance_l() const;
  void set_distance_l(double value);

  // optional .apollo.decision.ObjectNudge.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::apollo::decision::ObjectNudge_Type type() const;
  void set_type(::apollo::decision::ObjectNudge_Type value);

  // optional .apollo.decision.Range preferred_distance_l = 3;
  bool has_preferred_distance_l() const;
  void clear_preferred_distance_l();
  static const int kPreferredDistanceLFieldNumber = 3;
  const ::apollo::decision::Range& preferred_distance_l() const;
  ::apollo::decision::Range* mutable_preferred_distance_l();
  ::apollo::decision::Range* release_preferred_distance_l();
  void set_allocated_preferred_distance_l(::apollo::decision::Range* preferred_distance_l);

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectNudge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double distance_l_;
  ::apollo::decision::Range* preferred_distance_l_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectNudge* default_instance_;
};
// -------------------------------------------------------------------

class ObjectYield : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectYield) */ {
 public:
  ObjectYield();
  virtual ~ObjectYield();

  ObjectYield(const ObjectYield& from);

  inline ObjectYield& operator=(const ObjectYield& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectYield& default_instance();

  void Swap(ObjectYield* other);

  // implements Message ----------------------------------------------

  inline ObjectYield* New() const { return New(NULL); }

  ObjectYield* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectYield& from);
  void MergeFrom(const ObjectYield& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectYield* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double distance_s = 1;
  void clear_distance_s();
  static const int kDistanceSFieldNumber = 1;
  double distance_s() const;
  void set_distance_s(double value);

  // optional .apollo.decision.Range preferred_distance_s = 2;
  bool has_preferred_distance_s() const;
  void clear_preferred_distance_s();
  static const int kPreferredDistanceSFieldNumber = 2;
  const ::apollo::decision::Range& preferred_distance_s() const;
  ::apollo::decision::Range* mutable_preferred_distance_s();
  ::apollo::decision::Range* release_preferred_distance_s();
  void set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s);

  // optional .apollo.common.PointENU yield_point = 3;
  bool has_yield_point() const;
  void clear_yield_point();
  static const int kYieldPointFieldNumber = 3;
  const ::apollo::common::PointENU& yield_point() const;
  ::apollo::common::PointENU* mutable_yield_point();
  ::apollo::common::PointENU* release_yield_point();
  void set_allocated_yield_point(::apollo::common::PointENU* yield_point);

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectYield)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double distance_s_;
  ::apollo::decision::Range* preferred_distance_s_;
  ::apollo::common::PointENU* yield_point_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectYield* default_instance_;
};
// -------------------------------------------------------------------

class ObjectFollow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectFollow) */ {
 public:
  ObjectFollow();
  virtual ~ObjectFollow();

  ObjectFollow(const ObjectFollow& from);

  inline ObjectFollow& operator=(const ObjectFollow& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectFollow& default_instance();

  void Swap(ObjectFollow* other);

  // implements Message ----------------------------------------------

  inline ObjectFollow* New() const { return New(NULL); }

  ObjectFollow* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectFollow& from);
  void MergeFrom(const ObjectFollow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectFollow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double distance_s = 1;
  void clear_distance_s();
  static const int kDistanceSFieldNumber = 1;
  double distance_s() const;
  void set_distance_s(double value);

  // optional .apollo.decision.Range preferred_distance_s = 2;
  bool has_preferred_distance_s() const;
  void clear_preferred_distance_s();
  static const int kPreferredDistanceSFieldNumber = 2;
  const ::apollo::decision::Range& preferred_distance_s() const;
  ::apollo::decision::Range* mutable_preferred_distance_s();
  ::apollo::decision::Range* release_preferred_distance_s();
  void set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s);

  // optional .apollo.common.PointENU follow_point = 3;
  bool has_follow_point() const;
  void clear_follow_point();
  static const int kFollowPointFieldNumber = 3;
  const ::apollo::common::PointENU& follow_point() const;
  ::apollo::common::PointENU* mutable_follow_point();
  ::apollo::common::PointENU* release_follow_point();
  void set_allocated_follow_point(::apollo::common::PointENU* follow_point);

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectFollow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double distance_s_;
  ::apollo::decision::Range* preferred_distance_s_;
  ::apollo::common::PointENU* follow_point_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectFollow* default_instance_;
};
// -------------------------------------------------------------------

class ObjectOvertake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectOvertake) */ {
 public:
  ObjectOvertake();
  virtual ~ObjectOvertake();

  ObjectOvertake(const ObjectOvertake& from);

  inline ObjectOvertake& operator=(const ObjectOvertake& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectOvertake& default_instance();

  void Swap(ObjectOvertake* other);

  // implements Message ----------------------------------------------

  inline ObjectOvertake* New() const { return New(NULL); }

  ObjectOvertake* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectOvertake& from);
  void MergeFrom(const ObjectOvertake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectOvertake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double distance_s = 1;
  void clear_distance_s();
  static const int kDistanceSFieldNumber = 1;
  double distance_s() const;
  void set_distance_s(double value);

  // optional .apollo.decision.Range preferred_distance_s = 2;
  bool has_preferred_distance_s() const;
  void clear_preferred_distance_s();
  static const int kPreferredDistanceSFieldNumber = 2;
  const ::apollo::decision::Range& preferred_distance_s() const;
  ::apollo::decision::Range* mutable_preferred_distance_s();
  ::apollo::decision::Range* release_preferred_distance_s();
  void set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s);

  // optional .apollo.common.PointENU overtake_point = 3;
  bool has_overtake_point() const;
  void clear_overtake_point();
  static const int kOvertakePointFieldNumber = 3;
  const ::apollo::common::PointENU& overtake_point() const;
  ::apollo::common::PointENU* mutable_overtake_point();
  ::apollo::common::PointENU* release_overtake_point();
  void set_allocated_overtake_point(::apollo::common::PointENU* overtake_point);

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectOvertake)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double distance_s_;
  ::apollo::decision::Range* preferred_distance_s_;
  ::apollo::common::PointENU* overtake_point_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectOvertake* default_instance_;
};
// -------------------------------------------------------------------

class ObjectSidePass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectSidePass) */ {
 public:
  ObjectSidePass();
  virtual ~ObjectSidePass();

  ObjectSidePass(const ObjectSidePass& from);

  inline ObjectSidePass& operator=(const ObjectSidePass& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectSidePass& default_instance();

  void Swap(ObjectSidePass* other);

  // implements Message ----------------------------------------------

  inline ObjectSidePass* New() const { return New(NULL); }

  ObjectSidePass* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectSidePass& from);
  void MergeFrom(const ObjectSidePass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectSidePass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ObjectSidePass_Type Type;
  static const Type FOLLOW =
    ObjectSidePass_Type_FOLLOW;
  static const Type LEAD =
    ObjectSidePass_Type_LEAD;
  static inline bool Type_IsValid(int value) {
    return ObjectSidePass_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ObjectSidePass_Type_Type_MIN;
  static const Type Type_MAX =
    ObjectSidePass_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ObjectSidePass_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ObjectSidePass_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ObjectSidePass_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ObjectSidePass_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double distance_s = 1;
  void clear_distance_s();
  static const int kDistanceSFieldNumber = 1;
  double distance_s() const;
  void set_distance_s(double value);

  // optional .apollo.decision.Range preferred_distance_s = 2;
  bool has_preferred_distance_s() const;
  void clear_preferred_distance_s();
  static const int kPreferredDistanceSFieldNumber = 2;
  const ::apollo::decision::Range& preferred_distance_s() const;
  ::apollo::decision::Range* mutable_preferred_distance_s();
  ::apollo::decision::Range* release_preferred_distance_s();
  void set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s);

  // optional .apollo.decision.ObjectSidePass.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::apollo::decision::ObjectSidePass_Type type() const;
  void set_type(::apollo::decision::ObjectSidePass_Type value);

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectSidePass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double distance_s_;
  ::apollo::decision::Range* preferred_distance_s_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectSidePass* default_instance_;
};
// -------------------------------------------------------------------

class ObjectAvoid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectAvoid) */ {
 public:
  ObjectAvoid();
  virtual ~ObjectAvoid();

  ObjectAvoid(const ObjectAvoid& from);

  inline ObjectAvoid& operator=(const ObjectAvoid& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectAvoid& default_instance();

  void Swap(ObjectAvoid* other);

  // implements Message ----------------------------------------------

  inline ObjectAvoid* New() const { return New(NULL); }

  ObjectAvoid* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectAvoid& from);
  void MergeFrom(const ObjectAvoid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectAvoid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectAvoid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectAvoid* default_instance_;
};
// -------------------------------------------------------------------

class ObjectDecisionType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectDecisionType) */ {
 public:
  ObjectDecisionType();
  virtual ~ObjectDecisionType();

  ObjectDecisionType(const ObjectDecisionType& from);

  inline ObjectDecisionType& operator=(const ObjectDecisionType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectDecisionType& default_instance();

  enum ObjectTagCase {
    kIgnore = 1,
    kStop = 2,
    kFollow = 3,
    kYield = 4,
    kOvertake = 5,
    kNudge = 6,
    kSidepass = 7,
    kAvoid = 8,
    OBJECT_TAG_NOT_SET = 0,
  };

  void Swap(ObjectDecisionType* other);

  // implements Message ----------------------------------------------

  inline ObjectDecisionType* New() const { return New(NULL); }

  ObjectDecisionType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectDecisionType& from);
  void MergeFrom(const ObjectDecisionType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectDecisionType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.decision.ObjectIgnore ignore = 1;
  bool has_ignore() const;
  void clear_ignore();
  static const int kIgnoreFieldNumber = 1;
  const ::apollo::decision::ObjectIgnore& ignore() const;
  ::apollo::decision::ObjectIgnore* mutable_ignore();
  ::apollo::decision::ObjectIgnore* release_ignore();
  void set_allocated_ignore(::apollo::decision::ObjectIgnore* ignore);

  // optional .apollo.decision.ObjectStop stop = 2;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 2;
  const ::apollo::decision::ObjectStop& stop() const;
  ::apollo::decision::ObjectStop* mutable_stop();
  ::apollo::decision::ObjectStop* release_stop();
  void set_allocated_stop(::apollo::decision::ObjectStop* stop);

  // optional .apollo.decision.ObjectFollow follow = 3;
  bool has_follow() const;
  void clear_follow();
  static const int kFollowFieldNumber = 3;
  const ::apollo::decision::ObjectFollow& follow() const;
  ::apollo::decision::ObjectFollow* mutable_follow();
  ::apollo::decision::ObjectFollow* release_follow();
  void set_allocated_follow(::apollo::decision::ObjectFollow* follow);

  // optional .apollo.decision.ObjectYield yield = 4;
  bool has_yield() const;
  void clear_yield();
  static const int kYieldFieldNumber = 4;
  const ::apollo::decision::ObjectYield& yield() const;
  ::apollo::decision::ObjectYield* mutable_yield();
  ::apollo::decision::ObjectYield* release_yield();
  void set_allocated_yield(::apollo::decision::ObjectYield* yield);

  // optional .apollo.decision.ObjectOvertake overtake = 5;
  bool has_overtake() const;
  void clear_overtake();
  static const int kOvertakeFieldNumber = 5;
  const ::apollo::decision::ObjectOvertake& overtake() const;
  ::apollo::decision::ObjectOvertake* mutable_overtake();
  ::apollo::decision::ObjectOvertake* release_overtake();
  void set_allocated_overtake(::apollo::decision::ObjectOvertake* overtake);

  // optional .apollo.decision.ObjectNudge nudge = 6;
  bool has_nudge() const;
  void clear_nudge();
  static const int kNudgeFieldNumber = 6;
  const ::apollo::decision::ObjectNudge& nudge() const;
  ::apollo::decision::ObjectNudge* mutable_nudge();
  ::apollo::decision::ObjectNudge* release_nudge();
  void set_allocated_nudge(::apollo::decision::ObjectNudge* nudge);

  // optional .apollo.decision.ObjectSidePass sidepass = 7;
  bool has_sidepass() const;
  void clear_sidepass();
  static const int kSidepassFieldNumber = 7;
  const ::apollo::decision::ObjectSidePass& sidepass() const;
  ::apollo::decision::ObjectSidePass* mutable_sidepass();
  ::apollo::decision::ObjectSidePass* release_sidepass();
  void set_allocated_sidepass(::apollo::decision::ObjectSidePass* sidepass);

  // optional .apollo.decision.ObjectAvoid avoid = 8;
  bool has_avoid() const;
  void clear_avoid();
  static const int kAvoidFieldNumber = 8;
  const ::apollo::decision::ObjectAvoid& avoid() const;
  ::apollo::decision::ObjectAvoid* mutable_avoid();
  ::apollo::decision::ObjectAvoid* release_avoid();
  void set_allocated_avoid(::apollo::decision::ObjectAvoid* avoid);

  ObjectTagCase object_tag_case() const;
  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectDecisionType)
 private:
  inline void set_has_ignore();
  inline void set_has_stop();
  inline void set_has_follow();
  inline void set_has_yield();
  inline void set_has_overtake();
  inline void set_has_nudge();
  inline void set_has_sidepass();
  inline void set_has_avoid();

  inline bool has_object_tag() const;
  void clear_object_tag();
  inline void clear_has_object_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ObjectTagUnion {
    ObjectTagUnion() {}
    ::apollo::decision::ObjectIgnore* ignore_;
    ::apollo::decision::ObjectStop* stop_;
    ::apollo::decision::ObjectFollow* follow_;
    ::apollo::decision::ObjectYield* yield_;
    ::apollo::decision::ObjectOvertake* overtake_;
    ::apollo::decision::ObjectNudge* nudge_;
    ::apollo::decision::ObjectSidePass* sidepass_;
    ::apollo::decision::ObjectAvoid* avoid_;
  } object_tag_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectDecisionType* default_instance_;
};
// -------------------------------------------------------------------

class ObjectDecision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectDecision) */ {
 public:
  ObjectDecision();
  virtual ~ObjectDecision();

  ObjectDecision(const ObjectDecision& from);

  inline ObjectDecision& operator=(const ObjectDecision& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectDecision& default_instance();

  void Swap(ObjectDecision* other);

  // implements Message ----------------------------------------------

  inline ObjectDecision* New() const { return New(NULL); }

  ObjectDecision* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectDecision& from);
  void MergeFrom(const ObjectDecision& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectDecision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ObjectDecision_ObjectType ObjectType;
  static const ObjectType PREDICTION =
    ObjectDecision_ObjectType_PREDICTION;
  static const ObjectType PERCEPTION =
    ObjectDecision_ObjectType_PERCEPTION;
  static const ObjectType VIRTUAL =
    ObjectDecision_ObjectType_VIRTUAL;
  static inline bool ObjectType_IsValid(int value) {
    return ObjectDecision_ObjectType_IsValid(value);
  }
  static const ObjectType ObjectType_MIN =
    ObjectDecision_ObjectType_ObjectType_MIN;
  static const ObjectType ObjectType_MAX =
    ObjectDecision_ObjectType_ObjectType_MAX;
  static const int ObjectType_ARRAYSIZE =
    ObjectDecision_ObjectType_ObjectType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ObjectType_descriptor() {
    return ObjectDecision_ObjectType_descriptor();
  }
  static inline const ::std::string& ObjectType_Name(ObjectType value) {
    return ObjectDecision_ObjectType_Name(value);
  }
  static inline bool ObjectType_Parse(const ::std::string& name,
      ObjectType* value) {
    return ObjectDecision_ObjectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.prediction.PredictionObstacle prediction = 1;
  bool has_prediction() const;
  void clear_prediction();
  static const int kPredictionFieldNumber = 1;
  const ::apollo::prediction::PredictionObstacle& prediction() const;
  ::apollo::prediction::PredictionObstacle* mutable_prediction();
  ::apollo::prediction::PredictionObstacle* release_prediction();
  void set_allocated_prediction(::apollo::prediction::PredictionObstacle* prediction);

  // optional string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .apollo.decision.ObjectDecision.ObjectType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::apollo::decision::ObjectDecision_ObjectType type() const;
  void set_type(::apollo::decision::ObjectDecision_ObjectType value);

  // optional .apollo.decision.ObjectDecisionType decision = 4;
  bool has_decision() const;
  void clear_decision();
  static const int kDecisionFieldNumber = 4;
  const ::apollo::decision::ObjectDecisionType& decision() const;
  ::apollo::decision::ObjectDecisionType* mutable_decision();
  ::apollo::decision::ObjectDecisionType* release_decision();
  void set_allocated_decision(::apollo::decision::ObjectDecisionType* decision);

  // repeated .apollo.decision.ObjectDecisionType object_decision = 5;
  int object_decision_size() const;
  void clear_object_decision();
  static const int kObjectDecisionFieldNumber = 5;
  const ::apollo::decision::ObjectDecisionType& object_decision(int index) const;
  ::apollo::decision::ObjectDecisionType* mutable_object_decision(int index);
  ::apollo::decision::ObjectDecisionType* add_object_decision();
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >*
      mutable_object_decision();
  const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >&
      object_decision() const;

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectDecision)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::prediction::PredictionObstacle* prediction_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::apollo::decision::ObjectDecisionType* decision_;
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType > object_decision_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectDecision* default_instance_;
};
// -------------------------------------------------------------------

class ObjectDecisions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectDecisions) */ {
 public:
  ObjectDecisions();
  virtual ~ObjectDecisions();

  ObjectDecisions(const ObjectDecisions& from);

  inline ObjectDecisions& operator=(const ObjectDecisions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectDecisions& default_instance();

  void Swap(ObjectDecisions* other);

  // implements Message ----------------------------------------------

  inline ObjectDecisions* New() const { return New(NULL); }

  ObjectDecisions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectDecisions& from);
  void MergeFrom(const ObjectDecisions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectDecisions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.decision.ObjectDecision decision = 1;
  int decision_size() const;
  void clear_decision();
  static const int kDecisionFieldNumber = 1;
  const ::apollo::decision::ObjectDecision& decision(int index) const;
  ::apollo::decision::ObjectDecision* mutable_decision(int index);
  ::apollo::decision::ObjectDecision* add_decision();
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecision >*
      mutable_decision();
  const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecision >&
      decision() const;

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectDecisions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecision > decision_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectDecisions* default_instance_;
};
// -------------------------------------------------------------------

class StopLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.StopLine) */ {
 public:
  StopLine();
  virtual ~StopLine();

  StopLine(const StopLine& from);

  inline StopLine& operator=(const StopLine& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopLine& default_instance();

  void Swap(StopLine* other);

  // implements Message ----------------------------------------------

  inline StopLine* New() const { return New(NULL); }

  StopLine* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopLine& from);
  void MergeFrom(const StopLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string lane_id = 1;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 1;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // optional double distance_s = 2;
  void clear_distance_s();
  static const int kDistanceSFieldNumber = 2;
  double distance_s() const;
  void set_distance_s(double value);

  // @@protoc_insertion_point(class_scope:apollo.decision.StopLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double distance_s_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static StopLine* default_instance_;
};
// -------------------------------------------------------------------

class MainStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.MainStop) */ {
 public:
  MainStop();
  virtual ~MainStop();

  MainStop(const MainStop& from);

  inline MainStop& operator=(const MainStop& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainStop& default_instance();

  void Swap(MainStop* other);

  // implements Message ----------------------------------------------

  inline MainStop* New() const { return New(NULL); }

  MainStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainStop& from);
  void MergeFrom(const MainStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.decision.StopLine enforced_line = 1;
  bool has_enforced_line() const;
  void clear_enforced_line();
  static const int kEnforcedLineFieldNumber = 1;
  const ::apollo::decision::StopLine& enforced_line() const;
  ::apollo::decision::StopLine* mutable_enforced_line();
  ::apollo::decision::StopLine* release_enforced_line();
  void set_allocated_enforced_line(::apollo::decision::StopLine* enforced_line);

  // optional .apollo.decision.StopLine preferred_start = 2;
  bool has_preferred_start() const;
  void clear_preferred_start();
  static const int kPreferredStartFieldNumber = 2;
  const ::apollo::decision::StopLine& preferred_start() const;
  ::apollo::decision::StopLine* mutable_preferred_start();
  ::apollo::decision::StopLine* release_preferred_start();
  void set_allocated_preferred_start(::apollo::decision::StopLine* preferred_start);

  // optional .apollo.decision.StopLine preferred_end = 3;
  bool has_preferred_end() const;
  void clear_preferred_end();
  static const int kPreferredEndFieldNumber = 3;
  const ::apollo::decision::StopLine& preferred_end() const;
  ::apollo::decision::StopLine* mutable_preferred_end();
  ::apollo::decision::StopLine* release_preferred_end();
  void set_allocated_preferred_end(::apollo::decision::StopLine* preferred_end);

  // optional string reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional .apollo.decision.StopReasonCode reason_code = 5;
  void clear_reason_code();
  static const int kReasonCodeFieldNumber = 5;
  ::apollo::decision::StopReasonCode reason_code() const;
  void set_reason_code(::apollo::decision::StopReasonCode value);

  // optional .apollo.common.PointENU stop_point = 6;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 6;
  const ::apollo::common::PointENU& stop_point() const;
  ::apollo::common::PointENU* mutable_stop_point();
  ::apollo::common::PointENU* release_stop_point();
  void set_allocated_stop_point(::apollo::common::PointENU* stop_point);

  // optional double stop_heading = 7;
  void clear_stop_heading();
  static const int kStopHeadingFieldNumber = 7;
  double stop_heading() const;
  void set_stop_heading(double value);

  // @@protoc_insertion_point(class_scope:apollo.decision.MainStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::decision::StopLine* enforced_line_;
  ::apollo::decision::StopLine* preferred_start_;
  ::apollo::decision::StopLine* preferred_end_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::apollo::common::PointENU* stop_point_;
  double stop_heading_;
  int reason_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainStop* default_instance_;
};
// -------------------------------------------------------------------

class EmergencyStopHardBrake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.EmergencyStopHardBrake) */ {
 public:
  EmergencyStopHardBrake();
  virtual ~EmergencyStopHardBrake();

  EmergencyStopHardBrake(const EmergencyStopHardBrake& from);

  inline EmergencyStopHardBrake& operator=(const EmergencyStopHardBrake& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmergencyStopHardBrake& default_instance();

  void Swap(EmergencyStopHardBrake* other);

  // implements Message ----------------------------------------------

  inline EmergencyStopHardBrake* New() const { return New(NULL); }

  EmergencyStopHardBrake* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmergencyStopHardBrake& from);
  void MergeFrom(const EmergencyStopHardBrake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmergencyStopHardBrake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.decision.EmergencyStopHardBrake)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static EmergencyStopHardBrake* default_instance_;
};
// -------------------------------------------------------------------

class EmergencyStopCruiseToStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.EmergencyStopCruiseToStop) */ {
 public:
  EmergencyStopCruiseToStop();
  virtual ~EmergencyStopCruiseToStop();

  EmergencyStopCruiseToStop(const EmergencyStopCruiseToStop& from);

  inline EmergencyStopCruiseToStop& operator=(const EmergencyStopCruiseToStop& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmergencyStopCruiseToStop& default_instance();

  void Swap(EmergencyStopCruiseToStop* other);

  // implements Message ----------------------------------------------

  inline EmergencyStopCruiseToStop* New() const { return New(NULL); }

  EmergencyStopCruiseToStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmergencyStopCruiseToStop& from);
  void MergeFrom(const EmergencyStopCruiseToStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmergencyStopCruiseToStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.decision.EmergencyStopCruiseToStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static EmergencyStopCruiseToStop* default_instance_;
};
// -------------------------------------------------------------------

class MainEmergencyStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.MainEmergencyStop) */ {
 public:
  MainEmergencyStop();
  virtual ~MainEmergencyStop();

  MainEmergencyStop(const MainEmergencyStop& from);

  inline MainEmergencyStop& operator=(const MainEmergencyStop& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainEmergencyStop& default_instance();

  enum TaskCase {
    kHardBrake = 3,
    kCruiseToStop = 4,
    TASK_NOT_SET = 0,
  };

  void Swap(MainEmergencyStop* other);

  // implements Message ----------------------------------------------

  inline MainEmergencyStop* New() const { return New(NULL); }

  MainEmergencyStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainEmergencyStop& from);
  void MergeFrom(const MainEmergencyStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainEmergencyStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MainEmergencyStop_ReasonCode ReasonCode;
  static const ReasonCode ESTOP_REASON_INTERNAL_ERR =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_INTERNAL_ERR;
  static const ReasonCode ESTOP_REASON_COLLISION =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_COLLISION;
  static const ReasonCode ESTOP_REASON_ST_FIND_PATH =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_FIND_PATH;
  static const ReasonCode ESTOP_REASON_ST_MAKE_DECISION =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_MAKE_DECISION;
  static const ReasonCode ESTOP_REASON_SENSOR_ERROR =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_SENSOR_ERROR;
  static inline bool ReasonCode_IsValid(int value) {
    return MainEmergencyStop_ReasonCode_IsValid(value);
  }
  static const ReasonCode ReasonCode_MIN =
    MainEmergencyStop_ReasonCode_ReasonCode_MIN;
  static const ReasonCode ReasonCode_MAX =
    MainEmergencyStop_ReasonCode_ReasonCode_MAX;
  static const int ReasonCode_ARRAYSIZE =
    MainEmergencyStop_ReasonCode_ReasonCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReasonCode_descriptor() {
    return MainEmergencyStop_ReasonCode_descriptor();
  }
  static inline const ::std::string& ReasonCode_Name(ReasonCode value) {
    return MainEmergencyStop_ReasonCode_Name(value);
  }
  static inline bool ReasonCode_Parse(const ::std::string& name,
      ReasonCode* value) {
    return MainEmergencyStop_ReasonCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional .apollo.decision.MainEmergencyStop.ReasonCode reason_code = 2;
  void clear_reason_code();
  static const int kReasonCodeFieldNumber = 2;
  ::apollo::decision::MainEmergencyStop_ReasonCode reason_code() const;
  void set_reason_code(::apollo::decision::MainEmergencyStop_ReasonCode value);

  // optional .apollo.decision.EmergencyStopHardBrake hard_brake = 3;
  bool has_hard_brake() const;
  void clear_hard_brake();
  static const int kHardBrakeFieldNumber = 3;
  const ::apollo::decision::EmergencyStopHardBrake& hard_brake() const;
  ::apollo::decision::EmergencyStopHardBrake* mutable_hard_brake();
  ::apollo::decision::EmergencyStopHardBrake* release_hard_brake();
  void set_allocated_hard_brake(::apollo::decision::EmergencyStopHardBrake* hard_brake);

  // optional .apollo.decision.EmergencyStopCruiseToStop cruise_to_stop = 4;
  bool has_cruise_to_stop() const;
  void clear_cruise_to_stop();
  static const int kCruiseToStopFieldNumber = 4;
  const ::apollo::decision::EmergencyStopCruiseToStop& cruise_to_stop() const;
  ::apollo::decision::EmergencyStopCruiseToStop* mutable_cruise_to_stop();
  ::apollo::decision::EmergencyStopCruiseToStop* release_cruise_to_stop();
  void set_allocated_cruise_to_stop(::apollo::decision::EmergencyStopCruiseToStop* cruise_to_stop);

  TaskCase task_case() const;
  // @@protoc_insertion_point(class_scope:apollo.decision.MainEmergencyStop)
 private:
  inline void set_has_hard_brake();
  inline void set_has_cruise_to_stop();

  inline bool has_task() const;
  void clear_task();
  inline void clear_has_task();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int reason_code_;
  union TaskUnion {
    TaskUnion() {}
    ::apollo::decision::EmergencyStopHardBrake* hard_brake_;
    ::apollo::decision::EmergencyStopCruiseToStop* cruise_to_stop_;
  } task_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainEmergencyStop* default_instance_;
};
// -------------------------------------------------------------------

class MainCruise : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.MainCruise) */ {
 public:
  MainCruise();
  virtual ~MainCruise();

  MainCruise(const MainCruise& from);

  inline MainCruise& operator=(const MainCruise& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainCruise& default_instance();

  void Swap(MainCruise* other);

  // implements Message ----------------------------------------------

  inline MainCruise* New() const { return New(NULL); }

  MainCruise* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainCruise& from);
  void MergeFrom(const MainCruise& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainCruise* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.decision.MainCruise)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainCruise* default_instance_;
};
// -------------------------------------------------------------------

class MainChangeLane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.MainChangeLane) */ {
 public:
  MainChangeLane();
  virtual ~MainChangeLane();

  MainChangeLane(const MainChangeLane& from);

  inline MainChangeLane& operator=(const MainChangeLane& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainChangeLane& default_instance();

  void Swap(MainChangeLane* other);

  // implements Message ----------------------------------------------

  inline MainChangeLane* New() const { return New(NULL); }

  MainChangeLane* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainChangeLane& from);
  void MergeFrom(const MainChangeLane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainChangeLane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MainChangeLane_Type Type;
  static const Type LEFT =
    MainChangeLane_Type_LEFT;
  static const Type RIGHT =
    MainChangeLane_Type_RIGHT;
  static inline bool Type_IsValid(int value) {
    return MainChangeLane_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MainChangeLane_Type_Type_MIN;
  static const Type Type_MAX =
    MainChangeLane_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MainChangeLane_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MainChangeLane_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MainChangeLane_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MainChangeLane_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.decision.MainChangeLane.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::decision::MainChangeLane_Type type() const;
  void set_type(::apollo::decision::MainChangeLane_Type value);

  // repeated .apollo.decision.TargetLane default_lane = 2;
  int default_lane_size() const;
  void clear_default_lane();
  static const int kDefaultLaneFieldNumber = 2;
  const ::apollo::decision::TargetLane& default_lane(int index) const;
  ::apollo::decision::TargetLane* mutable_default_lane(int index);
  ::apollo::decision::TargetLane* add_default_lane();
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >*
      mutable_default_lane();
  const ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >&
      default_lane() const;

  // optional .apollo.decision.MainStop default_lane_stop = 3;
  bool has_default_lane_stop() const;
  void clear_default_lane_stop();
  static const int kDefaultLaneStopFieldNumber = 3;
  const ::apollo::decision::MainStop& default_lane_stop() const;
  ::apollo::decision::MainStop* mutable_default_lane_stop();
  ::apollo::decision::MainStop* release_default_lane_stop();
  void set_allocated_default_lane_stop(::apollo::decision::MainStop* default_lane_stop);

  // optional .apollo.decision.MainStop target_lane_stop = 4;
  bool has_target_lane_stop() const;
  void clear_target_lane_stop();
  static const int kTargetLaneStopFieldNumber = 4;
  const ::apollo::decision::MainStop& target_lane_stop() const;
  ::apollo::decision::MainStop* mutable_target_lane_stop();
  ::apollo::decision::MainStop* release_target_lane_stop();
  void set_allocated_target_lane_stop(::apollo::decision::MainStop* target_lane_stop);

  // @@protoc_insertion_point(class_scope:apollo.decision.MainChangeLane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane > default_lane_;
  ::apollo::decision::MainStop* default_lane_stop_;
  ::apollo::decision::MainStop* target_lane_stop_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainChangeLane* default_instance_;
};
// -------------------------------------------------------------------

class MainMissionComplete : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.MainMissionComplete) */ {
 public:
  MainMissionComplete();
  virtual ~MainMissionComplete();

  MainMissionComplete(const MainMissionComplete& from);

  inline MainMissionComplete& operator=(const MainMissionComplete& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainMissionComplete& default_instance();

  void Swap(MainMissionComplete* other);

  // implements Message ----------------------------------------------

  inline MainMissionComplete* New() const { return New(NULL); }

  MainMissionComplete* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainMissionComplete& from);
  void MergeFrom(const MainMissionComplete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainMissionComplete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.decision.MainMissionComplete)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainMissionComplete* default_instance_;
};
// -------------------------------------------------------------------

class MainNotReady : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.MainNotReady) */ {
 public:
  MainNotReady();
  virtual ~MainNotReady();

  MainNotReady(const MainNotReady& from);

  inline MainNotReady& operator=(const MainNotReady& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainNotReady& default_instance();

  void Swap(MainNotReady* other);

  // implements Message ----------------------------------------------

  inline MainNotReady* New() const { return New(NULL); }

  MainNotReady* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainNotReady& from);
  void MergeFrom(const MainNotReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainNotReady* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:apollo.decision.MainNotReady)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainNotReady* default_instance_;
};
// -------------------------------------------------------------------

class MainParking : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.MainParking) */ {
 public:
  MainParking();
  virtual ~MainParking();

  MainParking(const MainParking& from);

  inline MainParking& operator=(const MainParking& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainParking& default_instance();

  void Swap(MainParking* other);

  // implements Message ----------------------------------------------

  inline MainParking* New() const { return New(NULL); }

  MainParking* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainParking& from);
  void MergeFrom(const MainParking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainParking* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MainParking_Type Type;
  static const Type FORWARD_PARKING =
    MainParking_Type_FORWARD_PARKING;
  static const Type REVERSE_PARKING =
    MainParking_Type_REVERSE_PARKING;
  static inline bool Type_IsValid(int value) {
    return MainParking_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MainParking_Type_Type_MIN;
  static const Type Type_MAX =
    MainParking_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MainParking_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MainParking_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MainParking_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MainParking_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.decision.MainParking.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::decision::MainParking_Type type() const;
  void set_type(::apollo::decision::MainParking_Type value);

  // optional double heading = 2;
  void clear_heading();
  static const int kHeadingFieldNumber = 2;
  double heading() const;
  void set_heading(double value);

  // optional .apollo.common.PointENU stop_point = 3;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 3;
  const ::apollo::common::PointENU& stop_point() const;
  ::apollo::common::PointENU* mutable_stop_point();
  ::apollo::common::PointENU* release_stop_point();
  void set_allocated_stop_point(::apollo::common::PointENU* stop_point);

  // repeated .apollo.common.PointENU parking_polygon = 4;
  int parking_polygon_size() const;
  void clear_parking_polygon();
  static const int kParkingPolygonFieldNumber = 4;
  const ::apollo::common::PointENU& parking_polygon(int index) const;
  ::apollo::common::PointENU* mutable_parking_polygon(int index);
  ::apollo::common::PointENU* add_parking_polygon();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >*
      mutable_parking_polygon();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >&
      parking_polygon() const;

  // @@protoc_insertion_point(class_scope:apollo.decision.MainParking)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double heading_;
  ::apollo::common::PointENU* stop_point_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU > parking_polygon_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainParking* default_instance_;
};
// -------------------------------------------------------------------

class MainDecision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.MainDecision) */ {
 public:
  MainDecision();
  virtual ~MainDecision();

  MainDecision(const MainDecision& from);

  inline MainDecision& operator=(const MainDecision& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainDecision& default_instance();

  enum TaskCase {
    kCruise = 1,
    kStop = 2,
    kEstop = 3,
    kChangeLane = 4,
    kMissionComplete = 6,
    kNotReady = 7,
    kParking = 8,
    TASK_NOT_SET = 0,
  };

  void Swap(MainDecision* other);

  // implements Message ----------------------------------------------

  inline MainDecision* New() const { return New(NULL); }

  MainDecision* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainDecision& from);
  void MergeFrom(const MainDecision& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainDecision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.decision.MainCruise cruise = 1;
  bool has_cruise() const;
  void clear_cruise();
  static const int kCruiseFieldNumber = 1;
  const ::apollo::decision::MainCruise& cruise() const;
  ::apollo::decision::MainCruise* mutable_cruise();
  ::apollo::decision::MainCruise* release_cruise();
  void set_allocated_cruise(::apollo::decision::MainCruise* cruise);

  // optional .apollo.decision.MainStop stop = 2;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 2;
  const ::apollo::decision::MainStop& stop() const;
  ::apollo::decision::MainStop* mutable_stop();
  ::apollo::decision::MainStop* release_stop();
  void set_allocated_stop(::apollo::decision::MainStop* stop);

  // optional .apollo.decision.MainEmergencyStop estop = 3;
  bool has_estop() const;
  void clear_estop();
  static const int kEstopFieldNumber = 3;
  const ::apollo::decision::MainEmergencyStop& estop() const;
  ::apollo::decision::MainEmergencyStop* mutable_estop();
  ::apollo::decision::MainEmergencyStop* release_estop();
  void set_allocated_estop(::apollo::decision::MainEmergencyStop* estop);

  // optional .apollo.decision.MainChangeLane change_lane = 4;
  bool has_change_lane() const;
  void clear_change_lane();
  static const int kChangeLaneFieldNumber = 4;
  const ::apollo::decision::MainChangeLane& change_lane() const;
  ::apollo::decision::MainChangeLane* mutable_change_lane();
  ::apollo::decision::MainChangeLane* release_change_lane();
  void set_allocated_change_lane(::apollo::decision::MainChangeLane* change_lane);

  // optional .apollo.decision.MainMissionComplete mission_complete = 6;
  bool has_mission_complete() const;
  void clear_mission_complete();
  static const int kMissionCompleteFieldNumber = 6;
  const ::apollo::decision::MainMissionComplete& mission_complete() const;
  ::apollo::decision::MainMissionComplete* mutable_mission_complete();
  ::apollo::decision::MainMissionComplete* release_mission_complete();
  void set_allocated_mission_complete(::apollo::decision::MainMissionComplete* mission_complete);

  // optional .apollo.decision.MainNotReady not_ready = 7;
  bool has_not_ready() const;
  void clear_not_ready();
  static const int kNotReadyFieldNumber = 7;
  const ::apollo::decision::MainNotReady& not_ready() const;
  ::apollo::decision::MainNotReady* mutable_not_ready();
  ::apollo::decision::MainNotReady* release_not_ready();
  void set_allocated_not_ready(::apollo::decision::MainNotReady* not_ready);

  // optional .apollo.decision.MainParking parking = 8;
  bool has_parking() const;
  void clear_parking();
  static const int kParkingFieldNumber = 8;
  const ::apollo::decision::MainParking& parking() const;
  ::apollo::decision::MainParking* mutable_parking();
  ::apollo::decision::MainParking* release_parking();
  void set_allocated_parking(::apollo::decision::MainParking* parking);

  // repeated .apollo.decision.TargetLane target_lane = 5;
  int target_lane_size() const;
  void clear_target_lane();
  static const int kTargetLaneFieldNumber = 5;
  const ::apollo::decision::TargetLane& target_lane(int index) const;
  ::apollo::decision::TargetLane* mutable_target_lane(int index);
  ::apollo::decision::TargetLane* add_target_lane();
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >*
      mutable_target_lane();
  const ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >&
      target_lane() const;

  TaskCase task_case() const;
  // @@protoc_insertion_point(class_scope:apollo.decision.MainDecision)
 private:
  inline void set_has_cruise();
  inline void set_has_stop();
  inline void set_has_estop();
  inline void set_has_change_lane();
  inline void set_has_mission_complete();
  inline void set_has_not_ready();
  inline void set_has_parking();

  inline bool has_task() const;
  void clear_task();
  inline void clear_has_task();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane > target_lane_;
  union TaskUnion {
    TaskUnion() {}
    ::apollo::decision::MainCruise* cruise_;
    ::apollo::decision::MainStop* stop_;
    ::apollo::decision::MainEmergencyStop* estop_;
    ::apollo::decision::MainChangeLane* change_lane_;
    ::apollo::decision::MainMissionComplete* mission_complete_;
    ::apollo::decision::MainNotReady* not_ready_;
    ::apollo::decision::MainParking* parking_;
  } task_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainDecision* default_instance_;
};
// -------------------------------------------------------------------

class MasterVehicleDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.MasterVehicleDebug) */ {
 public:
  MasterVehicleDebug();
  virtual ~MasterVehicleDebug();

  MasterVehicleDebug(const MasterVehicleDebug& from);

  inline MasterVehicleDebug& operator=(const MasterVehicleDebug& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterVehicleDebug& default_instance();

  void Swap(MasterVehicleDebug* other);

  // implements Message ----------------------------------------------

  inline MasterVehicleDebug* New() const { return New(NULL); }

  MasterVehicleDebug* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterVehicleDebug& from);
  void MergeFrom(const MasterVehicleDebug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MasterVehicleDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.PointENU position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::apollo::common::PointENU& position() const;
  ::apollo::common::PointENU* mutable_position();
  ::apollo::common::PointENU* release_position();
  void set_allocated_position(::apollo::common::PointENU* position);

  // optional string current_lane_id = 2;
  void clear_current_lane_id();
  static const int kCurrentLaneIdFieldNumber = 2;
  const ::std::string& current_lane_id() const;
  void set_current_lane_id(const ::std::string& value);
  void set_current_lane_id(const char* value);
  void set_current_lane_id(const char* value, size_t size);
  ::std::string* mutable_current_lane_id();
  ::std::string* release_current_lane_id();
  void set_allocated_current_lane_id(::std::string* current_lane_id);

  // optional double lane_s = 3;
  void clear_lane_s();
  static const int kLaneSFieldNumber = 3;
  double lane_s() const;
  void set_lane_s(double value);

  // optional double lane_l = 4;
  void clear_lane_l();
  static const int kLaneLFieldNumber = 4;
  double lane_l() const;
  void set_lane_l(double value);

  // optional double route_s = 5;
  void clear_route_s();
  static const int kRouteSFieldNumber = 5;
  double route_s() const;
  void set_route_s(double value);

  // optional double route_l = 6;
  void clear_route_l();
  static const int kRouteLFieldNumber = 6;
  double route_l() const;
  void set_route_l(double value);

  // optional double heading = 7;
  void clear_heading();
  static const int kHeadingFieldNumber = 7;
  double heading() const;
  void set_heading(double value);

  // optional double heading_speed = 8;
  void clear_heading_speed();
  static const int kHeadingSpeedFieldNumber = 8;
  double heading_speed() const;
  void set_heading_speed(double value);

  // optional double heading_acceleration = 9;
  void clear_heading_acceleration();
  static const int kHeadingAccelerationFieldNumber = 9;
  double heading_acceleration() const;
  void set_heading_acceleration(double value);

  // optional .apollo.decision.Range route_s_range = 10;
  bool has_route_s_range() const;
  void clear_route_s_range();
  static const int kRouteSRangeFieldNumber = 10;
  const ::apollo::decision::Range& route_s_range() const;
  ::apollo::decision::Range* mutable_route_s_range();
  ::apollo::decision::Range* release_route_s_range();
  void set_allocated_route_s_range(::apollo::decision::Range* route_s_range);

  // optional .apollo.decision.Range route_l_range = 11;
  bool has_route_l_range() const;
  void clear_route_l_range();
  static const int kRouteLRangeFieldNumber = 11;
  const ::apollo::decision::Range& route_l_range() const;
  ::apollo::decision::Range* mutable_route_l_range();
  ::apollo::decision::Range* release_route_l_range();
  void set_allocated_route_l_range(::apollo::decision::Range* route_l_range);

  // @@protoc_insertion_point(class_scope:apollo.decision.MasterVehicleDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::common::PointENU* position_;
  ::google::protobuf::internal::ArenaStringPtr current_lane_id_;
  double lane_s_;
  double lane_l_;
  double route_s_;
  double route_l_;
  double heading_;
  double heading_speed_;
  double heading_acceleration_;
  ::apollo::decision::Range* route_s_range_;
  ::apollo::decision::Range* route_l_range_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MasterVehicleDebug* default_instance_;
};
// -------------------------------------------------------------------

class ObjectDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ObjectDebug) */ {
 public:
  ObjectDebug();
  virtual ~ObjectDebug();

  ObjectDebug(const ObjectDebug& from);

  inline ObjectDebug& operator=(const ObjectDebug& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectDebug& default_instance();

  void Swap(ObjectDebug* other);

  // implements Message ----------------------------------------------

  inline ObjectDebug* New() const { return New(NULL); }

  ObjectDebug* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectDebug& from);
  void MergeFrom(const ObjectDebug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string path_id = 2;
  void clear_path_id();
  static const int kPathIdFieldNumber = 2;
  const ::std::string& path_id() const;
  void set_path_id(const ::std::string& value);
  void set_path_id(const char* value);
  void set_path_id(const char* value, size_t size);
  ::std::string* mutable_path_id();
  ::std::string* release_path_id();
  void set_allocated_path_id(::std::string* path_id);

  // optional .apollo.decision.Range route_s = 3;
  bool has_route_s() const;
  void clear_route_s();
  static const int kRouteSFieldNumber = 3;
  const ::apollo::decision::Range& route_s() const;
  ::apollo::decision::Range* mutable_route_s();
  ::apollo::decision::Range* release_route_s();
  void set_allocated_route_s(::apollo::decision::Range* route_s);

  // optional .apollo.decision.Range route_l = 4;
  bool has_route_l() const;
  void clear_route_l();
  static const int kRouteLFieldNumber = 4;
  const ::apollo::decision::Range& route_l() const;
  ::apollo::decision::Range* mutable_route_l();
  ::apollo::decision::Range* release_route_l();
  void set_allocated_route_l(::apollo::decision::Range* route_l);

  // optional bool on_route = 5;
  void clear_on_route();
  static const int kOnRouteFieldNumber = 5;
  bool on_route() const;
  void set_on_route(bool value);

  // optional string lane_id = 6;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 6;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // optional double lane_s = 7;
  void clear_lane_s();
  static const int kLaneSFieldNumber = 7;
  double lane_s() const;
  void set_lane_s(double value);

  // optional bool on_lane = 8;
  void clear_on_lane();
  static const int kOnLaneFieldNumber = 8;
  bool on_lane() const;
  void set_on_lane(bool value);

  // optional double path_speed = 9;
  void clear_path_speed();
  static const int kPathSpeedFieldNumber = 9;
  double path_speed() const;
  void set_path_speed(double value);

  // repeated .apollo.common.Point3D st_region = 10;
  int st_region_size() const;
  void clear_st_region();
  static const int kStRegionFieldNumber = 10;
  const ::apollo::common::Point3D& st_region(int index) const;
  ::apollo::common::Point3D* mutable_st_region(int index);
  ::apollo::common::Point3D* add_st_region();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_st_region();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
      st_region() const;

  // @@protoc_insertion_point(class_scope:apollo.decision.ObjectDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr path_id_;
  ::apollo::decision::Range* route_s_;
  ::apollo::decision::Range* route_l_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double lane_s_;
  double path_speed_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D > st_region_;
  bool on_route_;
  bool on_lane_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectDebug* default_instance_;
};
// -------------------------------------------------------------------

class LatencyStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.LatencyStats) */ {
 public:
  LatencyStats();
  virtual ~LatencyStats();

  LatencyStats(const LatencyStats& from);

  inline LatencyStats& operator=(const LatencyStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyStats& default_instance();

  void Swap(LatencyStats* other);

  // implements Message ----------------------------------------------

  inline LatencyStats* New() const { return New(NULL); }

  LatencyStats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LatencyStats& from);
  void MergeFrom(const LatencyStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LatencyStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double total_time_ms = 1;
  void clear_total_time_ms();
  static const int kTotalTimeMsFieldNumber = 1;
  double total_time_ms() const;
  void set_total_time_ms(double value);

  // optional double sensor_read_time_ms = 2;
  void clear_sensor_read_time_ms();
  static const int kSensorReadTimeMsFieldNumber = 2;
  double sensor_read_time_ms() const;
  void set_sensor_read_time_ms(double value);

  // optional double adc_prepare_time_ms = 3;
  void clear_adc_prepare_time_ms();
  static const int kAdcPrepareTimeMsFieldNumber = 3;
  double adc_prepare_time_ms() const;
  void set_adc_prepare_time_ms(double value);

  // optional double obj_prepare_time_ms = 4;
  void clear_obj_prepare_time_ms();
  static const int kObjPrepareTimeMsFieldNumber = 4;
  double obj_prepare_time_ms() const;
  void set_obj_prepare_time_ms(double value);

  // optional double world_rule_time_ms = 5;
  void clear_world_rule_time_ms();
  static const int kWorldRuleTimeMsFieldNumber = 5;
  double world_rule_time_ms() const;
  void set_world_rule_time_ms(double value);

  // optional double st_graph_time_ms = 6;
  void clear_st_graph_time_ms();
  static const int kStGraphTimeMsFieldNumber = 6;
  double st_graph_time_ms() const;
  void set_st_graph_time_ms(double value);

  // optional double gateway_receive_delay_ms = 8;
  void clear_gateway_receive_delay_ms();
  static const int kGatewayReceiveDelayMsFieldNumber = 8;
  double gateway_receive_delay_ms() const;
  void set_gateway_receive_delay_ms(double value);

  // optional double perception_receive_delay_ms = 9;
  void clear_perception_receive_delay_ms();
  static const int kPerceptionReceiveDelayMsFieldNumber = 9;
  double perception_receive_delay_ms() const;
  void set_perception_receive_delay_ms(double value);

  // optional double prediction_receive_delay_ms = 10;
  void clear_prediction_receive_delay_ms();
  static const int kPredictionReceiveDelayMsFieldNumber = 10;
  double prediction_receive_delay_ms() const;
  void set_prediction_receive_delay_ms(double value);

  // optional double signal_receive_delay_ms = 11;
  void clear_signal_receive_delay_ms();
  static const int kSignalReceiveDelayMsFieldNumber = 11;
  double signal_receive_delay_ms() const;
  void set_signal_receive_delay_ms(double value);

  // optional double perception_interval_ms = 12;
  void clear_perception_interval_ms();
  static const int kPerceptionIntervalMsFieldNumber = 12;
  double perception_interval_ms() const;
  void set_perception_interval_ms(double value);

  // optional double prediction_interval_ms = 13;
  void clear_prediction_interval_ms();
  static const int kPredictionIntervalMsFieldNumber = 13;
  double prediction_interval_ms() const;
  void set_prediction_interval_ms(double value);

  // @@protoc_insertion_point(class_scope:apollo.decision.LatencyStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double total_time_ms_;
  double sensor_read_time_ms_;
  double adc_prepare_time_ms_;
  double obj_prepare_time_ms_;
  double world_rule_time_ms_;
  double st_graph_time_ms_;
  double gateway_receive_delay_ms_;
  double perception_receive_delay_ms_;
  double prediction_receive_delay_ms_;
  double signal_receive_delay_ms_;
  double perception_interval_ms_;
  double prediction_interval_ms_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static LatencyStats* default_instance_;
};
// -------------------------------------------------------------------

class Stats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.Stats) */ {
 public:
  Stats();
  virtual ~Stats();

  Stats(const Stats& from);

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stats& default_instance();

  void Swap(Stats* other);

  // implements Message ----------------------------------------------

  inline Stats* New() const { return New(NULL); }

  Stats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Stats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.decision.LatencyStats latency_stats = 1;
  bool has_latency_stats() const;
  void clear_latency_stats();
  static const int kLatencyStatsFieldNumber = 1;
  const ::apollo::decision::LatencyStats& latency_stats() const;
  ::apollo::decision::LatencyStats* mutable_latency_stats();
  ::apollo::decision::LatencyStats* release_latency_stats();
  void set_allocated_latency_stats(::apollo::decision::LatencyStats* latency_stats);

  // @@protoc_insertion_point(class_scope:apollo.decision.Stats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::decision::LatencyStats* latency_stats_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static Stats* default_instance_;
};
// -------------------------------------------------------------------

class ModuleDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.ModuleDebug) */ {
 public:
  ModuleDebug();
  virtual ~ModuleDebug();

  ModuleDebug(const ModuleDebug& from);

  inline ModuleDebug& operator=(const ModuleDebug& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleDebug& default_instance();

  void Swap(ModuleDebug* other);

  // implements Message ----------------------------------------------

  inline ModuleDebug* New() const { return New(NULL); }

  ModuleDebug* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModuleDebug& from);
  void MergeFrom(const ModuleDebug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModuleDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gateway_sequence_num = 1;
  void clear_gateway_sequence_num();
  static const int kGatewaySequenceNumFieldNumber = 1;
  ::google::protobuf::uint32 gateway_sequence_num() const;
  void set_gateway_sequence_num(::google::protobuf::uint32 value);

  // optional uint32 perception_sequence_num = 2;
  void clear_perception_sequence_num();
  static const int kPerceptionSequenceNumFieldNumber = 2;
  ::google::protobuf::uint32 perception_sequence_num() const;
  void set_perception_sequence_num(::google::protobuf::uint32 value);

  // optional uint32 prediction_sequence_num = 3;
  void clear_prediction_sequence_num();
  static const int kPredictionSequenceNumFieldNumber = 3;
  ::google::protobuf::uint32 prediction_sequence_num() const;
  void set_prediction_sequence_num(::google::protobuf::uint32 value);

  // optional uint32 signal_sequence_num = 4;
  void clear_signal_sequence_num();
  static const int kSignalSequenceNumFieldNumber = 4;
  ::google::protobuf::uint32 signal_sequence_num() const;
  void set_signal_sequence_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.decision.ModuleDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 gateway_sequence_num_;
  ::google::protobuf::uint32 perception_sequence_num_;
  ::google::protobuf::uint32 prediction_sequence_num_;
  ::google::protobuf::uint32 signal_sequence_num_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ModuleDebug* default_instance_;
};
// -------------------------------------------------------------------

class Debug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.Debug) */ {
 public:
  Debug();
  virtual ~Debug();

  Debug(const Debug& from);

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug& default_instance();

  void Swap(Debug* other);

  // implements Message ----------------------------------------------

  inline Debug* New() const { return New(NULL); }

  Debug* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug& from);
  void MergeFrom(const Debug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Debug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.decision.MasterVehicleDebug master_vehicle = 1;
  bool has_master_vehicle() const;
  void clear_master_vehicle();
  static const int kMasterVehicleFieldNumber = 1;
  const ::apollo::decision::MasterVehicleDebug& master_vehicle() const;
  ::apollo::decision::MasterVehicleDebug* mutable_master_vehicle();
  ::apollo::decision::MasterVehicleDebug* release_master_vehicle();
  void set_allocated_master_vehicle(::apollo::decision::MasterVehicleDebug* master_vehicle);

  // optional .apollo.decision.MainDecision original_decision = 2;
  bool has_original_decision() const;
  void clear_original_decision();
  static const int kOriginalDecisionFieldNumber = 2;
  const ::apollo::decision::MainDecision& original_decision() const;
  ::apollo::decision::MainDecision* mutable_original_decision();
  ::apollo::decision::MainDecision* release_original_decision();
  void set_allocated_original_decision(::apollo::decision::MainDecision* original_decision);

  // repeated .apollo.decision.ObjectDebug object = 3;
  int object_size() const;
  void clear_object();
  static const int kObjectFieldNumber = 3;
  const ::apollo::decision::ObjectDebug& object(int index) const;
  ::apollo::decision::ObjectDebug* mutable_object(int index);
  ::apollo::decision::ObjectDebug* add_object();
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDebug >*
      mutable_object();
  const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDebug >&
      object() const;

  // optional bytes map_version = 5;
  void clear_map_version();
  static const int kMapVersionFieldNumber = 5;
  const ::std::string& map_version() const;
  void set_map_version(const ::std::string& value);
  void set_map_version(const char* value);
  void set_map_version(const void* value, size_t size);
  ::std::string* mutable_map_version();
  ::std::string* release_map_version();
  void set_allocated_map_version(::std::string* map_version);

  // optional bytes decision_version = 7;
  void clear_decision_version();
  static const int kDecisionVersionFieldNumber = 7;
  const ::std::string& decision_version() const;
  void set_decision_version(const ::std::string& value);
  void set_decision_version(const char* value);
  void set_decision_version(const void* value, size_t size);
  ::std::string* mutable_decision_version();
  ::std::string* release_decision_version();
  void set_allocated_decision_version(::std::string* decision_version);

  // optional .apollo.decision.ModuleDebug module_debug = 6;
  bool has_module_debug() const;
  void clear_module_debug();
  static const int kModuleDebugFieldNumber = 6;
  const ::apollo::decision::ModuleDebug& module_debug() const;
  ::apollo::decision::ModuleDebug* mutable_module_debug();
  ::apollo::decision::ModuleDebug* release_module_debug();
  void set_allocated_module_debug(::apollo::decision::ModuleDebug* module_debug);

  // @@protoc_insertion_point(class_scope:apollo.decision.Debug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::decision::MasterVehicleDebug* master_vehicle_;
  ::apollo::decision::MainDecision* original_decision_;
  ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDebug > object_;
  ::google::protobuf::internal::ArenaStringPtr map_version_;
  ::google::protobuf::internal::ArenaStringPtr decision_version_;
  ::apollo::decision::ModuleDebug* module_debug_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static Debug* default_instance_;
};
// -------------------------------------------------------------------

class LightSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.LightSignal) */ {
 public:
  LightSignal();
  virtual ~LightSignal();

  LightSignal(const LightSignal& from);

  inline LightSignal& operator=(const LightSignal& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LightSignal& default_instance();

  void Swap(LightSignal* other);

  // implements Message ----------------------------------------------

  inline LightSignal* New() const { return New(NULL); }

  LightSignal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LightSignal& from);
  void MergeFrom(const LightSignal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LightSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LightSignal_TurnSignal TurnSignal;
  static const TurnSignal NO_TURN =
    LightSignal_TurnSignal_NO_TURN;
  static const TurnSignal LEFT_TURN =
    LightSignal_TurnSignal_LEFT_TURN;
  static const TurnSignal RIGHT_TURN =
    LightSignal_TurnSignal_RIGHT_TURN;
  static inline bool TurnSignal_IsValid(int value) {
    return LightSignal_TurnSignal_IsValid(value);
  }
  static const TurnSignal TurnSignal_MIN =
    LightSignal_TurnSignal_TurnSignal_MIN;
  static const TurnSignal TurnSignal_MAX =
    LightSignal_TurnSignal_TurnSignal_MAX;
  static const int TurnSignal_ARRAYSIZE =
    LightSignal_TurnSignal_TurnSignal_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TurnSignal_descriptor() {
    return LightSignal_TurnSignal_descriptor();
  }
  static inline const ::std::string& TurnSignal_Name(TurnSignal value) {
    return LightSignal_TurnSignal_Name(value);
  }
  static inline bool TurnSignal_Parse(const ::std::string& name,
      TurnSignal* value) {
    return LightSignal_TurnSignal_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool emergency = 1;
  void clear_emergency();
  static const int kEmergencyFieldNumber = 1;
  bool emergency() const;
  void set_emergency(bool value);

  // optional .apollo.decision.LightSignal.TurnSignal turn_signal = 2;
  void clear_turn_signal();
  static const int kTurnSignalFieldNumber = 2;
  ::apollo::decision::LightSignal_TurnSignal turn_signal() const;
  void set_turn_signal(::apollo::decision::LightSignal_TurnSignal value);

  // @@protoc_insertion_point(class_scope:apollo.decision.LightSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool emergency_;
  int turn_signal_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static LightSignal* default_instance_;
};
// -------------------------------------------------------------------

class DecisionResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.decision.DecisionResult) */ {
 public:
  DecisionResult();
  virtual ~DecisionResult();

  DecisionResult(const DecisionResult& from);

  inline DecisionResult& operator=(const DecisionResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecisionResult& default_instance();

  void Swap(DecisionResult* other);

  // implements Message ----------------------------------------------

  inline DecisionResult* New() const { return New(NULL); }

  DecisionResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecisionResult& from);
  void MergeFrom(const DecisionResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DecisionResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.decision.ObjectDecisions object_decision = 2;
  bool has_object_decision() const;
  void clear_object_decision();
  static const int kObjectDecisionFieldNumber = 2;
  const ::apollo::decision::ObjectDecisions& object_decision() const;
  ::apollo::decision::ObjectDecisions* mutable_object_decision();
  ::apollo::decision::ObjectDecisions* release_object_decision();
  void set_allocated_object_decision(::apollo::decision::ObjectDecisions* object_decision);

  // optional .apollo.decision.MainDecision main_decision = 3;
  bool has_main_decision() const;
  void clear_main_decision();
  static const int kMainDecisionFieldNumber = 3;
  const ::apollo::decision::MainDecision& main_decision() const;
  ::apollo::decision::MainDecision* mutable_main_decision();
  ::apollo::decision::MainDecision* release_main_decision();
  void set_allocated_main_decision(::apollo::decision::MainDecision* main_decision);

  // optional .apollo.decision.Debug debug = 4;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 4;
  const ::apollo::decision::Debug& debug() const;
  ::apollo::decision::Debug* mutable_debug();
  ::apollo::decision::Debug* release_debug();
  void set_allocated_debug(::apollo::decision::Debug* debug);

  // optional .apollo.decision.Stats stats = 6;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 6;
  const ::apollo::decision::Stats& stats() const;
  ::apollo::decision::Stats* mutable_stats();
  ::apollo::decision::Stats* release_stats();
  void set_allocated_stats(::apollo::decision::Stats* stats);

  // optional .apollo.canbus.Signal signal = 7;
  bool has_signal() const;
  void clear_signal();
  static const int kSignalFieldNumber = 7;
  const ::apollo::canbus::Signal& signal() const;
  ::apollo::canbus::Signal* mutable_signal();
  ::apollo::canbus::Signal* release_signal();
  void set_allocated_signal(::apollo::canbus::Signal* signal);

  // optional .apollo.decision.LightSignal light_signal = 5;
  bool has_light_signal() const;
  void clear_light_signal();
  static const int kLightSignalFieldNumber = 5;
  const ::apollo::decision::LightSignal& light_signal() const;
  ::apollo::decision::LightSignal* mutable_light_signal();
  ::apollo::decision::LightSignal* release_light_signal();
  void set_allocated_light_signal(::apollo::decision::LightSignal* light_signal);

  // @@protoc_insertion_point(class_scope:apollo.decision.DecisionResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::apollo::common::Header* header_;
  ::apollo::decision::ObjectDecisions* object_decision_;
  ::apollo::decision::MainDecision* main_decision_;
  ::apollo::decision::Debug* debug_;
  ::apollo::decision::Stats* stats_;
  ::apollo::canbus::Signal* signal_;
  ::apollo::decision::LightSignal* light_signal_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static DecisionResult* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Range

// optional double start = 1;
inline void Range::clear_start() {
  start_ = 0;
}
inline double Range::start() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Range.start)
  return start_;
}
inline void Range::set_start(double value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.Range.start)
}

// optional double end = 2;
inline void Range::clear_end() {
  end_ = 0;
}
inline double Range::end() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Range.end)
  return end_;
}
inline void Range::set_end(double value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.Range.end)
}

// -------------------------------------------------------------------

// TargetLane

// optional string id = 1;
inline void TargetLane::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TargetLane::id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.TargetLane.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetLane::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.TargetLane.id)
}
inline void TargetLane::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.TargetLane.id)
}
inline void TargetLane::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.TargetLane.id)
}
inline ::std::string* TargetLane::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.TargetLane.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetLane::release_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.TargetLane.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetLane::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.TargetLane.id)
}

// optional double start_s = 2;
inline void TargetLane::clear_start_s() {
  start_s_ = 0;
}
inline double TargetLane::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.TargetLane.start_s)
  return start_s_;
}
inline void TargetLane::set_start_s(double value) {
  
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.TargetLane.start_s)
}

// optional double end_s = 3;
inline void TargetLane::clear_end_s() {
  end_s_ = 0;
}
inline double TargetLane::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.TargetLane.end_s)
  return end_s_;
}
inline void TargetLane::set_end_s(double value) {
  
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.TargetLane.end_s)
}

// optional double speed_limit = 4;
inline void TargetLane::clear_speed_limit() {
  speed_limit_ = 0;
}
inline double TargetLane::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.decision.TargetLane.speed_limit)
  return speed_limit_;
}
inline void TargetLane::set_speed_limit(double value) {
  
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.TargetLane.speed_limit)
}

// -------------------------------------------------------------------

// ObjectIgnore

// -------------------------------------------------------------------

// ObjectStop

// optional double distance_s = 1;
inline void ObjectStop::clear_distance_s() {
  distance_s_ = 0;
}
inline double ObjectStop::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectStop.distance_s)
  return distance_s_;
}
inline void ObjectStop::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectStop.distance_s)
}

// optional .apollo.decision.Range preferred_distance_s = 2;
inline bool ObjectStop::has_preferred_distance_s() const {
  return !_is_default_instance_ && preferred_distance_s_ != NULL;
}
inline void ObjectStop::clear_preferred_distance_s() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
}
inline const ::apollo::decision::Range& ObjectStop::preferred_distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectStop.preferred_distance_s)
  return preferred_distance_s_ != NULL ? *preferred_distance_s_ : *default_instance_->preferred_distance_s_;
}
inline ::apollo::decision::Range* ObjectStop::mutable_preferred_distance_s() {
  
  if (preferred_distance_s_ == NULL) {
    preferred_distance_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectStop.preferred_distance_s)
  return preferred_distance_s_;
}
inline ::apollo::decision::Range* ObjectStop::release_preferred_distance_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectStop.preferred_distance_s)
  
  ::apollo::decision::Range* temp = preferred_distance_s_;
  preferred_distance_s_ = NULL;
  return temp;
}
inline void ObjectStop::set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s) {
  delete preferred_distance_s_;
  preferred_distance_s_ = preferred_distance_s;
  if (preferred_distance_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectStop.preferred_distance_s)
}

// optional .apollo.decision.StopReasonCode reason_code = 3;
inline void ObjectStop::clear_reason_code() {
  reason_code_ = 0;
}
inline ::apollo::decision::StopReasonCode ObjectStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectStop.reason_code)
  return static_cast< ::apollo::decision::StopReasonCode >(reason_code_);
}
inline void ObjectStop::set_reason_code(::apollo::decision::StopReasonCode value) {
  
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectStop.reason_code)
}

// optional .apollo.common.PointENU stop_point = 4;
inline bool ObjectStop::has_stop_point() const {
  return !_is_default_instance_ && stop_point_ != NULL;
}
inline void ObjectStop::clear_stop_point() {
  if (GetArenaNoVirtual() == NULL && stop_point_ != NULL) delete stop_point_;
  stop_point_ = NULL;
}
inline const ::apollo::common::PointENU& ObjectStop::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectStop.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::apollo::common::PointENU* ObjectStop::mutable_stop_point() {
  
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectStop.stop_point)
  return stop_point_;
}
inline ::apollo::common::PointENU* ObjectStop::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectStop.stop_point)
  
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void ObjectStop::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectStop.stop_point)
}

// -------------------------------------------------------------------

// ObjectNudge

// optional double distance_l = 1;
inline void ObjectNudge::clear_distance_l() {
  distance_l_ = 0;
}
inline double ObjectNudge::distance_l() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectNudge.distance_l)
  return distance_l_;
}
inline void ObjectNudge::set_distance_l(double value) {
  
  distance_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectNudge.distance_l)
}

// optional .apollo.decision.ObjectNudge.Type type = 2;
inline void ObjectNudge::clear_type() {
  type_ = 0;
}
inline ::apollo::decision::ObjectNudge_Type ObjectNudge::type() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectNudge.type)
  return static_cast< ::apollo::decision::ObjectNudge_Type >(type_);
}
inline void ObjectNudge::set_type(::apollo::decision::ObjectNudge_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectNudge.type)
}

// optional .apollo.decision.Range preferred_distance_l = 3;
inline bool ObjectNudge::has_preferred_distance_l() const {
  return !_is_default_instance_ && preferred_distance_l_ != NULL;
}
inline void ObjectNudge::clear_preferred_distance_l() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_l_ != NULL) delete preferred_distance_l_;
  preferred_distance_l_ = NULL;
}
inline const ::apollo::decision::Range& ObjectNudge::preferred_distance_l() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectNudge.preferred_distance_l)
  return preferred_distance_l_ != NULL ? *preferred_distance_l_ : *default_instance_->preferred_distance_l_;
}
inline ::apollo::decision::Range* ObjectNudge::mutable_preferred_distance_l() {
  
  if (preferred_distance_l_ == NULL) {
    preferred_distance_l_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectNudge.preferred_distance_l)
  return preferred_distance_l_;
}
inline ::apollo::decision::Range* ObjectNudge::release_preferred_distance_l() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectNudge.preferred_distance_l)
  
  ::apollo::decision::Range* temp = preferred_distance_l_;
  preferred_distance_l_ = NULL;
  return temp;
}
inline void ObjectNudge::set_allocated_preferred_distance_l(::apollo::decision::Range* preferred_distance_l) {
  delete preferred_distance_l_;
  preferred_distance_l_ = preferred_distance_l;
  if (preferred_distance_l) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectNudge.preferred_distance_l)
}

// -------------------------------------------------------------------

// ObjectYield

// optional double distance_s = 1;
inline void ObjectYield::clear_distance_s() {
  distance_s_ = 0;
}
inline double ObjectYield::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectYield.distance_s)
  return distance_s_;
}
inline void ObjectYield::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectYield.distance_s)
}

// optional .apollo.decision.Range preferred_distance_s = 2;
inline bool ObjectYield::has_preferred_distance_s() const {
  return !_is_default_instance_ && preferred_distance_s_ != NULL;
}
inline void ObjectYield::clear_preferred_distance_s() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
}
inline const ::apollo::decision::Range& ObjectYield::preferred_distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectYield.preferred_distance_s)
  return preferred_distance_s_ != NULL ? *preferred_distance_s_ : *default_instance_->preferred_distance_s_;
}
inline ::apollo::decision::Range* ObjectYield::mutable_preferred_distance_s() {
  
  if (preferred_distance_s_ == NULL) {
    preferred_distance_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectYield.preferred_distance_s)
  return preferred_distance_s_;
}
inline ::apollo::decision::Range* ObjectYield::release_preferred_distance_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectYield.preferred_distance_s)
  
  ::apollo::decision::Range* temp = preferred_distance_s_;
  preferred_distance_s_ = NULL;
  return temp;
}
inline void ObjectYield::set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s) {
  delete preferred_distance_s_;
  preferred_distance_s_ = preferred_distance_s;
  if (preferred_distance_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectYield.preferred_distance_s)
}

// optional .apollo.common.PointENU yield_point = 3;
inline bool ObjectYield::has_yield_point() const {
  return !_is_default_instance_ && yield_point_ != NULL;
}
inline void ObjectYield::clear_yield_point() {
  if (GetArenaNoVirtual() == NULL && yield_point_ != NULL) delete yield_point_;
  yield_point_ = NULL;
}
inline const ::apollo::common::PointENU& ObjectYield::yield_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectYield.yield_point)
  return yield_point_ != NULL ? *yield_point_ : *default_instance_->yield_point_;
}
inline ::apollo::common::PointENU* ObjectYield::mutable_yield_point() {
  
  if (yield_point_ == NULL) {
    yield_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectYield.yield_point)
  return yield_point_;
}
inline ::apollo::common::PointENU* ObjectYield::release_yield_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectYield.yield_point)
  
  ::apollo::common::PointENU* temp = yield_point_;
  yield_point_ = NULL;
  return temp;
}
inline void ObjectYield::set_allocated_yield_point(::apollo::common::PointENU* yield_point) {
  delete yield_point_;
  yield_point_ = yield_point;
  if (yield_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectYield.yield_point)
}

// -------------------------------------------------------------------

// ObjectFollow

// optional double distance_s = 1;
inline void ObjectFollow::clear_distance_s() {
  distance_s_ = 0;
}
inline double ObjectFollow::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectFollow.distance_s)
  return distance_s_;
}
inline void ObjectFollow::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectFollow.distance_s)
}

// optional .apollo.decision.Range preferred_distance_s = 2;
inline bool ObjectFollow::has_preferred_distance_s() const {
  return !_is_default_instance_ && preferred_distance_s_ != NULL;
}
inline void ObjectFollow::clear_preferred_distance_s() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
}
inline const ::apollo::decision::Range& ObjectFollow::preferred_distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectFollow.preferred_distance_s)
  return preferred_distance_s_ != NULL ? *preferred_distance_s_ : *default_instance_->preferred_distance_s_;
}
inline ::apollo::decision::Range* ObjectFollow::mutable_preferred_distance_s() {
  
  if (preferred_distance_s_ == NULL) {
    preferred_distance_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectFollow.preferred_distance_s)
  return preferred_distance_s_;
}
inline ::apollo::decision::Range* ObjectFollow::release_preferred_distance_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectFollow.preferred_distance_s)
  
  ::apollo::decision::Range* temp = preferred_distance_s_;
  preferred_distance_s_ = NULL;
  return temp;
}
inline void ObjectFollow::set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s) {
  delete preferred_distance_s_;
  preferred_distance_s_ = preferred_distance_s;
  if (preferred_distance_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectFollow.preferred_distance_s)
}

// optional .apollo.common.PointENU follow_point = 3;
inline bool ObjectFollow::has_follow_point() const {
  return !_is_default_instance_ && follow_point_ != NULL;
}
inline void ObjectFollow::clear_follow_point() {
  if (GetArenaNoVirtual() == NULL && follow_point_ != NULL) delete follow_point_;
  follow_point_ = NULL;
}
inline const ::apollo::common::PointENU& ObjectFollow::follow_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectFollow.follow_point)
  return follow_point_ != NULL ? *follow_point_ : *default_instance_->follow_point_;
}
inline ::apollo::common::PointENU* ObjectFollow::mutable_follow_point() {
  
  if (follow_point_ == NULL) {
    follow_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectFollow.follow_point)
  return follow_point_;
}
inline ::apollo::common::PointENU* ObjectFollow::release_follow_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectFollow.follow_point)
  
  ::apollo::common::PointENU* temp = follow_point_;
  follow_point_ = NULL;
  return temp;
}
inline void ObjectFollow::set_allocated_follow_point(::apollo::common::PointENU* follow_point) {
  delete follow_point_;
  follow_point_ = follow_point;
  if (follow_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectFollow.follow_point)
}

// -------------------------------------------------------------------

// ObjectOvertake

// optional double distance_s = 1;
inline void ObjectOvertake::clear_distance_s() {
  distance_s_ = 0;
}
inline double ObjectOvertake::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectOvertake.distance_s)
  return distance_s_;
}
inline void ObjectOvertake::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectOvertake.distance_s)
}

// optional .apollo.decision.Range preferred_distance_s = 2;
inline bool ObjectOvertake::has_preferred_distance_s() const {
  return !_is_default_instance_ && preferred_distance_s_ != NULL;
}
inline void ObjectOvertake::clear_preferred_distance_s() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
}
inline const ::apollo::decision::Range& ObjectOvertake::preferred_distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectOvertake.preferred_distance_s)
  return preferred_distance_s_ != NULL ? *preferred_distance_s_ : *default_instance_->preferred_distance_s_;
}
inline ::apollo::decision::Range* ObjectOvertake::mutable_preferred_distance_s() {
  
  if (preferred_distance_s_ == NULL) {
    preferred_distance_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectOvertake.preferred_distance_s)
  return preferred_distance_s_;
}
inline ::apollo::decision::Range* ObjectOvertake::release_preferred_distance_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectOvertake.preferred_distance_s)
  
  ::apollo::decision::Range* temp = preferred_distance_s_;
  preferred_distance_s_ = NULL;
  return temp;
}
inline void ObjectOvertake::set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s) {
  delete preferred_distance_s_;
  preferred_distance_s_ = preferred_distance_s;
  if (preferred_distance_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectOvertake.preferred_distance_s)
}

// optional .apollo.common.PointENU overtake_point = 3;
inline bool ObjectOvertake::has_overtake_point() const {
  return !_is_default_instance_ && overtake_point_ != NULL;
}
inline void ObjectOvertake::clear_overtake_point() {
  if (GetArenaNoVirtual() == NULL && overtake_point_ != NULL) delete overtake_point_;
  overtake_point_ = NULL;
}
inline const ::apollo::common::PointENU& ObjectOvertake::overtake_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectOvertake.overtake_point)
  return overtake_point_ != NULL ? *overtake_point_ : *default_instance_->overtake_point_;
}
inline ::apollo::common::PointENU* ObjectOvertake::mutable_overtake_point() {
  
  if (overtake_point_ == NULL) {
    overtake_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectOvertake.overtake_point)
  return overtake_point_;
}
inline ::apollo::common::PointENU* ObjectOvertake::release_overtake_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectOvertake.overtake_point)
  
  ::apollo::common::PointENU* temp = overtake_point_;
  overtake_point_ = NULL;
  return temp;
}
inline void ObjectOvertake::set_allocated_overtake_point(::apollo::common::PointENU* overtake_point) {
  delete overtake_point_;
  overtake_point_ = overtake_point;
  if (overtake_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectOvertake.overtake_point)
}

// -------------------------------------------------------------------

// ObjectSidePass

// optional double distance_s = 1;
inline void ObjectSidePass::clear_distance_s() {
  distance_s_ = 0;
}
inline double ObjectSidePass::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectSidePass.distance_s)
  return distance_s_;
}
inline void ObjectSidePass::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectSidePass.distance_s)
}

// optional .apollo.decision.Range preferred_distance_s = 2;
inline bool ObjectSidePass::has_preferred_distance_s() const {
  return !_is_default_instance_ && preferred_distance_s_ != NULL;
}
inline void ObjectSidePass::clear_preferred_distance_s() {
  if (GetArenaNoVirtual() == NULL && preferred_distance_s_ != NULL) delete preferred_distance_s_;
  preferred_distance_s_ = NULL;
}
inline const ::apollo::decision::Range& ObjectSidePass::preferred_distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectSidePass.preferred_distance_s)
  return preferred_distance_s_ != NULL ? *preferred_distance_s_ : *default_instance_->preferred_distance_s_;
}
inline ::apollo::decision::Range* ObjectSidePass::mutable_preferred_distance_s() {
  
  if (preferred_distance_s_ == NULL) {
    preferred_distance_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectSidePass.preferred_distance_s)
  return preferred_distance_s_;
}
inline ::apollo::decision::Range* ObjectSidePass::release_preferred_distance_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectSidePass.preferred_distance_s)
  
  ::apollo::decision::Range* temp = preferred_distance_s_;
  preferred_distance_s_ = NULL;
  return temp;
}
inline void ObjectSidePass::set_allocated_preferred_distance_s(::apollo::decision::Range* preferred_distance_s) {
  delete preferred_distance_s_;
  preferred_distance_s_ = preferred_distance_s;
  if (preferred_distance_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectSidePass.preferred_distance_s)
}

// optional .apollo.decision.ObjectSidePass.Type type = 3;
inline void ObjectSidePass::clear_type() {
  type_ = 0;
}
inline ::apollo::decision::ObjectSidePass_Type ObjectSidePass::type() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectSidePass.type)
  return static_cast< ::apollo::decision::ObjectSidePass_Type >(type_);
}
inline void ObjectSidePass::set_type(::apollo::decision::ObjectSidePass_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectSidePass.type)
}

// -------------------------------------------------------------------

// ObjectAvoid

// -------------------------------------------------------------------

// ObjectDecisionType

// optional .apollo.decision.ObjectIgnore ignore = 1;
inline bool ObjectDecisionType::has_ignore() const {
  return object_tag_case() == kIgnore;
}
inline void ObjectDecisionType::set_has_ignore() {
  _oneof_case_[0] = kIgnore;
}
inline void ObjectDecisionType::clear_ignore() {
  if (has_ignore()) {
    delete object_tag_.ignore_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::decision::ObjectIgnore& ObjectDecisionType::ignore() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.ignore)
  return has_ignore()
      ? *object_tag_.ignore_
      : ::apollo::decision::ObjectIgnore::default_instance();
}
inline ::apollo::decision::ObjectIgnore* ObjectDecisionType::mutable_ignore() {
  if (!has_ignore()) {
    clear_object_tag();
    set_has_ignore();
    object_tag_.ignore_ = new ::apollo::decision::ObjectIgnore;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.ignore)
  return object_tag_.ignore_;
}
inline ::apollo::decision::ObjectIgnore* ObjectDecisionType::release_ignore() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.ignore)
  if (has_ignore()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectIgnore* temp = object_tag_.ignore_;
    object_tag_.ignore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_ignore(::apollo::decision::ObjectIgnore* ignore) {
  clear_object_tag();
  if (ignore) {
    set_has_ignore();
    object_tag_.ignore_ = ignore;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.ignore)
}

// optional .apollo.decision.ObjectStop stop = 2;
inline bool ObjectDecisionType::has_stop() const {
  return object_tag_case() == kStop;
}
inline void ObjectDecisionType::set_has_stop() {
  _oneof_case_[0] = kStop;
}
inline void ObjectDecisionType::clear_stop() {
  if (has_stop()) {
    delete object_tag_.stop_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::decision::ObjectStop& ObjectDecisionType::stop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.stop)
  return has_stop()
      ? *object_tag_.stop_
      : ::apollo::decision::ObjectStop::default_instance();
}
inline ::apollo::decision::ObjectStop* ObjectDecisionType::mutable_stop() {
  if (!has_stop()) {
    clear_object_tag();
    set_has_stop();
    object_tag_.stop_ = new ::apollo::decision::ObjectStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.stop)
  return object_tag_.stop_;
}
inline ::apollo::decision::ObjectStop* ObjectDecisionType::release_stop() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.stop)
  if (has_stop()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectStop* temp = object_tag_.stop_;
    object_tag_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_stop(::apollo::decision::ObjectStop* stop) {
  clear_object_tag();
  if (stop) {
    set_has_stop();
    object_tag_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.stop)
}

// optional .apollo.decision.ObjectFollow follow = 3;
inline bool ObjectDecisionType::has_follow() const {
  return object_tag_case() == kFollow;
}
inline void ObjectDecisionType::set_has_follow() {
  _oneof_case_[0] = kFollow;
}
inline void ObjectDecisionType::clear_follow() {
  if (has_follow()) {
    delete object_tag_.follow_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::decision::ObjectFollow& ObjectDecisionType::follow() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.follow)
  return has_follow()
      ? *object_tag_.follow_
      : ::apollo::decision::ObjectFollow::default_instance();
}
inline ::apollo::decision::ObjectFollow* ObjectDecisionType::mutable_follow() {
  if (!has_follow()) {
    clear_object_tag();
    set_has_follow();
    object_tag_.follow_ = new ::apollo::decision::ObjectFollow;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.follow)
  return object_tag_.follow_;
}
inline ::apollo::decision::ObjectFollow* ObjectDecisionType::release_follow() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.follow)
  if (has_follow()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectFollow* temp = object_tag_.follow_;
    object_tag_.follow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_follow(::apollo::decision::ObjectFollow* follow) {
  clear_object_tag();
  if (follow) {
    set_has_follow();
    object_tag_.follow_ = follow;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.follow)
}

// optional .apollo.decision.ObjectYield yield = 4;
inline bool ObjectDecisionType::has_yield() const {
  return object_tag_case() == kYield;
}
inline void ObjectDecisionType::set_has_yield() {
  _oneof_case_[0] = kYield;
}
inline void ObjectDecisionType::clear_yield() {
  if (has_yield()) {
    delete object_tag_.yield_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::decision::ObjectYield& ObjectDecisionType::yield() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.yield)
  return has_yield()
      ? *object_tag_.yield_
      : ::apollo::decision::ObjectYield::default_instance();
}
inline ::apollo::decision::ObjectYield* ObjectDecisionType::mutable_yield() {
  if (!has_yield()) {
    clear_object_tag();
    set_has_yield();
    object_tag_.yield_ = new ::apollo::decision::ObjectYield;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.yield)
  return object_tag_.yield_;
}
inline ::apollo::decision::ObjectYield* ObjectDecisionType::release_yield() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.yield)
  if (has_yield()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectYield* temp = object_tag_.yield_;
    object_tag_.yield_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_yield(::apollo::decision::ObjectYield* yield) {
  clear_object_tag();
  if (yield) {
    set_has_yield();
    object_tag_.yield_ = yield;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.yield)
}

// optional .apollo.decision.ObjectOvertake overtake = 5;
inline bool ObjectDecisionType::has_overtake() const {
  return object_tag_case() == kOvertake;
}
inline void ObjectDecisionType::set_has_overtake() {
  _oneof_case_[0] = kOvertake;
}
inline void ObjectDecisionType::clear_overtake() {
  if (has_overtake()) {
    delete object_tag_.overtake_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::decision::ObjectOvertake& ObjectDecisionType::overtake() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.overtake)
  return has_overtake()
      ? *object_tag_.overtake_
      : ::apollo::decision::ObjectOvertake::default_instance();
}
inline ::apollo::decision::ObjectOvertake* ObjectDecisionType::mutable_overtake() {
  if (!has_overtake()) {
    clear_object_tag();
    set_has_overtake();
    object_tag_.overtake_ = new ::apollo::decision::ObjectOvertake;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.overtake)
  return object_tag_.overtake_;
}
inline ::apollo::decision::ObjectOvertake* ObjectDecisionType::release_overtake() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.overtake)
  if (has_overtake()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectOvertake* temp = object_tag_.overtake_;
    object_tag_.overtake_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_overtake(::apollo::decision::ObjectOvertake* overtake) {
  clear_object_tag();
  if (overtake) {
    set_has_overtake();
    object_tag_.overtake_ = overtake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.overtake)
}

// optional .apollo.decision.ObjectNudge nudge = 6;
inline bool ObjectDecisionType::has_nudge() const {
  return object_tag_case() == kNudge;
}
inline void ObjectDecisionType::set_has_nudge() {
  _oneof_case_[0] = kNudge;
}
inline void ObjectDecisionType::clear_nudge() {
  if (has_nudge()) {
    delete object_tag_.nudge_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::decision::ObjectNudge& ObjectDecisionType::nudge() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.nudge)
  return has_nudge()
      ? *object_tag_.nudge_
      : ::apollo::decision::ObjectNudge::default_instance();
}
inline ::apollo::decision::ObjectNudge* ObjectDecisionType::mutable_nudge() {
  if (!has_nudge()) {
    clear_object_tag();
    set_has_nudge();
    object_tag_.nudge_ = new ::apollo::decision::ObjectNudge;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.nudge)
  return object_tag_.nudge_;
}
inline ::apollo::decision::ObjectNudge* ObjectDecisionType::release_nudge() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.nudge)
  if (has_nudge()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectNudge* temp = object_tag_.nudge_;
    object_tag_.nudge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_nudge(::apollo::decision::ObjectNudge* nudge) {
  clear_object_tag();
  if (nudge) {
    set_has_nudge();
    object_tag_.nudge_ = nudge;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.nudge)
}

// optional .apollo.decision.ObjectSidePass sidepass = 7;
inline bool ObjectDecisionType::has_sidepass() const {
  return object_tag_case() == kSidepass;
}
inline void ObjectDecisionType::set_has_sidepass() {
  _oneof_case_[0] = kSidepass;
}
inline void ObjectDecisionType::clear_sidepass() {
  if (has_sidepass()) {
    delete object_tag_.sidepass_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::decision::ObjectSidePass& ObjectDecisionType::sidepass() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.sidepass)
  return has_sidepass()
      ? *object_tag_.sidepass_
      : ::apollo::decision::ObjectSidePass::default_instance();
}
inline ::apollo::decision::ObjectSidePass* ObjectDecisionType::mutable_sidepass() {
  if (!has_sidepass()) {
    clear_object_tag();
    set_has_sidepass();
    object_tag_.sidepass_ = new ::apollo::decision::ObjectSidePass;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.sidepass)
  return object_tag_.sidepass_;
}
inline ::apollo::decision::ObjectSidePass* ObjectDecisionType::release_sidepass() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.sidepass)
  if (has_sidepass()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectSidePass* temp = object_tag_.sidepass_;
    object_tag_.sidepass_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_sidepass(::apollo::decision::ObjectSidePass* sidepass) {
  clear_object_tag();
  if (sidepass) {
    set_has_sidepass();
    object_tag_.sidepass_ = sidepass;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.sidepass)
}

// optional .apollo.decision.ObjectAvoid avoid = 8;
inline bool ObjectDecisionType::has_avoid() const {
  return object_tag_case() == kAvoid;
}
inline void ObjectDecisionType::set_has_avoid() {
  _oneof_case_[0] = kAvoid;
}
inline void ObjectDecisionType::clear_avoid() {
  if (has_avoid()) {
    delete object_tag_.avoid_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::decision::ObjectAvoid& ObjectDecisionType::avoid() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisionType.avoid)
  return has_avoid()
      ? *object_tag_.avoid_
      : ::apollo::decision::ObjectAvoid::default_instance();
}
inline ::apollo::decision::ObjectAvoid* ObjectDecisionType::mutable_avoid() {
  if (!has_avoid()) {
    clear_object_tag();
    set_has_avoid();
    object_tag_.avoid_ = new ::apollo::decision::ObjectAvoid;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisionType.avoid)
  return object_tag_.avoid_;
}
inline ::apollo::decision::ObjectAvoid* ObjectDecisionType::release_avoid() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecisionType.avoid)
  if (has_avoid()) {
    clear_has_object_tag();
    ::apollo::decision::ObjectAvoid* temp = object_tag_.avoid_;
    object_tag_.avoid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_avoid(::apollo::decision::ObjectAvoid* avoid) {
  clear_object_tag();
  if (avoid) {
    set_has_avoid();
    object_tag_.avoid_ = avoid;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecisionType.avoid)
}

inline bool ObjectDecisionType::has_object_tag() const {
  return object_tag_case() != OBJECT_TAG_NOT_SET;
}
inline void ObjectDecisionType::clear_has_object_tag() {
  _oneof_case_[0] = OBJECT_TAG_NOT_SET;
}
inline ObjectDecisionType::ObjectTagCase ObjectDecisionType::object_tag_case() const {
  return ObjectDecisionType::ObjectTagCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ObjectDecision

// optional .apollo.prediction.PredictionObstacle prediction = 1;
inline bool ObjectDecision::has_prediction() const {
  return !_is_default_instance_ && prediction_ != NULL;
}
inline void ObjectDecision::clear_prediction() {
  if (GetArenaNoVirtual() == NULL && prediction_ != NULL) delete prediction_;
  prediction_ = NULL;
}
inline const ::apollo::prediction::PredictionObstacle& ObjectDecision::prediction() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecision.prediction)
  return prediction_ != NULL ? *prediction_ : *default_instance_->prediction_;
}
inline ::apollo::prediction::PredictionObstacle* ObjectDecision::mutable_prediction() {
  
  if (prediction_ == NULL) {
    prediction_ = new ::apollo::prediction::PredictionObstacle;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecision.prediction)
  return prediction_;
}
inline ::apollo::prediction::PredictionObstacle* ObjectDecision::release_prediction() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecision.prediction)
  
  ::apollo::prediction::PredictionObstacle* temp = prediction_;
  prediction_ = NULL;
  return temp;
}
inline void ObjectDecision::set_allocated_prediction(::apollo::prediction::PredictionObstacle* prediction) {
  delete prediction_;
  prediction_ = prediction;
  if (prediction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecision.prediction)
}

// optional string id = 2;
inline void ObjectDecision::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectDecision::id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecision.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDecision::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDecision.id)
}
inline void ObjectDecision::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.ObjectDecision.id)
}
inline void ObjectDecision::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.ObjectDecision.id)
}
inline ::std::string* ObjectDecision::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecision.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectDecision::release_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecision.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDecision::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecision.id)
}

// optional .apollo.decision.ObjectDecision.ObjectType type = 3;
inline void ObjectDecision::clear_type() {
  type_ = 0;
}
inline ::apollo::decision::ObjectDecision_ObjectType ObjectDecision::type() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecision.type)
  return static_cast< ::apollo::decision::ObjectDecision_ObjectType >(type_);
}
inline void ObjectDecision::set_type(::apollo::decision::ObjectDecision_ObjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDecision.type)
}

// optional .apollo.decision.ObjectDecisionType decision = 4;
inline bool ObjectDecision::has_decision() const {
  return !_is_default_instance_ && decision_ != NULL;
}
inline void ObjectDecision::clear_decision() {
  if (GetArenaNoVirtual() == NULL && decision_ != NULL) delete decision_;
  decision_ = NULL;
}
inline const ::apollo::decision::ObjectDecisionType& ObjectDecision::decision() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecision.decision)
  return decision_ != NULL ? *decision_ : *default_instance_->decision_;
}
inline ::apollo::decision::ObjectDecisionType* ObjectDecision::mutable_decision() {
  
  if (decision_ == NULL) {
    decision_ = new ::apollo::decision::ObjectDecisionType;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecision.decision)
  return decision_;
}
inline ::apollo::decision::ObjectDecisionType* ObjectDecision::release_decision() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDecision.decision)
  
  ::apollo::decision::ObjectDecisionType* temp = decision_;
  decision_ = NULL;
  return temp;
}
inline void ObjectDecision::set_allocated_decision(::apollo::decision::ObjectDecisionType* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDecision.decision)
}

// repeated .apollo.decision.ObjectDecisionType object_decision = 5;
inline int ObjectDecision::object_decision_size() const {
  return object_decision_.size();
}
inline void ObjectDecision::clear_object_decision() {
  object_decision_.Clear();
}
inline const ::apollo::decision::ObjectDecisionType& ObjectDecision::object_decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecision.object_decision)
  return object_decision_.Get(index);
}
inline ::apollo::decision::ObjectDecisionType* ObjectDecision::mutable_object_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecision.object_decision)
  return object_decision_.Mutable(index);
}
inline ::apollo::decision::ObjectDecisionType* ObjectDecision::add_object_decision() {
  // @@protoc_insertion_point(field_add:apollo.decision.ObjectDecision.object_decision)
  return object_decision_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >*
ObjectDecision::mutable_object_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.ObjectDecision.object_decision)
  return &object_decision_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecisionType >&
ObjectDecision::object_decision() const {
  // @@protoc_insertion_point(field_list:apollo.decision.ObjectDecision.object_decision)
  return object_decision_;
}

// -------------------------------------------------------------------

// ObjectDecisions

// repeated .apollo.decision.ObjectDecision decision = 1;
inline int ObjectDecisions::decision_size() const {
  return decision_.size();
}
inline void ObjectDecisions::clear_decision() {
  decision_.Clear();
}
inline const ::apollo::decision::ObjectDecision& ObjectDecisions::decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDecisions.decision)
  return decision_.Get(index);
}
inline ::apollo::decision::ObjectDecision* ObjectDecisions::mutable_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDecisions.decision)
  return decision_.Mutable(index);
}
inline ::apollo::decision::ObjectDecision* ObjectDecisions::add_decision() {
  // @@protoc_insertion_point(field_add:apollo.decision.ObjectDecisions.decision)
  return decision_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecision >*
ObjectDecisions::mutable_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.ObjectDecisions.decision)
  return &decision_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDecision >&
ObjectDecisions::decision() const {
  // @@protoc_insertion_point(field_list:apollo.decision.ObjectDecisions.decision)
  return decision_;
}

// -------------------------------------------------------------------

// StopLine

// optional string lane_id = 1;
inline void StopLine::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopLine::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.StopLine.lane_id)
  return lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopLine::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.StopLine.lane_id)
}
inline void StopLine::set_lane_id(const char* value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.StopLine.lane_id)
}
inline void StopLine::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.StopLine.lane_id)
}
inline ::std::string* StopLine::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.StopLine.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopLine::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.StopLine.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopLine::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.StopLine.lane_id)
}

// optional double distance_s = 2;
inline void StopLine::clear_distance_s() {
  distance_s_ = 0;
}
inline double StopLine::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.StopLine.distance_s)
  return distance_s_;
}
inline void StopLine::set_distance_s(double value) {
  
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.StopLine.distance_s)
}

// -------------------------------------------------------------------

// MainStop

// optional .apollo.decision.StopLine enforced_line = 1;
inline bool MainStop::has_enforced_line() const {
  return !_is_default_instance_ && enforced_line_ != NULL;
}
inline void MainStop::clear_enforced_line() {
  if (GetArenaNoVirtual() == NULL && enforced_line_ != NULL) delete enforced_line_;
  enforced_line_ = NULL;
}
inline const ::apollo::decision::StopLine& MainStop::enforced_line() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.enforced_line)
  return enforced_line_ != NULL ? *enforced_line_ : *default_instance_->enforced_line_;
}
inline ::apollo::decision::StopLine* MainStop::mutable_enforced_line() {
  
  if (enforced_line_ == NULL) {
    enforced_line_ = new ::apollo::decision::StopLine;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainStop.enforced_line)
  return enforced_line_;
}
inline ::apollo::decision::StopLine* MainStop::release_enforced_line() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainStop.enforced_line)
  
  ::apollo::decision::StopLine* temp = enforced_line_;
  enforced_line_ = NULL;
  return temp;
}
inline void MainStop::set_allocated_enforced_line(::apollo::decision::StopLine* enforced_line) {
  delete enforced_line_;
  enforced_line_ = enforced_line;
  if (enforced_line) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainStop.enforced_line)
}

// optional .apollo.decision.StopLine preferred_start = 2;
inline bool MainStop::has_preferred_start() const {
  return !_is_default_instance_ && preferred_start_ != NULL;
}
inline void MainStop::clear_preferred_start() {
  if (GetArenaNoVirtual() == NULL && preferred_start_ != NULL) delete preferred_start_;
  preferred_start_ = NULL;
}
inline const ::apollo::decision::StopLine& MainStop::preferred_start() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.preferred_start)
  return preferred_start_ != NULL ? *preferred_start_ : *default_instance_->preferred_start_;
}
inline ::apollo::decision::StopLine* MainStop::mutable_preferred_start() {
  
  if (preferred_start_ == NULL) {
    preferred_start_ = new ::apollo::decision::StopLine;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainStop.preferred_start)
  return preferred_start_;
}
inline ::apollo::decision::StopLine* MainStop::release_preferred_start() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainStop.preferred_start)
  
  ::apollo::decision::StopLine* temp = preferred_start_;
  preferred_start_ = NULL;
  return temp;
}
inline void MainStop::set_allocated_preferred_start(::apollo::decision::StopLine* preferred_start) {
  delete preferred_start_;
  preferred_start_ = preferred_start;
  if (preferred_start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainStop.preferred_start)
}

// optional .apollo.decision.StopLine preferred_end = 3;
inline bool MainStop::has_preferred_end() const {
  return !_is_default_instance_ && preferred_end_ != NULL;
}
inline void MainStop::clear_preferred_end() {
  if (GetArenaNoVirtual() == NULL && preferred_end_ != NULL) delete preferred_end_;
  preferred_end_ = NULL;
}
inline const ::apollo::decision::StopLine& MainStop::preferred_end() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.preferred_end)
  return preferred_end_ != NULL ? *preferred_end_ : *default_instance_->preferred_end_;
}
inline ::apollo::decision::StopLine* MainStop::mutable_preferred_end() {
  
  if (preferred_end_ == NULL) {
    preferred_end_ = new ::apollo::decision::StopLine;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainStop.preferred_end)
  return preferred_end_;
}
inline ::apollo::decision::StopLine* MainStop::release_preferred_end() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainStop.preferred_end)
  
  ::apollo::decision::StopLine* temp = preferred_end_;
  preferred_end_ = NULL;
  return temp;
}
inline void MainStop::set_allocated_preferred_end(::apollo::decision::StopLine* preferred_end) {
  delete preferred_end_;
  preferred_end_ = preferred_end;
  if (preferred_end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainStop.preferred_end)
}

// optional string reason = 4;
inline void MainStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MainStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainStop::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.MainStop.reason)
}
inline void MainStop::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.MainStop.reason)
}
inline void MainStop::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.MainStop.reason)
}
inline ::std::string* MainStop::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MainStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainStop.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainStop.reason)
}

// optional .apollo.decision.StopReasonCode reason_code = 5;
inline void MainStop::clear_reason_code() {
  reason_code_ = 0;
}
inline ::apollo::decision::StopReasonCode MainStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.reason_code)
  return static_cast< ::apollo::decision::StopReasonCode >(reason_code_);
}
inline void MainStop::set_reason_code(::apollo::decision::StopReasonCode value) {
  
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainStop.reason_code)
}

// optional .apollo.common.PointENU stop_point = 6;
inline bool MainStop::has_stop_point() const {
  return !_is_default_instance_ && stop_point_ != NULL;
}
inline void MainStop::clear_stop_point() {
  if (GetArenaNoVirtual() == NULL && stop_point_ != NULL) delete stop_point_;
  stop_point_ = NULL;
}
inline const ::apollo::common::PointENU& MainStop::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::apollo::common::PointENU* MainStop::mutable_stop_point() {
  
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainStop.stop_point)
  return stop_point_;
}
inline ::apollo::common::PointENU* MainStop::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainStop.stop_point)
  
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void MainStop::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainStop.stop_point)
}

// optional double stop_heading = 7;
inline void MainStop::clear_stop_heading() {
  stop_heading_ = 0;
}
inline double MainStop::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainStop.stop_heading)
  return stop_heading_;
}
inline void MainStop::set_stop_heading(double value) {
  
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainStop.stop_heading)
}

// -------------------------------------------------------------------

// EmergencyStopHardBrake

// -------------------------------------------------------------------

// EmergencyStopCruiseToStop

// -------------------------------------------------------------------

// MainEmergencyStop

// optional string reason = 1;
inline void MainEmergencyStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MainEmergencyStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainEmergencyStop.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainEmergencyStop::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.MainEmergencyStop.reason)
}
inline void MainEmergencyStop::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.MainEmergencyStop.reason)
}
inline void MainEmergencyStop::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.MainEmergencyStop.reason)
}
inline ::std::string* MainEmergencyStop::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainEmergencyStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MainEmergencyStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainEmergencyStop.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainEmergencyStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainEmergencyStop.reason)
}

// optional .apollo.decision.MainEmergencyStop.ReasonCode reason_code = 2;
inline void MainEmergencyStop::clear_reason_code() {
  reason_code_ = 0;
}
inline ::apollo::decision::MainEmergencyStop_ReasonCode MainEmergencyStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainEmergencyStop.reason_code)
  return static_cast< ::apollo::decision::MainEmergencyStop_ReasonCode >(reason_code_);
}
inline void MainEmergencyStop::set_reason_code(::apollo::decision::MainEmergencyStop_ReasonCode value) {
  
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainEmergencyStop.reason_code)
}

// optional .apollo.decision.EmergencyStopHardBrake hard_brake = 3;
inline bool MainEmergencyStop::has_hard_brake() const {
  return task_case() == kHardBrake;
}
inline void MainEmergencyStop::set_has_hard_brake() {
  _oneof_case_[0] = kHardBrake;
}
inline void MainEmergencyStop::clear_hard_brake() {
  if (has_hard_brake()) {
    delete task_.hard_brake_;
    clear_has_task();
  }
}
inline  const ::apollo::decision::EmergencyStopHardBrake& MainEmergencyStop::hard_brake() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainEmergencyStop.hard_brake)
  return has_hard_brake()
      ? *task_.hard_brake_
      : ::apollo::decision::EmergencyStopHardBrake::default_instance();
}
inline ::apollo::decision::EmergencyStopHardBrake* MainEmergencyStop::mutable_hard_brake() {
  if (!has_hard_brake()) {
    clear_task();
    set_has_hard_brake();
    task_.hard_brake_ = new ::apollo::decision::EmergencyStopHardBrake;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainEmergencyStop.hard_brake)
  return task_.hard_brake_;
}
inline ::apollo::decision::EmergencyStopHardBrake* MainEmergencyStop::release_hard_brake() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainEmergencyStop.hard_brake)
  if (has_hard_brake()) {
    clear_has_task();
    ::apollo::decision::EmergencyStopHardBrake* temp = task_.hard_brake_;
    task_.hard_brake_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainEmergencyStop::set_allocated_hard_brake(::apollo::decision::EmergencyStopHardBrake* hard_brake) {
  clear_task();
  if (hard_brake) {
    set_has_hard_brake();
    task_.hard_brake_ = hard_brake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainEmergencyStop.hard_brake)
}

// optional .apollo.decision.EmergencyStopCruiseToStop cruise_to_stop = 4;
inline bool MainEmergencyStop::has_cruise_to_stop() const {
  return task_case() == kCruiseToStop;
}
inline void MainEmergencyStop::set_has_cruise_to_stop() {
  _oneof_case_[0] = kCruiseToStop;
}
inline void MainEmergencyStop::clear_cruise_to_stop() {
  if (has_cruise_to_stop()) {
    delete task_.cruise_to_stop_;
    clear_has_task();
  }
}
inline  const ::apollo::decision::EmergencyStopCruiseToStop& MainEmergencyStop::cruise_to_stop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainEmergencyStop.cruise_to_stop)
  return has_cruise_to_stop()
      ? *task_.cruise_to_stop_
      : ::apollo::decision::EmergencyStopCruiseToStop::default_instance();
}
inline ::apollo::decision::EmergencyStopCruiseToStop* MainEmergencyStop::mutable_cruise_to_stop() {
  if (!has_cruise_to_stop()) {
    clear_task();
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = new ::apollo::decision::EmergencyStopCruiseToStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainEmergencyStop.cruise_to_stop)
  return task_.cruise_to_stop_;
}
inline ::apollo::decision::EmergencyStopCruiseToStop* MainEmergencyStop::release_cruise_to_stop() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainEmergencyStop.cruise_to_stop)
  if (has_cruise_to_stop()) {
    clear_has_task();
    ::apollo::decision::EmergencyStopCruiseToStop* temp = task_.cruise_to_stop_;
    task_.cruise_to_stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainEmergencyStop::set_allocated_cruise_to_stop(::apollo::decision::EmergencyStopCruiseToStop* cruise_to_stop) {
  clear_task();
  if (cruise_to_stop) {
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = cruise_to_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainEmergencyStop.cruise_to_stop)
}

inline bool MainEmergencyStop::has_task() const {
  return task_case() != TASK_NOT_SET;
}
inline void MainEmergencyStop::clear_has_task() {
  _oneof_case_[0] = TASK_NOT_SET;
}
inline MainEmergencyStop::TaskCase MainEmergencyStop::task_case() const {
  return MainEmergencyStop::TaskCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MainCruise

// -------------------------------------------------------------------

// MainChangeLane

// optional .apollo.decision.MainChangeLane.Type type = 1;
inline void MainChangeLane::clear_type() {
  type_ = 0;
}
inline ::apollo::decision::MainChangeLane_Type MainChangeLane::type() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainChangeLane.type)
  return static_cast< ::apollo::decision::MainChangeLane_Type >(type_);
}
inline void MainChangeLane::set_type(::apollo::decision::MainChangeLane_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainChangeLane.type)
}

// repeated .apollo.decision.TargetLane default_lane = 2;
inline int MainChangeLane::default_lane_size() const {
  return default_lane_.size();
}
inline void MainChangeLane::clear_default_lane() {
  default_lane_.Clear();
}
inline const ::apollo::decision::TargetLane& MainChangeLane::default_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainChangeLane.default_lane)
  return default_lane_.Get(index);
}
inline ::apollo::decision::TargetLane* MainChangeLane::mutable_default_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainChangeLane.default_lane)
  return default_lane_.Mutable(index);
}
inline ::apollo::decision::TargetLane* MainChangeLane::add_default_lane() {
  // @@protoc_insertion_point(field_add:apollo.decision.MainChangeLane.default_lane)
  return default_lane_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >*
MainChangeLane::mutable_default_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.MainChangeLane.default_lane)
  return &default_lane_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >&
MainChangeLane::default_lane() const {
  // @@protoc_insertion_point(field_list:apollo.decision.MainChangeLane.default_lane)
  return default_lane_;
}

// optional .apollo.decision.MainStop default_lane_stop = 3;
inline bool MainChangeLane::has_default_lane_stop() const {
  return !_is_default_instance_ && default_lane_stop_ != NULL;
}
inline void MainChangeLane::clear_default_lane_stop() {
  if (GetArenaNoVirtual() == NULL && default_lane_stop_ != NULL) delete default_lane_stop_;
  default_lane_stop_ = NULL;
}
inline const ::apollo::decision::MainStop& MainChangeLane::default_lane_stop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainChangeLane.default_lane_stop)
  return default_lane_stop_ != NULL ? *default_lane_stop_ : *default_instance_->default_lane_stop_;
}
inline ::apollo::decision::MainStop* MainChangeLane::mutable_default_lane_stop() {
  
  if (default_lane_stop_ == NULL) {
    default_lane_stop_ = new ::apollo::decision::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainChangeLane.default_lane_stop)
  return default_lane_stop_;
}
inline ::apollo::decision::MainStop* MainChangeLane::release_default_lane_stop() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainChangeLane.default_lane_stop)
  
  ::apollo::decision::MainStop* temp = default_lane_stop_;
  default_lane_stop_ = NULL;
  return temp;
}
inline void MainChangeLane::set_allocated_default_lane_stop(::apollo::decision::MainStop* default_lane_stop) {
  delete default_lane_stop_;
  default_lane_stop_ = default_lane_stop;
  if (default_lane_stop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainChangeLane.default_lane_stop)
}

// optional .apollo.decision.MainStop target_lane_stop = 4;
inline bool MainChangeLane::has_target_lane_stop() const {
  return !_is_default_instance_ && target_lane_stop_ != NULL;
}
inline void MainChangeLane::clear_target_lane_stop() {
  if (GetArenaNoVirtual() == NULL && target_lane_stop_ != NULL) delete target_lane_stop_;
  target_lane_stop_ = NULL;
}
inline const ::apollo::decision::MainStop& MainChangeLane::target_lane_stop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainChangeLane.target_lane_stop)
  return target_lane_stop_ != NULL ? *target_lane_stop_ : *default_instance_->target_lane_stop_;
}
inline ::apollo::decision::MainStop* MainChangeLane::mutable_target_lane_stop() {
  
  if (target_lane_stop_ == NULL) {
    target_lane_stop_ = new ::apollo::decision::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainChangeLane.target_lane_stop)
  return target_lane_stop_;
}
inline ::apollo::decision::MainStop* MainChangeLane::release_target_lane_stop() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainChangeLane.target_lane_stop)
  
  ::apollo::decision::MainStop* temp = target_lane_stop_;
  target_lane_stop_ = NULL;
  return temp;
}
inline void MainChangeLane::set_allocated_target_lane_stop(::apollo::decision::MainStop* target_lane_stop) {
  delete target_lane_stop_;
  target_lane_stop_ = target_lane_stop;
  if (target_lane_stop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainChangeLane.target_lane_stop)
}

// -------------------------------------------------------------------

// MainMissionComplete

// -------------------------------------------------------------------

// MainNotReady

// optional string reason = 1;
inline void MainNotReady::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MainNotReady::reason() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainNotReady.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainNotReady::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.MainNotReady.reason)
}
inline void MainNotReady::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.MainNotReady.reason)
}
inline void MainNotReady::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.MainNotReady.reason)
}
inline ::std::string* MainNotReady::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainNotReady.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MainNotReady::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainNotReady.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainNotReady::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainNotReady.reason)
}

// -------------------------------------------------------------------

// MainParking

// optional .apollo.decision.MainParking.Type type = 1;
inline void MainParking::clear_type() {
  type_ = 0;
}
inline ::apollo::decision::MainParking_Type MainParking::type() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainParking.type)
  return static_cast< ::apollo::decision::MainParking_Type >(type_);
}
inline void MainParking::set_type(::apollo::decision::MainParking_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainParking.type)
}

// optional double heading = 2;
inline void MainParking::clear_heading() {
  heading_ = 0;
}
inline double MainParking::heading() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainParking.heading)
  return heading_;
}
inline void MainParking::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MainParking.heading)
}

// optional .apollo.common.PointENU stop_point = 3;
inline bool MainParking::has_stop_point() const {
  return !_is_default_instance_ && stop_point_ != NULL;
}
inline void MainParking::clear_stop_point() {
  if (GetArenaNoVirtual() == NULL && stop_point_ != NULL) delete stop_point_;
  stop_point_ = NULL;
}
inline const ::apollo::common::PointENU& MainParking::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainParking.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::apollo::common::PointENU* MainParking::mutable_stop_point() {
  
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainParking.stop_point)
  return stop_point_;
}
inline ::apollo::common::PointENU* MainParking::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainParking.stop_point)
  
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void MainParking::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainParking.stop_point)
}

// repeated .apollo.common.PointENU parking_polygon = 4;
inline int MainParking::parking_polygon_size() const {
  return parking_polygon_.size();
}
inline void MainParking::clear_parking_polygon() {
  parking_polygon_.Clear();
}
inline const ::apollo::common::PointENU& MainParking::parking_polygon(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainParking.parking_polygon)
  return parking_polygon_.Get(index);
}
inline ::apollo::common::PointENU* MainParking::mutable_parking_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainParking.parking_polygon)
  return parking_polygon_.Mutable(index);
}
inline ::apollo::common::PointENU* MainParking::add_parking_polygon() {
  // @@protoc_insertion_point(field_add:apollo.decision.MainParking.parking_polygon)
  return parking_polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >*
MainParking::mutable_parking_polygon() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.MainParking.parking_polygon)
  return &parking_polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >&
MainParking::parking_polygon() const {
  // @@protoc_insertion_point(field_list:apollo.decision.MainParking.parking_polygon)
  return parking_polygon_;
}

// -------------------------------------------------------------------

// MainDecision

// optional .apollo.decision.MainCruise cruise = 1;
inline bool MainDecision::has_cruise() const {
  return task_case() == kCruise;
}
inline void MainDecision::set_has_cruise() {
  _oneof_case_[0] = kCruise;
}
inline void MainDecision::clear_cruise() {
  if (has_cruise()) {
    delete task_.cruise_;
    clear_has_task();
  }
}
inline  const ::apollo::decision::MainCruise& MainDecision::cruise() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.cruise)
  return has_cruise()
      ? *task_.cruise_
      : ::apollo::decision::MainCruise::default_instance();
}
inline ::apollo::decision::MainCruise* MainDecision::mutable_cruise() {
  if (!has_cruise()) {
    clear_task();
    set_has_cruise();
    task_.cruise_ = new ::apollo::decision::MainCruise;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.cruise)
  return task_.cruise_;
}
inline ::apollo::decision::MainCruise* MainDecision::release_cruise() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.cruise)
  if (has_cruise()) {
    clear_has_task();
    ::apollo::decision::MainCruise* temp = task_.cruise_;
    task_.cruise_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_cruise(::apollo::decision::MainCruise* cruise) {
  clear_task();
  if (cruise) {
    set_has_cruise();
    task_.cruise_ = cruise;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.cruise)
}

// optional .apollo.decision.MainStop stop = 2;
inline bool MainDecision::has_stop() const {
  return task_case() == kStop;
}
inline void MainDecision::set_has_stop() {
  _oneof_case_[0] = kStop;
}
inline void MainDecision::clear_stop() {
  if (has_stop()) {
    delete task_.stop_;
    clear_has_task();
  }
}
inline  const ::apollo::decision::MainStop& MainDecision::stop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.stop)
  return has_stop()
      ? *task_.stop_
      : ::apollo::decision::MainStop::default_instance();
}
inline ::apollo::decision::MainStop* MainDecision::mutable_stop() {
  if (!has_stop()) {
    clear_task();
    set_has_stop();
    task_.stop_ = new ::apollo::decision::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.stop)
  return task_.stop_;
}
inline ::apollo::decision::MainStop* MainDecision::release_stop() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.stop)
  if (has_stop()) {
    clear_has_task();
    ::apollo::decision::MainStop* temp = task_.stop_;
    task_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_stop(::apollo::decision::MainStop* stop) {
  clear_task();
  if (stop) {
    set_has_stop();
    task_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.stop)
}

// optional .apollo.decision.MainEmergencyStop estop = 3;
inline bool MainDecision::has_estop() const {
  return task_case() == kEstop;
}
inline void MainDecision::set_has_estop() {
  _oneof_case_[0] = kEstop;
}
inline void MainDecision::clear_estop() {
  if (has_estop()) {
    delete task_.estop_;
    clear_has_task();
  }
}
inline  const ::apollo::decision::MainEmergencyStop& MainDecision::estop() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.estop)
  return has_estop()
      ? *task_.estop_
      : ::apollo::decision::MainEmergencyStop::default_instance();
}
inline ::apollo::decision::MainEmergencyStop* MainDecision::mutable_estop() {
  if (!has_estop()) {
    clear_task();
    set_has_estop();
    task_.estop_ = new ::apollo::decision::MainEmergencyStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.estop)
  return task_.estop_;
}
inline ::apollo::decision::MainEmergencyStop* MainDecision::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.estop)
  if (has_estop()) {
    clear_has_task();
    ::apollo::decision::MainEmergencyStop* temp = task_.estop_;
    task_.estop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_estop(::apollo::decision::MainEmergencyStop* estop) {
  clear_task();
  if (estop) {
    set_has_estop();
    task_.estop_ = estop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.estop)
}

// optional .apollo.decision.MainChangeLane change_lane = 4;
inline bool MainDecision::has_change_lane() const {
  return task_case() == kChangeLane;
}
inline void MainDecision::set_has_change_lane() {
  _oneof_case_[0] = kChangeLane;
}
inline void MainDecision::clear_change_lane() {
  if (has_change_lane()) {
    delete task_.change_lane_;
    clear_has_task();
  }
}
inline  const ::apollo::decision::MainChangeLane& MainDecision::change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.change_lane)
  return has_change_lane()
      ? *task_.change_lane_
      : ::apollo::decision::MainChangeLane::default_instance();
}
inline ::apollo::decision::MainChangeLane* MainDecision::mutable_change_lane() {
  if (!has_change_lane()) {
    clear_task();
    set_has_change_lane();
    task_.change_lane_ = new ::apollo::decision::MainChangeLane;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.change_lane)
  return task_.change_lane_;
}
inline ::apollo::decision::MainChangeLane* MainDecision::release_change_lane() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.change_lane)
  if (has_change_lane()) {
    clear_has_task();
    ::apollo::decision::MainChangeLane* temp = task_.change_lane_;
    task_.change_lane_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_change_lane(::apollo::decision::MainChangeLane* change_lane) {
  clear_task();
  if (change_lane) {
    set_has_change_lane();
    task_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.change_lane)
}

// optional .apollo.decision.MainMissionComplete mission_complete = 6;
inline bool MainDecision::has_mission_complete() const {
  return task_case() == kMissionComplete;
}
inline void MainDecision::set_has_mission_complete() {
  _oneof_case_[0] = kMissionComplete;
}
inline void MainDecision::clear_mission_complete() {
  if (has_mission_complete()) {
    delete task_.mission_complete_;
    clear_has_task();
  }
}
inline  const ::apollo::decision::MainMissionComplete& MainDecision::mission_complete() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.mission_complete)
  return has_mission_complete()
      ? *task_.mission_complete_
      : ::apollo::decision::MainMissionComplete::default_instance();
}
inline ::apollo::decision::MainMissionComplete* MainDecision::mutable_mission_complete() {
  if (!has_mission_complete()) {
    clear_task();
    set_has_mission_complete();
    task_.mission_complete_ = new ::apollo::decision::MainMissionComplete;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.mission_complete)
  return task_.mission_complete_;
}
inline ::apollo::decision::MainMissionComplete* MainDecision::release_mission_complete() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.mission_complete)
  if (has_mission_complete()) {
    clear_has_task();
    ::apollo::decision::MainMissionComplete* temp = task_.mission_complete_;
    task_.mission_complete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_mission_complete(::apollo::decision::MainMissionComplete* mission_complete) {
  clear_task();
  if (mission_complete) {
    set_has_mission_complete();
    task_.mission_complete_ = mission_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.mission_complete)
}

// optional .apollo.decision.MainNotReady not_ready = 7;
inline bool MainDecision::has_not_ready() const {
  return task_case() == kNotReady;
}
inline void MainDecision::set_has_not_ready() {
  _oneof_case_[0] = kNotReady;
}
inline void MainDecision::clear_not_ready() {
  if (has_not_ready()) {
    delete task_.not_ready_;
    clear_has_task();
  }
}
inline  const ::apollo::decision::MainNotReady& MainDecision::not_ready() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.not_ready)
  return has_not_ready()
      ? *task_.not_ready_
      : ::apollo::decision::MainNotReady::default_instance();
}
inline ::apollo::decision::MainNotReady* MainDecision::mutable_not_ready() {
  if (!has_not_ready()) {
    clear_task();
    set_has_not_ready();
    task_.not_ready_ = new ::apollo::decision::MainNotReady;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.not_ready)
  return task_.not_ready_;
}
inline ::apollo::decision::MainNotReady* MainDecision::release_not_ready() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.not_ready)
  if (has_not_ready()) {
    clear_has_task();
    ::apollo::decision::MainNotReady* temp = task_.not_ready_;
    task_.not_ready_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_not_ready(::apollo::decision::MainNotReady* not_ready) {
  clear_task();
  if (not_ready) {
    set_has_not_ready();
    task_.not_ready_ = not_ready;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.not_ready)
}

// optional .apollo.decision.MainParking parking = 8;
inline bool MainDecision::has_parking() const {
  return task_case() == kParking;
}
inline void MainDecision::set_has_parking() {
  _oneof_case_[0] = kParking;
}
inline void MainDecision::clear_parking() {
  if (has_parking()) {
    delete task_.parking_;
    clear_has_task();
  }
}
inline  const ::apollo::decision::MainParking& MainDecision::parking() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.parking)
  return has_parking()
      ? *task_.parking_
      : ::apollo::decision::MainParking::default_instance();
}
inline ::apollo::decision::MainParking* MainDecision::mutable_parking() {
  if (!has_parking()) {
    clear_task();
    set_has_parking();
    task_.parking_ = new ::apollo::decision::MainParking;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.parking)
  return task_.parking_;
}
inline ::apollo::decision::MainParking* MainDecision::release_parking() {
  // @@protoc_insertion_point(field_release:apollo.decision.MainDecision.parking)
  if (has_parking()) {
    clear_has_task();
    ::apollo::decision::MainParking* temp = task_.parking_;
    task_.parking_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_parking(::apollo::decision::MainParking* parking) {
  clear_task();
  if (parking) {
    set_has_parking();
    task_.parking_ = parking;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MainDecision.parking)
}

// repeated .apollo.decision.TargetLane target_lane = 5;
inline int MainDecision::target_lane_size() const {
  return target_lane_.size();
}
inline void MainDecision::clear_target_lane() {
  target_lane_.Clear();
}
inline const ::apollo::decision::TargetLane& MainDecision::target_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.MainDecision.target_lane)
  return target_lane_.Get(index);
}
inline ::apollo::decision::TargetLane* MainDecision::mutable_target_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.MainDecision.target_lane)
  return target_lane_.Mutable(index);
}
inline ::apollo::decision::TargetLane* MainDecision::add_target_lane() {
  // @@protoc_insertion_point(field_add:apollo.decision.MainDecision.target_lane)
  return target_lane_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >*
MainDecision::mutable_target_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.MainDecision.target_lane)
  return &target_lane_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::decision::TargetLane >&
MainDecision::target_lane() const {
  // @@protoc_insertion_point(field_list:apollo.decision.MainDecision.target_lane)
  return target_lane_;
}

inline bool MainDecision::has_task() const {
  return task_case() != TASK_NOT_SET;
}
inline void MainDecision::clear_has_task() {
  _oneof_case_[0] = TASK_NOT_SET;
}
inline MainDecision::TaskCase MainDecision::task_case() const {
  return MainDecision::TaskCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MasterVehicleDebug

// optional .apollo.common.PointENU position = 1;
inline bool MasterVehicleDebug::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void MasterVehicleDebug::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::apollo::common::PointENU& MasterVehicleDebug::position() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::apollo::common::PointENU* MasterVehicleDebug::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MasterVehicleDebug.position)
  return position_;
}
inline ::apollo::common::PointENU* MasterVehicleDebug::release_position() {
  // @@protoc_insertion_point(field_release:apollo.decision.MasterVehicleDebug.position)
  
  ::apollo::common::PointENU* temp = position_;
  position_ = NULL;
  return temp;
}
inline void MasterVehicleDebug::set_allocated_position(::apollo::common::PointENU* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MasterVehicleDebug.position)
}

// optional string current_lane_id = 2;
inline void MasterVehicleDebug::clear_current_lane_id() {
  current_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterVehicleDebug::current_lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.current_lane_id)
  return current_lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterVehicleDebug::set_current_lane_id(const ::std::string& value) {
  
  current_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.current_lane_id)
}
inline void MasterVehicleDebug::set_current_lane_id(const char* value) {
  
  current_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.MasterVehicleDebug.current_lane_id)
}
inline void MasterVehicleDebug::set_current_lane_id(const char* value, size_t size) {
  
  current_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.MasterVehicleDebug.current_lane_id)
}
inline ::std::string* MasterVehicleDebug::mutable_current_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.MasterVehicleDebug.current_lane_id)
  return current_lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterVehicleDebug::release_current_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.MasterVehicleDebug.current_lane_id)
  
  return current_lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterVehicleDebug::set_allocated_current_lane_id(::std::string* current_lane_id) {
  if (current_lane_id != NULL) {
    
  } else {
    
  }
  current_lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MasterVehicleDebug.current_lane_id)
}

// optional double lane_s = 3;
inline void MasterVehicleDebug::clear_lane_s() {
  lane_s_ = 0;
}
inline double MasterVehicleDebug::lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.lane_s)
  return lane_s_;
}
inline void MasterVehicleDebug::set_lane_s(double value) {
  
  lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.lane_s)
}

// optional double lane_l = 4;
inline void MasterVehicleDebug::clear_lane_l() {
  lane_l_ = 0;
}
inline double MasterVehicleDebug::lane_l() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.lane_l)
  return lane_l_;
}
inline void MasterVehicleDebug::set_lane_l(double value) {
  
  lane_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.lane_l)
}

// optional double route_s = 5;
inline void MasterVehicleDebug::clear_route_s() {
  route_s_ = 0;
}
inline double MasterVehicleDebug::route_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.route_s)
  return route_s_;
}
inline void MasterVehicleDebug::set_route_s(double value) {
  
  route_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.route_s)
}

// optional double route_l = 6;
inline void MasterVehicleDebug::clear_route_l() {
  route_l_ = 0;
}
inline double MasterVehicleDebug::route_l() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.route_l)
  return route_l_;
}
inline void MasterVehicleDebug::set_route_l(double value) {
  
  route_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.route_l)
}

// optional double heading = 7;
inline void MasterVehicleDebug::clear_heading() {
  heading_ = 0;
}
inline double MasterVehicleDebug::heading() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.heading)
  return heading_;
}
inline void MasterVehicleDebug::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.heading)
}

// optional double heading_speed = 8;
inline void MasterVehicleDebug::clear_heading_speed() {
  heading_speed_ = 0;
}
inline double MasterVehicleDebug::heading_speed() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.heading_speed)
  return heading_speed_;
}
inline void MasterVehicleDebug::set_heading_speed(double value) {
  
  heading_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.heading_speed)
}

// optional double heading_acceleration = 9;
inline void MasterVehicleDebug::clear_heading_acceleration() {
  heading_acceleration_ = 0;
}
inline double MasterVehicleDebug::heading_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.heading_acceleration)
  return heading_acceleration_;
}
inline void MasterVehicleDebug::set_heading_acceleration(double value) {
  
  heading_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.MasterVehicleDebug.heading_acceleration)
}

// optional .apollo.decision.Range route_s_range = 10;
inline bool MasterVehicleDebug::has_route_s_range() const {
  return !_is_default_instance_ && route_s_range_ != NULL;
}
inline void MasterVehicleDebug::clear_route_s_range() {
  if (GetArenaNoVirtual() == NULL && route_s_range_ != NULL) delete route_s_range_;
  route_s_range_ = NULL;
}
inline const ::apollo::decision::Range& MasterVehicleDebug::route_s_range() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.route_s_range)
  return route_s_range_ != NULL ? *route_s_range_ : *default_instance_->route_s_range_;
}
inline ::apollo::decision::Range* MasterVehicleDebug::mutable_route_s_range() {
  
  if (route_s_range_ == NULL) {
    route_s_range_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MasterVehicleDebug.route_s_range)
  return route_s_range_;
}
inline ::apollo::decision::Range* MasterVehicleDebug::release_route_s_range() {
  // @@protoc_insertion_point(field_release:apollo.decision.MasterVehicleDebug.route_s_range)
  
  ::apollo::decision::Range* temp = route_s_range_;
  route_s_range_ = NULL;
  return temp;
}
inline void MasterVehicleDebug::set_allocated_route_s_range(::apollo::decision::Range* route_s_range) {
  delete route_s_range_;
  route_s_range_ = route_s_range;
  if (route_s_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MasterVehicleDebug.route_s_range)
}

// optional .apollo.decision.Range route_l_range = 11;
inline bool MasterVehicleDebug::has_route_l_range() const {
  return !_is_default_instance_ && route_l_range_ != NULL;
}
inline void MasterVehicleDebug::clear_route_l_range() {
  if (GetArenaNoVirtual() == NULL && route_l_range_ != NULL) delete route_l_range_;
  route_l_range_ = NULL;
}
inline const ::apollo::decision::Range& MasterVehicleDebug::route_l_range() const {
  // @@protoc_insertion_point(field_get:apollo.decision.MasterVehicleDebug.route_l_range)
  return route_l_range_ != NULL ? *route_l_range_ : *default_instance_->route_l_range_;
}
inline ::apollo::decision::Range* MasterVehicleDebug::mutable_route_l_range() {
  
  if (route_l_range_ == NULL) {
    route_l_range_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.MasterVehicleDebug.route_l_range)
  return route_l_range_;
}
inline ::apollo::decision::Range* MasterVehicleDebug::release_route_l_range() {
  // @@protoc_insertion_point(field_release:apollo.decision.MasterVehicleDebug.route_l_range)
  
  ::apollo::decision::Range* temp = route_l_range_;
  route_l_range_ = NULL;
  return temp;
}
inline void MasterVehicleDebug::set_allocated_route_l_range(::apollo::decision::Range* route_l_range) {
  delete route_l_range_;
  route_l_range_ = route_l_range;
  if (route_l_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.MasterVehicleDebug.route_l_range)
}

// -------------------------------------------------------------------

// ObjectDebug

// optional string id = 1;
inline void ObjectDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectDebug::id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDebug::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.id)
}
inline void ObjectDebug::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.ObjectDebug.id)
}
inline void ObjectDebug::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.ObjectDebug.id)
}
inline ::std::string* ObjectDebug::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectDebug::release_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDebug.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDebug.id)
}

// optional string path_id = 2;
inline void ObjectDebug::clear_path_id() {
  path_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectDebug::path_id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.path_id)
  return path_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDebug::set_path_id(const ::std::string& value) {
  
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.path_id)
}
inline void ObjectDebug::set_path_id(const char* value) {
  
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.ObjectDebug.path_id)
}
inline void ObjectDebug::set_path_id(const char* value, size_t size) {
  
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.ObjectDebug.path_id)
}
inline ::std::string* ObjectDebug::mutable_path_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.path_id)
  return path_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectDebug::release_path_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDebug.path_id)
  
  return path_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDebug::set_allocated_path_id(::std::string* path_id) {
  if (path_id != NULL) {
    
  } else {
    
  }
  path_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDebug.path_id)
}

// optional .apollo.decision.Range route_s = 3;
inline bool ObjectDebug::has_route_s() const {
  return !_is_default_instance_ && route_s_ != NULL;
}
inline void ObjectDebug::clear_route_s() {
  if (GetArenaNoVirtual() == NULL && route_s_ != NULL) delete route_s_;
  route_s_ = NULL;
}
inline const ::apollo::decision::Range& ObjectDebug::route_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.route_s)
  return route_s_ != NULL ? *route_s_ : *default_instance_->route_s_;
}
inline ::apollo::decision::Range* ObjectDebug::mutable_route_s() {
  
  if (route_s_ == NULL) {
    route_s_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.route_s)
  return route_s_;
}
inline ::apollo::decision::Range* ObjectDebug::release_route_s() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDebug.route_s)
  
  ::apollo::decision::Range* temp = route_s_;
  route_s_ = NULL;
  return temp;
}
inline void ObjectDebug::set_allocated_route_s(::apollo::decision::Range* route_s) {
  delete route_s_;
  route_s_ = route_s;
  if (route_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDebug.route_s)
}

// optional .apollo.decision.Range route_l = 4;
inline bool ObjectDebug::has_route_l() const {
  return !_is_default_instance_ && route_l_ != NULL;
}
inline void ObjectDebug::clear_route_l() {
  if (GetArenaNoVirtual() == NULL && route_l_ != NULL) delete route_l_;
  route_l_ = NULL;
}
inline const ::apollo::decision::Range& ObjectDebug::route_l() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.route_l)
  return route_l_ != NULL ? *route_l_ : *default_instance_->route_l_;
}
inline ::apollo::decision::Range* ObjectDebug::mutable_route_l() {
  
  if (route_l_ == NULL) {
    route_l_ = new ::apollo::decision::Range;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.route_l)
  return route_l_;
}
inline ::apollo::decision::Range* ObjectDebug::release_route_l() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDebug.route_l)
  
  ::apollo::decision::Range* temp = route_l_;
  route_l_ = NULL;
  return temp;
}
inline void ObjectDebug::set_allocated_route_l(::apollo::decision::Range* route_l) {
  delete route_l_;
  route_l_ = route_l;
  if (route_l) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDebug.route_l)
}

// optional bool on_route = 5;
inline void ObjectDebug::clear_on_route() {
  on_route_ = false;
}
inline bool ObjectDebug::on_route() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.on_route)
  return on_route_;
}
inline void ObjectDebug::set_on_route(bool value) {
  
  on_route_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.on_route)
}

// optional string lane_id = 6;
inline void ObjectDebug::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectDebug::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.lane_id)
  return lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDebug::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.lane_id)
}
inline void ObjectDebug::set_lane_id(const char* value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.ObjectDebug.lane_id)
}
inline void ObjectDebug::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.ObjectDebug.lane_id)
}
inline ::std::string* ObjectDebug::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectDebug::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.decision.ObjectDebug.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDebug::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.ObjectDebug.lane_id)
}

// optional double lane_s = 7;
inline void ObjectDebug::clear_lane_s() {
  lane_s_ = 0;
}
inline double ObjectDebug::lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.lane_s)
  return lane_s_;
}
inline void ObjectDebug::set_lane_s(double value) {
  
  lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.lane_s)
}

// optional bool on_lane = 8;
inline void ObjectDebug::clear_on_lane() {
  on_lane_ = false;
}
inline bool ObjectDebug::on_lane() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.on_lane)
  return on_lane_;
}
inline void ObjectDebug::set_on_lane(bool value) {
  
  on_lane_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.on_lane)
}

// optional double path_speed = 9;
inline void ObjectDebug::clear_path_speed() {
  path_speed_ = 0;
}
inline double ObjectDebug::path_speed() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.path_speed)
  return path_speed_;
}
inline void ObjectDebug::set_path_speed(double value) {
  
  path_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ObjectDebug.path_speed)
}

// repeated .apollo.common.Point3D st_region = 10;
inline int ObjectDebug::st_region_size() const {
  return st_region_.size();
}
inline void ObjectDebug::clear_st_region() {
  st_region_.Clear();
}
inline const ::apollo::common::Point3D& ObjectDebug::st_region(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.ObjectDebug.st_region)
  return st_region_.Get(index);
}
inline ::apollo::common::Point3D* ObjectDebug::mutable_st_region(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.ObjectDebug.st_region)
  return st_region_.Mutable(index);
}
inline ::apollo::common::Point3D* ObjectDebug::add_st_region() {
  // @@protoc_insertion_point(field_add:apollo.decision.ObjectDebug.st_region)
  return st_region_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
ObjectDebug::mutable_st_region() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.ObjectDebug.st_region)
  return &st_region_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
ObjectDebug::st_region() const {
  // @@protoc_insertion_point(field_list:apollo.decision.ObjectDebug.st_region)
  return st_region_;
}

// -------------------------------------------------------------------

// LatencyStats

// optional double total_time_ms = 1;
inline void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
}
inline double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.total_time_ms)
  return total_time_ms_;
}
inline void LatencyStats::set_total_time_ms(double value) {
  
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.total_time_ms)
}

// optional double sensor_read_time_ms = 2;
inline void LatencyStats::clear_sensor_read_time_ms() {
  sensor_read_time_ms_ = 0;
}
inline double LatencyStats::sensor_read_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.sensor_read_time_ms)
  return sensor_read_time_ms_;
}
inline void LatencyStats::set_sensor_read_time_ms(double value) {
  
  sensor_read_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.sensor_read_time_ms)
}

// optional double adc_prepare_time_ms = 3;
inline void LatencyStats::clear_adc_prepare_time_ms() {
  adc_prepare_time_ms_ = 0;
}
inline double LatencyStats::adc_prepare_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.adc_prepare_time_ms)
  return adc_prepare_time_ms_;
}
inline void LatencyStats::set_adc_prepare_time_ms(double value) {
  
  adc_prepare_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.adc_prepare_time_ms)
}

// optional double obj_prepare_time_ms = 4;
inline void LatencyStats::clear_obj_prepare_time_ms() {
  obj_prepare_time_ms_ = 0;
}
inline double LatencyStats::obj_prepare_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.obj_prepare_time_ms)
  return obj_prepare_time_ms_;
}
inline void LatencyStats::set_obj_prepare_time_ms(double value) {
  
  obj_prepare_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.obj_prepare_time_ms)
}

// optional double world_rule_time_ms = 5;
inline void LatencyStats::clear_world_rule_time_ms() {
  world_rule_time_ms_ = 0;
}
inline double LatencyStats::world_rule_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.world_rule_time_ms)
  return world_rule_time_ms_;
}
inline void LatencyStats::set_world_rule_time_ms(double value) {
  
  world_rule_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.world_rule_time_ms)
}

// optional double st_graph_time_ms = 6;
inline void LatencyStats::clear_st_graph_time_ms() {
  st_graph_time_ms_ = 0;
}
inline double LatencyStats::st_graph_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.st_graph_time_ms)
  return st_graph_time_ms_;
}
inline void LatencyStats::set_st_graph_time_ms(double value) {
  
  st_graph_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.st_graph_time_ms)
}

// optional double gateway_receive_delay_ms = 8;
inline void LatencyStats::clear_gateway_receive_delay_ms() {
  gateway_receive_delay_ms_ = 0;
}
inline double LatencyStats::gateway_receive_delay_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.gateway_receive_delay_ms)
  return gateway_receive_delay_ms_;
}
inline void LatencyStats::set_gateway_receive_delay_ms(double value) {
  
  gateway_receive_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.gateway_receive_delay_ms)
}

// optional double perception_receive_delay_ms = 9;
inline void LatencyStats::clear_perception_receive_delay_ms() {
  perception_receive_delay_ms_ = 0;
}
inline double LatencyStats::perception_receive_delay_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.perception_receive_delay_ms)
  return perception_receive_delay_ms_;
}
inline void LatencyStats::set_perception_receive_delay_ms(double value) {
  
  perception_receive_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.perception_receive_delay_ms)
}

// optional double prediction_receive_delay_ms = 10;
inline void LatencyStats::clear_prediction_receive_delay_ms() {
  prediction_receive_delay_ms_ = 0;
}
inline double LatencyStats::prediction_receive_delay_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.prediction_receive_delay_ms)
  return prediction_receive_delay_ms_;
}
inline void LatencyStats::set_prediction_receive_delay_ms(double value) {
  
  prediction_receive_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.prediction_receive_delay_ms)
}

// optional double signal_receive_delay_ms = 11;
inline void LatencyStats::clear_signal_receive_delay_ms() {
  signal_receive_delay_ms_ = 0;
}
inline double LatencyStats::signal_receive_delay_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.signal_receive_delay_ms)
  return signal_receive_delay_ms_;
}
inline void LatencyStats::set_signal_receive_delay_ms(double value) {
  
  signal_receive_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.signal_receive_delay_ms)
}

// optional double perception_interval_ms = 12;
inline void LatencyStats::clear_perception_interval_ms() {
  perception_interval_ms_ = 0;
}
inline double LatencyStats::perception_interval_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.perception_interval_ms)
  return perception_interval_ms_;
}
inline void LatencyStats::set_perception_interval_ms(double value) {
  
  perception_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.perception_interval_ms)
}

// optional double prediction_interval_ms = 13;
inline void LatencyStats::clear_prediction_interval_ms() {
  prediction_interval_ms_ = 0;
}
inline double LatencyStats::prediction_interval_ms() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LatencyStats.prediction_interval_ms)
  return prediction_interval_ms_;
}
inline void LatencyStats::set_prediction_interval_ms(double value) {
  
  prediction_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LatencyStats.prediction_interval_ms)
}

// -------------------------------------------------------------------

// Stats

// optional .apollo.decision.LatencyStats latency_stats = 1;
inline bool Stats::has_latency_stats() const {
  return !_is_default_instance_ && latency_stats_ != NULL;
}
inline void Stats::clear_latency_stats() {
  if (GetArenaNoVirtual() == NULL && latency_stats_ != NULL) delete latency_stats_;
  latency_stats_ = NULL;
}
inline const ::apollo::decision::LatencyStats& Stats::latency_stats() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Stats.latency_stats)
  return latency_stats_ != NULL ? *latency_stats_ : *default_instance_->latency_stats_;
}
inline ::apollo::decision::LatencyStats* Stats::mutable_latency_stats() {
  
  if (latency_stats_ == NULL) {
    latency_stats_ = new ::apollo::decision::LatencyStats;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.Stats.latency_stats)
  return latency_stats_;
}
inline ::apollo::decision::LatencyStats* Stats::release_latency_stats() {
  // @@protoc_insertion_point(field_release:apollo.decision.Stats.latency_stats)
  
  ::apollo::decision::LatencyStats* temp = latency_stats_;
  latency_stats_ = NULL;
  return temp;
}
inline void Stats::set_allocated_latency_stats(::apollo::decision::LatencyStats* latency_stats) {
  delete latency_stats_;
  latency_stats_ = latency_stats;
  if (latency_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Stats.latency_stats)
}

// -------------------------------------------------------------------

// ModuleDebug

// optional uint32 gateway_sequence_num = 1;
inline void ModuleDebug::clear_gateway_sequence_num() {
  gateway_sequence_num_ = 0u;
}
inline ::google::protobuf::uint32 ModuleDebug::gateway_sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ModuleDebug.gateway_sequence_num)
  return gateway_sequence_num_;
}
inline void ModuleDebug::set_gateway_sequence_num(::google::protobuf::uint32 value) {
  
  gateway_sequence_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ModuleDebug.gateway_sequence_num)
}

// optional uint32 perception_sequence_num = 2;
inline void ModuleDebug::clear_perception_sequence_num() {
  perception_sequence_num_ = 0u;
}
inline ::google::protobuf::uint32 ModuleDebug::perception_sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ModuleDebug.perception_sequence_num)
  return perception_sequence_num_;
}
inline void ModuleDebug::set_perception_sequence_num(::google::protobuf::uint32 value) {
  
  perception_sequence_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ModuleDebug.perception_sequence_num)
}

// optional uint32 prediction_sequence_num = 3;
inline void ModuleDebug::clear_prediction_sequence_num() {
  prediction_sequence_num_ = 0u;
}
inline ::google::protobuf::uint32 ModuleDebug::prediction_sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ModuleDebug.prediction_sequence_num)
  return prediction_sequence_num_;
}
inline void ModuleDebug::set_prediction_sequence_num(::google::protobuf::uint32 value) {
  
  prediction_sequence_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ModuleDebug.prediction_sequence_num)
}

// optional uint32 signal_sequence_num = 4;
inline void ModuleDebug::clear_signal_sequence_num() {
  signal_sequence_num_ = 0u;
}
inline ::google::protobuf::uint32 ModuleDebug::signal_sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.decision.ModuleDebug.signal_sequence_num)
  return signal_sequence_num_;
}
inline void ModuleDebug::set_signal_sequence_num(::google::protobuf::uint32 value) {
  
  signal_sequence_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.ModuleDebug.signal_sequence_num)
}

// -------------------------------------------------------------------

// Debug

// optional .apollo.decision.MasterVehicleDebug master_vehicle = 1;
inline bool Debug::has_master_vehicle() const {
  return !_is_default_instance_ && master_vehicle_ != NULL;
}
inline void Debug::clear_master_vehicle() {
  if (GetArenaNoVirtual() == NULL && master_vehicle_ != NULL) delete master_vehicle_;
  master_vehicle_ = NULL;
}
inline const ::apollo::decision::MasterVehicleDebug& Debug::master_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.master_vehicle)
  return master_vehicle_ != NULL ? *master_vehicle_ : *default_instance_->master_vehicle_;
}
inline ::apollo::decision::MasterVehicleDebug* Debug::mutable_master_vehicle() {
  
  if (master_vehicle_ == NULL) {
    master_vehicle_ = new ::apollo::decision::MasterVehicleDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.master_vehicle)
  return master_vehicle_;
}
inline ::apollo::decision::MasterVehicleDebug* Debug::release_master_vehicle() {
  // @@protoc_insertion_point(field_release:apollo.decision.Debug.master_vehicle)
  
  ::apollo::decision::MasterVehicleDebug* temp = master_vehicle_;
  master_vehicle_ = NULL;
  return temp;
}
inline void Debug::set_allocated_master_vehicle(::apollo::decision::MasterVehicleDebug* master_vehicle) {
  delete master_vehicle_;
  master_vehicle_ = master_vehicle;
  if (master_vehicle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Debug.master_vehicle)
}

// optional .apollo.decision.MainDecision original_decision = 2;
inline bool Debug::has_original_decision() const {
  return !_is_default_instance_ && original_decision_ != NULL;
}
inline void Debug::clear_original_decision() {
  if (GetArenaNoVirtual() == NULL && original_decision_ != NULL) delete original_decision_;
  original_decision_ = NULL;
}
inline const ::apollo::decision::MainDecision& Debug::original_decision() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.original_decision)
  return original_decision_ != NULL ? *original_decision_ : *default_instance_->original_decision_;
}
inline ::apollo::decision::MainDecision* Debug::mutable_original_decision() {
  
  if (original_decision_ == NULL) {
    original_decision_ = new ::apollo::decision::MainDecision;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.original_decision)
  return original_decision_;
}
inline ::apollo::decision::MainDecision* Debug::release_original_decision() {
  // @@protoc_insertion_point(field_release:apollo.decision.Debug.original_decision)
  
  ::apollo::decision::MainDecision* temp = original_decision_;
  original_decision_ = NULL;
  return temp;
}
inline void Debug::set_allocated_original_decision(::apollo::decision::MainDecision* original_decision) {
  delete original_decision_;
  original_decision_ = original_decision;
  if (original_decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Debug.original_decision)
}

// repeated .apollo.decision.ObjectDebug object = 3;
inline int Debug::object_size() const {
  return object_.size();
}
inline void Debug::clear_object() {
  object_.Clear();
}
inline const ::apollo::decision::ObjectDebug& Debug::object(int index) const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.object)
  return object_.Get(index);
}
inline ::apollo::decision::ObjectDebug* Debug::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.object)
  return object_.Mutable(index);
}
inline ::apollo::decision::ObjectDebug* Debug::add_object() {
  // @@protoc_insertion_point(field_add:apollo.decision.Debug.object)
  return object_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDebug >*
Debug::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:apollo.decision.Debug.object)
  return &object_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::decision::ObjectDebug >&
Debug::object() const {
  // @@protoc_insertion_point(field_list:apollo.decision.Debug.object)
  return object_;
}

// optional bytes map_version = 5;
inline void Debug::clear_map_version() {
  map_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Debug::map_version() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.map_version)
  return map_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debug::set_map_version(const ::std::string& value) {
  
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.Debug.map_version)
}
inline void Debug::set_map_version(const char* value) {
  
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.Debug.map_version)
}
inline void Debug::set_map_version(const void* value, size_t size) {
  
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.Debug.map_version)
}
inline ::std::string* Debug::mutable_map_version() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.map_version)
  return map_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debug::release_map_version() {
  // @@protoc_insertion_point(field_release:apollo.decision.Debug.map_version)
  
  return map_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debug::set_allocated_map_version(::std::string* map_version) {
  if (map_version != NULL) {
    
  } else {
    
  }
  map_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_version);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Debug.map_version)
}

// optional bytes decision_version = 7;
inline void Debug::clear_decision_version() {
  decision_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Debug::decision_version() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.decision_version)
  return decision_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debug::set_decision_version(const ::std::string& value) {
  
  decision_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.decision.Debug.decision_version)
}
inline void Debug::set_decision_version(const char* value) {
  
  decision_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.decision.Debug.decision_version)
}
inline void Debug::set_decision_version(const void* value, size_t size) {
  
  decision_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.decision.Debug.decision_version)
}
inline ::std::string* Debug::mutable_decision_version() {
  
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.decision_version)
  return decision_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debug::release_decision_version() {
  // @@protoc_insertion_point(field_release:apollo.decision.Debug.decision_version)
  
  return decision_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debug::set_allocated_decision_version(::std::string* decision_version) {
  if (decision_version != NULL) {
    
  } else {
    
  }
  decision_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decision_version);
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Debug.decision_version)
}

// optional .apollo.decision.ModuleDebug module_debug = 6;
inline bool Debug::has_module_debug() const {
  return !_is_default_instance_ && module_debug_ != NULL;
}
inline void Debug::clear_module_debug() {
  if (GetArenaNoVirtual() == NULL && module_debug_ != NULL) delete module_debug_;
  module_debug_ = NULL;
}
inline const ::apollo::decision::ModuleDebug& Debug::module_debug() const {
  // @@protoc_insertion_point(field_get:apollo.decision.Debug.module_debug)
  return module_debug_ != NULL ? *module_debug_ : *default_instance_->module_debug_;
}
inline ::apollo::decision::ModuleDebug* Debug::mutable_module_debug() {
  
  if (module_debug_ == NULL) {
    module_debug_ = new ::apollo::decision::ModuleDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.Debug.module_debug)
  return module_debug_;
}
inline ::apollo::decision::ModuleDebug* Debug::release_module_debug() {
  // @@protoc_insertion_point(field_release:apollo.decision.Debug.module_debug)
  
  ::apollo::decision::ModuleDebug* temp = module_debug_;
  module_debug_ = NULL;
  return temp;
}
inline void Debug::set_allocated_module_debug(::apollo::decision::ModuleDebug* module_debug) {
  delete module_debug_;
  module_debug_ = module_debug;
  if (module_debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.Debug.module_debug)
}

// -------------------------------------------------------------------

// LightSignal

// optional bool emergency = 1;
inline void LightSignal::clear_emergency() {
  emergency_ = false;
}
inline bool LightSignal::emergency() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LightSignal.emergency)
  return emergency_;
}
inline void LightSignal::set_emergency(bool value) {
  
  emergency_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LightSignal.emergency)
}

// optional .apollo.decision.LightSignal.TurnSignal turn_signal = 2;
inline void LightSignal::clear_turn_signal() {
  turn_signal_ = 0;
}
inline ::apollo::decision::LightSignal_TurnSignal LightSignal::turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.decision.LightSignal.turn_signal)
  return static_cast< ::apollo::decision::LightSignal_TurnSignal >(turn_signal_);
}
inline void LightSignal::set_turn_signal(::apollo::decision::LightSignal_TurnSignal value) {
  
  turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.decision.LightSignal.turn_signal)
}

// -------------------------------------------------------------------

// DecisionResult

// optional .apollo.common.Header header = 1;
inline bool DecisionResult::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void DecisionResult::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::apollo::common::Header& DecisionResult::header() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* DecisionResult::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.header)
  return header_;
}
inline ::apollo::common::Header* DecisionResult::release_header() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DecisionResult::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.header)
}

// optional .apollo.decision.ObjectDecisions object_decision = 2;
inline bool DecisionResult::has_object_decision() const {
  return !_is_default_instance_ && object_decision_ != NULL;
}
inline void DecisionResult::clear_object_decision() {
  if (GetArenaNoVirtual() == NULL && object_decision_ != NULL) delete object_decision_;
  object_decision_ = NULL;
}
inline const ::apollo::decision::ObjectDecisions& DecisionResult::object_decision() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.object_decision)
  return object_decision_ != NULL ? *object_decision_ : *default_instance_->object_decision_;
}
inline ::apollo::decision::ObjectDecisions* DecisionResult::mutable_object_decision() {
  
  if (object_decision_ == NULL) {
    object_decision_ = new ::apollo::decision::ObjectDecisions;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.object_decision)
  return object_decision_;
}
inline ::apollo::decision::ObjectDecisions* DecisionResult::release_object_decision() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.object_decision)
  
  ::apollo::decision::ObjectDecisions* temp = object_decision_;
  object_decision_ = NULL;
  return temp;
}
inline void DecisionResult::set_allocated_object_decision(::apollo::decision::ObjectDecisions* object_decision) {
  delete object_decision_;
  object_decision_ = object_decision;
  if (object_decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.object_decision)
}

// optional .apollo.decision.MainDecision main_decision = 3;
inline bool DecisionResult::has_main_decision() const {
  return !_is_default_instance_ && main_decision_ != NULL;
}
inline void DecisionResult::clear_main_decision() {
  if (GetArenaNoVirtual() == NULL && main_decision_ != NULL) delete main_decision_;
  main_decision_ = NULL;
}
inline const ::apollo::decision::MainDecision& DecisionResult::main_decision() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.main_decision)
  return main_decision_ != NULL ? *main_decision_ : *default_instance_->main_decision_;
}
inline ::apollo::decision::MainDecision* DecisionResult::mutable_main_decision() {
  
  if (main_decision_ == NULL) {
    main_decision_ = new ::apollo::decision::MainDecision;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.main_decision)
  return main_decision_;
}
inline ::apollo::decision::MainDecision* DecisionResult::release_main_decision() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.main_decision)
  
  ::apollo::decision::MainDecision* temp = main_decision_;
  main_decision_ = NULL;
  return temp;
}
inline void DecisionResult::set_allocated_main_decision(::apollo::decision::MainDecision* main_decision) {
  delete main_decision_;
  main_decision_ = main_decision;
  if (main_decision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.main_decision)
}

// optional .apollo.decision.Debug debug = 4;
inline bool DecisionResult::has_debug() const {
  return !_is_default_instance_ && debug_ != NULL;
}
inline void DecisionResult::clear_debug() {
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) delete debug_;
  debug_ = NULL;
}
inline const ::apollo::decision::Debug& DecisionResult::debug() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.debug)
  return debug_ != NULL ? *debug_ : *default_instance_->debug_;
}
inline ::apollo::decision::Debug* DecisionResult::mutable_debug() {
  
  if (debug_ == NULL) {
    debug_ = new ::apollo::decision::Debug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.debug)
  return debug_;
}
inline ::apollo::decision::Debug* DecisionResult::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.debug)
  
  ::apollo::decision::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
inline void DecisionResult::set_allocated_debug(::apollo::decision::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.debug)
}

// optional .apollo.decision.Stats stats = 6;
inline bool DecisionResult::has_stats() const {
  return !_is_default_instance_ && stats_ != NULL;
}
inline void DecisionResult::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::apollo::decision::Stats& DecisionResult::stats() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::apollo::decision::Stats* DecisionResult::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::apollo::decision::Stats;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.stats)
  return stats_;
}
inline ::apollo::decision::Stats* DecisionResult::release_stats() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.stats)
  
  ::apollo::decision::Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void DecisionResult::set_allocated_stats(::apollo::decision::Stats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.stats)
}

// optional .apollo.canbus.Signal signal = 7;
inline bool DecisionResult::has_signal() const {
  return !_is_default_instance_ && signal_ != NULL;
}
inline void DecisionResult::clear_signal() {
  if (GetArenaNoVirtual() == NULL && signal_ != NULL) delete signal_;
  signal_ = NULL;
}
inline const ::apollo::canbus::Signal& DecisionResult::signal() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
inline ::apollo::canbus::Signal* DecisionResult::mutable_signal() {
  
  if (signal_ == NULL) {
    signal_ = new ::apollo::canbus::Signal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.signal)
  return signal_;
}
inline ::apollo::canbus::Signal* DecisionResult::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.signal)
  
  ::apollo::canbus::Signal* temp = signal_;
  signal_ = NULL;
  return temp;
}
inline void DecisionResult::set_allocated_signal(::apollo::canbus::Signal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.signal)
}

// optional .apollo.decision.LightSignal light_signal = 5;
inline bool DecisionResult::has_light_signal() const {
  return !_is_default_instance_ && light_signal_ != NULL;
}
inline void DecisionResult::clear_light_signal() {
  if (GetArenaNoVirtual() == NULL && light_signal_ != NULL) delete light_signal_;
  light_signal_ = NULL;
}
inline const ::apollo::decision::LightSignal& DecisionResult::light_signal() const {
  // @@protoc_insertion_point(field_get:apollo.decision.DecisionResult.light_signal)
  return light_signal_ != NULL ? *light_signal_ : *default_instance_->light_signal_;
}
inline ::apollo::decision::LightSignal* DecisionResult::mutable_light_signal() {
  
  if (light_signal_ == NULL) {
    light_signal_ = new ::apollo::decision::LightSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.decision.DecisionResult.light_signal)
  return light_signal_;
}
inline ::apollo::decision::LightSignal* DecisionResult::release_light_signal() {
  // @@protoc_insertion_point(field_release:apollo.decision.DecisionResult.light_signal)
  
  ::apollo::decision::LightSignal* temp = light_signal_;
  light_signal_ = NULL;
  return temp;
}
inline void DecisionResult::set_allocated_light_signal(::apollo::decision::LightSignal* light_signal) {
  delete light_signal_;
  light_signal_ = light_signal;
  if (light_signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.decision.DecisionResult.light_signal)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace decision
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::decision::ObjectNudge_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::decision::ObjectNudge_Type>() {
  return ::apollo::decision::ObjectNudge_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::decision::ObjectSidePass_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::decision::ObjectSidePass_Type>() {
  return ::apollo::decision::ObjectSidePass_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::decision::ObjectDecision_ObjectType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::decision::ObjectDecision_ObjectType>() {
  return ::apollo::decision::ObjectDecision_ObjectType_descriptor();
}
template <> struct is_proto_enum< ::apollo::decision::MainEmergencyStop_ReasonCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::decision::MainEmergencyStop_ReasonCode>() {
  return ::apollo::decision::MainEmergencyStop_ReasonCode_descriptor();
}
template <> struct is_proto_enum< ::apollo::decision::MainChangeLane_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::decision::MainChangeLane_Type>() {
  return ::apollo::decision::MainChangeLane_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::decision::MainParking_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::decision::MainParking_Type>() {
  return ::apollo::decision::MainParking_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::decision::LightSignal_TurnSignal> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::decision::LightSignal_TurnSignal>() {
  return ::apollo::decision::LightSignal_TurnSignal_descriptor();
}
template <> struct is_proto_enum< ::apollo::decision::StopReasonCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::decision::StopReasonCode>() {
  return ::apollo::decision::StopReasonCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_apollo_5fmsgs_2fproto_2fdecision_2fdecision_2eproto__INCLUDED
