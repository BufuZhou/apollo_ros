// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/perception/perception_obstacle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/perception/perception_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerceptionObstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerceptionObstacle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PerceptionObstacles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerceptionObstacles_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PerceptionErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/perception/perception_obstacle.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _is_default_instance_));
  PerceptionObstacle_descriptor_ = file->message_type(1);
  static const int PerceptionObstacle_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, polygon_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, tracking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, point_cloud_),
  };
  PerceptionObstacle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PerceptionObstacle_descriptor_,
      PerceptionObstacle::default_instance_,
      PerceptionObstacle_offsets_,
      -1,
      -1,
      -1,
      sizeof(PerceptionObstacle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, _is_default_instance_));
  PerceptionObstacle_Type_descriptor_ = PerceptionObstacle_descriptor_->enum_type(0);
  PerceptionObstacles_descriptor_ = file->message_type(2);
  static const int PerceptionObstacles_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, perception_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, error_code_),
  };
  PerceptionObstacles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PerceptionObstacles_descriptor_,
      PerceptionObstacles::default_instance_,
      PerceptionObstacles_offsets_,
      -1,
      -1,
      -1,
      sizeof(PerceptionObstacles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, _is_default_instance_));
  PerceptionErrorCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PerceptionObstacle_descriptor_, &PerceptionObstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PerceptionObstacles_descriptor_, &PerceptionObstacles::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete PerceptionObstacle::default_instance_;
  delete PerceptionObstacle_reflection_;
  delete PerceptionObstacles::default_instance_;
  delete PerceptionObstacles_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n6apollo_msgs/proto/perception/perceptio"
    "n_obstacle.proto\022\021apollo.perception\032%apo"
    "llo_msgs/proto/common/header.proto\"(\n\005Po"
    "int\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\313\003\n"
    "\022PerceptionObstacle\022\n\n\002id\030\001 \001(\005\022*\n\010posit"
    "ion\030\002 \001(\0132\030.apollo.perception.Point\022\r\n\005t"
    "heta\030\003 \001(\001\022*\n\010velocity\030\004 \001(\0132\030.apollo.pe"
    "rception.Point\022\016\n\006length\030\005 \001(\001\022\r\n\005width\030"
    "\006 \001(\001\022\016\n\006height\030\007 \001(\001\022/\n\rpolygon_point\030\010"
    " \003(\0132\030.apollo.perception.Point\022\025\n\rtracki"
    "ng_time\030\t \001(\001\0228\n\004type\030\n \001(\0162*.apollo.per"
    "ception.PerceptionObstacle.Type\022\021\n\ttimes"
    "tamp\030\013 \001(\001\022\023\n\013point_cloud\030\014 \003(\001\"i\n\004Type\022"
    "\013\n\007UNKNOWN\020\000\022\023\n\017UNKNOWN_MOVABLE\020\001\022\025\n\021UNK"
    "NOWN_UNMOVABLE\020\002\022\016\n\nPEDESTRIAN\020\003\022\013\n\007BICY"
    "CLE\020\004\022\013\n\007VEHICLE\020\005\"\274\001\n\023PerceptionObstacl"
    "es\022B\n\023perception_obstacle\030\001 \003(\0132%.apollo"
    ".perception.PerceptionObstacle\022%\n\006header"
    "\030\002 \001(\0132\025.apollo.common.Header\022:\n\nerror_c"
    "ode\030\003 \001(\0162&.apollo.perception.Perception"
    "ErrorCode*Y\n\023PerceptionErrorCode\022\016\n\nERRO"
    "R_NONE\020\000\022\014\n\010ERROR_TF\020\001\022\021\n\rERROR_PROCESS\020"
    "\002\022\021\n\rERROR_UNKNOWN\020\003b\006proto3", 908);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/perception/perception_obstacle.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  PerceptionObstacle::default_instance_ = new PerceptionObstacle();
  PerceptionObstacles::default_instance_ = new PerceptionObstacles();
  Point::default_instance_->InitAsDefaultInstance();
  PerceptionObstacle::default_instance_->InitAsDefaultInstance();
  PerceptionObstacles::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto_;
const ::google::protobuf::EnumDescriptor* PerceptionErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptionErrorCode_descriptor_;
}
bool PerceptionErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.Point)
}

void Point::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.Point)
}

void Point::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:apollo.perception.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.Point)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.perception.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.Point)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.Point)
  return target;
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.Point)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional double x = 1;
void Point::clear_x() {
  x_ = 0;
}
 double Point::x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.x)
  return x_;
}
 void Point::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Point.x)
}

// optional double y = 2;
void Point::clear_y() {
  y_ = 0;
}
 double Point::y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.y)
  return y_;
}
 void Point::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Point.y)
}

// optional double z = 3;
void Point::clear_z() {
  z_ = 0;
}
 double Point::z() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.z)
  return z_;
}
 void Point::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Point.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptionObstacle_Type_descriptor_;
}
bool PerceptionObstacle_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_MOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_UNMOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::PEDESTRIAN;
const PerceptionObstacle_Type PerceptionObstacle::BICYCLE;
const PerceptionObstacle_Type PerceptionObstacle::VEHICLE;
const PerceptionObstacle_Type PerceptionObstacle::Type_MIN;
const PerceptionObstacle_Type PerceptionObstacle::Type_MAX;
const int PerceptionObstacle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacle::kIdFieldNumber;
const int PerceptionObstacle::kPositionFieldNumber;
const int PerceptionObstacle::kThetaFieldNumber;
const int PerceptionObstacle::kVelocityFieldNumber;
const int PerceptionObstacle::kLengthFieldNumber;
const int PerceptionObstacle::kWidthFieldNumber;
const int PerceptionObstacle::kHeightFieldNumber;
const int PerceptionObstacle::kPolygonPointFieldNumber;
const int PerceptionObstacle::kTrackingTimeFieldNumber;
const int PerceptionObstacle::kTypeFieldNumber;
const int PerceptionObstacle::kTimestampFieldNumber;
const int PerceptionObstacle::kPointCloudFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacle::PerceptionObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.PerceptionObstacle)
}

void PerceptionObstacle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::apollo::perception::Point*>(&::apollo::perception::Point::default_instance());
  velocity_ = const_cast< ::apollo::perception::Point*>(&::apollo::perception::Point::default_instance());
}

PerceptionObstacle::PerceptionObstacle(const PerceptionObstacle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionObstacle)
}

void PerceptionObstacle::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  position_ = NULL;
  theta_ = 0;
  velocity_ = NULL;
  length_ = 0;
  width_ = 0;
  height_ = 0;
  tracking_time_ = 0;
  type_ = 0;
  timestamp_ = 0;
}

PerceptionObstacle::~PerceptionObstacle() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionObstacle)
  SharedDtor();
}

void PerceptionObstacle::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void PerceptionObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptionObstacle_descriptor_;
}

const PerceptionObstacle& PerceptionObstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto();
  return *default_instance_;
}

PerceptionObstacle* PerceptionObstacle::default_instance_ = NULL;

PerceptionObstacle* PerceptionObstacle::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacle* n = new PerceptionObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionObstacle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PerceptionObstacle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PerceptionObstacle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(length_, id_);
  ZR_(width_, height_);
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  theta_ = 0;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
  ZR_(tracking_time_, timestamp_);
  type_ = 0;

#undef ZR_HELPER_
#undef ZR_

  polygon_point_.Clear();
  point_cloud_.Clear();
}

bool PerceptionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.PerceptionObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .apollo.perception.Point position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_theta;
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (tag == 25) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_velocity;
        break;
      }

      // optional .apollo.perception.Point velocity = 4;
      case 4: {
        if (tag == 34) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_length;
        break;
      }

      // optional double length = 5;
      case 5: {
        if (tag == 41) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_width;
        break;
      }

      // optional double width = 6;
      case 6: {
        if (tag == 49) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_height;
        break;
      }

      // optional double height = 7;
      case 7: {
        if (tag == 57) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_polygon_point;
        break;
      }

      // repeated .apollo.perception.Point polygon_point = 8;
      case 8: {
        if (tag == 66) {
         parse_polygon_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_polygon_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_polygon_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(73)) goto parse_tracking_time;
        break;
      }

      // optional double tracking_time = 9;
      case 9: {
        if (tag == 73) {
         parse_tracking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.Type type = 10;
      case 10: {
        if (tag == 80) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::apollo::perception::PerceptionObstacle_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 11;
      case 11: {
        if (tag == 89) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_point_cloud;
        break;
      }

      // repeated double point_cloud = 12;
      case 12: {
        if (tag == 98) {
         parse_point_cloud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_point_cloud())));
        } else if (tag == 97) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 98, input, this->mutable_point_cloud())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.PerceptionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.PerceptionObstacle)
  return false;
#undef DO_
}

void PerceptionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.PerceptionObstacle)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .apollo.perception.Point position = 2;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional double theta = 3;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional .apollo.perception.Point velocity = 4;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->velocity_, output);
  }

  // optional double length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // repeated .apollo.perception.Point polygon_point = 8;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->polygon_point(i), output);
  }

  // optional double tracking_time = 9;
  if (this->tracking_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tracking_time(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional double timestamp = 11;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->timestamp(), output);
  }

  // repeated double point_cloud = 12;
  if (this->point_cloud_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_point_cloud_cached_byte_size_);
  }
  for (int i = 0; i < this->point_cloud_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->point_cloud(i), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.perception.PerceptionObstacle)
}

::google::protobuf::uint8* PerceptionObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionObstacle)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .apollo.perception.Point position = 2;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // optional double theta = 3;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  // optional .apollo.perception.Point velocity = 4;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->velocity_, false, target);
  }

  // optional double length = 5;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // repeated .apollo.perception.Point polygon_point = 8;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->polygon_point(i), false, target);
  }

  // optional double tracking_time = 9;
  if (this->tracking_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tracking_time(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional double timestamp = 11;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->timestamp(), target);
  }

  // repeated double point_cloud = 12;
  if (this->point_cloud_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _point_cloud_cached_byte_size_, target);
  }
  for (int i = 0; i < this->point_cloud_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->point_cloud(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionObstacle)
  return target;
}

int PerceptionObstacle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionObstacle)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .apollo.perception.Point position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional double theta = 3;
  if (this->theta() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.perception.Point velocity = 4;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  // optional double length = 5;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // optional double width = 6;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // optional double height = 7;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // optional double tracking_time = 9;
  if (this->tracking_time() != 0) {
    total_size += 1 + 8;
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional double timestamp = 11;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // repeated .apollo.perception.Point polygon_point = 8;
  total_size += 1 * this->polygon_point_size();
  for (int i = 0; i < this->polygon_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygon_point(i));
  }

  // repeated double point_cloud = 12;
  {
    int data_size = 0;
    data_size = 8 * this->point_cloud_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_cloud_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.PerceptionObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PerceptionObstacle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.PerceptionObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.PerceptionObstacle)
    MergeFrom(*source);
  }
}

void PerceptionObstacle::MergeFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  polygon_point_.MergeFrom(from.polygon_point_);
  point_cloud_.MergeFrom(from.point_cloud_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_position()) {
    mutable_position()->::apollo::perception::Point::MergeFrom(from.position());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::apollo::perception::Point::MergeFrom(from.velocity());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.tracking_time() != 0) {
    set_tracking_time(from.tracking_time());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void PerceptionObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacle::CopyFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacle::IsInitialized() const {

  return true;
}

void PerceptionObstacle::Swap(PerceptionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacle::InternalSwap(PerceptionObstacle* other) {
  std::swap(id_, other->id_);
  std::swap(position_, other->position_);
  std::swap(theta_, other->theta_);
  std::swap(velocity_, other->velocity_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  polygon_point_.UnsafeArenaSwap(&other->polygon_point_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(type_, other->type_);
  std::swap(timestamp_, other->timestamp_);
  point_cloud_.UnsafeArenaSwap(&other->point_cloud_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerceptionObstacle_descriptor_;
  metadata.reflection = PerceptionObstacle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacle

// optional int32 id = 1;
void PerceptionObstacle::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.id)
  return id_;
}
 void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.id)
}

// optional .apollo.perception.Point position = 2;
bool PerceptionObstacle::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void PerceptionObstacle::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::apollo::perception::Point& PerceptionObstacle::position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::apollo::perception::Point* PerceptionObstacle::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.position)
  return position_;
}
::apollo::perception::Point* PerceptionObstacle::release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.position)
  
  ::apollo::perception::Point* temp = position_;
  position_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_position(::apollo::perception::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.position)
}

// optional double theta = 3;
void PerceptionObstacle::clear_theta() {
  theta_ = 0;
}
 double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.theta)
  return theta_;
}
 void PerceptionObstacle::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.theta)
}

// optional .apollo.perception.Point velocity = 4;
bool PerceptionObstacle::has_velocity() const {
  return !_is_default_instance_ && velocity_ != NULL;
}
void PerceptionObstacle::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
}
const ::apollo::perception::Point& PerceptionObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
::apollo::perception::Point* PerceptionObstacle::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.velocity)
  return velocity_;
}
::apollo::perception::Point* PerceptionObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.velocity)
  
  ::apollo::perception::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_velocity(::apollo::perception::Point* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.velocity)
}

// optional double length = 5;
void PerceptionObstacle::clear_length() {
  length_ = 0;
}
 double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.length)
  return length_;
}
 void PerceptionObstacle::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.length)
}

// optional double width = 6;
void PerceptionObstacle::clear_width() {
  width_ = 0;
}
 double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.width)
  return width_;
}
 void PerceptionObstacle::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.width)
}

// optional double height = 7;
void PerceptionObstacle::clear_height() {
  height_ = 0;
}
 double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.height)
  return height_;
}
 void PerceptionObstacle::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.height)
}

// repeated .apollo.perception.Point polygon_point = 8;
int PerceptionObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
void PerceptionObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::apollo::perception::Point& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Get(index);
}
::apollo::perception::Point* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
::apollo::perception::Point* PerceptionObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 9;
void PerceptionObstacle::clear_tracking_time() {
  tracking_time_ = 0;
}
 double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.tracking_time)
  return tracking_time_;
}
 void PerceptionObstacle::set_tracking_time(double value) {
  
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.tracking_time)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 10;
void PerceptionObstacle::clear_type() {
  type_ = 0;
}
 ::apollo::perception::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(type_);
}
 void PerceptionObstacle::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.type)
}

// optional double timestamp = 11;
void PerceptionObstacle::clear_timestamp() {
  timestamp_ = 0;
}
 double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.timestamp)
  return timestamp_;
}
 void PerceptionObstacle::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12;
int PerceptionObstacle::point_cloud_size() const {
  return point_cloud_.size();
}
void PerceptionObstacle::clear_point_cloud() {
  point_cloud_.Clear();
}
 double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.point_cloud)
  return point_cloud_.Get(index);
}
 void PerceptionObstacle::set_point_cloud(int index, double value) {
  point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.point_cloud)
}
 void PerceptionObstacle::add_point_cloud(double value) {
  point_cloud_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.point_cloud)
}
 const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.point_cloud)
  return point_cloud_;
}
 ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.point_cloud)
  return &point_cloud_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacles::kPerceptionObstacleFieldNumber;
const int PerceptionObstacles::kHeaderFieldNumber;
const int PerceptionObstacles::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacles::PerceptionObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.PerceptionObstacles)
}

void PerceptionObstacles::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

PerceptionObstacles::PerceptionObstacles(const PerceptionObstacles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionObstacles)
}

void PerceptionObstacles::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  error_code_ = 0;
}

PerceptionObstacles::~PerceptionObstacles() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionObstacles)
  SharedDtor();
}

void PerceptionObstacles::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void PerceptionObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptionObstacles_descriptor_;
}

const PerceptionObstacles& PerceptionObstacles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2fperception_5fobstacle_2eproto();
  return *default_instance_;
}

PerceptionObstacles* PerceptionObstacles::default_instance_ = NULL;

PerceptionObstacles* PerceptionObstacles::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacles* n = new PerceptionObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionObstacles)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  error_code_ = 0;
  perception_obstacle_.Clear();
}

bool PerceptionObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.PerceptionObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_perception_obstacle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_perception_obstacle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .apollo.common.Header header = 2;
      case 2: {
        if (tag == 18) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional .apollo.perception.PerceptionErrorCode error_code = 3;
      case 3: {
        if (tag == 24) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::apollo::perception::PerceptionErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.PerceptionObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.PerceptionObstacles)
  return false;
#undef DO_
}

void PerceptionObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.PerceptionObstacles)
  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0, n = this->perception_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perception_obstacle(i), output);
  }

  // optional .apollo.common.Header header = 2;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // optional .apollo.perception.PerceptionErrorCode error_code = 3;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.perception.PerceptionObstacles)
}

::google::protobuf::uint8* PerceptionObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionObstacles)
  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0, n = this->perception_obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->perception_obstacle(i), false, target);
  }

  // optional .apollo.common.Header header = 2;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, false, target);
  }

  // optional .apollo.perception.PerceptionErrorCode error_code = 3;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionObstacles)
  return target;
}

int PerceptionObstacles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionObstacles)
  int total_size = 0;

  // optional .apollo.common.Header header = 2;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .apollo.perception.PerceptionErrorCode error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  total_size += 1 * this->perception_obstacle_size();
  for (int i = 0; i < this->perception_obstacle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->perception_obstacle(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.PerceptionObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PerceptionObstacles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.PerceptionObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.PerceptionObstacles)
    MergeFrom(*source);
  }
}

void PerceptionObstacles::MergeFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  perception_obstacle_.MergeFrom(from.perception_obstacle_);
  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void PerceptionObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacles::CopyFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacles::IsInitialized() const {

  return true;
}

void PerceptionObstacles::Swap(PerceptionObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacles::InternalSwap(PerceptionObstacles* other) {
  perception_obstacle_.UnsafeArenaSwap(&other->perception_obstacle_);
  std::swap(header_, other->header_);
  std::swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerceptionObstacles_descriptor_;
  metadata.reflection = PerceptionObstacles_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacles

// repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
int PerceptionObstacles::perception_obstacle_size() const {
  return perception_obstacle_.size();
}
void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
const ::apollo::perception::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Get(index);
}
::apollo::perception::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
::apollo::perception::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// optional .apollo.common.Header header = 2;
bool PerceptionObstacles::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void PerceptionObstacles::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::apollo::common::Header& PerceptionObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* PerceptionObstacles::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.header)
  return header_;
}
::apollo::common::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.header)
}

// optional .apollo.perception.PerceptionErrorCode error_code = 3;
void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
}
 ::apollo::perception::PerceptionErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.error_code)
  return static_cast< ::apollo::perception::PerceptionErrorCode >(error_code_);
}
 void PerceptionObstacles::set_error_code(::apollo::perception::PerceptionErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacles.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
