// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apollo_msgs/proto/perception/traffic_light_detection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "apollo_msgs/proto/perception/traffic_light_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {

namespace {

const ::google::protobuf::Descriptor* TrafficLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLight_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficLight_Color_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TrafficLightDetection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLightDetection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto() {
  protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "apollo_msgs/proto/perception/traffic_light_detection.proto");
  GOOGLE_CHECK(file != NULL);
  TrafficLight_descriptor_ = file->message_type(0);
  static const int TrafficLight_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, tracking_time_),
  };
  TrafficLight_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficLight_descriptor_,
      TrafficLight::default_instance_,
      TrafficLight_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrafficLight),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _is_default_instance_));
  TrafficLight_Color_descriptor_ = TrafficLight_descriptor_->enum_type(0);
  TrafficLightDetection_descriptor_ = file->message_type(1);
  static const int TrafficLightDetection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, traffic_light_),
  };
  TrafficLightDetection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficLightDetection_descriptor_,
      TrafficLightDetection::default_instance_,
      TrafficLightDetection_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrafficLightDetection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficLight_descriptor_, &TrafficLight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficLightDetection_descriptor_, &TrafficLightDetection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto() {
  delete TrafficLight::default_instance_;
  delete TrafficLight_reflection_;
  delete TrafficLightDetection::default_instance_;
  delete TrafficLightDetection_reflection_;
}

void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_apollo_5fmsgs_2fproto_2fcommon_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n:apollo_msgs/proto/perception/traffic_l"
    "ight_detection.proto\022\021apollo.perception\032"
    "%apollo_msgs/proto/common/header.proto\"\261"
    "\001\n\014TrafficLight\0224\n\005color\030\001 \001(\0162%.apollo."
    "perception.TrafficLight.Color\022\n\n\002id\030\002 \001("
    "\t\022\022\n\nconfidence\030\003 \001(\001\022\025\n\rtracking_time\030\004"
    " \001(\001\"4\n\005Color\022\013\n\007UNKNOWN\020\000\022\007\n\003RED\020\001\022\n\n\006Y"
    "ELLOW\020\002\022\t\n\005GREEN\020\003\"v\n\025TrafficLightDetect"
    "ion\022%\n\006header\030\002 \001(\0132\025.apollo.common.Head"
    "er\0226\n\rtraffic_light\030\001 \003(\0132\037.apollo.perce"
    "ption.TrafficLightb\006proto3", 426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "apollo_msgs/proto/perception/traffic_light_detection.proto", &protobuf_RegisterTypes);
  TrafficLight::default_instance_ = new TrafficLight();
  TrafficLightDetection::default_instance_ = new TrafficLightDetection();
  TrafficLight::default_instance_->InitAsDefaultInstance();
  TrafficLightDetection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto {
  StaticDescriptorInitializer_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto() {
    protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto();
  }
} static_descriptor_initializer_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TrafficLight_Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_Color_descriptor_;
}
bool TrafficLight_Color_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Color TrafficLight::UNKNOWN;
const TrafficLight_Color TrafficLight::RED;
const TrafficLight_Color TrafficLight::YELLOW;
const TrafficLight_Color TrafficLight::GREEN;
const TrafficLight_Color TrafficLight::Color_MIN;
const TrafficLight_Color TrafficLight::Color_MAX;
const int TrafficLight::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kColorFieldNumber;
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kConfidenceFieldNumber;
const int TrafficLight::kTrackingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLight)
}

void TrafficLight::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLight)
}

void TrafficLight::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  color_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  tracking_time_ = 0;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_descriptor_;
}

const TrafficLight& TrafficLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto();
  return *default_instance_;
}

TrafficLight* TrafficLight::default_instance_ = NULL;

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  TrafficLight* n = new TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLight)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrafficLight, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrafficLight*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(confidence_, color_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.TrafficLight.Color color = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::apollo::perception::TrafficLight_Color >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "apollo.perception.TrafficLight.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_confidence;
        break;
      }

      // optional double confidence = 3;
      case 3: {
        if (tag == 25) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_tracking_time;
        break;
      }

      // optional double tracking_time = 4;
      case 4: {
        if (tag == 33) {
         parse_tracking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.TrafficLight)
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.perception.TrafficLight.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional double confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->confidence(), output);
  }

  // optional double tracking_time = 4;
  if (this->tracking_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tracking_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.perception.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLight)
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "apollo.perception.TrafficLight.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional double confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->confidence(), target);
  }

  // optional double tracking_time = 4;
  if (this->tracking_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tracking_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLight)
  return target;
}

int TrafficLight::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLight)
  int total_size = 0;

  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional double confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // optional double tracking_time = 4;
  if (this->tracking_time() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLight)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficLight* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLight)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.tracking_time() != 0) {
    set_tracking_time(from.tracking_time());
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {

  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  std::swap(color_, other->color_);
  id_.Swap(&other->id_);
  std::swap(confidence_, other->confidence_);
  std::swap(tracking_time_, other->tracking_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLight_descriptor_;
  metadata.reflection = TrafficLight_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight

// optional .apollo.perception.TrafficLight.Color color = 1;
void TrafficLight::clear_color() {
  color_ = 0;
}
 ::apollo::perception::TrafficLight_Color TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.color)
  return static_cast< ::apollo::perception::TrafficLight_Color >(color_);
}
 void TrafficLight::set_color(::apollo::perception::TrafficLight_Color value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.color)
}

// optional string id = 2;
void TrafficLight::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficLight::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.id)
}
 void TrafficLight::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.TrafficLight.id)
}
 void TrafficLight::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.TrafficLight.id)
}
 ::std::string* TrafficLight::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLight.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLight.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficLight::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLight.id)
}

// optional double confidence = 3;
void TrafficLight::clear_confidence() {
  confidence_ = 0;
}
 double TrafficLight::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.confidence)
  return confidence_;
}
 void TrafficLight::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.confidence)
}

// optional double tracking_time = 4;
void TrafficLight::clear_tracking_time() {
  tracking_time_ = 0;
}
 double TrafficLight::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.tracking_time)
  return tracking_time_;
}
 void TrafficLight::set_tracking_time(double value) {
  
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.tracking_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDetection::kHeaderFieldNumber;
const int TrafficLightDetection::kTrafficLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDetection::TrafficLightDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLightDetection)
}

void TrafficLightDetection::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

TrafficLightDetection::TrafficLightDetection(const TrafficLightDetection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightDetection)
}

void TrafficLightDetection::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

TrafficLightDetection::~TrafficLightDetection() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightDetection)
  SharedDtor();
}

void TrafficLightDetection::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void TrafficLightDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightDetection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLightDetection_descriptor_;
}

const TrafficLightDetection& TrafficLightDetection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_apollo_5fmsgs_2fproto_2fperception_2ftraffic_5flight_5fdetection_2eproto();
  return *default_instance_;
}

TrafficLightDetection* TrafficLightDetection::default_instance_ = NULL;

TrafficLightDetection* TrafficLightDetection::New(::google::protobuf::Arena* arena) const {
  TrafficLightDetection* n = new TrafficLightDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightDetection)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  traffic_light_.Clear();
}

bool TrafficLightDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.TrafficLightDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.TrafficLight traffic_light = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_traffic_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_traffic_light;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .apollo.common.Header header = 2;
      case 2: {
        if (tag == 18) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.TrafficLightDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.TrafficLightDetection)
  return false;
#undef DO_
}

void TrafficLightDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.TrafficLightDetection)
  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traffic_light(i), output);
  }

  // optional .apollo.common.Header header = 2;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:apollo.perception.TrafficLightDetection)
}

::google::protobuf::uint8* TrafficLightDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightDetection)
  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->traffic_light(i), false, target);
  }

  // optional .apollo.common.Header header = 2;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightDetection)
  return target;
}

int TrafficLightDetection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightDetection)
  int total_size = 0;

  // optional .apollo.common.Header header = 2;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  total_size += 1 * this->traffic_light_size();
  for (int i = 0; i < this->traffic_light_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_light(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLightDetection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficLightDetection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLightDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLightDetection)
    MergeFrom(*source);
  }
}

void TrafficLightDetection::MergeFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightDetection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  traffic_light_.MergeFrom(from.traffic_light_);
  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
}

void TrafficLightDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDetection::CopyFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetection::IsInitialized() const {

  return true;
}

void TrafficLightDetection::Swap(TrafficLightDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDetection::InternalSwap(TrafficLightDetection* other) {
  std::swap(header_, other->header_);
  traffic_light_.UnsafeArenaSwap(&other->traffic_light_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightDetection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLightDetection_descriptor_;
  metadata.reflection = TrafficLightDetection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightDetection

// optional .apollo.common.Header header = 2;
bool TrafficLightDetection::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void TrafficLightDetection::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::apollo::common::Header& TrafficLightDetection::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* TrafficLightDetection::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.header)
  return header_;
}
::apollo::common::Header* TrafficLightDetection::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightDetection.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void TrafficLightDetection::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightDetection.header)
}

// repeated .apollo.perception.TrafficLight traffic_light = 1;
int TrafficLightDetection::traffic_light_size() const {
  return traffic_light_.size();
}
void TrafficLightDetection::clear_traffic_light() {
  traffic_light_.Clear();
}
const ::apollo::perception::TrafficLight& TrafficLightDetection::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Get(index);
}
::apollo::perception::TrafficLight* TrafficLightDetection::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Mutable(index);
}
::apollo::perception::TrafficLight* TrafficLightDetection::add_traffic_light() {
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLight >*
TrafficLightDetection::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDetection.traffic_light)
  return &traffic_light_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLight >&
TrafficLightDetection::traffic_light() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
